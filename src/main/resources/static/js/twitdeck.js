! function(e) {
    function t(t) {
        for (var s, a, o = t[0], c = t[1], l = t[2], d = 0, h = []; d < o.length; d++) a = o[d], n[a] && h.push(n[a][0]), n[a] = 0;
        for (s in c) Object.prototype.hasOwnProperty.call(c, s) && (e[s] = c[s]);
        for (u && u(t); h.length;) h.shift()();
        return r.push.apply(r, l || []), i()
    }

    function i() {
        for (var e, t = 0; t < r.length; t++) {
            for (var i = r[t], s = !0, o = 1; o < i.length; o++) {
                var c = i[o];
                0 !== n[c] && (s = !1)
            }
            s && (r.splice(t--, 1), e = a(a.s = i[0]))
        }
        return e
    }
    var s = {},
        n = {
            0: 0
        },
        r = [];

    function a(t) {
        if (s[t]) return s[t].exports;
        var i = s[t] = {
            i: t,
            l: !1,
            exports: {}
        };
        return e[t].call(i.exports, i, i.exports, a), i.l = !0, i.exports
    }
    a.m = e, a.c = s, a.d = function(e, t, i) {
        a.o(e, t) || Object.defineProperty(e, t, {
            enumerable: !0,
            get: i
        })
    }, a.r = function(e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(e, "__esModule", {
            value: !0
        })
    }, a.t = function(e, t) {
        if (1 & t && (e = a(e)), 8 & t) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var i = Object.create(null);
        if (a.r(i), Object.defineProperty(i, "default", {
                enumerable: !0,
                value: e
            }), 2 & t && "string" != typeof e)
            for (var s in e) a.d(i, s, function(t) {
                return e[t]
            }.bind(null, s));
        return i
    }, a.n = function(e) {
        var t = e && e.__esModule ? function() {
            return e.default
        } : function() {
            return e
        };
        return a.d(t, "a", t), t
    }, a.o = function(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t)
    }, a.p = "/";
    var o = window.webpackJsonp = window.webpackJsonp || [],
        c = o.push.bind(o);
    o.push = t, o = o.slice();
    for (var l = 0; l < o.length; l++) t(o[l]);
    var u = c;
    r.push([654, 2]), i()
}([, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.default = function(e, t, i) {
        var n, a;
        "string" == typeof e && (e = {
            text: e
        });
        "en-x-psaccent" === l ? a = h(e.text, d) : (void 0 === (n = c[e.text]) && (n = e.text.replace(o, ""), c[e.text] = n), a = s.default.getMessage(n) || e.text);
        i || (a = r.default.toHtml(a, t));
        return a
    };
    var s = a(i(1225)),
        n = i(36),
        r = a(i(8));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = /[^A-Za-z0-9_]/g,
        c = {},
        l = "en-US";
    n.locale$.distinctUntilChanged().subscribe(function(e) {
        l = e || "en-US"
    });
    var u = /[a-zA-Z]/g,
        d = "ȦƁƇḒḖƑƓĦĪĴĶĿḾȠǾƤɊŘŞŦŬṼẆẊẎẐ[\\]^_`ȧƀƈḓḗƒɠħīĵķŀḿƞǿƥɋřşŧŭṽẇẋẏẑ",
        h = function(e, t) {
            return e.replace(u, function(e) {
                return t.charAt(e.charCodeAt(0) - 65)
            })
        }
}, , , , , function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(402));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = {};
    e.exports = a;
    var o, c, l, u = /\\/g,
        d = {},
        h = {
            sectionTags: [{
                o: "_i",
                c: "i"
            }]
        };

    function m(e) {
        e = e.replace(u, "/");
        var t = d[e];
        return void 0 === t && (t = a.getHogan(e), t = o.compile(t, h), d[e] = t), t
    }

    function f(e, t) {
        var i = this.partials[e];
        return (t = t || {})[i.name] || (t[i.name] = m(i.name)), n.default.Template.prototype.ep.call(this, e, t)
    }

    function p(e, t) {
        var i;
        return i = "" !== t ? {
            text: e,
            mode: t
        } : e, (0, s.default)(i, null, !0)
    }(l = function(e, t, i, s) {
        this.ep = f, n.default.Template.call(this, e, t, i, s)
    }).prototype = n.default.Template.prototype, (c = function() {}).prototype = n.default, (o = new c).template = l, o.parse = function(e, t, i) {
        for (var s = n.default.parse.call(this, e, t, i), r = "", a = 0; a < s.length; a++)
            if ("_v" === s[a].tag && 0 === s[a].n.indexOf("%TRANSLATION-HINT")) {
                var o = s.splice(a, 1)[0];
                a--, r = o.n.substring(o.n.indexOf("mode=") + "mode=".length)
            } return function e(t, i, s, r) {
            for (var a = [], o = 0; o < t.length; o++)
                if ("#" === t[o].tag && "_i" === t[o].n) {
                    var c = p(s.substring(t[o].i, t[o].end), i);
                    "raw" === c.tag ? a.push(c) : Array.prototype.push.apply(a, n.default.parse(n.default.scan(c, r.delimiters), s, r))
                } else "#" === t[o].tag || "^" === t[o].tag || "<" === t[o].tag || "$" === t[o].tag ? (t[o].nodes = e(t[o].nodes, i, s, r), a.push(t[o])) : a.push(t[o]);
            return function(e) {
                if (0 === e.length) return e;
                for (var t = [e[0]], i = 1; i < e.length; i++)
                    if ("_t" !== t[t.length - 1].tag || "\n" !== e[i].tag && "_t" !== e[i].tag) t.push(e[i]);
                    else {
                        var s = t[t.length - 1],
                            n = e[i].text;
                        void 0 === n && (n = "\n"), s.text += "" + n
                    } return t
            }(a)
        }(s, r, t, i)
    }, a.getHogan = function(e) {
        var t = e + ".mustache",
            i = TD.mustaches[t];
        return void 0 === i ? console.error('TD.mustaches["' + t + '"] is not defined') : i = i.trim(), i
    }, a.render = function(e, t, i) {
        var s, n = m(e),
            r = [];
        for (var a in t = t || {}, TD.globalRenderOptions) void 0 === t[a] && (t[a] = TD.globalRenderOptions[a], r.push(a));
        return s = n.render(t, i), r.forEach(function(e) {
            delete t[e]
        }), s.trim()
    }, a.toHtml = function(e, t, i) {
        return o.compile(e, h).render(t, i).trim()
    }, a.toHtmlFromRaw = function(e, t) {
        return n.default.compile(e).render(t)
    }, a.toURLFromRaw = function(e, t) {
        return e.replace(/\{\{([^}]+?)\}\}/g, function(e, i) {
            return encodeURIComponent(t[i])
        })
    }
}, , , , function(e, t, i) {
    "use strict";
    var s = v(i(7)),
        n = v(i(13)),
        r = v(i(14)),
        a = v(i(15)),
        o = v(i(119)),
        c = v(i(1591)),
        l = v(i(118)),
        u = v(i(10)),
        d = v(i(11)),
        h = v(i(0)),
        m = v(i(85)),
        f = i(53),
        p = v(i(6)),
        g = function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(341));

    function v(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = m.default.mixin(b);
    var T = !1,
        w = function() {
            function e(t) {
                (0, u.default)(this, e), this.value = t, this.observers = []
            }
            return (0, d.default)(e, [{
                key: "subscribe",
                value: function(e) {
                    var t = this;
                    return this.observers.push(e), this._notify(e), {
                        unsubscribe: function(e) {
                            t.observers = t.observers.filter(function(t) {
                                return t !== e
                            })
                        }
                    }
                }
            }, {
                key: "next",
                value: function(e) {
                    var t = this;
                    this.value = e, this.observers.forEach(function(e) {
                        t._notify(e)
                    })
                }
            }, {
                key: "_notify",
                value: function(e) {
                    try {
                        e(this.value)
                    } catch (e) {
                        console.warn("Observer threw an error when called with value: ", this.value), console.error(e.stack)
                    }
                }
            }]), e
        }();

    function b() {
        this.attributes({
            _isConnected: !1
        }), this.before("initialize", function() {
            this._isInitialized = !1
        }), this.after("initialize", function() {
            var e = this;
            this.attr._isConnected && "function" != typeof this.render && !T && (T = !0, console.warn('Connected components must have a render method. "' + this.toString() + '" does not have one.')), this._connectObservable = new w(this.state), this.attr._isConnected ? this._connectAndGetProps() : this.props = {}, this.around("replaceState", function(t, i) {
                var s = e._isInitialized && !(!i || "object" !== (void 0 === i ? "undefined" : (0, l.default)(i))) && e._shouldComponentUpdate(e.props, i);
                t.call(e, i), e._notifyAndRender({
                    shouldRender: s
                })
            }), this._componentDidInitialize(), this._isInitialized = !0, this._render()
        }), this.after("didTeardownChild", function() {
            this._componentWillTeardown()
        }), this._connectAndGetProps = function() {
            "function" == typeof this.__connectAndGetProps && this.__connectAndGetProps()
        }, this._componentDidInitialize = function() {
            "function" == typeof this.componentDidInitialize && this.componentDidInitialize()
        }, this._shouldComponentUpdate = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.props,
                t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.state;
            return "function" != typeof this.shouldComponentUpdate || this.shouldComponentUpdate(e, t)
        }, this._componentWillReceiveProps = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.props;
            "function" != typeof this.componentWillReceiveProps ? void 0 !== this.componentWillReceiveProps && console.warn("componentWillReceiveProps expects to be a function.") : this.componentWillReceiveProps(e)
        }, this._notifyAndRender = function() {
            var e = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).shouldRender,
                t = void 0 === e || e;
            this._notify(), t && this._render()
        }, this._notify = function() {
            this._connectObservable.next(this.state)
        }, this._render = function() {
            "function" == typeof this.render && this.render()
        }, this._componentWillTeardown = function() {
            "function" == typeof this.componentWillTeardown && this.componentWillTeardown()
        }, this.connect = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (!(e.prototype.mixedIn || []).includes(b)) throw new Error("Component passed into connect must use UiBase");
            return e.mixin(y(this._connectObservable, t))
        }
    }

    function y(e) {
        var t = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).mapStateToProps,
            i = void 0 === t ? function() {
                return {}
            } : t;
        return function() {
            var t = null;
            this.attributes({
                _isConnected: !0
            }), this.__connectAndGetProps = function() {
                this._boundObserver = this._observe.bind(this), t = e.subscribe(this._boundObserver)
            }, this.after("teardown", function() {
                t && t.unsubscribe(this._boundObserver)
            }), this._observe = function(e) {
                var t = i(e, this.attr);
                this._componentWillReceiveProps(t);
                var s = this._isInitialized && this._shouldComponentUpdate(t);
                this.props = t, this._notifyAndRender({
                    shouldRender: s
                })
            }
        }
    }
    var C = e.exports.connect = function(e) {
        return function(t) {
            return t.mixin(y(e, {
                mapStateToProps: function(e) {
                    return e
                }
            }))
        }
    };
    e.exports.uiBaseToReact = function(e) {
        var t, i, s = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).displayName,
            l = void 0 === s ? void 0 : s;
        return i = t = function(t) {
            function i(t) {
                (0, u.default)(this, i);
                var s = (0, r.default)(this, (i.__proto__ || (0, n.default)(i)).call(this, t));
                return s.rootRef = p.default.createRef(), s._propsObservable = new w(t), s._connectedComponent = C(s._propsObservable)(e), s
            }
            return (0, a.default)(i, t), (0, d.default)(i, [{
                key: "componentDidMount",
                value: function() {
                    var e = document.createElement("div");
                    this.rootRef.current.appendChild(e);
                    var t, i, s = (0, f.attach)(this._connectedComponent, e, (t = this.props, i = {}, (0, c.default)(t).forEach(function(e) {
                        var t = (0, o.default)(e, 2),
                            s = t[0],
                            n = t[1];
                        i[s] = "function" == typeof n ? function() {
                            return n
                        } : n
                    }), i)).teardownEvent;
                    this._teardownEvent = s
                }
            }, {
                key: "componentDidUpdate",
                value: function() {
                    this._propsObservable.next(this.props)
                }
            }, {
                key: "componentWillUnmount",
                value: function() {
                    (0, h.default)(document).trigger(this._teardownEvent)
                }
            }, {
                key: "render",
                value: function() {
                    return p.default.createElement("div", {
                        ref: this.rootRef
                    })
                }
            }]), i
        }(p.default.Component), t.displayName = l, i
    }, e.exports.reactToUiBase = function(e) {
        return m.default.mixin(b, function() {
            this.attributes({
                props: {}
            }), this.render = function() {
                g.render(p.default.createElement(e, (0, s.default)({}, this.attr.props, this.props)), this.node)
            }, this.componentWillTeardown = function() {
                g.unmountComponentAtNode(this.node)
            }
        })
    }
}, , , , , function(e, t, i) {
    "use strict";
    var s, n = h(i(7)),
        r = h(i(84)),
        a = h(i(234)),
        o = h(i(32)),
        c = h(i(3)),
        l = h(i(1)),
        u = h(i(0)),
        d = h(i(19));

    function h(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = ((s = {
        simpleColumnTypes: {
            TRENDS: "trends",
            ANALYTICS: "analytics",
            WHATSHAPPENING: "whatshappening"
        },
        storageColumnTypes: {
            OTHER: "other",
            HOME: "home",
            ME: "me",
            INBOX: "privateMe",
            SCHEDULED: "scheduled"
        },
        feedTypes: {
            HOME: "home",
            USERTIMELINE: "usertimeline",
            INTERACTIONS: "interactions",
            MENTIONS: "mentions",
            SEARCH: "search",
            LIST: "list",
            CUSTOMTIMELINE: "customtimeline",
            DIRECT: "direct",
            USERTWEETS: "usertweets",
            FAVORITES: "favorites",
            NETWORKACTIVITY: "networkactivity",
            SCHEDULED: "scheduled",
            DATAMINR: "dataminr",
            LIVEVIDEO: "livevideo",
            EVENT: "event"
        }
    }).allFeedTypes = (0, o.default)(s.feedTypes).reduce(function(e, t) {
        return e[s.feedTypes[t]] = !0, e
    }, {}), s.nonExhaustibleFeedTypes = {}, d.default.extendObjectWith(s.nonExhaustibleFeedTypes, [
        [s.feedTypes.CUSTOMTIMELINE, !0],
        [s.feedTypes.FAVORITES, !0]
    ]), s.gaplessFeedTypes = {}, d.default.extendObjectWith(s.gaplessFeedTypes, [
        [s.feedTypes.CUSTOMTIMELINE, !0],
        [s.feedTypes.DIRECT, !0],
        [s.feedTypes.SCHEDULED, !0]
    ]), s.reorderableFeedTypes = {}, d.default.extendObjectWith(s.reorderableFeedTypes, [
        [s.feedTypes.CUSTOMTIMELINE, !0],
        [s.feedTypes.SCHEDULED, !0]
    ]), s.followingFeedTypes = {}, d.default.extendObjectWith(s.followingFeedTypes, [
        [s.feedTypes.HOME, !0],
        [s.feedTypes.NETWORKACTIVITY, !0]
    ]), s.columnMetaTypes = {
        TIMELINE: "col_timeline",
        INTERACTIONS: "col_interactions",
        MENTIONS: "col_mentions",
        FOLLOWERS: "col_followers",
        SEARCH: "col_search",
        LIST: "col_list",
        CUSTOMTIMELINE: "col_customtimeline",
        MESSAGES: "col_messages",
        USERTWEETS: "col_usertweets",
        FAVORITES: "col_favorites",
        ACTIVITY: "col_activity",
        DATAMINR: "col_dataminr",
        LIVEVIDEO: "col_livevideo",
        EVENT: "col_event",
        HOME: "col_home",
        ME: "col_me",
        INBOX: "col_inbox",
        SCHEDULED: "col_scheduled",
        TRENDS: "col_trends",
        ANALYTICS: "col_analytics",
        WHATSHAPPENING: "col_whatshappening",
        UNKNOWN: "col_unknown"
    }, s.columnMetaTypeToScribeNamespace = {}, d.default.extendObjectWith(s.columnMetaTypeToScribeNamespace, [
        [s.columnMetaTypes.TIMELINE, {
            page: "home",
            section: ""
        }],
        [s.columnMetaTypes.INTERACTIONS, {
            page: "connect",
            section: "activity"
        }],
        [s.columnMetaTypes.MENTIONS, {
            page: "connect",
            section: "mentions"
        }],
        [s.columnMetaTypes.SEARCH, {
            page: "search",
            section: "tweets"
        }],
        [s.columnMetaTypes.LIST, {
            page: "list",
            section: "tweets"
        }],
        [s.columnMetaTypes.USERTWEETS, {
            page: "profile_tweets",
            section: ""
        }],
        [s.columnMetaTypes.FAVORITES, {
            page: "favorites",
            section: ""
        }],
        [s.columnMetaTypes.ACTIVITY, {
            page: "network_activity",
            section: ""
        }],
        [s.columnMetaTypes.DATAMINR, {
            page: "dataminr",
            section: "watchlist"
        }],
        [s.columnMetaTypes.TRENDS, {
            page: "trends",
            section: ""
        }],
        [s.columnMetaTypes.ANALYTICS, {
            page: "analytics",
            section: ""
        }],
        [s.columnMetaTypes.WHATSHAPPENING, {
            page: "whats_happening",
            section: ""
        }],
        [s.columnMetaTypes.HOME, {
            page: "home",
            section: ""
        }],
        [s.columnMetaTypes.ME, {
            page: "connect",
            section: "mentions"
        }]
    ]), s.columnIconClasses = {
        TWITTER: "icon-twitter-bird",
        HASH: "icon-hash",
        CONTENT: "icon-content",
        USER: "icon-user",
        HOME: "icon-home",
        INTERACTIONS: "icon-notifications",
        ACTIVITY: "icon-activity",
        MENTIONS: "icon-mention",
        FOLLOWERS: "icon-follow",
        MESSAGES: "icon-message",
        SEARCH: "icon-search",
        LIST: "icon-list",
        TWEETS: "icon-tweets",
        FAVORITES: "icon-favorite",
        SCHEDULED: "icon-schedule",
        TRENDS: "icon-trending",
        ANALYTICS: "icon-heart",
        CUSTOMTIMELINE: "icon-custom-timeline",
        DATAMINR: "icon-dataminr",
        LIVEVIDEO: "icon-play-video",
        EVENT: "icon-magic-search",
        WHATSHAPPENING: "icon-magic-search"
    }, s.columnClasses = {
        TWITTER: "type-twitter",
        HOME: "column-type-home",
        INTERACTIONS: "column-type-interactions",
        ACTIVITY: "column-type-activity",
        MENTIONS: "column-type-mention",
        FOLLOWERS: "column-type-new-followers",
        MESSAGES: "column-type-message",
        SEARCH: "column-type-search",
        LIST: "column-type-list",
        CUSTOMTIMELINE: "column-type-customtimeline",
        TWEETS: "column-type-tweets",
        FAVORITES: "column-type-favorite",
        SCHEDULED: "column-type-scheduled",
        TRENDS: "column-type-trends",
        ANALYTICS: "column-type-analytics",
        WHATSHAPPENING: "column-type-whatshappening"
    }, s.columnMetaTypeToIconClass = {}, d.default.extendObjectWith(s.columnMetaTypeToIconClass, [
        [s.columnMetaTypes.TIMELINE, s.columnIconClasses.HOME],
        [s.columnMetaTypes.INTERACTIONS, s.columnIconClasses.INTERACTIONS],
        [s.columnMetaTypes.MENTIONS, s.columnIconClasses.MENTIONS],
        [s.columnMetaTypes.FOLLOWERS, s.columnIconClasses.FOLLOWERS],
        [s.columnMetaTypes.SEARCH, s.columnIconClasses.SEARCH],
        [s.columnMetaTypes.LIST, s.columnIconClasses.LIST],
        [s.columnMetaTypes.CUSTOMTIMELINE, s.columnIconClasses.CUSTOMTIMELINE],
        [s.columnMetaTypes.MESSAGES, s.columnIconClasses.MESSAGES],
        [s.columnMetaTypes.TRENDS, s.columnIconClasses.TRENDS],
        [s.columnMetaTypes.ANALYTICS, s.columnIconClasses.ANALYTICS],
        [s.columnMetaTypes.USERTWEETS, s.columnIconClasses.USER],
        [s.columnMetaTypes.FAVORITES, s.columnIconClasses.FAVORITES],
        [s.columnMetaTypes.ACTIVITY, s.columnIconClasses.ACTIVITY],
        [s.columnMetaTypes.HOME, s.columnIconClasses.HOME],
        [s.columnMetaTypes.ME, s.columnIconClasses.MENTIONS],
        [s.columnMetaTypes.INBOX, s.columnIconClasses.MESSAGES],
        [s.columnMetaTypes.SCHEDULED, s.columnIconClasses.SCHEDULED],
        [s.columnMetaTypes.UNKNOWN, s.columnIconClasses.TWITTER],
        [s.columnMetaTypes.DATAMINR, s.columnIconClasses.DATAMINR],
        [s.columnMetaTypes.LIVEVIDEO, s.columnIconClasses.LIVEVIDEO],
        [s.columnMetaTypes.EVENT, s.columnIconClasses.EVENT],
        [s.columnMetaTypes.WHATSHAPPENING, s.columnIconClasses.WHATSHAPPENING]
    ]), s.columnMetaTypeToClass = {}, d.default.extendObjectWith(s.columnMetaTypeToClass, [
        [s.columnMetaTypes.TIMELINE, s.columnClasses.HOME],
        [s.columnMetaTypes.INTERACTIONS, s.columnClasses.INTERACTIONS],
        [s.columnMetaTypes.MENTIONS, s.columnClasses.MENTIONS],
        [s.columnMetaTypes.FOLLOWERS, s.columnClasses.FOLLOWERS],
        [s.columnMetaTypes.SEARCH, s.columnClasses.SEARCH],
        [s.columnMetaTypes.LIST, s.columnClasses.LIST],
        [s.columnMetaTypes.CUSTOMTIMELINE, s.columnClasses.CUSTOMTIMELINE],
        [s.columnMetaTypes.MESSAGES, s.columnClasses.MESSAGES],
        [s.columnMetaTypes.TRENDS, s.columnClasses.TRENDS],
        [s.columnMetaTypes.ANALYTICS, s.columnClasses.ANALYTICS],
        [s.columnMetaTypes.WHATSHAPPENING, s.columnClasses.WHATSHAPPENING],
        [s.columnMetaTypes.USERTWEETS, s.columnClasses.TWEETS],
        [s.columnMetaTypes.FAVORITES, s.columnClasses.FAVORITES],
        [s.columnMetaTypes.ACTIVITY, s.columnClasses.ACTIVITY],
        [s.columnMetaTypes.HOME, s.columnClasses.HOME],
        [s.columnMetaTypes.ME, s.columnClasses.MENTIONS],
        [s.columnMetaTypes.INBOX, s.columnClasses.MESSAGES],
        [s.columnMetaTypes.SCHEDULED, s.columnClasses.SCHEDULED],
        [s.columnMetaTypes.UNKNOWN, s.columnClasses.TWITTER]
    ]), s.columnMetaTypeToTitleTemplateData = {}, d.default.extendObjectWith(s.columnMetaTypeToTitleTemplateData, [
        [s.columnMetaTypes.TIMELINE, {
            title: (0, c.default)("Home", null, !0),
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.INTERACTIONS, {
            title: (0, c.default)("Notifications", null, !0),
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.MENTIONS, {
            title: (0, c.default)("Mentions", null, !0),
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.FOLLOWERS, {
            title: (0, c.default)("Followers", null, !0),
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.SEARCH, {
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.LIST, {
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.CUSTOMTIMELINE, {
            needsUserAttribution: !0,
            editableFieldClass: "js-customtimeline-title",
            maxLength: 25
        }],
        [s.columnMetaTypes.MESSAGES, {
            title: (0, c.default)("Messages", null, !0),
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.TRENDS, {
            title: (0, c.default)("Trending", null, !0),
            needsUserAttribution: !1
        }],
        [s.columnMetaTypes.ANALYTICS, {
            title: (0, c.default)("Analytics", null, !0),
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.USERTWEETS, {
            title: (0, c.default)("User", null, !0),
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.FAVORITES, {
            title: (0, c.default)("Likes", null, !0),
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.ACTIVITY, {
            title: (0, c.default)("Activity", null, !0),
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.HOME, {
            title: (0, c.default)("Home", null, !0)
        }],
        [s.columnMetaTypes.ME, {
            title: (0, c.default)("Mentions", null, !0)
        }],
        [s.columnMetaTypes.INBOX, {
            title: (0, c.default)("Messages", null, !0)
        }],
        [s.columnMetaTypes.SCHEDULED, {
            title: (0, c.default)("Scheduled", null, !0),
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.DATAMINR, {
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.LIVEVIDEO, {
            title: (0, c.default)("Live video", null, !0),
            needsUserAttribution: !0
        }],
        [s.columnMetaTypes.EVENT, {
            title: (0, c.default)("Event", null, !0),
            needsUserAttribution: !1
        }],
        [s.columnMetaTypes.WHATSHAPPENING, {
            title: (0, c.default)("What's Happening", null, !0),
            needsUserAttribution: !1
        }],
        [s.columnMetaTypes.UNKNOWN, {
            title: (0, c.default)("Unknown Column", null, !0)
        }]
    ]), s.embeddableColumnTypes = [s.columnMetaTypes.FAVORITES, s.columnMetaTypes.USERTWEETS, s.columnMetaTypes.SEARCH, s.columnMetaTypes.LIST, s.columnMetaTypes.CUSTOMTIMELINE], s.noPreferencesColumnTypes = [s.columnMetaTypes.TRENDS, s.columnMetaTypes.ANALYTICS, s.columnMetaTypes.WHATSHAPPENING], s.shareableColumnTypes = [s.columnMetaTypes.CUSTOMTIMELINE], s.viewableColumnTypes = [s.columnMetaTypes.CUSTOMTIMELINE], s.filterableColumnTypes = [s.columnMetaTypes.TIMELINE, s.columnMetaTypes.INTERACTIONS, s.columnMetaTypes.MENTIONS, s.columnMetaTypes.FOLLOWERS, s.columnMetaTypes.SEARCH, s.columnMetaTypes.LIST, s.columnMetaTypes.CUSTOMTIMELINE, s.columnMetaTypes.MESSAGES, s.columnMetaTypes.USERTWEETS, s.columnMetaTypes.FAVORITES, s.columnMetaTypes.ACTIVITY, s.columnMetaTypes.HOME, s.columnMetaTypes.ME, s.columnMetaTypes.INBOX, s.columnMetaTypes.SCHEDULED, s.columnMetaTypes.DATAMINR, s.columnMetaTypes.LIVEVIDEO, s.columnMetaTypes.EVENT, s.columnMetaTypes.TRENDS], s.clearableColumnTypes = [s.columnMetaTypes.TIMELINE, s.columnMetaTypes.INTERACTIONS, s.columnMetaTypes.MENTIONS, s.columnMetaTypes.FOLLOWERS, s.columnMetaTypes.SEARCH, s.columnMetaTypes.LIST, s.columnMetaTypes.MESSAGES, s.columnMetaTypes.USERTWEETS, s.columnMetaTypes.FAVORITES, s.columnMetaTypes.ACTIVITY, s.columnMetaTypes.HOME, s.columnMetaTypes.ME, s.columnMetaTypes.INBOX, s.columnMetaTypes.DATAMINR, s.columnMetaTypes.LIVEVIDEO, s.columnMetaTypes.EVENT], s.actionColumnTypes = [s.columnMetaTypes.INTERACTIONS, s.columnMetaTypes.MENTIONS, s.columnMetaTypes.ACTIVITY, s.columnMetaTypes.FOLLOWERS], s.notificationColumnTypes = new a.default([s.columnMetaTypes.INTERACTIONS, s.columnMetaTypes.MENTIONS, s.columnMetaTypes.FOLLOWERS, s.columnMetaTypes.ME]), s.notificationFeedTypes = new a.default([s.feedTypes.INTERACTIONS, s.feedTypes.MENTIONS]), s.singleActionColumnTypes = [s.columnMetaTypes.MENTIONS, s.columnMetaTypes.FOLLOWERS], s.mediaPreviewableColumnTypes = [s.columnMetaTypes.TIMELINE, s.columnMetaTypes.INTERACTIONS, s.columnMetaTypes.MENTIONS, s.columnMetaTypes.SEARCH, s.columnMetaTypes.LIST, s.columnMetaTypes.CUSTOMTIMELINE, s.columnMetaTypes.USERTWEETS, s.columnMetaTypes.FAVORITES, s.columnMetaTypes.ACTIVITY, s.columnMetaTypes.HOME, s.columnMetaTypes.ME, s.columnMetaTypes.DATAMINR, s.columnMetaTypes.LIVEVIDEO, s.columnMetaTypes.EVENT], s.combinedColumnTypes = {}, d.default.extendObjectWith(s.combinedColumnTypes, [
        [s.columnMetaTypes.ME, !0],
        [s.columnMetaTypes.INBOX, !0],
        [s.columnMetaTypes.SCHEDULED, !0]
    ]), s.isTopHalfOfTweet = function(e) {
        var t = e.event.originalEvent.pageY - e.parentOffset.top,
            i = e.$streamItem.height(),
            s = e.$streamItem.find("#" + e.dropIndicatorId),
            n = s.length,
            r = i - (n ? s.height() : 0),
            a = n ? .08 * r : 0;
        return t + a < r / 2 || !(t - a < r / 2) && void 0
    }, s.getDropIndicatorText = function(e, t) {
        var i = this.getDropActionType(e, t);
        return (0, c.default)({
            add: "Add here",
            copy: "Copy here",
            move: "Move here"
        } [i])
    }, s.getDropActionType = function(e, t) {
        return e.attr("data-column") === t ? "move" : this.isColumnCustomTimeline(e) ? "copy" : "add"
    }, s.isColumnCustomTimeline = function(e) {
        var t = e.attr("data-column"),
            i = TD.storage.columnController.get(t),
            n = n ? TD.storage.feedController.get(i.getFeedKeys()).getType() : null;
        return "col_" + n === s.columnMetaTypes.CUSTOMTIMELINE
    }, s.getColumnType = function(e) {
        var t = e.model.getType(),
            i = e.getFeeds();
        switch (t) {
            case s.storageColumnTypes.HOME:
                return s.columnMetaTypes.HOME;
            case s.storageColumnTypes.ME:
                return s.columnMetaTypes.ME;
            case s.storageColumnTypes.INBOX:
                return s.columnMetaTypes.INBOX;
            case s.storageColumnTypes.SCHEDULED:
                return s.columnMetaTypes.SCHEDULED;
            case s.simpleColumnTypes.TRENDS:
                return s.columnMetaTypes.TRENDS;
            case s.simpleColumnTypes.ANALYTICS:
                return s.columnMetaTypes.ANALYTICS;
            case s.simpleColumnTypes.WHATSHAPPENING:
                return s.columnMetaTypes.WHATSHAPPENING;
            default:
                return 1 === i.length ? s._inferColumnTypeFromFeed(i[0], e) : s.columnMetaTypes.UNKNOWN
        }
    }, s.getBaseQuery = function(e) {
        var t = s.isSearchColumn(e) || s.isEventColumn(e),
            i = e.getFeeds();
        if (t && i.length) {
            var n = i[0].getMetadata(),
                r = l.default.get(n, "baseQuery"),
                a = l.default.get(n, "term");
            return r || a
        }
    }, s.getOwnList = function(e) {
        var t = e.getFeeds().find(function(e) {
            var t = "list" === e.getType(),
                i = e.getMetadata();
            return t && i
        });
        if (t) {
            var i = t.getMetadata();
            return TD.cache.lists.find(i.listId, i.screenName, i.slug, !0)
        }
    }, s.isFilterable = function(e) {
        return s.filterableColumnTypes.includes(s.getColumnType(e))
    }, s.isClearable = function(e) {
        return s.clearableColumnTypes.includes(s.getColumnType(e))
    }, s.isShareable = function(e) {
        return s.shareableColumnTypes.includes(s.getColumnType(e))
    }, s.isEmbeddable = function(e) {
        return s.embeddableColumnTypes.includes(s.getColumnType(e))
    }, s.isViewable = function(e) {
        return s.viewableColumnTypes.includes(s.getColumnType(e))
    }, s.isCustomTimeline = function(e) {
        return s.getColumnType(e) === s.columnMetaTypes.CUSTOMTIMELINE
    }, s.isDataminr = function(e) {
        return s.getColumnType(e) === s.columnMetaTypes.DATAMINR
    }, s.isActivityColumn = function(e) {
        return s.getColumnType(e) === s.columnMetaTypes.ACTIVITY
    }, s.isActionsColumn = function(e) {
        return s.actionColumnTypes.includes(s.getColumnType(e))
    }, s.hasPreferences = function(e) {
        return !s.noPreferencesColumnTypes.includes(s.getColumnType(e))
    }, s.isMessageColumn = function(e) {
        var t = s.getColumnType(e);
        return t === s.columnMetaTypes.MESSAGES || t === s.columnMetaTypes.INBOX
    }, s.isEventColumn = function(e) {
        return s.getColumnType(e) === s.columnMetaTypes.EVENT
    }, s.isSimpleColumn = function(e) {
        return (0, r.default)(s.simpleColumnTypes).includes(e)
    }, s.isSearchColumn = function(e) {
        return s.getColumnType(e) === s.columnMetaTypes.SEARCH
    }, s.isTouchColumnOptions = function() {
        return Boolean(d.default.isTouchDevice() && TD.decider.get("touchdeck_column_options_v2"))
    }, s.isOwnCustomTimeline = function(e) {
        return !!e.getFeeds().length && e.getFeedsByType(s.feedTypes.CUSTOMTIMELINE).some(function(e) {
            var t = e.getMetadata();
            return TD.storage.Account.generateKeyFor("twitter", t.ownerId) === e.getAccountKey()
        })
    }, s.canFilterByUsersIFollow = function(e) {
        return ["col_interactions", "col_mentions", "col_followers"].includes(s.getColumnType(e))
    }, s._twitterFeedTypeToColumnMetaType = {}, d.default.extendObjectWith(s._twitterFeedTypeToColumnMetaType, [
        [s.feedTypes.HOME, s.columnMetaTypes.TIMELINE],
        [s.feedTypes.USERTIMELINE, s.columnMetaTypes.TIMELINE],
        [s.feedTypes.INTERACTIONS, s.columnMetaTypes.INTERACTIONS],
        [s.feedTypes.MENTIONS, s.columnMetaTypes.MENTIONS],
        [s.feedTypes.SEARCH, s.columnMetaTypes.SEARCH],
        [s.feedTypes.LIST, s.columnMetaTypes.LIST],
        [s.feedTypes.CUSTOMTIMELINE, s.columnMetaTypes.CUSTOMTIMELINE],
        [s.feedTypes.DIRECT, s.columnMetaTypes.MESSAGES],
        [s.feedTypes.USERTWEETS, s.columnMetaTypes.USERTWEETS],
        [s.feedTypes.FAVORITES, s.columnMetaTypes.FAVORITES],
        [s.feedTypes.NETWORKACTIVITY, s.columnMetaTypes.ACTIVITY],
        [s.feedTypes.DATAMINR, s.columnMetaTypes.DATAMINR],
        [s.feedTypes.LIVEVIDEO, s.columnMetaTypes.LIVEVIDEO],
        [s.feedTypes.EVENT, s.columnMetaTypes.EVENT]
    ]), s._inferColumnTypeFromFeed = function(e, t) {
        var i, n, r = e.getService(),
            a = e.getType(),
            o = e.getMetadata(),
            c = s.columnMetaTypes.UNKNOWN;
        if ("twitter" === r) switch (c = s._twitterFeedTypeToColumnMetaType[a] || c, a) {
            case s.feedTypes.SEARCH:
                var l = twttrTxt.extractMentionsWithIndices(o.term);
                if (1 === l.length) {
                    var u = l[0];
                    0 === u.indices[0] && u.indices[1] === o.term.length && (c = s.columnMetaTypes.MENTIONS)
                }
                break;
            case s.feedTypes.INTERACTIONS:
                if ((i = t.model.getFilters()) && 1 === (n = new TD.vo.ActionFilter(i.action)).getActiveFacetCount(c)) {
                    var d = n.toJSONObject();
                    d.showMentions ? c = s.columnMetaTypes.MENTIONS : d.showFollowers && (c = s.columnMetaTypes.FOLLOWERS)
                }
        }
        return c
    }, s.getColumnIconClassByColumn = function(e) {
        var t = s.getColumnType(e);
        return s.columnMetaTypeToIconClass[t]
    }, s.getColumnClassByColumn = function(e) {
        var t = e.model.getType();
        return s.columnMetaTypeToClass[t]
    }, s.getColumnHeaderTitleHTML = function(e) {
        var t = s.getColumnTitleArgs(e);
        return null === t ? d.default.escape(e.model.getTitle()) : s.isSearchColumn(e) ? TD.ui.template.render("column_title_editable", t) : TD.ui.template.render("column_title", (0, n.default)({}, t, {
            emojifiedTitle: d.default.cleanWithEmoji(t.title)
        }))
    }, s.getColumnTitleHTML = function(e) {
        var t = s.getColumnTitleArgs(e);
        return null === t ? d.default.escape(e.model.getTitle()) : TD.ui.template.render("column_title", (0, n.default)({}, t, {
            emojifiedTitle: d.default.cleanWithEmoji(t.title)
        }))
    }, s.getColumnTitleArgs = function(e) {
        var t, i, n, r, a, l, u, h, m, f, p = s.getColumnType(e),
            g = e.getFeeds(),
            v = {},
            T = s.columnMetaTypeToTitleTemplateData[p];
        if (p === s.columnMetaTypes.FAVORITES && (T.title = (0, c.default)("Likes")), p === s.columnMetaTypes.UNKNOWN && e.model.getTitle()) return null;
        if ((0, o.default)(s.simpleColumnTypes).some(function(e) {
                return s.columnMetaTypes[e] === p
            })) {
            if (v.title = T.title, T.needsUserAttribution) {
                var w = TD.storage.accountController.getDefault().getUsername();
                v.needsUserAttribution = T.needsUserAttribution, v.screenName = d.default.atMentionify(w)
            }
            return v
        }
        v.editableFieldClass = T.editableFieldClass, v.maxLength = T.maxLength;
        for (var b = 0; b < g.length; b++) {
            if (i = (t = g[b]).getType(), n = t.getMetadata()) switch (i) {
                case s.feedTypes.LIST:
                    if (l = TD.cache.names.getScreenName(n.ownerId), !(m = TD.cache.names.getListName(n.listId, n.ownerId))) return null;
                    v.title = m;
                    break;
                case s.feedTypes.CUSTOMTIMELINE:
                    l = TD.cache.names.getScreenName(n.ownerId), u = TD.storage.accountController.get(t.getAccountKey()).getProfileImageURL(), f = TD.cache.names.getCustomTimelineName(n.id), v.title = f;
                    break;
                case s.feedTypes.SEARCH:
                    if (u = TD.storage.accountController.get(t.getAccountKey()).getProfileImageURL(), p === s.columnMetaTypes.MENTIONS ? l = n.term : h = n.baseQuery ? n.baseQuery : n.term, !h) return null;
                    v.title = h;
                    break;
                case s.feedTypes.DATAMINR:
                    v.title = n.watchlist.name;
                    break;
                case s.feedTypes.LIVEVIDEO:
                case s.feedTypes.EVENT:
                    v.title = n.title;
                    break;
                default:
                    if (n.id) {
                        if (!(l = TD.cache.names.getScreenName(n.id))) return null
                    } else p === s.columnMetaTypes.SCHEDULED && (l = (0, c.default)("All accounts"));
                    v.title = T.title
            }
            l || "tweetdeck" !== (a = (r = TD.storage.accountController.get(t.getAccountKey())).getType()) && (l = r.getUsername(), "twitter" === a && (l = d.default.atMentionify(l)))
        }
        if (T.needsUserAttribution) {
            if (!l) return null;
            v.needsUserAttribution = T.needsUserAttribution, v.screenName = l, v.profileImageURL = u
        }
        return v
    }, s.inferFeedTypeFromActionFilter = function(e) {
        var t = this.feedTypes.INTERACTIONS,
            i = e.getActiveFacetCount(s.columnMetaTypes.INTERACTIONS),
            n = e.toJSONObject();
        return 1 === i && n.showMentions && (t = this.feedTypes.MENTIONS), t
    }, s.getColumnFromElement = function(e) {
        var t = (0, u.default)(e).closest("[data-column]").attr("data-column");
        return TD.controller.columnManager.get(t)
    }, s.getColumnScrollContainerByKey = function(e) {
        var t = this.getColumnElementByKey(e),
            i = t.find(".js-detail-container");
        return i.length > 0 ? i : t.find(".js-column-scroller")
    }, s.getColumnElementByKey = function(e) {
        return (0, u.default)(".js-app-columns .js-column").filter('[data-column="' + e + '"]')
    }, s.getKeyForColumnAtIndex = function(e) {
        return (0, u.default)(".js-app-columns .js-column").eq(e).attr("data-column")
    }, s.getKeyForLastColumn = function() {
        return (0, u.default)(".js-app-columns .js-column").last().attr("data-column")
    }, s)
}, , function(e, t, i) {
    "use strict";
    var s, n, r, a, o, c, l, u, d, h = w(i(47)),
        m = w(i(3)),
        f = w(i(1)),
        p = w(i(0)),
        g = w(i(70)),
        v = w(i(525)),
        T = i(233);

    function w(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (n = 0, r = /(.+)(?:_normal)\.(\w+)$/, a = new RegExp("<(?:.|\\n)*?>", "gm"), o = /\B(?=(\d{3})+(?!\d))/g, c = /^[@\uff20]?/, l = /^https?:\/\/twitter\.com\/([a-zA-Z0-9_-]+)(?:(?:\/status(?:es)?\/([0-9]+))?|(?:(\/(?:lists|timelines)\/)|\/)?([a-zA-Z0-9_-]+))\/?(\?.*)?$/, u = ["404", "500", "about", "account", "help", "jobs", "privacy", "search", "search-advanced", "search-home", "tos"], d = !isNaN(new Date("Mon Oct 08 16:34:01 +0000 2012").getTime()), p.default.hasOwnProperty("subscribe") && p.default.subscribe("/date", function(e) {
        var t = TD.util.parseDateString(e).getTime(),
            i = (new Date).getTime();
        n = t - i
    }), {
        ANCHOR_TAG_REGEXP: /href=/g,
        LT_REGEXP: /</g,
        GT_REGEXP: />/g,
        SINGLE_QUOTE_REGEXP: /'/g,
        QUOTE_REGEXP: /"/g,
        TWITTER_USERNAME_REGEXP: /@([A-Za-z0-9_]+)/g,
        parseDateString: function(e) {
            return !d && e ? new Date(Date.parse(e.replace(/( \+)/, " UTC$1"))) : new Date(e)
        },
        parseISO8601: function(e) {
            return new Date(Date.parse(e))
        },
        iso8601: function(e) {
            return (e || new Date).toISOString()
        },
        unixTime: function(e) {
            return Math.round(e.getTime() / 1e3)
        },
        prettyDateFromUnixTimestamp: function(e) {
            return g.default.unix(e).format("D MMM YYYY")
        },
        prettyDate: function(e) {
            var t = (0, g.default)().subtract(1, "week");
            return (0, g.default)().isSame(e, "year") ? (0, g.default)(e).isBefore(t) ? TD.util.prettyMonthDayString(e) : TD.util.timeAgo(e.getTime(), {
                longForm: !1,
                adjustSystemTime: !0
            }) : TD.util.prettyDateString(e)
        },
        quotedForRegExp: function(e) {
            return String(e || "").replace(/([.\\+*?[^\]$(){}=!<>|:\/\-])/g, "\\$1")
        },
        clean: function(e) {
            if (!e) return e;
            var t = {
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#39;"
            };
            return e.toString().replace(/[<>"']/g, function(e) {
                return t[e]
            })
        },
        removeHTMLCodes: function(e) {
            var t = {
                "&lt;": "<",
                "&gt;": ">",
                "&quot;": '"',
                "&apos;": "'",
                "&#39;": "'",
                "&amp;": "&"
            };
            return e.replace(/&(?:lt|gt|quot|apos|#39|amp);/g, function(e) {
                return t[e]
            })
        },
        stripHTMLTags: function(e) {
            return e.replace(a, "")
        },
        htmlToText: function(e) {
            return (0, p.default)("<div>" + e + "</div>").text()
        },
        h: function(e) {
            var t = (0, p.default)("<div/>"),
                i = function(e) {
                    return e ? t.text(e).html().replace(/\"/gi, "&quot;") : e
                };
            return this.h = function(e) {
                return i(e)
            }, i(e)
        },
        transform: function(e, t) {
            return e ? (t = t || {}, this.updateEntities(e, t), this.linkify(e, t)) : ""
        },
        cleanWithEmoji: function(e) {
            return e ? (e = this.clean(e), TD.decider.get("tweets_emoji") && (e = v.default.parse(e)), e) : ""
        },
        updateEntities: function(e, t) {
            var i, s, n, r, a, o = twttrTxt.modifyIndicesFromUnicodeToUTF16;
            if (t.convertedToUTF16) return t;
            for (t.convertedToUTF16 = !0, t.media && t.media.length ? o(e, t.media) : t.media = [], t.urls && t.urls.length ? o(e, t.urls) : t.urls = [], t.hashtags && t.hashtags.length ? o(e, t.hashtags) : t.hashtags = this.extractHashtagEntities(e), t.user_mentions && t.user_mentions.length ? o(e, t.user_mentions) : t.user_mentions = [], t.cashtags = twttrTxt.extractCashtagsWithIndices(e), s = 0, n = (i = this.extractMentionEntities(e)).length; s < n; s++) r = i[s], (a = this.getEntityOverlap(r, t)) ? r.list_slug && r.indices[0] === a.indices[0] && (a.indices = r.indices, a.list_slug = r.list_slug) : t.user_mentions.push(r);
            return t
        },
        extractMentionEntities: function(e) {
            var t = twttrTxt.extractMentionsOrListsWithIndices(e);
            return f.default.each(t, function(e) {
                e.screen_name = e.screenName, e.list_slug = e.listSlug, delete e.screenName, delete e.listSlug
            }), t
        },
        extractHashtagEntities: function(e) {
            var t = twttrTxt.extractHashtagsWithIndices(e);
            return f.default.each(t, function(e) {
                e.text = e.hashtag, delete e.hashtag
            }), t
        },
        getEntityOverlap: function(e, t) {
            for (var i = t.urls, s = 0, n = (i = (i = (i = i.concat(t.media)).concat(t.user_mentions)).concat(t.hashtags)).length; s < n; s++)
                if (e.indices[0] < i[s].indices[1] && e.indices[1] > i[s].indices[0]) return i[s];
            return null
        },
        linkify: function(e, t) {
            var i, s, n, r, a, o, c = "",
                l = [].concat(t.urls, t.media, t.user_mentions, t.hashtags, t.cashtags).filter(Boolean);
            l.sort(function(e, t) {
                return t.indices[0] - e.indices[0]
            });
            for (var u = 0, d = l.length; u < d; u++) r = l[u], i = e.substring(0, r.indices[0]), r.indices[1] > e.length || (s = e.substring(r.indices[0], r.indices[1]), n = e.substring(r.indices[1]), a = "", r.url ? a = s === r.url ? this.createUrlAnchor(r) : s : r.screen_name ? a = r.list_slug ? TD.ui.template.render("text/list_link_slug", {
                slug: r.list_slug.substr(1),
                user: {
                    screenName: r.screen_name
                },
                fullName: "@" + r.screen_name + r.list_slug
            }) : r.isImplicitMention ? "" : TD.ui.template.render("text/profile_link", {
                user: {
                    screenName: r.screen_name
                }
            }) : r.text ? (o = {
                searchTerm: r.text,
                symbol: "#",
                escapedSymbol: escape("#"),
                hashFlagUrl: TD.decider.get("hashflags") ? T.hashflags.get(r.text) : null
            }, a = TD.ui.template.render("text/search_link", o)) : r.cashtag && (o = {
                searchTerm: r.cashtag,
                symbol: "$",
                escapedSymbol: escape("$")
            }, a = TD.ui.template.render("text/search_link", o)), c = a + this.cleanWithEmoji(n) + c, e = u === l.length - 1 && r.isImplicitMention ? "" : i);
            return (this.cleanWithEmoji(e) + c).trim()
        },
        extractTweetIdFromPermalink: function(e) {
            if ("string" == typeof e) {
                var t, i = e.trim().match(l);
                return i && (t = i[2]), t
            }
        },
        extractScreenNameFromPermalink: function(e) {
            if ("string" == typeof e) {
                var t = void 0,
                    i = e.trim().match(l);
                return i && i[1] && (t = i[1]), t
            }
        },
        createUrlAnchor: function(e) {
            var t, i = e.url,
                s = "url";
            if (e.isUrlForAttachment && TD.decider.get("tweet_hide_suffix")) return "";
            var n, r, a, o, c = (e.expanded_url || e.url).match(l);
            c && (n = c[1], r = c[2], c[3] && (a = c[3].replace(/\//g, "")), o = c[4]);
            var d = n && o && !(r || a);
            return (-1 !== u.indexOf(n) || d) && (n = void 0, o = void 0, r = void 0, a = void 0), f.default.startsWith(i, "https://") || f.default.startsWith(i, "http://") || (i = "http://" + i), t = '<a href="' + TD.util.escape(i) + '" target="_blank" class="url-ext" ', e.expanded_url && (t += 'data-full-url="' + TD.util.escape(e.expanded_url) + '" '), r ? (s = "tweet", t += 'data-tweet-id="' + r + '" ') : o ? (t += 'data-screen-name="' + n + '" ', s = "timelines" === a ? "viewCustomTimeline" : "list", t += 'data-slug="' + o + '" ') : n && (s = "user", t += 'data-user-name="' + n + '" '), s && s.includes("url") && (s += " noopener noreferrer"), t += 'rel="' + s + '" ', e.display_url && e.expanded_url && 8230 == e.display_url.charCodeAt(e.display_url.length - 1) && (t += 'title="' + TD.util.escape(e.expanded_url) + '" '), t += ">" + TD.util.escape(e.display_url || e.url) + "</a>"
        },
        isLinkToTwitterItem: function(e) {
            return l.test(e)
        },
        pluralise: function(e, t, i) {
            return 1 != i ? t : e
        },
        atMentionify: function(e) {
            return e.replace(c, "@")
        },
        deMentionify: function(e) {
            return e.replace(c, "")
        },
        selectAttrsFrom: function(e, t) {
            for (var i = {}, s = 0; s < t.length; s++) i[t[s]] = e[t[s]];
            return i
        },
        values: function(e) {
            var t = [];
            for (var i in e) e.hasOwnProperty(i) && t.push(e[i]);
            return t
        },
        isEmpty: f.default.isEmpty,
        isWeb: f.default.memoize(function() {
            return /^https?:\/\//.test(document.location)
        }),
        isMacApp: f.default.memoize(function() {
            return "mac" === TD.util.getAppEnv()
        }),
        isChromeApp: f.default.memoize(function() {
            return f.default.startsWith(window.location.href, "chrome-extension://")
        }),
        isChrome: f.default.memoize(function() {
            return window.navigator.userAgent.indexOf("Chrome") > -1
        }),
        isFirefox: f.default.memoize(function() {
            return window.navigator.userAgent.indexOf("Gecko/") > -1
        }),
        isWrapperApp: f.default.memoize(function() {
            return Boolean(window.deck && deck.inApp())
        }),
        isSafari: f.default.memoize(function() {
            return !(window.navigator.userAgent.indexOf("Chrome") > -1) && window.navigator.userAgent.indexOf("AppleWebKit") > -1
        }),
        getWebkitVersion: function() {
            var e = window.navigator.userAgent.match(/AppleWebKit\/([\d.]+)/);
            return e ? parseFloat(e[1]) : null
        },
        getTweetDeckUserAgentString: function() {
            var e = {
                clientVersion: TD.version,
                platform: TD.util.getAppEnv(),
                platformVersion: TD.util.isWrapperApp() && void 0 !== deck ? deck.getWrapperVersion() : ""
            };
            return TD.ui.template.toHtml("Twitter-TweetDeck-blackbird-chrome/{{{clientVersion}}} {{{platform}}}/{{{platformVersion}}}", e)
        },
        getTwitterCookieUserId: function() {
            var e = document.cookie.match(/(?:^|;\s*)twid="(.*?)"\s*(;|$)/);
            if (e) {
                var t = e[1].split("|")[0];
                return TD.net.util.formDecode(t).u
            }
            return ""
        },
        getBearerTokenAuthHeader: function() {
            return "Bearer " + TD.config.bearer_token
        },
        getCsrfTokenHeader: function() {
            var e = document.cookie.match(/(?:^|;\s*)ct0=([0-9a-f]+)\s*(?:;|$)/);
            return e ? e[1] : ""
        },
        visibilityChangeEventName: function() {
            return null == s && (void 0 !== document.hidden ? s = "visibilitychange" : void 0 !== document.mozHidden ? s = "mozvisibilitychange" : void 0 !== document.msHidden ? s = "msvisibilitychange" : void 0 !== document.webkitHidden && (s = "webkitvisibilitychange")), s
        },
        documentIsHidden: function() {
            return document.hidden || document.mozHidden || document.msHidden || document.webkitHidden
        },
        isTouchDevice: f.default.memoize(function() {
            return TD.config.force_touchdeck || TD.config.touchdeck && TD.util.isiOSDevice()
        }),
        isiOSDevice: f.default.memoize(function() {
            return /(iPad|iPhone|iPod)/g.test(navigator.userAgent)
        }),
        isUnsupportedWebWrapperVersion: function() {
            var e, t, i = !1;
            if (Boolean(TD.util.isWrapperApp() && deck.getWrapperVersion)) {
                switch (t = deck.getWrapperVersion(), TD.util.getAppEnv()) {
                    case "mac":
                        e = TD.minWrapperVersionMac;
                        break;
                    case "win":
                        e = TD.minWrapperVersionWin
                }
                i = !e || !t || TD.util.versionComparator(t, e) < 0
            }
            return i
        },
        getFullVersionString: function() {
            var e = {
                version: TD.version,
                buildIDShort: TD.buildIDShort,
                appEnv: TD.util.getAppEnv()
            };
            return TD.util.isWrapperApp() && deck.getWrapperVersion && (e.wrapperVersion = deck.getWrapperVersion()), TD.ui.template.render("version", e)
        },
        isRetina: function() {
            return window.devicePixelRatio >= 1.5
        },
        shouldStream: function() {
            return !1
        },
        getCurrentLocation: function(e, t, i) {
            var s, n, r, a = Number.MAX_VALUE,
                o = navigator.geolocation,
                c = function() {
                    o.clearWatch(n), s ? t(s) : i && i()
                };
            r = setTimeout(c, e), n = o.watchPosition(function(e) {
                var t = e.coords.accuracy;
                t < a && (s = e, a = t), t < 50 && (clearTimeout(r), c())
            }, i, {
                enableHighAccuracy: !0
            })
        },
        openURL: function(e, t) {
            if (f.default.isString(e) && (f.default.startsWith(e, "https://") || f.default.startsWith(e, "http://")))
                if (t && (e = TD.net.util.addURLParameters(e, t)), window.navigator.standalone) {
                    var i = document.createElement("a");
                    i.setAttribute("href", e), i.setAttribute("target", "_blank");
                    var s = document.createEvent("HTMLEvents");
                    s.initEvent("click", !0, !0), i.dispatchEvent(s)
                } else {
                    var n = window.open(e);
                    n && n.focus()
                }
        },
        maybeOpenClickExternally: function(e) {
            var t = !1,
                i = (0, p.default)(e.currentTarget),
                s = i.prop("tagName"),
                n = i.attr("rel"),
                r = i.attr("target"),
                a = i.attr("href") || "",
                o = i.attr("data-full-url") || a,
                c = e.isTrigger,
                l = e.ctrlKey || e.shiftKey || e.altKey || e.metaKey || 0 !== e.button;
            return "A" === s && "_blank" === r && (n && n.includes("url") || l) && (TD.util.isWrapperApp() || c ? (TD.util.openURL(a), e.preventDefault(), e.stopImmediatePropagation()) : e.stopImmediatePropagation(), t = !0, TD.controller.stats.linkClick(o, i)), t
        },
        openEmail: function(e, t, i) {
            var s = "mailto:",
                n = {};
            t && (n.subject = t), i && (n.body = i), e && (s += e), s = s + "?" + TD.net.util.formEncode(n), window.open(s)
        },
        escape: function(e) {
            return this.clean(e)
        },
        truncateText: function(e, t, i, s, n, r) {
            var a;
            if (t = void 0 == t ? "…" : t, s = s || 0, r = r || 0, e.length > i + s) {
                var o = e.indexOf(" ", i - r - 1); - 1 != o && (i = Math.min(i, o + 1)), a = e.substr(0, i), n && (a = this.transform(a)), a += t
            }
            return a
        },
        timesCached: null,
        timeWords: function() {
            return TD.util.timesCached || (TD.util.timesCached = {
                longFormPast: {
                    singular: {
                        now: (0, m.default)("now", null, !0),
                        seconds: (0, m.default)("{{one}} second ago", null, !0),
                        minutes: (0, m.default)("{{one}} minute ago", null, !0),
                        hours: (0, m.default)("{{one}} hour ago", null, !0),
                        days: (0, m.default)("{{one}} day ago", null, !0)
                    },
                    plural: {
                        now: (0, m.default)("now", null, !0),
                        seconds: (0, m.default)("{{plural_number}} seconds ago", null, !0),
                        minutes: (0, m.default)("{{plural_number}} minutes ago", null, !0),
                        hours: (0, m.default)("{{plural_number}} hours ago", null, !0),
                        days: (0, m.default)("{{plural_number}} days ago", null, !0)
                    }
                },
                longFormFuture: {
                    singular: {
                        now: (0, m.default)("now", null, !0),
                        seconds: (0, m.default)("{{one}} second left", null, !0),
                        minutes: (0, m.default)("{{one}} minute left", null, !0),
                        hours: (0, m.default)("{{one}} hour left", null, !0),
                        days: (0, m.default)("{{one}} day left", null, !0)
                    },
                    plural: {
                        now: (0, m.default)("now", null, !0),
                        seconds: (0, m.default)("{{plural_number}} seconds left", null, !0),
                        minutes: (0, m.default)("{{plural_number}} minutes left", null, !0),
                        hours: (0, m.default)("{{plural_number}} hours left", null, !0),
                        days: (0, m.default)("{{plural_number}} days left", null, !0)
                    }
                },
                shortForm: {
                    singular: {
                        now: (0, m.default)("now", null, !0),
                        seconds: (0, m.default)("{{one}}s", null, !0),
                        minutes: (0, m.default)("{{one}}m", null, !0),
                        hours: (0, m.default)("{{one}}h", null, !0),
                        days: (0, m.default)("{{one}}d", null, !0)
                    },
                    plural: {
                        now: (0, m.default)("now", null, !0),
                        seconds: (0, m.default)("{{plural_number}}s", null, !0),
                        minutes: (0, m.default)("{{plural_number}}m", null, !0),
                        hours: (0, m.default)("{{plural_number}}h", null, !0),
                        days: (0, m.default)("{{plural_number}}d", null, !0)
                    }
                }
            }), TD.util.timesCached
        },
        datesCached: null,
        dates: function() {
            return TD.util.datesCached || (TD.util.datesCached = {
                months: [(0, m.default)("Jan"), (0, m.default)("Feb"), (0, m.default)("Mar"), (0, m.default)("Apr"), (0, m.default)("May"), (0, m.default)("Jun"), (0, m.default)("Jul"), (0, m.default)("Aug"), (0, m.default)("Sep"), (0, m.default)("Oct"), (0, m.default)("Nov"), (0, m.default)("Dec")],
                dates: [(0, m.default)("1st"), (0, m.default)("2nd"), (0, m.default)("3rd"), (0, m.default)("4th"), (0, m.default)("5th"), (0, m.default)("6th"), (0, m.default)("7th"), (0, m.default)("8th"), (0, m.default)("9th"), (0, m.default)("10th"), (0, m.default)("11th"), (0, m.default)("12th"), (0, m.default)("13th"), (0, m.default)("14th"), (0, m.default)("15th"), (0, m.default)("16th"), (0, m.default)("17th"), (0, m.default)("18th"), (0, m.default)("19th"), (0, m.default)("20th"), (0, m.default)("21st"), (0, m.default)("22nd"), (0, m.default)("23rd"), (0, m.default)("24th"), (0, m.default)("25th"), (0, m.default)("26th"), (0, m.default)("27th"), (0, m.default)("28th"), (0, m.default)("29th"), (0, m.default)("30th"), (0, m.default)("31st")]
            }), TD.util.datesCached
        },
        timeLeft: function(e, t) {
            return TD.util.timeDiff(e, {
                longForm: t.longForm,
                adjustSystemTime: t.adjustSystemTime,
                isFutureTime: !0
            })
        },
        timeAgo: function(e, t) {
            return TD.util.timeDiff(e, {
                longForm: t.longForm,
                adjustSystemTime: t.adjustSystemTime,
                isFutureTime: !1
            })
        },
        timeDiff: function(e, t) {
            t = t || {};
            var i, s, r, a = Date.now(),
                o = new Date(e).getTime(),
                c = t.longForm ? t.isFutureTime ? "longFormFuture" : "longFormPast" : "shortForm",
                l = TD.util.timeWords()[c];
            return t.adjustSystemTime && (a += n), i = t.isFutureTime ? o - a : a - o, isNaN(i) || i < -5e3 ? "" : (i < 7e3 ? (r = "", s = "now") : i < 6e4 ? (r = Math.floor(i / 1e3), s = "seconds") : i < 36e5 ? (r = Math.floor(i / 6e4), s = "minutes") : i < 864e5 ? (r = Math.floor(i / 36e5), s = "hours") : (r = Math.floor(i / 864e5), s = "days"), l = 1 === r ? l.singular : l.plural, TD.ui.template.toHtml(l[s], {
                one: r,
                plural_number: r
            }))
        },
        getDayOfWeek: function(e) {
            return [(0, m.default)("Sunday"), (0, m.default)("Monday"), (0, m.default)("Tuesday"), (0, m.default)("Wednesday"), (0, m.default)("Thursday"), (0, m.default)("Friday"), (0, m.default)("Saturday")][e.getDay()]
        },
        prettyTime: function(e) {
            return {
                month: TD.util.dates().months[e.getMonth()],
                hours24: e.getHours(),
                hours12: e.getHours() % 12 || 12,
                minutes: TD.util.padLeadingZero(e.getMinutes()),
                amPm: e.getHours() < 12 ? (0, m.default)("am") : (0, m.default)("pm"),
                date: TD.util.dates().dates[e.getDate() - 1],
                day: e.getDate(),
                dayOfWeek: this.getDayOfWeek(e),
                year: e.getFullYear().toString().slice(2),
                fullYear: e.getFullYear()
            }
        },
        prettyTimeString: function(e) {
            return (0, m.default)("{{hours12}}:{{minutes}}{{amPm}} · {{day}} {{month}} {{fullYear}}", TD.util.prettyTime(e))
        },
        prettyTimeOrDateString: function(e) {
            var t = new Date;
            return t.setHours(0), t.setMinutes(0), t.setSeconds(0), t.setMilliseconds(1), e >= t ? TD.util.prettyTimeOfDayString(e) : e >= t - 5184e5 ? (0, m.default)("{{dayOfWeek}}, {{hours12}}:{{minutes}}{{amPm}}", TD.util.prettyTime(e)) : (0, m.default)("{{day}} {{month}} {{year}}, {{hours12}}:{{minutes}}{{amPm}}", TD.util.prettyTime(e))
        },
        prettyTimeOfDayString: function(e) {
            return (0, m.default)("{{hours12}}:{{minutes}}{{amPm}}", TD.util.prettyTime(e))
        },
        prettyDateString: function(e) {
            return (0, m.default)("{{day}} {{month}} {{fullYear}}", TD.util.prettyTime(e))
        },
        prettyDateShortString: function(e) {
            return (0, m.default)("{{month}} {{fullYear}}", TD.util.prettyTime(e))
        },
        prettyMonthDayString: function(e) {
            return (0, m.default)("{{month}} {{day}}", TD.util.prettyTime(e))
        },
        padLeadingZero: function(e) {
            return e.toString().replace(/^(\d)$/, "0$1")
        },
        prettyTimeOfDayOrDateString: function(e) {
            return (new Date).toDateString() === e.toDateString() ? TD.util.prettyTimeOfDayString(e) : TD.util.prettyDateString(e)
        },
        isValidNumber: function(e, t) {
            "string" == typeof e && (e = parseFloat(e));
            var i = !f.default.get(t, "noNegativeNumbers") || e >= 0;
            return "number" == typeof e && isFinite(e) && i
        },
        truncateNumber: function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 4;
            if (!TD.util.isValidNumber(e)) return "";
            var i = 0,
                s = e;
            if (String(e).length <= t) return TD.util.prettyNumber(e);
            for (t -= 1; t < String(Math.floor(s)).length;) ++i, s /= 1e3;
            return parseFloat(s.toPrecision(t)) + ["", "K", "M", "B", "T"][i]
        },
        prettyNumber: function(e, t) {
            return TD.util.isValidNumber(e, t) ? ("string" == typeof e && (e = parseInt(e, 10)), e.toString().split(".")[0].replace(o, ",")) : ""
        },
        chirpColumnSort: function(e, t) {
            var i = {
                    before: -1,
                    after: 1
                },
                s = 0,
                n = e.getSortIndex(),
                r = t.getSortIndex(),
                a = n.type;
            if (n.type !== r.type) return TD.config.internal_build && console.warn("chirpColumnSort cannot compare", n.type, "to", r.type), 0;
            switch (a) {
                case "milliseconds":
                case "number":
                    s = r.value - n.value;
                    break;
                case "numericString":
                    s = TD.util.numericStringComparator(r.value, n.value);
                    break;
                default:
                    TD.config.internal_build && console.warn("chirpColumnSort unrecognised sort type:", a), s = 0
            }
            return s || (s = (i[n.conflictResolution] || 0) - (i[r.conflictResolution] || 0)), s
        },
        chirpReverseColumnSort: function(e, t) {
            return TD.util.chirpColumnSort(t, e)
        },
        getTopChirp: function(e) {
            return e.reduce(function(e, t) {
                return e && t ? e.belongsAbove(t) ? e : t : e || t
            })
        },
        transformTwitterAvatar: function(e, t) {
            return e.replace(r, "$1_" + t + ".$2")
        },
        getOSName: function() {
            var e = "";
            return this.isWrapperApp() ? e = deck.osname() : -1 != navigator.appVersion.indexOf("Win") ? e = "windows" : -1 != navigator.appVersion.indexOf("Mac") ? e = "osx" : -1 != navigator.appVersion.indexOf("Linux") && (e = "linux"), e
        },
        numericStringComparator: function(e, t) {
            var i = e.length - t.length;
            return i || (e > t ? i = 1 : e < t && (i = -1)), i
        },
        hasFeature: function(e) {
            switch (e) {
                case "file":
                    return !!window.File;
                case "filereader":
                    return !!window.FileReader;
                default:
                    return
            }
        },
        getAppEnv: function() {
            var e = "unknown";
            if (this.isChromeApp()) e = "chrome";
            else if (this.isWrapperApp()) switch (this.getOSName()) {
                case "osx":
                    e = "mac";
                    break;
                case "windows":
                    e = "win"
            } else f.default.startsWith(window.location.href, "file://") || (e = "web");
            return e
        },
        checkAPIRoot: function() {
            if ("http:" === window.location.protocol || "https:" === window.location.protocol) {
                var e = window.location.protocol + "//" + window.location.host;
                e !== TD.config.api_root && (console.log("NOTE: overwriting api_root of", TD.config.api_root, "with", e), TD.config.api_root = e)
            }
        },
        hasFixedScrollBars: function() {
            var e, t = (0, p.default)("<div>").css({
                width: "100px",
                height: "100px",
                overflow: "scroll",
                position: "absolute",
                top: "-9999px"
            });
            return (0, p.default)("body").append(t), e = t[0].offsetWidth - t[0].clientWidth, t.remove(), Boolean(e)
        },
        bind: function(e, t) {
            return function() {
                e.apply(t, arguments)
            }
        },
        random: function(e, t) {
            return null == t && (t = e, e = 0), e + (0 | Math.random() * (t - e + 1))
        },
        extendObjectWith: function(e, t) {
            f.default.each(t, function(t) {
                e[t[0]] = t[1]
            })
        },
        insertLogDivider: f.default.debounce(function() {
            console.log(" ")
        }, 1),
        versionComparator: function(e, t) {
            e = e.toString(), t = t.toString();
            for (var i, s, n = e.split("."), r = t.split("."), a = Math.min(n.length, r.length), o = 0; o < a; o++) {
                if ((i = parseInt(n[o], 10)) > (s = parseInt(r[o], 10))) return 1;
                if (i < s) return -1
            }
            return n.length > r.length ? 1 : n.length < r.length ? -1 : 0
        },
        TpmCounter: function(e, t, i) {
            var s = 0,
                n = 0,
                r = 0,
                a = [],
                o = (new Date).getTime(),
                c = setInterval(function() {
                    var e, c, l = (new Date).getTime(),
                        u = l - t;
                    for (a.push({
                            renderedCount: r,
                            startTime: o
                        }), n += r, r = 0, o = l; a.length && a[0].startTime < u;) e = a.shift(), n -= e.renderedCount;
                    a.length && (c = l - a[0].startTime, s = n * (6e4 / c), (0, p.default)(document).trigger(i, {
                        itemsPerMinute: Math.round(s)
                    }))
                }, e);
            this.incrementCounter = function(e) {
                r += e
            }, this.stop = function() {
                clearInterval(c)
            }
        },
        deterministicObjectHash: function(e) {
            var t = TD.util.createHashableObject(e),
                i = (0, h.default)(t),
                s = TD.core.sha1(i);
            return s = s.substr(0, 10)
        },
        createHashableObject: function(e) {
            var t, i;
            if (Array.isArray(e))(t = e.map(TD.util.createHashableObject)).push("A");
            else if (e === Object(e)) {
                for (var s in t = [], e) e.hasOwnProperty(s) && (i = TD.util.createHashableObject(e[s]), t.push([s, i]));
                t.sort(function(e, t) {
                    return e[0].localeCompare(t[0])
                }), t.push("O")
            } else t = e;
            return t
        },
        isNetworkFailure: function(e) {
            return 0 === e.status || 500 === e.status && "internal server error" === e.responseText
        },
        keyEquals: function(e, t) {
            return function(i) {
                return i[e] === t
            }
        },
        equals: function(e) {
            return function(t) {
                return e === t
            }
        },
        merge: function() {
            return f.default.assign.apply(f.default, [{}].concat([].slice.call(arguments)))
        },
        pluck: function(e) {
            return function(t) {
                return t && t[e]
            }
        },
        unpluck: function(e) {
            return function(t) {
                var i = {};
                return i[e] = t, i
            }
        },
        isDisabled: function() {
            return function(e) {
                return (0, p.default)(e).hasClass("is-disabled")
            }
        },
        makeDate: function(e) {
            return new Date(e)
        },
        effect: function(e) {
            return function(t) {
                return e.apply(this, arguments), t
            }
        },
        dEffect: function(e) {
            return function(t) {
                var i = this,
                    s = [].slice.call(arguments);
                return TD.core.defer.maybeDeferred(function() {
                    return e.apply(i, s)
                }).addCallback(function() {
                    return t
                })
            }
        },
        metric: function(e, t, i) {
            (0, p.default)(document).trigger("metric", {
                key: e,
                value: t,
                type: i
            })
        },
        getChirpId: function(e) {
            return e.id.toString()
        },
        getXhrStatusFromSendRequestResult: function(e) {
            return ((e = e || {}).req || e.xhr || {}).status
        },
        catch: function(e, t) {
            return function() {
                try {
                    return e.apply(this, arguments)
                } catch (e) {
                    t && console.error(e.stack)
                }
            }
        },
        compareBySortString: function(e, t) {
            var i = e.sortString,
                s = t.sortString;
            return i < s ? -1 : i > s ? 1 : 0
        }
    })
}, , , , function(e, t, i) {
    "use strict";
    var s, n = i(1533),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    t.showErrorNotification = function(e) {
        var t = e.timeoutDelayMs || 7e3;
        return r.default.addDanger({
            bodyText: e.message,
            timeoutDelayMs: t
        })
    }, t.showNotification = function(e) {
        var t = e.timeoutDelayMs || 3e3;
        return r.default.add({
            titleText: e.title,
            bodyText: e.message,
            timeoutDelayMs: t
        })
    }, t.removeNotification = function(e) {
        setTimeout(function() {
            r.default.remove(e.notification)
        }, e.timeoutDelayMs || 3e3)
    }, t.updateNotification = function(e) {
        r.default.update(e.notification, {
            bodyText: e.message
        }), e.remove && t.removeNotification(e)
    }
}, , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.horizonWebCardsEnabled$ = t.horizonWebCardsStatic$ = t.activityStreaming$ = t.activityValuePolling$ = t.trendsAndBeta$ = t.betaAndInsights$ = t.tweetdeckBeta$ = t.premiumAnalytics$ = t.newFontStack$ = t.gdprUpdates$ = t.scheduledTweetEphemeral$ = t.gdprConsent$ = t.actuallyRenderContentUserTweets$ = t.actuallyRenderContentSearchTweets$ = t.twitterTextEmojiDiscounting$ = t.unifiedImageVariants$ = t.locale$ = t.devel$ = t.dogfood$ = t.subscriptionsDebugEnabled$ = t.contentSearchEnabled$ = t.livePipelineEnabled$ = void 0, t.getStreamForLiveVideo = function() {
        return o
    };
    var s, n = i(29),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(94);
    var o = (0, a.getStreamForFeatureFlag)("tweetdeck_dogfood"),
        c = (0, a.getStreamForFeatureFlag)("tweetdeck_devel"),
        l = (0, a.getStreamForFeatureFlag)("tweetdeck_content_search_darkmode"),
        u = (0, a.getStreamForFeatureFlag)("tweetdeck_content_render_user_tweets"),
        d = (0, a.getStreamForFeatureFlag)("tweetdeck_content_render_search_tweets"),
        h = (0, a.getStreamForFeatureFlag)("tweetdeck_live_engagements"),
        m = (0, a.getStreamForFeatureFlag)("tweetdeck_locale"),
        f = (0, a.getStreamForFeatureFlag)("tweetdeck_subscriptions_debug"),
        p = (0, a.getStreamForFeatureFlag)("tweetdeck_uiv"),
        g = (0, a.getStreamForFeatureFlag)("twitter_text_emoji_counting_enabled"),
        v = (0, a.getStreamForFeatureFlag)("tweetdeck_trends_column"),
        T = (0, a.getStreamForFeatureFlag)("tweetdeck_gdpr_consent"),
        w = (0, a.getStreamForFeatureFlag)("tweetdeck_scheduled_tweet_ephemeral"),
        b = (0, a.getStreamForFeatureFlag)("tweetdeck_gdpr_updates"),
        y = (0, a.getStreamForFeatureFlag)("tweetdeck_system_font_stack"),
        C = (0, a.getStreamForFeatureFlag)("tweetdeck_premium_analytics"),
        _ = (0, a.getStreamForFeatureFlag)("tweetdeck_insights"),
        D = (0, a.getStreamForFeatureFlag)("twitter_weak_maps"),
        S = (0, a.getStreamForFeatureFlag)("tweetdeck_activity_value_polling"),
        k = (0, a.getStreamForFeatureFlag)("tweetdeck_activity_streaming"),
        E = (0, a.getStreamForFeatureFlag)("tweetdeck_horizon_web_cards_enabled"),
        I = (0, a.getStreamForFeatureFlag)("tweetdeck_horizon_web_cards_static"),
        A = r.default.Observable.zip(D, _, function(e, t) {
            return {
                betaEnabled: e,
                insightsEnabled: t
            }
        }),
        M = r.default.Observable.zip(v, D, function(e, t) {
            return {
                trendsInColumnEnabled: e,
                betaEnabled: t
            }
        });
    t.livePipelineEnabled$ = h, t.contentSearchEnabled$ = l, t.subscriptionsDebugEnabled$ = f, t.dogfood$ = o, t.devel$ = c, t.locale$ = m, t.unifiedImageVariants$ = p, t.twitterTextEmojiDiscounting$ = g, t.actuallyRenderContentSearchTweets$ = d, t.actuallyRenderContentUserTweets$ = u, t.gdprConsent$ = T, t.scheduledTweetEphemeral$ = w, t.gdprUpdates$ = b, t.newFontStack$ = y, t.premiumAnalytics$ = C, t.tweetdeckBeta$ = D, t.betaAndInsights$ = A, t.trendsAndBeta$ = M, t.activityValuePolling$ = S, t.activityStreaming$ = k, t.horizonWebCardsStatic$ = I, t.horizonWebCardsEnabled$ = E
}, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getClientByAccountKeyOrDefault = function(e) {
        return a(e) || o()
    }, t.getClientByAccountKey = a, t.getClientByAccount = function(e) {
        return t.getClientByAccountKey(e.getKey())
    }, t.getTwitterClient = o, t.getClientsByService = c, t.getClientByScreenName = function(e) {
        var t = c("twitter");
        return r.default.find(t, function(t) {
            if (t.oauth.account.getUsername().toLowerCase() === e.toLowerCase()) return t
        })
    }, t.getAccountData = function(e) {
        var t = a(e);
        if (!t) return null;
        var i = t.oauth.account;
        return {
            accountKey: e,
            id: i.getUserID(),
            screenName: i.getUsername(),
            profileImageURL: i.getProfileImageURL()
        }
    };
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };

    function a(e) {
        return e ? TD.controller.clients.getClient(e) : o()
    }

    function o() {
        return TD.controller.clients.getPreferredClient("twitter")
    }

    function c(e) {
        return TD.controller.clients.getClientsByService(e)
    }
}, , , , , , , , , , , function(e, t, i) {
    "use strict";
    var s = o(i(118)),
        n = o(i(32)),
        r = o(i(1)),
        a = o(i(0));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var c = i(29),
        l = {
            shallowEquals: function() {
                return function(e, t) {
                    try {
                        return r.default.union((0, n.default)(e), (0, n.default)(t)).every(function(i) {
                            return t[i] === e[i]
                        })
                    } catch (e) {
                        return !0
                    }
                }
            },
            existenceEquality: function(e, t) {
                return Boolean(e) === Boolean(t)
            },
            filterKeys: function(e) {
                return function(t) {
                    return e && "object" === (void 0 === t ? "undefined" : (0, s.default)(t)) ? e.reduce(function(e, i) {
                        return t.hasOwnProperty(i) && (e[i] = t[i]), e
                    }, {}) : t
                }
            },
            toDeferred: function(e) {
                var t = new TD.core.defer.Deferred;
                return e.take(1).subscribe(function(e) {
                    return t.callback(e)
                }, function(e) {
                    return t.errback(e)
                }), t
            },
            fromDeferred: function(e) {
                var t = new c.AsyncSubject;
                return e.addCallbacksWith(t, function(e) {
                    t.next(e), t.complete()
                }, t.error), t.asObservable()
            },
            makeFromDeferred: function(e, t) {
                return function() {
                    return l.fromDeferred(e.apply(t || this, arguments))
                }
            },
            fromEventOnce: function(e, t) {
                var i = new c.AsyncSubject;
                return (0, a.default)(e).one(t, function(e) {
                    i.next(e), i.complete()
                }), i.asObservable()
            }
        };
    e.exports = l
}, , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getTwitterLoginAccount = function() {
        return o(TD.storage.store.getTwitterLoginAccount())
    }, t.getDefaultAccount = function() {
        return o(TD.storage.accountController.getDefault()) || null
    }, t.setDefaultAccount = a, t.getAccount = function(e) {
        return o(TD.storage.accountController.get(e))
    }, t.getAccountFromId = function(e) {
        return o(TD.storage.accountController.getAccountFromId(e))
    }, t.removeAccount = function(e) {
        e !== t.getDefaultAccount().accountKey ? TD.controller.clients.removeClient(e) : (a(t.getTwitterLoginAccount().accountKey), TD.storage.notification.flush().addCallback(function() {
            TD.controller.clients.removeClient(e)
        }))
    }, t.getAccountsForService = function(e) {
        return c(TD.storage.accountController.getAccountsForService(e)).sort(l)
    }, t.getTwitterAccounts = function() {
        return t.getAccountsForService("twitter")
    }, t.filterAccountsWithClient = function(e) {
        return e.filter(function(e) {
            return e.hasClient
        })
    }, t.updateAccount = function(e, t) {
        var i = TD.storage.accountController.get(e);
        if (t.id !== i.getUserID()) return;
        i.setUsername(t.screenName), i.setName(t.name), i.setProfileImageURL(t.profileImageURL), i.setIsPrivate(t.isProtected), i.setUpdated((new Date).getTime())
    }, t.setIsAdmin = function(e, t) {
        TD.storage.accountController.get(e).setIsAdmin(t)
    }, t.serializeAccount = o, t.serializeAccounts = c, t.sortAccounts = l;
    var s, n = i(19),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };

    function a(e) {
        TD.storage.accountController.setDefault(e)
    }

    function o(e) {
        if (e) {
            var t = TD.storage.accountController.getDefault(),
                i = TD.storage.store.getTwitterLoginAccount();
            return {
                name: e.getName(),
                emojifiedName: r.default.cleanWithEmoji(e.getName()),
                accountKey: e.getKey(),
                profileImageURL: e.getProfileImageURL(),
                userId: e.getUserID(),
                screenName: e.getUsername(),
                isProtected: e.getIsPrivate(),
                isDefault: e === t,
                isTwoginAccount: e === i,
                isAdmin: e.getIsAdmin(),
                isContributor: e.isContributor(),
                isCookieUser: e.isCookieUser(),
                isMissingUserData: e.isMissingUserData(),
                hasClient: !!TD.controller.clients.getClient(e.getKey()),
                requireConsent: e.requiresConsent()
            }
        }
    }

    function c() {
        return (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []).filter(Boolean).map(o)
    }

    function l(e, t) {
        var i, s;
        if (TD.storage.store.getTwitterLoginAccount()) {
            if (e.isTwoginAccount) return -1;
            if (t.isTwoginAccount) return 1
        } else {
            if (e.isDefault) return -1;
            if (t.isDefault) return 1
        }
        return (i = e.screenName.toLowerCase()) < (s = t.screenName.toLowerCase()) ? -1 : i > s ? 1 : 0
    }
}, , , , , , function(e, t, i) {
    "use strict";
    var s = h(i(7)),
        n = h(i(1)),
        r = h(i(0)),
        a = h(i(69)),
        o = h(i(94)),
        c = h(i(1815)),
        l = h(i(1816)),
        u = h(i(17)),
        d = i(356);

    function h(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = TD.controller.stats = function() {
        var e, t = {},
            i = {};
        t.columnNamespaces = i, TD.util.extendObjectWith(i, [
            [u.default.columnMetaTypes.MENTIONS, {
                legacyId: 2,
                namespace: {
                    section: "twitter",
                    component: "mention"
                }
            }],
            [u.default.columnMetaTypes.FOLLOWERS, {
                legacyId: 3,
                namespace: {
                    section: "twitter",
                    component: "followers"
                }
            }],
            [u.default.columnMetaTypes.TIMELINE, {
                legacyId: 3,
                namespace: {
                    section: "twitter",
                    component: "home"
                }
            }],
            [u.default.columnMetaTypes.SEARCH, {
                legacyId: 4,
                namespace: {
                    section: "twitter",
                    component: "search"
                }
            }],
            [u.default.columnMetaTypes.MESSAGES, {
                legacyId: 5,
                namespace: {
                    section: "twitter",
                    component: "inbox"
                }
            }],
            [u.default.columnMetaTypes.FAVORITES, {
                legacyId: 8,
                namespace: {
                    section: "twitter",
                    component: "favorites"
                }
            }],
            [u.default.columnMetaTypes.LIST, {
                legacyId: 22,
                namespace: {
                    section: "twitter",
                    component: "list"
                }
            }],
            [u.default.columnMetaTypes.SCHEDULED, {
                legacyId: 28,
                namespace: {
                    section: "tweetdeck",
                    component: "scheduledupdates"
                }
            }],
            [u.default.columnMetaTypes.USERTWEETS, {
                legacyId: 32,
                namespace: {
                    section: "twitter",
                    component: "usertweets"
                }
            }],
            [u.default.columnMetaTypes.USERTIMELINE, {
                legacyId: 33,
                namespace: {
                    section: "twitter",
                    component: "usertimeline"
                }
            }],
            [u.default.columnMetaTypes.HOME, {
                legacyId: 34,
                namespace: {
                    section: "tweetdeck",
                    component: "home"
                }
            }],
            [u.default.columnMetaTypes.ME, {
                legacyId: 35,
                namespace: {
                    section: "tweetdeck",
                    component: "me"
                }
            }],
            [u.default.columnMetaTypes.INBOX, {
                legacyId: 36,
                namespace: {
                    section: "tweetdeck",
                    component: "inbox"
                }
            }],
            [u.default.columnMetaTypes.INTERACTIONS, {
                legacyId: 37,
                namespace: {
                    section: "twitter",
                    component: "interactions"
                }
            }],
            [u.default.columnMetaTypes.ACTIVITY, {
                legacyId: 38,
                namespace: {
                    section: "twitter",
                    component: "networkactivity"
                }
            }],
            [u.default.columnMetaTypes.CUSTOMTIMELINE, {
                legacyId: 39,
                namespace: {
                    section: "twitter",
                    component: "customtimeline"
                }
            }],
            [u.default.columnMetaTypes.DATAMINR, {
                legacyId: 39,
                namespace: {
                    section: "dataminr",
                    component: "watchlist"
                }
            }],
            [u.default.columnMetaTypes.LIVEVIDEO, {
                namespace: {
                    section: "twitter",
                    component: "livevideo"
                }
            }],
            [u.default.columnMetaTypes.TRENDS, {
                namespace: {
                    section: "twitter",
                    component: "trends"
                }
            }],
            [u.default.columnMetaTypes.ANALYTICS, {
                namespace: {
                    section: "twitter",
                    component: "analytics"
                }
            }],
            [u.default.columnMetaTypes.WHATSHAPPENING, {
                namespace: {
                    section: "twitter",
                    component: "whatshappening"
                }
            }],
            [u.default.columnMetaTypes.EVENT, {
                namespace: {
                    section: "twitter",
                    component: "event"
                }
            }]
        ]);
        var h, m;
        t.SCRIBE_CLIENT = "deck";
        var f = {
                config: {},
                impressions: []
            },
            p = [],
            g = (0, r.default)(document),
            v = function(e, i) {
                if (t.scribeClientEvent && t.scribeGuestId) {
                    if (e = e || {}, i = i || {}, e.client = t.SCRIBE_CLIENT, i.user_agent = h, i.guest_id = t.scribeGuestId, !i.user_id) {
                        var s = TD.storage.store.getTwitterLoginAccount() || TD.storage.accountController.getDefault();
                        s && (i.user_id = s.getUserID())
                    }
                    t.scribeClientEvent.scribe(e, i), g.trigger("scribing", {
                        terms: e,
                        data: i
                    }), TD.config.scribe_debug_level > 0 && console.log((0, d.namespaceStringFromTerms)(e)), TD.config.scribe_debug_level > 1 && console.log("Scribing:", e, i)
                } else p.push([e, i])
            };
        return t.generateScribeUserAgent = function(e, t, i, s) {
            var n = {
                client_name: e,
                client_version: t,
                platform: i,
                platform_version: s
            };
            return TD.ui.template.toHtml("Twitter-TweetDeck-{{{client_name}}}/{{{client_version}}} {{{platform}}}/{{{platform_version}}}", n)
        }, t.generateScribeGuestId = function(e, t) {
            var i = "tweetdeck:" + e + ":" + t,
                s = TD.core.sha1(i);
            return parseInt(s.substr(0, 13), 16)
        }, t.flushScribeQueue = function() {
            m && m.flush(m.getBuffer())
        }, t.updateTransportOptions = function(e) {
            m ? m.updateOptions(e) : TD.sync.util.warn("scribeTransport options not updated as controller.stats not initialised")
        }, t.init = function() {
            var i = TD.util.getAppEnv();
            e = TD.config.client_name + "-" + i, h = t.generateScribeUserAgent(e, TD.version, i, "1");
            m = new c.default({
                bufferEvents: !0,
                useAjax: !1,
                flushOnUnload: !0
            }), t.scribeClientEvent = new l.default(m), (0, o.default)().subscribe(t.setExperiments.bind(t)), TD.controller.scheduler.schedulePeriodicTask(900, function() {
                t.impression(), t.twitterSession(), TD.util.metric("ping");
                var e = TD.storage.store.getTwitterLoginAccount();
                e ? e.isCookieUser() ? TD.util.metric("ping:session:cookie") : TD.util.metric("ping:session:tweetdeck") : TD.util.metric("ping:session:none")
            }, !0), TD.controller.scheduler.schedulePeriodicTask(60, TD.controller.stats.flushScribeQueue), (0, r.default)(document).on("scribeEvent", function(e, t) {
                this.generic(t.terms, t.data)
            }.bind(this)), TD.config.scribe_debug_level > 0 && console.log("Logging scribe events! %cclient:page:section:component:element:action", "font-weight: bold;")
        }, t.setUid = function(e) {
            if (e, t.scribeGuestId = "", e) {
                for (t.scribeGuestId = t.generateScribeGuestId(h, TD.core.sha1(e)); p.length;) {
                    var i = p.shift();
                    v(i[0], i[1])
                }
                t.impression()
            }
        }, t.generic = function(e, t) {
            v(e, t)
        }, t.setExperiments = function(e) {
            f.config = e.config || {}, f.impressions = e.impressions || []
        }, t.getExperimentBucket = function(e) {
            return n.default.get(f, ["config", e, "value"], "")
        }, t.isInExperimentBucket = function(e, i) {
            return t.getExperimentBucket(e) === i
        }, t.experimentImpression = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
            t = t || this.getExperimentBucket(e);
            var i = f.impressions.find(function(i) {
                var s = i.key === e,
                    n = i.bucket === t;
                return s && n
            });
            if (i) {
                var s = {
                        page: "ddg",
                        section: i.key,
                        component: "",
                        element: "",
                        action: "experiment"
                    },
                    n = {
                        experiment_key: i.key,
                        bucket: i.bucket,
                        version: i.version
                    };
                v(s, n)
            }
        }, t.checkNamespace = function(e, t) {
            if (-1 === t.indexOf(e)) throw new Error("value must be in " + t)
        }, t.impression = function() {
            var e = function() {
                var e, t = {};
                try {
                    e = TD.storage.accountController.getPreferredAccount("twitter")
                } catch (e) {}
                return e && (t.tw = e.getUserID()), t
            }();
            e.interval = "900", e.is_touch_device = !1, TD.util.isTouchDevice() && (e.is_touch_device = !0), v({
                action: "impression",
                page: "main"
            }, e)
        }, t.twitterSession = function() {
            if ("web" === TD.util.getAppEnv()) {
                var e, t = TD.storage.store.getTwitterLoginAccount();
                if (t) {
                    var i = TD.util.getTwitterCookieUserId();
                    e = i ? i === t.getUserID() ? "same" : "different" : "none", v({
                        page: "accounts",
                        section: "twitter_session",
                        action: e
                    })
                }
            }
        }, t.heartbeat = function(e) {
            v({
                page: "main",
                action: "heartbeat"
            }, {
                user_id: e
            })
        }, t.scribeChirpAction = function(e) {
            var t = e.action,
                r = e.columnType,
                a = n.default.get(i, [r, "namespace"], null),
                o = (0, s.default)({
                    page: a ? "column" : ""
                }, a, {
                    element: t,
                    action: "click"
                });
            v(o)
        }, t.favorite = function(e, t) {
            v({
                page: "column",
                section: "tweet",
                action: "favorite"
            }, {
                items: [e],
                user_id: t
            });
            var i = {
                items: [e],
                user_id: TD.storage.store.getTwitterLoginAccount().getUserID()
            };
            v({
                page: "column",
                section: "tweet",
                action: "favorite_engagement"
            }, i)
        }, t.unfavorite = function(e, t) {
            v({
                page: "column",
                section: "tweet",
                action: "unfavorite"
            }, {
                items: [e],
                user_id: t
            })
        }, t.retweet = function(e, t) {
            v({
                page: "column",
                section: "tweet",
                action: "retweet"
            }, {
                items: [e],
                user_id: t
            });
            var i = {
                items: [e],
                user_id: TD.storage.store.getTwitterLoginAccount().getUserID()
            };
            v({
                page: "column",
                section: "tweet",
                action: "retweet_engagement"
            }, i)
        }, t.embedTweetDialogOpen = function(e) {
            var t = {};
            t.twid = e, v({
                page: "main",
                section: "embed_tweet_dialog",
                action: "open"
            }, t)
        }, t.translate = function(e, t, i, s, n) {
            var r = {};
            r.oid = e, r.twid = t, r.tw = i, r.dest_lang = s, r.src_lang = n, v({
                page: "column",
                section: "tweet",
                action: "translate"
            }, r)
        }, t.reportUser = function(e, t) {
            v({
                page: "column",
                section: "tweet",
                component: "report_user",
                element: t || "",
                action: e
            })
        }, t.reportUserAbusive = function(e, t) {
            v({
                page: "column",
                section: "tweet",
                component: "report_user_abusive",
                element: t || "",
                action: e
            })
        }, t.reportDM = function(e) {
            v({
                page: "column",
                section: "tweet",
                component: "report_message",
                element: "",
                action: e
            })
        }, t.sharedAccountWarning = function(e) {
            v({
                page: "main",
                section: "shared_account_warning",
                action: e
            })
        }, t._genericColumnEvent = function(e, t, s) {
            var r = i[e],
                a = {
                    page: "column",
                    section: "unknown",
                    component: "unknown",
                    action: t
                };
            s && (a.element = s), r && r.namespace ? n.default.extend(a, r.namespace) : console.log("Tracking: Unknown column type", e), v(a)
        }, t.addColumn = function(e) {
            t._genericColumnEvent(e, "add")
        }, t.removeColumn = function(e) {
            t._genericColumnEvent(e, "remove")
        }, t.compose = function(e) {
            var t = {
                    page: (e = e || {}).page || "compose",
                    section: e.section,
                    component: e.component,
                    action: e.action
                },
                i = {
                    with_image: Boolean(e.withImage),
                    with_gif: Boolean(e.withGIF),
                    with_video: Boolean(e.withVideo),
                    scheduled: Boolean(e.isScheduled)
                };
            e.twitterId && (i.user_id = e.twitterId), e.isScheduled && (t.action += "_scheduled"), v(t, i)
        }, t.editScheduledTweet = function() {
            v({
                page: "main",
                section: "compose",
                element: "tweet",
                action: "edit"
            })
        }, t.deleteScheduledTweet = function() {
            v({
                page: "main",
                section: "compose",
                element: "tweet",
                action: "delete"
            })
        }, t.postTweet = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            t.compose({
                action: "send_tweet",
                twitterId: e.twitterId,
                withImage: e.withImage,
                withVideo: e.withVideo,
                withGIF: e.withGIF,
                isScheduled: e.isScheduled
            })
        }, t.postReply = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            t.compose({
                action: "send_reply",
                component: e.inline ? "inline_compose" : "docked_compose",
                twitterId: e.twitterId,
                withImage: e.withImage,
                withGIF: e.withGIF,
                withVideo: e.withVideo,
                isScheduled: e.isScheduled
            });
            var i = {
                    component: e.inline ? "inline_compose" : "docked_compose",
                    action: "reply_engagement",
                    page: "compose"
                },
                s = {
                    user_id: TD.storage.store.getTwitterLoginAccount().getUserID()
                };
            v(i, s)
        }, t.composeFromContextMenu = function(e) {
            v({
                page: "compose",
                component: "docked_compose",
                element: "chrome_context_menu",
                action: e
            })
        }, t.postMessage = function(e) {
            var i = {
                action: e.isGroupDm ? "send_group_dm" : "send_dm",
                twitterId: e.twitterId,
                withImage: e.withImage,
                component: "docked_compose"
            };
            e.isReplyBar && (i.page = "main", i.section = "messages", i.component = "reply_bar"), t.compose(i)
        }, t.quoteTweet = function() {
            v({
                page: "main",
                section: "tweet",
                element: "tweet",
                action: "quote"
            })
        }, t.discardQuoteTweet = function() {
            v({
                page: "main",
                section: "compose",
                element: "tweet",
                action: "discard_quote_tweet"
            })
        }, t.shareTweetViaDM = function() {
            v({
                page: "main",
                section: "tweet",
                element: "send_tweet_dm",
                action: "click"
            })
        }, t.sharedTweetDM = function() {
            v({
                page: "main",
                section: "messages",
                element: "shared_tweet_dm",
                action: "click"
            })
        }, t.composeClearReply = function() {
            v({
                page: "compose",
                action: "clear_reply"
            })
        }, t.composeStackReply = function() {
            v({
                page: "compose",
                action: "stack_reply"
            })
        }, t.composePopFromInline = function() {
            v({
                page: "compose",
                component: "inline_compose",
                element: "pop_inline_to_docked",
                action: "click"
            })
        }, t.messageBannerImpression = function(e) {
            v({
                page: "main",
                section: "message_banner",
                action: "impression"
            }, {
                message_id: e
            })
        }, t.messageBannerDismiss = function(e) {
            v({
                page: "main",
                section: "message_banner",
                action: "dismiss"
            }, {
                message_id: e
            })
        }, t.messageBannerClick = function(e, t) {
            v({
                page: "main",
                section: "message_banner",
                action: "click"
            }, {
                message_id: e,
                button_id: t
            })
        }, t.searchboxFocus = function() {
            v({
                page: "main",
                component: "search_box",
                action: "focus_field"
            })
        }, t.searchboxPerformSearch = function(e) {
            v({
                page: "main",
                component: "search_box",
                action: "search"
            }, {
                query: e
            })
        }, t.typeaheadItemSelected = function(e, t, i) {
            v({
                page: "main",
                component: "search_box",
                element: "typeahead",
                action: "search"
            }, {
                query: e,
                type: t,
                index: i
            })
        }, t.typeaheadRecentItemSelected = function(e, t, i) {
            v({
                page: "main",
                component: "search_box",
                element: "recent",
                action: "search"
            }, {
                query: e,
                type: t,
                index: i
            })
        }, t.viewedTweetSocialProof = function(e) {
            var t = {
                page: "column",
                section: "social_proof",
                component: e,
                action: "impression"
            };
            switch (e) {
                case "retweeters":
                    t.component = "retweeted_by";
                    break;
                case "favoriters":
                    t.component = "favorited_by";
                    break;
                case "repliers":
                    t.component = "replied_by";
                    break;
                default:
                    throw new Error("Social proof type “" + e + "” not recognised")
            }
            v(t)
        }, t.setting = function(e, t) {
            var i = {
                page: "settings",
                section: e
            };
            n.default.isBoolean(t) ? i.action = t ? "on" : "off" : (i.component = {
                condensed: "narrow",
                "full-size": "wide"
            } [t] || t, i.action = "select"), v(i)
        }, t.defaultAccountSelected = function() {
            v({
                page: "settings",
                section: "default_account",
                action: "select"
            })
        }, t.apiErrorResponse = function(e, t, i) {
            var s = {
                status_code: e
            };
            TD.util.random(0, 99) < 10 && (t && (s.event_info = t), i && (s.url = i), v({
                page: "api",
                action: "request"
            }, s))
        }, t.advancedSearchSettings = function(e, t, i, s) {
            var n = {
                    section: {},
                    component: {
                        action: "interactions"
                    },
                    element: {
                        written_in: "language"
                    }
                },
                r = {
                    page: "main",
                    section: n.section[e] || e,
                    component: n.component[t] || t,
                    element: n.element[i] || i,
                    action: "change"
                };
            v(r, {
                value: s
            })
        }, t.columnHeaderSearchUpdate = function(e) {
            v({
                page: "main",
                section: "column_header",
                component: "content",
                element: "matching",
                action: "change"
            }, {
                value: e
            })
        }, t.actionFilterError = function() {
            v({
                page: "main",
                section: "column_options",
                component: "interactions",
                action: "validation_error"
            }, {
                error: "No interaction types selected"
            })
        }, t.columnActionClick = function(e, t) {
            var s = {
                page: "main",
                section: "column_options",
                element: e,
                action: "click"
            };
            if (t && i[t.type]) {
                var n = i[t.type].namespace.component;
                n && (s.component = n)
            }
            v(s, t = t || {})
        }, t.conversationDetailViewImpression = function(e) {
            v({
                page: "main",
                section: "messages",
                component: "conversation",
                element: e,
                action: "impression"
            })
        }, t.messagesColumnHeaderClick = function(e) {
            v({
                page: "main",
                section: "messages",
                component: "header",
                element: e,
                action: "click"
            })
        }, t.messageAttachmentClick = function(e) {
            v({
                page: "main",
                section: "messages",
                component: "message",
                element: e,
                action: "click"
            })
        }, t.navbarListsClick = function() {
            v({
                page: "main",
                section: "navbar",
                element: "lists",
                action: "click"
            })
        }, t.navbarAddColumnClick = function() {
            v({
                page: "main",
                section: "navbar",
                element: "add_column",
                action: "click"
            })
        }, t.navbarPageLeft = function() {
            v({
                page: "main",
                section: "navbar",
                component: "column_nav",
                element: "page_left",
                action: "click"
            })
        }, t.navbarReorderColumns = function() {
            v({
                page: "main",
                section: "navbar",
                component: "column_nav",
                action: "reorder"
            })
        }, t.navbarJumpToColumn = function() {
            v({
                page: "main",
                section: "navbar",
                component: "column_nav",
                element: "column_item",
                action: "click"
            })
        }, t.navbarPageRight = function() {
            v({
                page: "main",
                section: "navbar",
                component: "column_nav",
                element: "page_right",
                action: "click"
            })
        }, t.navbarSettingsClick = function() {
            v({
                page: "main",
                section: "navbar",
                element: "settings",
                action: "click"
            })
        }, t.navbarMigrate = function(e) {
            var t = ["impression", "click"];
            if (-1 === t.indexOf(e)) throw new Error("action must be in " + t);
            v({
                page: "main",
                section: "navbar",
                element: "migrate",
                action: e
            })
        }, t.navbarComposeClick = function() {
            v({
                page: "main",
                section: "navbar",
                element: "compose",
                action: "click"
            })
        }, t.tweetStreamImpression = function(e, t, i) {
            if (!(t.length < 1)) {
                var s = {
                    component: "stream",
                    action: "results"
                };
                i && (s.element = "linger");
                var r = {
                        items: t
                    },
                    a = u.default.columnMetaTypeToScribeNamespace[e];
                a && (s = n.default.extend(s, a), v(s, r))
            }
        }, t.tweetImpression = function(e) {
            v({
                page: "tweet",
                component: "tweet",
                action: "impression"
            }, {
                items: [e]
            })
        }, t.mediaImpression = function(e) {
            v({
                page: "tweet",
                component: "gallery",
                element: "photo",
                action: "impression"
            }, {
                items: [e]
            })
        }, t.ownTweetDetailImpression = function(e) {
            v({
                page: "main",
                section: "detail",
                component: "own_tweet",
                action: "impression"
            }, {
                items: [e]
            })
        }, t.appWokenFromSleep = function(e) {
            v({
                page: "main",
                action: "wake"
            }, {
                custom_json_payload: {
                    msSinceSleep: e
                }
            })
        }, t.purgedFeed = function(e) {
            v({
                page: "main",
                section: "feed",
                action: "remove"
            }, e)
        }, t.newListClick = function() {
            v({
                page: "add_column",
                component: "list",
                element: "create_list_button",
                action: "click"
            })
        }, t.listCreated = function() {
            v({
                page: "main",
                component: "list",
                action: "create"
            })
        }, t.listUpdated = function() {
            v({
                page: "main",
                component: "list",
                action: "update"
            })
        }, t.listDeleted = function() {
            v({
                page: "main",
                component: "list",
                action: "delete"
            })
        }, t.newCustomtimelineClick = function() {
            v({
                page: "add_column",
                component: "customtimeline",
                element: "create_customtimeline_button",
                action: "click"
            })
        }, t.customTimelineCreated = function() {
            v({
                page: "main",
                component: "customtimeline",
                action: "create"
            })
        }, t.customTimelineUpdated = function() {
            v({
                page: "main",
                component: "customtimeline",
                action: "update"
            })
        }, t.customTimelineDeleted = function() {
            v({
                page: "main",
                component: "customtimeline",
                action: "delete"
            })
        }, t.tweetAddedOrMovedToCustomTimeline = function(e) {
            v({
                page: "main",
                component: "customtimeline",
                element: "tweet",
                action: e
            })
        }, t.tweetRemovedFromCustomTimeline = function() {
            v({
                page: "main",
                component: "customtimeline",
                element: "tweet",
                action: "remove"
            })
        }, t.migrateAppflow = function(e, i) {
            t.checkNamespace(e, ["migrate_education", "migrate_risk", "migrate_risk_agreement", "migrate_teams", "migrate_team_instructions", "migrate_team_member"]), t.checkNamespace(i, ["impression", "previous", "cancel", "next", "ok"]), v({
                page: "startflow",
                section: e,
                action: i
            })
        }, t.migrateStartflow = function(e, i, s) {
            t.checkNamespace(e, ["migrate_tweetdeck_login", "migrate_twitter_login", "migrate_final_confirmation", "migrate_progress", "migrate_progress_success", "migrate_progress_team_setup"]), t.checkNamespace(i, ["impression", "previous", "cancel", "next", "restart"]), v({
                page: "startflow",
                section: e,
                element: s ? "error" : void 0,
                action: i
            })
        }, t.dataminrAuthRequest = function() {
            v({
                page: "api",
                section: "dataminr",
                element: "authorize",
                action: "request"
            })
        }, t.dataminrApiRequest = function(e) {
            t.checkNamespace(e, ["alerts", "watchlists"]), v({
                page: "api",
                section: "dataminr",
                element: e,
                action: "request"
            })
        }, t.dataminrClickImpression = function(e, i) {
            t.checkNamespace(i, ["show_followers", "show_following", "website", "map", "dataminr_settings", "user_media", "dataminr", "search", "search_any", "search_all", "hashtag"]), t.checkNamespace(e, ["dataminr_alert", "dataminr_alert_detail"]), v({
                page: "main",
                section: e,
                element: i,
                action: "click"
            })
        }, t.loginError = function(e) {
            v({
                page: "login",
                action: "login_error"
            }, {
                message: e
            })
        }, t.getElementNamespace = function(e) {
            var i = (0, r.default)(e),
                a = u.default.getColumnFromElement(i),
                o = a ? u.default.getColumnType(a) : "",
                c = n.default.get(t.columnNamespaces, [o, "namespace"], null);
            return c ? (0, s.default)({
                page: "column"
            }, c) : i.closest(".js-user-results").length > 0 ? {
                page: "main",
                section: "search_results",
                component: "users"
            } : void 0
        }, t.linkClick = function(e, i) {
            var n = "twitter.com" === (0, a.default)(e).domain().toLowerCase();
            v({
                page: "main",
                section: "link",
                component: n ? "twitter" : void 0,
                action: "click"
            });
            var r = TD.util.extractTweetIdFromPermalink(e);
            if (Boolean(r)) {
                var o = t.getElementNamespace(i);
                v((0, s.default)({}, o, {
                    element: "permalink",
                    action: "click"
                }))
            }
        }, t
    }()
}, , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    var s = i(5).component,
        n = i(96),
        r = i(53),
        a = i(37);
    e.exports = s(function() {}, r, a, n)
}, , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = u(i(7));
    t.startPollingForSettings = function() {
        m.next(), m.complete()
    }, t.default = T, t.getStreamForFeatureFlag = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        return (t = (0, s.default)({
            defaultValue: !1,
            settingsObservable: T()
        }, t)).settingsObservable.map(function(i) {
            return r.default.get(i, ["config", e, "value"], t.defaultValue)
        }).distinctUntilChanged()
    }, t.injectOverrides = w;
    var n = u(i(0)),
        r = u(i(1)),
        a = u(i(29)),
        o = u(i(69)),
        c = u(i(49)),
        l = u(i(107));

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var d = "",
        h = (0, o.default)(window.location.href).search(!0).no_dogfood,
        m = new a.default.Subject,
        f = a.default.Observable.combineLatest(m, a.default.Observable.timer(0, 3e5)).flatMap(function() {
            return c.default.fromDeferred((e = [TD.config.twitter_api_base, "/", TD.config.twitter_api_version, "/help/settings.json"].join(""), l.default.request(e, {
                params: {
                    settings_version: d
                }
            }))).catch(function(e) {
                return a.default.Observable.empty()
            });
            var e
        }).pluck("data").filter(Boolean).do(function(e) {
            d = r.default.get(e, "versions.settings", "")
        }).startWith({}).publishReplay(1).refCount(),
        p = f.mapTo(!0),
        g = a.default.Observable.fromEvent((0, n.default)(document), "debugRetriggerTwitterSettings").mapTo(!0),
        v = a.default.Observable.merge(p, g).mergeMap(function() {
            return f.take(1)
        }).map(w);

    function T() {
        return v
    }

    function w() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            t = r.default.get(window, "TD.config.config_overlay", {});
        return (0, s.default)({}, e, {
            config: (0, s.default)({}, e.config, t, h ? {
                tweetdeck_devel: {
                    value: !1
                },
                tweetdeck_dogfood: {
                    value: !1
                }
            } : {})
        })
    }
}, , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    var s = d(i(83)),
        n = d(i(47)),
        r = d(i(7)),
        a = d(i(1)),
        o = d(i(0)),
        c = d(i(95)),
        l = d(i(1532)),
        u = d(i(335));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = function() {
        var e = {},
            t = {
                isContributor: function() {
                    return !1
                },
                isCookieUser: function() {
                    return !0
                }
            };

        function i(e) {
            return e.isContributor() && TD.storage.store.getTwitterLoginAccount() || e
        }

        function d(e, t) {
            return t.isContributor() ? (0, r.default)({}, e, {
                "x-act-as-user-id": t.getUserID()
            }) : e
        }

        function h(e) {
            var t = {};
            t.Authorization = TD.util.getBearerTokenAuthHeader(), t["X-Twitter-Auth-Type"] = "OAuth2Session";
            var i = TD.util.getCsrfTokenHeader();
            return i && (t["X-Csrf-Token"] = i), a.default.extend({}, e, t)
        }

        function m(e, t) {
            return [d, function(e, t) {
                var s = i(t);
                return (0, r.default)({}, e, {
                    "x-td-oauth-key": s.getOAuthToken(),
                    "x-td-oauth-secret": s.getTokenSecret()
                })
            }].reduce(function(e, i) {
                return i(e, t)
            }, e)
        }

        function f(e) {
            return "" === e ? null : o.default.parseJSON(e)
        }

        function p(e) {
            return function() {
                var t = [].slice.call(arguments),
                    i = e.apply(this, t);
                return i.addErrback(function(i) {
                    return 403 === i.number && i.req && i.req.responseJSON && i.req.responseJSON.errors && i.req.responseJSON.errors[0] && 353 === i.req.responseJSON.errors[0].code ? (TD.util.metric("api:request:missing-csrf"), e.apply(this, t)) : i
                }), i
            }
        }
        e.maybeAddContributorsHeaders = d;
        var g, v, T = .5;

        function w(e) {
            return new Response(e.responseText, {
                status: e.status,
                statusText: e.statusText
            })
        }
        return e.sendRequest = u.default.deDupeDeferred(function(e) {
            return function(t, i, s, n, r) {
                var a = [].slice.call(arguments),
                    o = e.apply(this, a);
                return o.addErrback(TD.util.effect(function(e) {
                    if (e.req) {
                        var t = TD.decider.get("sample_failed_requests"),
                            i = TD.decider.get("dev_sample_all_failed_requests"),
                            s = Math.random() < T / 100;
                        t && (s || i) && (TD.controller.stats.generic({
                            page: "api",
                            action: "failure"
                        }, {
                            custom_json_payload: TD.net.util.getFailureScribePayload(e)
                        }), TD.util.metric("api:request:failure:scribe"))
                    }
                })), o
            }
        }(function(e, t, i, s, r) {
            if (TD.decider.get("disable_ajax_" + e.toLowerCase())) return TD.core.defer.fail(new Error("Network is disabled"));
            var c, l, u = !1,
                d = new TD.core.defer.Deferred(function() {
                    u = !0, c.abort()
                }),
                h = {
                    url: t,
                    global: !1,
                    type: e,
                    dataType: "text json",
                    converters: {
                        "text json": f
                    }
                };
            r && a.default.extend(h, r);
            i = a.default.defaults(i || {}, {
                "X-Twitter-Client-Version": TD.util.getTweetDeckUserAgentString()
            }), ("LOCAL" === TD.buildID || TD.config.internal_build || TD.decider.get("force_zipkin_header")) && t.indexOf("twitter.com") > -1 && (i["X-B3-Flags"] = 1);
            h.beforeSend = function(e) {
                var t = !1;
                if (a.default.each(i, function(i, s) {
                        var n = s.toLowerCase();
                        "content-type" !== n && e.setRequestHeader(s, i), TD.decider.get("disable_contributed_requests") && "x-act-as-user-id" === n && (t = !0)
                    }), t) return !1
            }, s && (h.data = s);
            (l = i["Content-Type"] || i["content-type"]) && (h.contentType = l, "application/json" === l && (h.data = (0, n.default)(h.data)));
            return h.tweetdeck = {
                headers: i,
                settings: r
            }, (c = o.default.ajax(h)).done(function(e, t, i) {
                d.callback({
                    data: e,
                    xhr: i
                })
            }), c.complete(function(e, t) {
                var s = e.getResponseHeader("X-Acted-As-User-Id"),
                    n = a.default.find(i, function(e, t) {
                        if ("x-act-as-user-id" == t.toLowerCase()) return e
                    });
                n && (s ? n !== s && (0, o.default)(document).trigger("metric", {
                    key: "auth:contributors:actedasheader:unmatched"
                }) : (0, o.default)(document).trigger("metric", {
                    key: "auth:contributors:actedasheader:missing"
                }))
            }), c.fail(function(e, t, i) {
                u ? d.errback(new TD.core.defer.CancelledError(e, "abort")) : d.errback(new TD.core.defer.XMLHttpRequestError(e, i, h))
            }), d
        }), function(e, t, i, s, n) {
            if (!TD.decider.get("prevent_duplicate_ajax_requests")) return TD.util.metric("api:request:duplicate:allowed"), u.default.DO_THING_ANYWAY;
            TD.util.metric("api:request:duplicate:prevented")
        }), e.jsonp = function(t, i) {
            return e.sendRequest("GET", t, {}, i, {
                dataType: "jsonp",
                timeout: 1e4
            })
        }, e.upload = function(t, i) {
            return TD.decider.hasAccessLevel("mediaUpload", "USE_SRU") ? function(e, t) {
                var i = h(d({}, t)),
                    s = TD.config.twitter_upload_base + "/1.1/media/upload.json",
                    n = new l.default(e, {
                        uploadUrl: s,
                        sruHeaders: i
                    }),
                    a = new TD.core.defer.Deferred(function() {
                        n.cancel(), (0, o.default)(document).trigger("videoUploadCancel", {
                            userId: t.getUserID()
                        })
                    }),
                    u = (0, c.default)("image/gif" === e.type, function() {
                        return {
                            extraInitParams: "&media_category=tweet_gif"
                        }
                    }, {});
                "video/mp4" === e.type ? n.upload((0, r.default)({}, u, {
                    success: a.callback.bind(a),
                    error: a.errback.bind(a),
                    progress: function(e, i) {
                        (0, o.default)(document).trigger("videoUploadProgress", {
                            percent: e,
                            mode: i,
                            userId: t.getUserID()
                        })
                    }
                })) : n.upload((0, r.default)({}, u, {
                    success: a.callback.bind(a),
                    error: a.errback.bind(a)
                }));
                return a.addCallbacks(TD.util.effect(function(e) {
                    (0, o.default)(document).trigger("dataApiResponse", {
                        url: s,
                        contributed: t.isContributor(),
                        status: 200
                    })
                }), TD.util.effect(function(e) {
                    (0, o.default)(document).trigger("dataApiResponse", {
                        url: s,
                        contributed: t.isContributor(),
                        status: 400
                    })
                })), a
            }(t, i) : function(t, i) {
                var s = h(d({}, i)),
                    n = new FormData;
                n.append("media", t);
                var r = TD.config.twitter_upload_base + "/1.1/media/upload.json",
                    a = e.sendRequest("POST", r, s, n, {
                        timeout: 12e4,
                        processData: !1,
                        contentType: !1,
                        xhrFields: {
                            withCredentials: !0
                        }
                    });
                return a.addCallback(function(e) {
                    if ((e = e || {}).data = e.data || {}, "string" != typeof e.data.media_id_string) throw new Error("Upload response missing media_id_string.");
                    return e.data.media_id_string
                }), a
            }(t, i)
        }, e.signRequest = function(t, i, s, n, r) {
            r = m(r || {}, t), "GET" === s && (r["x-td-oauth-no-redirect"] = !0);
            var a = function(e, t, i) {
                var s = TD.config.api_root + "/oauth/" + t;
                return s += "/" + i.getType() + "/", s += encodeURIComponent(e)
            }(i, "sign", t);
            return e.sendRequest(s, a, r, n)
        }, e.checkCookie = function() {
            var t = TD.storage.store.getTwitterLoginAccount();
            if (!t) return TD.core.defer.succeed();
            var i = t.getUserID();
            return e.getCookieId().addCallback(function(e) {
                var t = TD.core.defer.succeed();
                return e !== i && (t = TD.core.defer.fail(new Error("Cookie does not match expected account")), (0, o.default)(document).trigger("dataTwitterAccountAccessDenied", {
                    account: TD.storage.accountController.getCookieAccount(),
                    isLoginAccount: !0
                })), t
            })
        }, e.getCookieId = function(t) {
            var i = TD.util.getTwitterCookieUserId();
            return i ? (TD.util.metric("api:cookie:id:used-twid"), TD.core.defer.succeed("" + i)) : (TD.util.metric("api:cookie:id:twid-missing"), e.getCookieUser(t).addCallback(function(e) {
                return TD.util.metric("api:cookie:id:used-verify"), e.data.id_str
            }).addErrback(TD.util.effect(function() {
                TD.util.metric("api:cookie:id:failed-verify")
            })))
        }, e.getCookieUser = (v = 0, p(function(t) {
            return !(t = t || {}).skipCache && Date.now() - v < 3e5 ? (TD.util.metric("api:cookie:verify:cache:hit"), TD.core.defer.succeed(g)) : (TD.util.metric("api:cookie:verify:cache:" + (t.skipCache ? "skip" : "miss")), e.verifyCredentials().addCallback(TD.util.effect(function(e) {
                v = Date.now(), g = e
            })))
        })), e.verifyCredentials = function() {
            return e.sendRequest("GET", TD.config.twitter_api_base + "/1.1/account/verify_credentials.json", h({}), {}, {
                xhrFields: {
                    withCredentials: !0
                }
            })
        }, e.buildRequest = function(t) {
            "GET" !== t.method && "DELETE" !== t.method || (t.url = TD.net.util.addURLParameters(t.url, t.params), delete t.params), t.body = t.params;
            var s = d(t.headers, t.account);
            if (i(t.account).isCookieUser()) return e.checkCookie().addCallback(a.default.constant({
                method: t.method,
                url: t.url,
                headers: h(s),
                body: t.body,
                settings: a.default.assign({}, t.settings, {
                    xhrFields: {
                        withCredentials: !0
                    }
                })
            }));
            var n = e.signRequest(t.account, t.url, t.method, t.body, t.headers);
            return n.addCallback(function(e) {
                var i = e.data,
                    n = a.default.extend({}, i.headers, s);
                return {
                    method: t.method,
                    url: t.url,
                    headers: n,
                    body: t.body,
                    settings: t.settings
                }
            }), n
        }, e.request = p(function(i, s) {
            var n = a.default.defaults(s || {}, {
                    url: i,
                    method: "GET",
                    headers: {},
                    params: {},
                    account: t,
                    settings: {}
                }),
                r = Date.now(),
                c = e.buildRequest(n);
            return c.addCallback(function(t) {
                return e.sendRequest(t.method, t.url, t.headers, t.body, t.settings)
            }), c.addBoth(TD.util.effect(function(e) {
                if (TD.decider.get("disable_api_stats") || (0, o.default)(document).trigger("dataApiResponse", {
                        url: i,
                        contributed: n.account.isContributor(),
                        status: TD.util.getXhrStatusFromSendRequestResult(e)
                    }), !TD.decider.get("disable_request_timing_metrics")) {
                    var t = Date.now() - r;
                    TD.util.metric("api:request:time:cors", [t], "metric")
                }
            })), c
        }), e.fetched = function(i) {
            var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                method: "GET",
                headers: {},
                params: {},
                account: t
            };
            return new s.default(function(t) {
                e.request(i, n).addCallbacks(function(e) {
                    return t(w(e.xhr))
                }, function(e) {
                    return t(w(e.req))
                })
            })
        }, e.promised = function(e) {
            var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                method: "GET",
                headers: {},
                params: {},
                account: t
            };
            return new s.default(function(t, s) {
                TD.net.ajax.request(e, i).addCallbacks(t, s)
            })
        }, e.graphqlRequest = function(t, i) {
            var r = t.query,
                a = t.queryId,
                o = t.variables,
                c = TD.config.twitter_api_base + "/graphql";
            return e.fetched(c, {
                method: "POST",
                headers: {
                    "content-type": "application/json"
                },
                params: {
                    query: r,
                    queryId: a,
                    variables: (0, n.default)(o)
                },
                account: i
            }).then(function(e) {
                return e.ok ? e.json().then(function(e) {
                    return e.errors && e.errors.forEach(function(e) {
                        var t = [e.code, e.kind, e.source].map(function(e) {
                            return null != e ? e : ""
                        }).join(":");
                        TD.util.metric("graphql:error:" + a + ":" + t)
                    }), e
                }) : (TD.util.metric("graphql:response-error:" + a + ":" + e.status), s.default.reject(e))
            })
        }, e
    }()
}, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.MATCH_DELIMITER = void 0;
    var s = a(i(43));
    t.query = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
        return o.query(e)
    }, t.makeCommandBag = l, t.flightWithCommands = function() {
        this.before("initialize", function() {
            this._commandBag = l()
        }), this.before("teardown", function() {
            this._commandBag.removeAll()
        }), this.addCommands = function(e) {
            this._commandBag.add(e)
        }, this.removeCommands = function(e) {
            this._commandBag.remove(e)
        }, this.removeAllCommands = function() {
            this._commandBag.removeAll()
        }
    };
    var n = a(i(1)),
        r = a(i(1802));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = d();
    o.add([{
        label: "Show help",
        apply: function() {
            return window.open("https://support.twitter.com/articles/20169620")
        }
    }]);
    var c = t.MATCH_DELIMITER = "<>>BANAN∆ANA¬NA!!!™•";

    function l() {
        return d(o)
    }

    function u(e) {
        return "string" == typeof e.label && "function" == typeof e.apply
    }

    function d() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
            t = [];
        return {
            add: function() {
                var i = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []).filter(u);
                e && e.add(i), t = [].concat((0, s.default)(t), (0, s.default)(i)), t = n.default.sortBy(t, function(e) {
                    return e.label.toLowerCase()
                })
            },
            remove: function() {
                var i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                e && e.remove(i), t = n.default.difference(t, i)
            },
            removeAll: function() {
                e && e.remove(t), t = []
            },
            query: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
                    i = t.filter(function(e) {
                        return !e.canApply || e.canApply()
                    });
                return (e ? r.default.filter(i, e, {
                    key: "label"
                }) : i).map(function(t) {
                    var i = t.label + " ";
                    return {
                        original: t,
                        string: (e ? r.default.wrap(i, e, {
                            wrap: {
                                tagOpen: c,
                                tagClose: c
                            }
                        }) : t.label).trim()
                    }
                })
            }
        }
    }
    window.cmd = t
}, function(e, t, i) {
    "use strict";
    var s = a(i(1)),
        n = a(i(0)),
        r = i(189);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = function() {
        this.measureElementHeight = function(e, t) {
            var i = (0, n.default)(e);
            return i.removeClass(t), i.height()
        }, this.animateHeight = function(e, t, i, s) {
            var n, r, a = this.measureElementHeight(e, t);
            "expand" === s ? (n = 0, r = a) : (n = a, r = 0), this.animateHeightFromTo(e, n, r, t, function() {
                "function" == typeof i && i();
                "collapse" === s && e.css("height", "")
            })
        }, this.animateHeightFromTo = function(e, t, i, n, a) {
            var o = function() {
                e.removeClass(n), e.css("height", ""), e.trigger("uiTransitionExpandEnd"), "function" == typeof a && a()
            };
            t !== i ? (e.css({
                height: t
            }), s.default.defer(function() {
                e.addClass(n), e.trigger("uiTransitionExpandStart", {
                    delta: i - t
                }), e.one(r.TRANSITION_END, o), e.height(i)
            })) : a && a()
        }, this.animateElementContentHeight = function(e, t, i, s) {
            this.animateElementHeightChange(e, function() {
                e.html(t)
            }, i, s)
        }, this.animateElementHeightChange = function(e, t, i, s) {
            var n, r = this.measureElementHeight(e, i);
            e.css({
                height: ""
            }), t(), n = this.measureElementHeight(e), this.animateHeightFromTo(e, r, n, i, s)
        }, this.deferredAnimateElementHeightChange = function(e, t, i) {
            i = s.default.defaults(i || {}, {
                isAnimatingClass: ""
            });
            var n = new TD.core.defer.Deferred;
            return this.animateElementHeightChange(e, t, i.isAnimatingClass, n.callback.bind(n)), n
        }, this.transitionExpand = function(e, t, i) {
            this.animateHeight(e, t, i, "expand")
        }, this.transitionCollapse = function(e, t, i) {
            this.animateHeight(e, t, i, "collapse")
        }, this.transitionTop = function(e, t, i, s) {
            e.addClass(t), e.one(r.TRANSITION_END, function() {
                e.removeClass(t), "function" == typeof s && s()
            }), e.css("top", i)
        }, this.addAnimateClass = function(e, t, i) {
            i = i || function() {}, e.one(r.ANIMATION_END, function() {
                e.removeClass(t), i()
            }), e.addClass(t)
        }, this.stopAnimation = function(e, t) {
            e.off(r.ANIMATION_END), e.removeClass(t)
        }
    }
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = r(i(7));
    t.isAllowedLegacyCard = o, t.isStaticCard = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return n.default.get(a[e.name], "staticView", !1)
    }, t.hasPoll = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return Boolean(o(e) && e.name.match(/poll[2-4]choice_text_only/))
    }, t.convertCardFromGraphQL = function(e) {
        var t = e.binding_values.reduce(function(e, t) {
            return e[t.key] = t.value, e
        }, {});
        return (0, s.default)({}, e, {
            binding_values: t
        })
    }, t.isAllowedCardForTrendsColumn = function(e) {
        return "3260518932:moment" === e
    }, t.isUsingHorizonWebCards = function() {
        return c.length > 0
    };
    var n = r(i(1));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = {
        "3260518932:moment": {},
        poll2choice_text_only: {},
        poll3choice_text_only: {},
        poll4choice_text_only: {},
        summary: {},
        summary_large_image: {},
        "3691233323:periscope_broadcast": {
            staticView: !0
        },
        audio: {
            staticView: !0
        },
        player: {
            staticView: !0
        },
        "745291183405076480:live_event": {
            staticView: !0
        },
        "745291183405076480:live_video": {
            staticView: !0
        }
    };

    function o() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return Boolean(a[e.name])
    }
    var c = [];
    i(36).horizonWebCardsEnabled$.subscribe(function(e) {
        return c = e
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getFormattedDateTime = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            t = e.fullMonth ? "MMMM" : "MMM";
        return (0, r.default)(e.time).format("h:mm A [·] ddd D " + t + " YYYY")
    }, t.convertDateToSeconds = function(e) {
        e || (e = new Date);
        return Math.round(e.getTime() / 1e3)
    }, t.daysAgoInSeconds = a, t.daysAgoInMilliseconds = function(e) {
        return 1e3 * a(e)
    }, t.hoursAgoInMilliseconds = function(e) {
        if (e < 0 || "number" != typeof e) return;
        return 60 * e * 60 * 1e3
    };
    var s, n = i(70),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };

    function a(e) {
        return e < 0 || "number" != typeof e ? 0 : 24 * e * 60 * 60
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(1896);
    e.exports = function() {
        this.showModal = function(e, t, i) {
            if (!e || "function" != typeof e || "function" != typeof e.attachTo) throw new TypeError("Component must be a constructor and have an attachTo method.");
            (t = t || {}).isModal = !0, t.isNonDismissible = !!i.withNonDismissible, i = r.default.defaults(i || {}, {
                id: r.default.uniqueId("modal")
            }), this.boundHandleModalContext = this.handleModalContext.bind(this, e, t, i), this.on(document, "uiModalContext", this.boundHandleModalContext), this.trigger("uiNeedsModalContext", i)
        }, this.handleModalContext = function(e, t, i, s, n) {
            n.id === i.id && (this.off(document, "uiModalContext", this.boundHandleModalContext), n.$node && e.mixin(a).attachTo(n.$node, t))
        }
    }
}, , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    var s = r(i(83)),
        n = r(i(3));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(1),
        o = {
            NAME: "TD.core.defer",
            DEBUG_DEFERREDS: !1
        },
        c = Array.prototype.slice,
        l = function(e) {
            this.message = e, this.name = e
        };
    (l.prototype = new Error).toString = function() {
        return this.message && this.message != this.name ? this.name + "(" + this.message.toString() + ")" : this.name + "()"
    };
    var u = function(e, t, i) {
        i.prototype = new l(e.NAME + "." + t), e[t] = i
    };
    u(o, "AlreadyCalledError", function(e) {
        this.deferred = e
    }), u(o, "CancelledError", function(e) {
        this.deferred = e
    }), u(o, "GenericError", function(e) {
        this.message = e
    }), u(o, "XMLHttpRequestError", function(e, t, i) {
        this.req = e, this.message = t, this.requestSettings = i || {};
        try {
            this.number = e.status
        } catch (e) {}
        if (this.req) switch (this.req.responseText) {
            case "Item cannot be scheduled for the past.":
                this.humanReadableMessage = (0, n.default)("You can't schedule a Tweet for the past.");
                break;
            case "Item too far in the future.":
                this.humanReadableMessage = (0, n.default)("You can't schedule a Tweet for more than a year ahead.");
                break;
            case "You have too many updates scheduled.":
                this.humanReadableMessage = (0, n.default)("You can only save 150 scheduled Tweets at once. Please delete one or try later.")
        }
    });
    var d = function() {
        try {
            throw new Error("DEBUG_DEFERRED stack trace")
        } catch (e) {
            return e.stack
        }
    };
    o.Deferred = function(e) {
        this.chain = [], this.id = a.uniqueId("d:"), o.DEBUG_DEFERREDS && (this.create_stack = d()), this.fired = -1, this.paused = 0, this.results = [null, null], this.canceller = e, this.silentlyCancelled = !1, this.chained = !1
    }, o.Deferred.prototype = {
        toString: function() {
            var e;
            return e = -1 == this.fired ? "unfired" : 0 === this.fired ? "success" : "error", "Deferred(" + this.id + ", " + e + "[" + this.chain.length + "])"
        },
        cancel: function() {
            -1 == this.fired ? (this.canceller ? this.canceller(this) : this.silentlyCancelled = !0, -1 == this.fired && this.errback(new o.CancelledError(this))) : 0 === this.fired && this.results[0] instanceof o.Deferred && this.results[0].cancel()
        },
        _resback: function(e) {
            o.DEBUG_DEFERREDS && (this.invoke_stack = d()), this.fired = e instanceof Error ? 1 : 0, this.results[this.fired] = e, this._fire()
        },
        _check: function() {
            if (-1 == this.fired);
            else {
                if (!this.silentlyCancelled) throw new o.AlreadyCalledError(this);
                this.silentlyCancelled = !1
            }
        },
        callback: function(e) {
            if (this._check(), e instanceof o.Deferred) throw new Error("Deferred instances can only be chained if they are the result of a callback");
            this._resback(e)
        },
        errback: function(e) {
            if (this._check(), e instanceof o.Deferred) throw new Error("Deferred instances can only be chained if they are the result of a callback");
            e instanceof Error || (e = new o.GenericError(e)), this._resback(e)
        },
        addBoth: function(e) {
            var t = c.call(arguments, 1);
            return this.addCallbacks(e, e, t, t, null, null)
        },
        addBothWith: function(e, t) {
            var i = c.call(arguments, 2);
            return this.addCallbacks(t, t, i, i, e, e)
        },
        addCallback: function(e) {
            var t = c.call(arguments, 1);
            return this.addCallbacks(e, null, t, null, null, null)
        },
        addCallbackWith: function(e, t) {
            var i = c.call(arguments, 2);
            return this.addCallbacks(t, null, i, null, e, null)
        },
        addErrback: function(e) {
            var t = c.call(arguments, 1);
            return this.addCallbacks(null, e, null, t, null, null)
        },
        addErrbackWith: function(e, t) {
            var i = c.call(arguments, 2);
            return this.addCallbacks(null, t, null, i, null, e)
        },
        addCallbacks: function(e, t, i, s, n, r) {
            if (this.chained) throw new Error("Chained Deferreds can not be re-used");
            return this.chain.push([e, t, i, s, n, r]), this.fired >= 0 && this._fire(), this
        },
        addCallbacksWith: function(e, t, i, s, n) {
            return this.addCallbacks(t, i, s, n, e, e)
        },
        _fire: function() {
            for (var e, t, i = this.chain, s = this.fired, n = this.results[s], r = this, a = null, c = function(e) {
                    r._resback(e), r.paused--, 0 === r.paused && r.fired >= 0 && r._fire()
                }; i.length > 0 && 0 === this.paused;) {
                var l = i.shift(),
                    u = l[s];
                if (null !== u) try {
                    e = l[2 + s] ? [n].concat(l[2 + s]) : [n], t = l[4 + s], s = (n = u.apply(t, e)) instanceof Error ? 1 : 0, n instanceof o.Deferred && (a = c, this.paused++)
                } catch (e) {
                    s = 1, (n = e instanceof Error ? e : new o.GenericError(e)).stack && n.stack.split ? n.stackTrace = n.stack.split("\n") : n.stackTrace = []
                }
            }
            this.fired = s, this.results[s] = n, a && this.paused && (n.addBoth(a), n.chained = !0)
        },
        toPromise: function() {
            var e = this;
            return new s.default(function(t, i) {
                e.addCallbacks(function(e) {
                    return t(e)
                }, function(e) {
                    return i(e)
                })
            })
        }
    }, o.DeferredList = function(e, t, i) {
        o.Deferred.apply(this, [i]), this.list = e;
        var s = [];
        this.resultList = s, this.finishedCount = 0, this.fireOnOneCallback = Boolean(t && t.fireOnOneCallback), this.fireOnOneErrback = Boolean(t && t.fireOnOneErrback), this.consumeErrors = Boolean(t && t.consumeErrors);
        for (var n = a.bind(this._cbDeferred, this), r = 0; r < e.length; r++) {
            var c = e[r];
            s.push(void 0), c.addCallback(n, r, !0), c.addErrback(n, r, !1)
        }
        0 !== e.length || this.fireOnOneCallback || this.callback(this.resultList)
    }, o.DeferredList.prototype = new o.Deferred, o.DeferredList.prototype._cbDeferred = function(e, t, i) {
        return this.resultList[t] = [i, e], this.finishedCount += 1, -1 == this.fired && (i && this.fireOnOneCallback ? this.callback([t, e]) : !i && this.fireOnOneErrback ? this.errback(e) : this.finishedCount == this.list.length && this.callback(this.resultList)), !i && this.consumeErrors && (e = null), e
    }, o.gatherResults = function(e) {
        var t = new o.DeferredList(e, {
            fireOnOneErrback: !0
        });
        return t.addCallback(function(e) {
            for (var t = [], i = 0; i < e.length; i++) t.push(e[i][1]);
            return t
        }), t
    }, o.succeed = function(e) {
        var t = new o.Deferred;
        return t.callback(e), t
    }, o.fail = function(e) {
        var t = new o.Deferred;
        return t.errback(e), t
    }, o.maybeDeferred = function(e) {
        var t;
        try {
            var i = e.apply(null, c.call(arguments, 1));
            t = i instanceof o.Deferred ? i : i instanceof Error ? o.fail(i) : o.succeed(i)
        } catch (e) {
            t = o.fail(e)
        }
        return t
    }, o.timeout = function(e, t) {
        var i = new TD.core.defer.Deferred;
        return setTimeout(i.callback.bind(i, t), e), i
    }, e.exports = o
}, , , , function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = {
        atMentionify: function(e) {
            return TD.util.atMentionify(e)
        },
        deMentionify: function(e) {
            return TD.util.deMentionify(e)
        },
        getTweetLength: function(e, t) {
            return twttrTxt.parseTweet(e, t).weightedLength
        },
        extractMentions: function(e) {
            return twttrTxt.extractMentions(e)
        },
        removeFirstMention: function(e) {
            var t, i = twttrTxt.extractMentionsWithIndices(e);
            return i.length && (t = i[0].indices, e = e.substring(0, t[0]).trim() + e.substring(t[1])), e
        },
        makeTweetDraggable: function(e) {
            (0, r.default)(e).closest(".stream-item").attr("draggable", !0).addClass("will-animate"), document.getSelection().removeAllRanges()
        },
        makeTweetUnDraggable: function(e) {
            (0, r.default)(e).closest(".stream-item").removeAttr("draggable").removeClass("will-animate")
        }
    };
    e.exports = a
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.Observe = void 0;
    var s = l(i(13)),
        n = l(i(10)),
        r = l(i(11)),
        a = l(i(14)),
        o = l(i(15)),
        c = l(i(6));
    l(i(9));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.Observe = function(e) {
        function t() {
            var e, i, r, o;
            (0, n.default)(this, t);
            for (var c = arguments.length, l = Array(c), u = 0; u < c; u++) l[u] = arguments[u];
            return i = r = (0, a.default)(this, (e = t.__proto__ || (0, s.default)(t)).call.apply(e, [this].concat(l))), r.state = {
                data: null
            }, o = i, (0, a.default)(r, o)
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "componentDidMount",
            value: function() {
                this.subscribe()
            }
        }, {
            key: "componentWillUnmount",
            value: function() {
                this.unsubscribe()
            }
        }, {
            key: "componentDidUpdate",
            value: function(e, t) {
                this.props.observable !== e.observable && (this.unsubscribe(), this.subscribe())
            }
        }, {
            key: "subscribe",
            value: function() {
                var e = this;
                this.subscription = this.props.observable.subscribe(function(t) {
                    e.setState({
                        data: t
                    }, function() {
                        e.props.onValue && e.props.onValue(t)
                    })
                })
            }
        }, {
            key: "unsubscribe",
            value: function() {
                this.subscription.unsubscribe()
            }
        }, {
            key: "render",
            value: function() {
                return this.props.children(this.state.data)
            }
        }]), t
    }(c.default.Component)
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    e.exports = function() {
        this.focusRequest = function() {
            this.trigger("uiFocusRequest", {
                id: this.focusId
            })
        }, this.focusRelease = function() {
            this.trigger("uiFocusRelease", {
                id: this.focusId
            })
        }, this.handleFocus = function(e, t) {
            t.id === this.focusId ? this.hasFocus = !0 : this.hasFocus = !1
        }, this.whenHasFocus = function(e) {
            return function() {
                if (this.hasFocus) return e.apply(this, arguments)
            }.bind(this)
        }, this.getNewFocusId = function() {
            return r.default.uniqueId("focus")
        }, this.after("teardown", function() {
            this.hasFocus && this.trigger("uiFocusRelease", {
                id: this.focusId
            })
        }), this.after("initialize", function() {
            this.focusId = this.attr.focusId || this.getNewFocusId(), this.hasFocus = !1, this.on(document, "uiFocus", this.handleFocus), !0 === this.attr.autoFocus && this.focusRequest()
        })
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = o(i(7)),
        n = o(i(63));
    t.default = function(e) {
        var t = e.name,
            i = e.fontSize,
            o = e.color,
            c = (0, n.default)(e, ["name", "fontSize", "color"]);
        return r.default.createElement("i", (0, s.default)({}, c, {
            className: (0, a.default)("icon Icon icon-" + t, i && "txt-size--" + i, o && "color-" + o)
        }))
    };
    var r = o(i(6)),
        a = (o(i(9)), o(i(98)));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getTwitterApiUrl = void 0, t.makeTwitterRequest = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            s = (0, n.getClientByAccountKeyOrDefault)(e),
            r = c({
                resource: t
            });
        if (s) return s.request(r, i);
        return a.default.fail("Could not find client for " + e)
    }, t.makeTwitterApiCall = function(e) {
        var t = c(e),
            i = e.method,
            r = e.params,
            a = e.dataProcessor,
            o = e.feedType,
            l = (0, n.getClientByAccountKeyOrDefault)(e.request.accountKey),
            u = function(e) {
                return function(t) {
                    var i = {
                        request: e.request,
                        response: t
                    };
                    "function" == typeof e.error ? e.error(i) : "string" == typeof e.error ? (0, s.default)(document).trigger(e.error, i) : (0, s.default)(document).trigger("dataTwitterApiError", {
                        error: "Unknown error"
                    })
                }
            }(e),
            d = function(e, t) {
                return function(t) {
                    var i = {
                        request: e.request,
                        response: t
                    };
                    "function" == typeof e.success ? e.success(i) : "string" == typeof e.success ? (0, s.default)(document).trigger(e.success, i) : (0, s.default)(document).trigger("dataTwitterApiSuccess", i)
                }
            }(e);
        try {
            return l.makeTwitterCall(t, r, i || "GET", a, d, u, o)
        } catch (e) {
            u()
        }
    };
    var s = o(i(0)),
        n = i(38),
        r = i(309),
        a = o(i(154));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var c = t.getTwitterApiUrl = function(e) {
        var t = e.baseUrl,
            i = void 0 === t ? r.twitter_api_base : t,
            s = e.apiVersion;
        return i + "/" + (void 0 === s ? r.twitter_api_version : s) + "/" + e.resource
    }
}, , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = i(531),
        n = i(19);
    t.default = (0, s.createInterval)(n.chirpReverseColumnSort)
}, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = a(i(1756));
    t.makeDOMMutator = function(e, t) {
        t = n.default.defaults({}, t, {
            debounce: !0,
            debouncePerContext: !1
        });
        var i = new s.default;
        return function() {
            var s = t.debouncePerContext && n.default.isObject(this) ? this : o;
            (t.debounce || t.debouncePerContext) && r.default.clear(i.get(s));
            var a = e.bind.apply(e, [this].concat(Array.prototype.slice.call(arguments))),
                c = r.default.mutate(a);
            i.set(s, c)
        }
    };
    var n = a(i(1)),
        r = a(i(352));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = {
        _: "dom_utils shared context"
    }
}, function(e, t, i) {
    "use strict";

    function s(e) {
        var t = document.createElement("div");
        for (var i in e)
            if (void 0 !== t.style[i]) return e[i];
        return !1
    }
    e.exports = {
        TRANSITION_END: s({
            transition: "transitionend",
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            OTransition: "otransitionend",
            msTransition: "MSTransitionEnd"
        }),
        ANIMATION_END: s({
            animation: "animationend",
            WebkitAnimation: "webkitAnimationEnd",
            MozAnimation: "animationend",
            OAnimation: "oanimationend",
            msAnimation: "MSAnimationEnd"
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = a(i(234)),
        n = a(i(0)),
        r = a(i(1));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.requestUsers = function(e) {
        var t = r.default.uniqueId("twitterUsers");
        return (0, n.default)(document).trigger("uiNeedsTwitterUsers", {
            requestId: t,
            userIds: e.map(function(e) {
                return e.id
            })
        }), t
    }, t.getFirstReply = function(e) {
        return e[0]
    }, t.getRecipientsToDisplay = function(e) {
        var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
            s = (e = t.dedupeAndFilterRecipients(e, i)).map(function(e) {
                return e.id
            });
        return e.length >= 4 ? {
            users: e.slice(0, 2),
            remainder: e.length - 2,
            userIds: s
        } : {
            users: e,
            remainder: 0,
            userIds: s
        }
    }, t.dedupeAndFilterRecipients = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
            i = new s.default(t);
        return e.filter(function(e) {
            var t = !i.has(e.id);
            return i.add(e.id), t
        })
    }, t.getImplicitMentions = function(e) {
        return e.filter(function(e) {
            return e.isImplicitMention
        }).map(function(e) {
            return {
                id: e.id_str,
                screenName: e.screen_name,
                name: e.name
            }
        })
    }, t.getDefaultModalOptions = function() {
        return {
            withNonDismissible: !1,
            withDismissButton: !0,
            withClickTrap: !0,
            withDraggable: !0,
            withDragHandle: !1,
            withHeader: !0,
            withHeaderDivider: !0,
            withBorder: !1,
            withFooter: !1,
            withDoneButton: !1,
            withContentClasses: ["width--600", "max-height--400", "is-inverted-dark", "seamful", "scroll-v"],
            withOverlayClasses: [""]
        }
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.linkifyUser = function(e) {
        var t = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).withBold,
            i = void 0 !== t && t,
            r = e.emojifiedName || n.default.cleanWithEmoji(e.name),
            a = e.screenName || e.screen_name;
        return s.default.render("text/user_link_fullname", {
            profileUrl: "https://twitter.com/" + a,
            name: r,
            withBold: i,
            unsafe: !0
        })
    };
    var s = r(i(8)),
        n = r(i(19));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = o(i(47)),
        n = o(i(1)),
        r = o(i(0)),
        a = i(19);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var c = i(605);

    function l(e, t, i, s) {
        var r;
        return e.code ? r = function(e, t, i) {
            return 34 === e ? i && i.status && 0 === i.status.indexOf("DM") ? c.USER_DOES_NOT_EXIST : t.indexOf("show.json") > -1 ? c.USER_DOES_NOT_EXIST : c[404] : 88 === e ? t.indexOf("dm/new.json") > -1 ? c.RATE_LIMITED_DM_SEND : c.RATE_LIMITED : n.default.find(c, function(t) {
                return t.twitterErrorCode === e
            })
        }(e.code, i, s) : 403 === t.status && (e.indexOf("retweet") > -1 ? r = c.DUPLICATE_RETWEET : e.indexOf("Share validations failed") > -1 && (r = c.PROTECTED_TWEET)), r || (r = c.UNKNOWN), TD.controller.stats.apiErrorResponse(t.status, e.code, i), r
    }

    function u(e, t, i) {
        if (e) {
            var s = {
                rateLimitRemaining: parseInt(t.getResponseHeader("x-rate-limit-remaining"), 10),
                rateLimitTotal: parseInt(t.getResponseHeader("x-rate-limit-limit"), 10),
                rateLimitReset: parseInt(t.getResponseHeader("x-rate-limit-reset"), 10)
            };
            s.rateLimitTotal && s.rateLimitReset && (0, r.default)(document).trigger("dataRateLimit", {
                feedType: e,
                accountKey: i.getKey(),
                rateLimitData: s
            })
        }
    }
    e.exports = {
        processSuccessResponse: function(e, t, i, n) {
            if (!t.handleSuccess) return i;
            var a = i.data;
            if (t.processor) try {
                a = t.processor.call(n, i.data)
            } catch (e) {
                throw new Error("Error processing Twitter data (" + e.message + "): " + (0, s.default)(i.data))
            }
            return u(t.feedType, i.xhr, n.oauth.account), (0, r.default)(document).trigger("dataTwitterAccountAccessSuccess", {
                account: n.oauth.account
            }), {
                data: a,
                xhr: i.xhr
            }
        },
        processErrorResponse: function(e, t, i, s) {
            if (!t.handleError) throw i;
            var a;
            i.req = i.req || {};
            var o = [];
            if (i.req.responseText) {
                try {
                    a = JSON.parse(i.req.responseText)
                } catch (i) {
                    console.error("Failed to parse error responseText", i.req)
                }
                a && a.errors && ("string" == typeof a.errors ? o.push(l(a.errors, i.req, e, t.params)) : n.default.each(a.errors, function(s) {
                    o.push(l(s, i.req, e, t.params))
                }))
            }
            throw i.req.errors = o,
                function(e) {
                    var t = e.errors,
                        i = e.xhr,
                        s = e.originalMessage,
                        n = e.options,
                        a = e.account;
                    (0, r.default)(document).trigger("dataTwitterApiError", {
                        request: n,
                        response: {
                            xhr: i,
                            ts: "",
                            error: s
                        },
                        errors: t
                    }), t.forEach(function(e, t, i) {
                        var s = e.twitterErrorCode;
                        if (s)
                            if ((0, r.default)(document).trigger("metric", {
                                    key: "api:error:" + s
                                }), 32 === s || 89 === s || 220 === s) {
                                var n = TD.storage.store.getTwitterLoginAccount(),
                                    o = n && a.getUserID() === n.getUserID();
                                (0, r.default)(document).trigger("dataTwitterAccountAccessDenied", {
                                    account: a,
                                    isLoginAccount: o
                                })
                            } else 64 === s && (0, r.default)(document).trigger("dataTwitterAccountSuspended", {
                                account: a
                            })
                    })
                }({
                    errors: o,
                    xhr: i.req,
                    originalMessage: i.msg,
                    options: t,
                    account: s
                }), u(t.feedType, i.req, s), i
        },
        logTweetProcessingError: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            TD.controller.stats.generic({
                page: "api",
                component: "tweet",
                action: "failure"
            }, {
                custom_json_payload: {
                    stack: t.stack,
                    tweetId: e.id_str
                }
            }), (0, a.metric)("api:client:processtweet:failure")
        }
    }
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.hashflags = t.HashFlags = void 0;
    var s = l(i(1536)),
        n = l(i(1539)),
        r = l(i(10)),
        a = l(i(11)),
        o = l(i(70)),
        c = i(19);

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var u = 36e5,
        d = t.HashFlags = function() {
            function e() {
                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                    i = t.interval,
                    s = void 0 === i ? u : i,
                    n = t.isPolling,
                    a = void 0 !== n && n,
                    o = t.flags,
                    c = void 0 === o ? [] : o;
                (0, r.default)(this, e), h.call(this), this.interval = s, this.isPolling = a, this.flags = c
            }
            return (0, a.default)(e, [{
                key: "start",
                value: function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.interval;
                    this.isPolling || (this.getFlags(), setInterval(this.getFlags, e), this.isPolling = !0)
                }
            }, {
                key: "get",
                value: function(e) {
                    e = e.toLowerCase();
                    var t = this.flags[e];
                    return t && o.default.utc().isBetween((0, o.default)(Number(t.startingTimestampMs)), (0, o.default)(Number(t.endingTimestampMs))) ? t.assetUrl : null
                }
            }, {
                key: "optimize",
                value: function(e) {
                    return e.reduce(function(e, t) {
                        var i = t.startingTimestampMs,
                            s = t.endingTimestampMs,
                            n = t.assetUrl;
                        return e[t.hashtag.toLowerCase()] = {
                            startingTimestampMs: i,
                            endingTimestampMs: s,
                            assetUrl: n
                        }, e
                    }, {})
                }
            }]), e
        }(),
        h = function() {
            var e = this;
            this.getFlags = (0, n.default)(s.default.mark(function t() {
                var i, n, r, a;
                return s.default.wrap(function(t) {
                    for (;;) switch (t.prev = t.next) {
                        case 0:
                            return i = (0, o.default)().utc().subtract(1, "hour").format("YYYY-MM-DD-HH"), n = "https://ton.twimg.com/hashflag/config-" + i + ".json", t.prev = 2, t.next = 5, fetch(n);
                        case 5:
                            return r = t.sent, t.next = 8, r.json();
                        case 8:
                            a = t.sent, e.flags = e.optimize(a), t.next = 15;
                            break;
                        case 12:
                            t.prev = 12, t.t0 = t.catch(2), (0, c.metric)("api:hashflags:getFlags:failure");
                        case 15:
                        case "end":
                            return t.stop()
                    }
                }, t, e, [
                    [2, 12]
                ])
            }))
        };
    t.hashflags = new d
}, , , , , , , , , function(e, t, i) {
    "use strict";
    var s = a(i(43)),
        n = a(i(1)),
        r = i(599);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = {
        maxRecipientsReached: function(e) {
            return e.messageRecipients.length >= e.attr.maxRecipients
        },
        getMaxAllowedImages: function(e) {
            return "message" === e.tweetType || e.scheduledDate ? 1 : 4
        },
        shouldSetNewReplyTo: function(e) {
            return !e.inReplyTo
        },
        onlyOneAccountIsSelected: function(e) {
            return 1 === e.selectedAccountKeys.length
        },
        existingConversation: function(e) {
            return !(!e.messageConversation && !e.messageRecipients.length)
        },
        keyIsInSelectedAccounts: function(e, t) {
            return e.selectedAccountKeys.some(function(e) {
                return e === t
            })
        },
        recipientsWithoutSelfMention: function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
            return 0 === t.length ? e : [].concat((0, s.default)(e.slice(0, 1)), (0, s.default)(e.slice(1).filter(function(e) {
                var i = (0, r.generateAccountKey)("twitter", e.id);
                return t.some(function(e) {
                    return e !== i
                })
            })))
        },
        getUpdatedExcludedRecipientsIds: function(e, t) {
            var i = t.userId;
            return t.shouldExclude ? e.excludedRecipientsIds.concat(i) : n.default.without(e.excludedRecipientsIds, i)
        }
    };
    e.exports = o
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.makeSparklineDefaults = t.makeChartDefaults = t.getBackgroundColor = t.getSeriesGray = void 0;
    var s = a(i(7));
    t.getNamedChartColor = function(e, t) {
        return c[t % c.length]
    };
    var n = a(i(609)),
        r = function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(251));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = ["#1DA1F2", "#17BF63", "#FFAD1F", "#794BC4"],
        c = ["blue", "green", "yellow", "purple"],
        l = {
            light: "#FFFFFF",
            dark: "#15202B"
        },
        u = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
            return o[t % o.length]
        },
        d = t.getSeriesGray = function() {
            return "#8899A6"
        };
    t.getBackgroundColor = function(e) {
        return e && l[e] || l.light
    };
    var h = t.makeChartDefaults = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return (0, s.default)({
            datumInput: function(e) {
                return r.isoParse(1e3 * e.timestamp)
            },
            datumOutput: "count",
            inputTickSpacing: 1e3,
            defaultSeriesShape: n.default.seriesShapes.LINE,
            outputTickLabelFormat: "s",
            seriesColor: u,
            focusMode: n.default.focusModes.INPUT,
            tooltipOptions: {
                datumInputFormat: r.utcFormat("%B %-d, %Y %H:%M"),
                datumOutputFormat: ",.0f"
            },
            tickLabelColor: d()
        }, e)
    };
    t.makeSparklineDefaults = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return (0, s.default)({}, h(), {
            outputTickLines: !1,
            outputTickLabels: !1,
            inputTickLines: !1,
            inputTickLabels: !1,
            transitionDurationMs: 0
        }, e)
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = l(i(13)),
        n = l(i(10)),
        r = l(i(11)),
        a = l(i(14)),
        o = l(i(15)),
        c = l(i(6));
    l(i(9));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var u = function(e) {
        function t() {
            return (0, n.default)(this, t), (0, a.default)(this, (t.__proto__ || (0, s.default)(t)).apply(this, arguments))
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "render",
            value: function() {
                return this.props.children(TD.settings.getTheme())
            }
        }]), t
    }(c.default.Component);
    t.default = u
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(403),
        o = i(36);
    var c = ["ja", "zh-cn", "zh-tw", "ko"],
        l = a.configs.defaults;
    o.twitterTextEmojiDiscounting$.subscribe(function(e) {
        l = e ? a.configs.version3 : a.configs.defaults
    }), e.exports = {
        remainingPercentageThreshold: 7.2,
        getConfiguration: function() {
            return l
        },
        getLanguageWeight: function() {
            var e = r.default.get(navigator, "language", "");
            return c.includes(e.toLowerCase()) ? 2 : 1
        },
        getAvailableCharacterPercent: function(e) {
            var t = this.getConfiguration(),
                i = parseInt(t.maxWeightedTweetLength, 10);
            return 100 * (parseInt(e, 10) * this.getLanguageWeight()) / i
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = a(i(1)),
        n = a(i(0)),
        r = a(i(8));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = i(5).compose,
        c = i(160);
    e.exports = function() {
        o.mixin(this, [c]), this.attributes({
            dropdownContainerSelector: ".js-dropdown-container",
            dropdownContentSelector: ".js-dropdown-content",
            isSelectableClass: "is-selectable",
            isSelectableSelector: ".is-selectable",
            isSelectedClass: "is-selected",
            isSelectedSelector: ".is-selected",
            dropdownOptions: {
                position: "",
                toggle: !1
            },
            dropdownPositions: {
                offsetLeft: "pos-l",
                offsetRight: "pos-r",
                underLeftIcon: "pos-r-under-icon",
                verticalRight: "pos-br",
                above: "pos-t"
            }
        }), this.after("initialize", function() {
            this.on(document, "uiDropdownShowing uiDetailViewOpening uiKeyEscape", this.teardownCurrentDropdown.bind(this)), this.dropdownFocusId = this.getNewFocusId(), this.on(document, "uiKeyEnter uiKeySpace", this.whenHasDropdownFocus(this.clickSelectedActionable)), this.on(document, "uiKeyUp", this.whenHasDropdownFocus(this.makeHandleChangeSelectionIndexBy(-1))), this.on(document, "uiKeyDown", this.whenHasDropdownFocus(this.makeHandleChangeSelectionIndexBy(1))), this.on(document, "uiKeyRight uiKeyLeft", this.whenHasDropdownFocus(this.jumpIntoDropdown))
        }), this.before("teardown", function() {
            this.teardownCurrentDropdown()
        }), this.renderDropdown = function(e, t, i, a) {
            if (!e || !e.length) throw new Error("Please supply a node to render dropdown with.");
            if (!t) throw new Error("Please supply a template.");
            i = i || {}, a = s.default.defaults(a || {}, this.attr.dropdownOptions);
            var o = s.default.uniqueId("dropdown");
            if (this.dropdownIsOpen()) {
                if (this.$dropdownSourceNode && e.get(0) === this.$dropdownSourceNode.get(0)) return a.toggle ? (this.trigger("uiDropdownToggling", {
                    id: o
                }), this.teardownCurrentDropdown()) : this.trigger("uiDropdownAlreadyOpen", {
                    id: o
                });
                this.teardownCurrentDropdown()
            }
            this.$dropdownSourceNode = e, this.trigger("uiDropdownShowing", {
                id: o
            });
            var c = t;
            "string" == typeof t && (c = (0, n.default)(r.default.render(t, i)));
            var l = (0, n.default)(r.default.render("menus/dropdown", a));
            return l.find(this.attr.dropdownContentSelector).append(c), e.after(l), this.currentDropdown = {
                $el: l,
                id: o
            }, this.maybeRepositionDropdown(), this.attachDropdownInteractions(l, a), this.parentFocusId = this.focusId, this.focusId = this.dropdownFocusId, this.focusRequest(), this.on(document, "click", this.handleDocumentClick), this.trigger("uiDropdownShown", {
                id: o
            }), l
        }, this.handleDocumentClick = function(e) {
            this.teardownCurrentDropdown()
        }, this.attachDropdownInteractions = function(e, t) {
            this.on(e, "mouseleave", this.removeCurrentSelection), this.on(e, "mouseover", {
                isSelectableSelector: this.handleChangeSelectionToTarget
            }), this.on(e, "click", this.cancelEventIfNotFromSelectable);
            var i = e.find(this.attr.isSelectableSelector),
                s = i.filter(this.attr.isSelectedSelector),
                n = i.index(s);
            this.currentDropdown.$selectables = i, this.currentDropdown.selectedIndex = n, n > -1 && this.changeSelectionToIndex(n)
        }, this.teardownCurrentDropdown = function(e, t) {
            if (e = e || {}, t = t || {}, this.dropdownIsOpen()) {
                if (t.id === this.currentDropdown.id) return;
                this.$dropdownSourceNode = null, this.trigger("uiDropdownHiding", {
                    id: this.currentDropdown.id
                }), this.focusRelease(), this.focusId = this.parentFocusId;
                var i = this.currentDropdown.$el;
                this.off(document, "click", this.handleDocumentClick), this.off(i, "mouseleave", this.removeCurrentSelection), this.off(i, "mouseover"), this.off(i, "click", this.cancelEventIfNotFromSelectable), this.currentDropdown.$el.remove();
                var s = this.currentDropdown.id;
                this.currentDropdown = null, this.trigger("uiDropdownHidden", {
                    id: s
                })
            }
        }, this.clickSelectedActionable = function() {
            this.currentDropdown.selectedIndex > -1 && this.currentDropdown.$selectables.eq(this.currentDropdown.selectedIndex).find("[data-action]").first().click()
        }, this.changeSelection = function(e) {
            var t = (0, n.default)(e),
                i = this.currentDropdown.$selectables.index(t.get(0));
            this.removeCurrentSelection(), i > -1 && (this.currentDropdown.$selectables.eq(i).addClass(this.attr.isSelectedClass), this.currentDropdown.selectedIndex = i)
        }, this.changeSelectionToIndex = function(e) {
            if (e < 0) return this.removeCurrentSelection();
            var t = this.currentDropdown.$selectables.eq(e);
            this.changeSelection(t)
        }, this.handleChangeSelectionToTarget = function(e, t) {
            this.changeSelection(t.el)
        }, this.makeHandleChangeSelectionIndexBy = function(e) {
            return function(t, i) {
                t.stopPropagation();
                var s = this.getNewSelectedIndex(e);
                this.changeSelectionToIndex(s)
            }
        }, this.removeCurrentSelection = function() {
            this.currentDropdown.$selectables.eq(this.currentDropdown.selectedIndex).removeClass(this.attr.isSelectedClass), this.currentDropdown.selectedIndex = -1
        }, this.getNewSelectedIndex = function(e) {
            void 0 === e && (e = 1);
            var t = this.currentDropdown.selectedIndex;
            if (0 === e) return t;
            var i = this.currentDropdown.$selectables.length,
                s = (t + e) % i;
            return t < 0 ? e > 0 ? 0 : i - 1 : s < 0 ? i + s : s
        }, this.whenHasDropdownFocus = function(e) {
            return this.whenHasFocus(function() {
                if (this.focusId === this.dropdownFocusId) return e.apply(this, arguments)
            })
        }, this.jumpIntoDropdown = function(e) {
            -1 === this.currentDropdown.selectedIndex && this.changeSelectionToIndex(0)
        }, this.cancelEventIfNotFromSelectable = function(e) {
            var t = this.currentDropdown.$el,
                i = (0, n.default)(e.target).closest(this.attr.isSelectableSelector, t);
            i.length || (event.stopPropagation(), event.preventDefault())
        }, this.dropdownIsOpen = function() {
            return !(!this.currentDropdown || !this.currentDropdown.$el)
        }, this.maybeRepositionDropdown = function() {
            var e, t, i, s, n, r = this.currentDropdown.$el,
                a = r.closest(this.attr.dropdownContainerSelector);
            a.length > 0 && !r.hasClass("pos-t") && (e = r.offset().top, n = r.outerHeight(), i = e + n, t = a.offset().top, s = t + a.height(), TD.util.isTouchDevice() && TD.decider.get("touchdeck_dropdowns_v2") && TD.decider.get("touchdeck_tweet_controls_v3") && (n += 25), i >= s && e - n > t && r.addClass("pos-t"))
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = function() {
        this.attributes({
            eventMap: {
                uiDragStart: "dragstart",
                uiDragEnd: "dragend",
                mousedown: "predrag"
            },
            dropTargetClass: "with-drop-target",
            draggableSelector: ".is-draggable"
        }), this.setupDragDrop = function(e) {
            e.type || (e.type = ["*"]), "string" == typeof e.type && (e.type = [e.type]), s.default.contains(e.type, "*") && (e.wantsAll = !0), void 0 !== e.indicateDrop && (this.indicateDrop = !!e.indicateDrop), e.drop && !1 !== this.indicateDrop && (this.indicateDrop = !0), this.listeners.push(e)
        }, this.hasSetupDragDrop = function() {
            return this.listeners.length > 0
        }, this.wantsDragType = function(e) {
            return this.listeners.some(function(t) {
                return t.wantsAll || s.default.contains(t.type, e)
            })
        }, this.notifyListeners = function(e, t) {
            this.listeners.forEach(function(i) {
                if (i.wantsAll || s.default.contains(i.type, t.type)) {
                    var n = i[e.type] || i[this.attr.eventMap[e.type]];
                    n && "function" == typeof n && n.call(i.context || this, e, t)
                }
            }.bind(this))
        }, this.saveDragState = function(e) {
            return function(t, i) {
                return this.dragDropState = {
                    active: !0,
                    data: i
                }, e.apply(this, [].slice.call(arguments))
            }
        }, this.clearDragState = function(e) {
            return function(t, i) {
                return this.dragDropState = this.dragDropStateInit, e.apply(this, [].slice.call(arguments))
            }
        }, this.retrieveDragState = function(e) {
            return function(t) {
                return e.call(this, t, this.dragDropState.data)
            }
        }, this.retrieveAndNotify = function() {
            return this.retrieveDragState(this.notifyListeners)
        }, this.extractDataFromEvent = function(e) {
            var t = e.target.tagName.toLowerCase(),
                i = (0, n.default)(e.target).attr("data-drag-type") || t;
            return {
                type: i,
                el: e.target
            }
        }, this.whenActive = function(e) {
            return function(t) {
                var i = this.dragDropState.active && this.wantsDragType(this.dragDropState.data.type);
                if (i) return e.apply(this, arguments)
            }.bind(this)
        }, this.whenSetup = function(e) {
            return function() {
                if (this.hasSetupDragDrop()) return e.apply(this, arguments)
            }.bind(this)
        }, this.whenSetupAndActive = function(e) {
            return this.whenSetup(this.whenActive(e))
        }, this.before("initialize", function() {
            this.listeners = [], this.dragDropState = this.dragDropStateInit = {
                active: !1,
                data: {}
            }, this.indicateDrop = !0, this.dragDepth = 0
        }), this.after("initialize", function() {
            this.on(document, "uiDragStart", this.whenSetup(this.saveDragState(this.notifyListeners))), this.on(document, "uiDragEnd", this.whenSetup(function() {
                this.dragDepth = 0, this.clearDragState(this.notifyListeners).apply(this, arguments)
            })), this.on("drop", this.whenSetupAndActive(function(e) {
                e.preventDefault(), this.dragDepth = 0, this.retrieveAndNotify().apply(this, arguments)
            })), this.on("dragenter", this.whenSetupAndActive(function(e) {
                this.dragDepth += 1, 1 === this.dragDepth && this.retrieveAndNotify().apply(this, [].slice.call(arguments))
            })), this.on("dragleave", this.whenSetupAndActive(function(e) {
                this.dragDepth -= 1, this.dragDepth <= 0 && (this.dragDepth = 0, this.retrieveAndNotify().apply(this, [].slice.call(arguments)))
            })), this.on("dragover", this.whenSetupAndActive(function(e) {
                !0 === this.indicateDrop && e.preventDefault(), this.retrieveAndNotify().apply(this, [].slice.call(arguments))
            })), this.on("mousedown", {
                draggableSelector: this.whenSetup(function(e, t) {
                    var i = this.extractDataFromEvent({
                        target: t.el
                    });
                    this.notifyListeners(e, i)
                })
            })
        })
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.highlightSubstring = o, t.highlightSubstringAndAddHashflag = function(e, t) {
        return o(e, t) + function(e) {
            var t = twttrTxt.extractHashtagsWithIndices(e),
                i = 1 === t.length && 0 === t[0].indices[0] && t[0].indices[1] === e.length,
                s = n.hashflags.get(e.replace("#", ""));
            if (!i || !s) return "";
            return a.default.render("text/hashflag", {
                hashFlagUrl: s
            })
        }(e)
    };
    var s, n = i(233),
        r = i(8),
        a = (s = r) && s.__esModule ? s : {
            default: s
        };

    function o(e, t) {
        var i, s, n = -1;
        return t && (n = e.toLowerCase().indexOf(t.toLowerCase())), -1 !== n ? (s = {
            before: e.substr(0, n),
            highlight: e.substr(n, t.length),
            after: e.substr(n + t.length)
        }, i = a.default.toHtmlFromRaw("{{before}}<b>{{highlight}}</b>{{after}}", s)) : i = a.default.toHtmlFromRaw("{{text}}", {
            text: e
        }), i
    }
}, , function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(638);
    e.exports = {
        makeElementVisible: function(e, t, i) {
            if (!e.length || !t.length) return;
            i = r.default.defaults(i || {}, {
                time: 300,
                easing: "inOutQuad"
            });
            var s = e.outerHeight(),
                n = t.outerHeight(),
                o = e.scrollTop(),
                c = function(e, t) {
                    var i = e.offset(),
                        s = t.offset();
                    return {
                        top: s.top - i.top,
                        left: s.left - i.left
                    }
                }(e, t).top,
                l = c + n,
                u = o;
            l > s && (u = o + (l - s));
            c < 0 && (u = o + c);
            return a.ease({
                from: o,
                to: u,
                time: i.time,
                easing: a.easeFn(i.easing),
                applicator: function(t) {
                    e.scrollTop(t)
                }
            })
        }
    }
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    var s, n = i(7);
    (s = n) && s.__esModule;
    TD.buildID = "d6d86cd0313f4af1b12ae7486d2e677b8ddb6aa8", TD.buildIDShort = "d6d86cd", TD.version = "4.0.180926155552", TD.config = i(1214), e.exports = TD.config
}, , , , , , , , , , function(e, t, i) {
    "use strict";
    e.exports = {
        minimum_version: "4.0.180807020000",
        web_root: "https://tweetdeck.twitter.com",
        api_root: "https://tweetdeck.twitter.com",
        twitter_api_base: "https://api.twitter.com",
        twitter_api_version: "1.1",
        twitter_stream_base: "https://userstream.twitter.com",
        twitter_upload_base: "https://upload.twitter.com",
        td_create_key: "WRaMQNHU2Jy51bhFEL3C",
        td_create_secret: "MiLkmD1t1xlZqKoLLY8ScxX5gwpOQsjBopZcV4KLcuo=",
        bearer_token: "AAAAAAAAAAAAAAAAAAAAAF7aAAAAAAAASCiRjWvh7R5wxaKkFp7MM%2BhYBqM%3DbQ0JPmjU9F6ZoMhDfI4uTNAaQuTDm2uO9x3WFVr2xBZ2nhjdP0",
        mapbox_access_token: "pk.eyJ1IjoidHdpdHRlcmdlbzQ0YWJjN2IiLCJhIjoiY2lyNmY4bzlkMDBkc2cybmZ0ZDhmOXpiOSJ9.ZqJPuJTqqxFLO0oUD0zFAw",
        client_name: "blackbird",
        sync_name: "blackbird",
        touchdeck: !0
    }
}, , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    var s = a(i(47)),
        n = a(i(1)),
        r = i(23);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = {};
    e.exports = o;
    o.maybe_log = function(e, t) {
        var i = n.default.isUndefined(t) ? 1 : t;
        TD.config.debug_level >= i && console.log(e)
    }, o.NotJsonable = function(e) {
        n.default.extend(this, e), this.___ = e.toString()
    }, o.NotJsonable.prototype = {};
    var c = function(e) {
        console.log.apply(console, n.default.map(e, function(e) {
            if (!n.default.isUndefined(e)) try {
                return JSON.parse((0, s.default)(e))
            } catch (t) {
                return new o.NotJsonable(e)
            }
        }))
    };
    o.stateLog = function() {
        TD.config.debug_level >= 2 && c(arguments)
    }, o.verboseLog = function() {
        TD.config.debug_level >= 4 && c(n.default.toArray(arguments))
    }, o.warn = function() {
        TD.config.debug_level >= 0 && console.log.apply(console, n.default.toArray(arguments))
    }, o.trace = function(e) {
        if (TD.config.debug_level >= 1) {
            for (var t, i = arguments.length, s = Array(i > 1 ? i - 1 : 0), n = 1; n < i; n++) s[n - 1] = arguments[n];
            (t = console).log.apply(t, ["TRACE: " + e + ": "].concat(s))
        }
    }, o.printStacktrace = function() {
        if (TD.config.debug_menu) try {
            throw new Error("stack trace or gtfo")
        } catch (e) {
            console.log(e.stack)
        }
    }, o.getStack = function() {
        try {
            throw new Error("stack trace or gtfo")
        } catch (e) {
            return TD.util.isChromeApp() ? e.stack.split("\n").slice(2).join("\n") : ""
        }
    }, o.errmark = function(e, t) {
        return e || (e = t, t = "missing message"), console.log("---ERROR---\x3e>>>>->>>>->>>->>->--" + t + "--<-<<--"), o.maybe_log(e), console.log(e.stack), e
    }, o.assert = function(e, t, i) {
        if (!e) throw console.log("------------------------------------------"), console.log(["ASSERT FAILURE", t, i]), o.printStacktrace(), console.log("------------------------------------------"), TD.sync.trace && TD.sync.trace.assert(t, i), new Error("AssertionError")
    }, o.precondition = function(e, t, i) {
        if (!e) throw console.log("------------------------------------------"), console.log(["PRECONDITION FAILURE", t, i]), o.printStacktrace(), console.log("------------------------------------------"), TD.sync.trace && TD.sync.trace.assert("PRECONDITION " + t, i), new Error("PreconditionAssertionError")
    }, o._break = function() {
        console.log("you might want to set a breakpoint here ;-)")
    }, o.warning = function(e) {
        var t = n.default.toArray(arguments).slice(1);
        console.log(["WARNING", e, o.pformat(t)])
    }, o.error = function(e) {
        var t = n.default.toArray(arguments).slice(1);
        console.log(["ERROR", e, o.pformat(t)])
    }, o.list_to_set = function(e) {
        var t = {};
        return n.default.each(e, function(e) {
            t[e] = !0
        }), t
    }, o.pprint = function(e) {
        return o.maybe_log((0, s.default)(e, null, "  "), 2), e
    }, o.pformat = function(e) {
        return (0, s.default)(e, null, "  ")
    }, o.repr = function(e) {
        return (0, s.default)(e)
    }, o.clone = function(e) {
        if (null === e || n.default.isUndefined(e)) return e;
        try {
            return JSON.parse((0, s.default)(e))
        } catch (t) {
            return o.stateLog("util.clone couldn't parse object", e, t), ["<not jsonable>", e]
        }
    }, o.dictMap = function(e, t, i) {
        var s = {};
        return n.default.each(n.default.map(e, t, i), function(e) {
            s[e[0]] = e[1]
        }), s
    }, o.stall = function(e, t) {
        n.default.isUndefined(t) && (t = 0);
        var i = new TD.core.defer.Deferred;
        return n.default.delay(n.default.bind(i.callback, i), 1e3 * t, e), i
    }, o.autoRetry = function(e, t, i) {
        var s = e();
        return t.forEach(function(t) {
            s.addErrback(function(s) {
                if (!i || i(s)) {
                    var n = new TD.core.defer.Deferred;
                    return n.addCallback(e), setTimeout(function() {
                        n.callback()
                    }, t), n
                }
                return s
            })
        }), s
    }, o.DO_THING_ANYWAY = "doThingAnyway", o.deDupeDeferred = function(e, t) {
        var i = [];
        return t = t || function() {},
            function() {
                var s = function(s) {
                    var r = n.default.find(i, function(e) {
                        return n.default.isEqual(e.args, s)
                    });
                    return r || (r = {
                        args: n.default.cloneDeep(s),
                        needsThingDone: !0,
                        deferreds: [],
                        doThing: function() {
                            var t = [null].concat(n.default.cloneDeep(s));
                            return TD.core.defer.maybeDeferred(e.bind.apply(e, t))
                        },
                        beforeDeDupe: function() {
                            var e;
                            try {
                                e = t.apply(null, n.default.cloneDeep(s))
                            } catch (e) {}
                            return e
                        }
                    }, i.push(r)), r
                }([].slice.call(arguments));
                if (!s.needsThingDone && s.beforeDeDupe() === o.DO_THING_ANYWAY) return s.doThing();
                var r = new TD.core.defer.Deferred;
                return s.deferreds.push(r), s.needsThingDone && (s.needsThingDone = !1, s.doThing().addBoth(function(e) {
                    i = i.filter(function(t) {
                        return t !== e
                    });
                    var t = [].slice.call(arguments, 1);
                    e.deferreds.forEach(function(e) {
                        e.callback.apply(e, t)
                    })
                }.bind(null, s))), r
            }
    }, o.makeThingScheduler = function(e, t, i, s, a) {
        var c = !1,
            l = !1;
        s = s || function() {
            return !0
        }, a = n.default.isUndefined(a) ? 1 : a;
        var u = [],
            d = function s() {
                if (o.maybe_log(["_maybe_do_stuff", i, "want stuff done:", c, "am doing stuff:", l], 8), c)
                    if (l) o.maybe_log("am already doing stuff", 8);
                    else {
                        if (l = !0, c = !1, t) var a = (0, r.showNotification)({
                            message: t,
                            timeoutDelayMs: 1 / 0
                        });
                        var d = TD.core.defer.maybeDeferred(e);
                        d.addCallback(function(e) {
                            if (l = !1, t && (0, r.removeNotification)({
                                    notification: a,
                                    timeoutDelayMs: 100
                                }), c) s();
                            else {
                                var i = u;
                                u = [];
                                for (var o = 0; o < i.length; o++) try {
                                    i[o].callback(e)
                                } catch (e) {
                                    n.default.defer(n.default.bind(i[o].errback, i[o]), e)
                                }
                            }
                        }), d.addErrback(function(s) {
                            o.errmark(s, 'do_stuff for "' + i + '" yielded error when calling; ' + e), l = !1, t && ((0, r.removeNotification)({
                                notification: a,
                                timeoutDelayMs: 100
                            }), (0, r.showErrorNotification)({
                                message: "Error with " + t
                            }));
                            var c = u;
                            u = [];
                            for (var d = 0; d < c.length; d++) try {
                                c[d].errback(s)
                            } catch (e) {
                                n.default.defer(n.default.bind(c[d].errback, c[d]), e)
                            }
                        })
                    }
                else o.maybe_log("not doing stuff; someone else did stuff before us", 8)
            };
        return function(e) {
            if (!s()) return o.maybe_log("not triggering (guarded): " + i, 8), TD.core.defer.succeed();
            e = n.default.isUndefined(e) ? a : e, o.maybe_log('trigger func called "' + i + '"', 8), c = !0;
            var t = new TD.core.defer.Deferred;
            return u.push(t), setTimeout(d, 1e3 * e), t
        }
    }
}, , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.render = function(e, t) {
        return n.default.render(s.default.createElement(r.ThemeRoot, null, e), t)
    }, t.unmountComponentAtNode = function(e) {
        n.default.unmountComponentAtNode(e)
    };
    var s = a(i(6)),
        n = a(i(86)),
        r = i(155);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
}, , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = f(i(83)),
        n = f(i(10)),
        r = f(i(11)),
        a = f(i(236));
    t.getAccountPipeline = function(e) {
        var t = e.getUserID();
        p.has(t) || p.set(t, new g(e));
        return p.get(t)
    };
    var o = f(i(0));
    i(1778);
    var c = f(i(29)),
        l = f(i(1)),
        u = f(i(95)),
        d = i(1779),
        h = i(107),
        m = f(i(69));

    function f(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var p = new a.default;
    var g = function() {
        function e(t) {
            var i = this;
            (0, n.default)(this, e), this.updateSubscriptions = function(e) {
                var t = e.toSubscribe,
                    s = void 0 === t ? [] : t,
                    n = e.toUnsubscribe,
                    r = void 0 === n ? [] : n,
                    a = e.sessionId,
                    c = void 0 === a ? "" : a;
                (0, o.default)(document).trigger("metric", {
                    key: "project-content:live-pipeline-update-subscriptions"
                });
                var l = TD.config.twitter_api_base + "/" + TD.config.twitter_api_version + "/live_pipeline/update_subscriptions";
                return i.makeFetched(l, {
                    method: "POST",
                    headers: {
                        "LivePipeline-Session": c
                    },
                    params: {
                        sub_topics: s.join(","),
                        unsub_topics: r.join(",")
                    },
                    account: i.account
                })
            }, this.account = t;
            var s = (0, h.maybeAddContributorsHeaders)({}, t),
                r = (0, u.default)(t.isContributor(), function() {
                    return i.makeEventSourcePolyfill.bind(i, s)
                }, function() {
                    return i.makeEventSource
                });
            this.livepipeline = new d.LivePipeline({
                makeEventSource: r,
                updateSubscriptions: this.updateSubscriptions
            })
        }
        return (0, r.default)(e, [{
            key: "makeEventSource",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                    t = (0, m.default)(TD.config.twitter_api_base + "/live_pipeline/events").query({
                        topic: e.join(",")
                    });
                return (0, o.default)(document).trigger("metric", {
                    key: "project-content:event-source"
                }), s.default.resolve(new EventSource(t, {
                    withCredentials: !0
                }))
            }
        }, {
            key: "makeEventSourcePolyfill",
            value: function(e) {
                var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
                    i = (0, m.default)(TD.config.twitter_api_base + "/live_pipeline/events").query({
                        topic: t.join(",")
                    }),
                    n = {
                        withCredentials: !0,
                        headers: e
                    };
                return (0, o.default)(document).trigger("metric", {
                    key: "project-content:event-source-polyfill"
                }), s.default.resolve(new EventSourcePolyfill(i, n))
            }
        }, {
            key: "makeFetched",
            value: function(e, t) {
                return (0, h.fetched)(e, t)
            }
        }, {
            key: "subscribe",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this.updateSubscriptions({
                    toSubscribe: e,
                    sessionId: t
                })
            }
        }, {
            key: "unsubscribe",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                this.updateSubscriptions({
                    toUnsubscribe: e,
                    sessionId: t
                })
            }
        }, {
            key: "executeGraphQLQuery",
            value: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                (0, o.default)(document).trigger("metric", {
                    key: "project-content:graphql-query"
                });
                var t = TD.config.twitter_api_base + "/graphql";
                return (0, h.fetched)(t, {
                    method: "POST",
                    headers: {
                        "content-type": "application/json"
                    },
                    params: e,
                    account: this.account
                })
            }
        }, {
            key: "subscribeToTweetEngagement",
            value: function(e) {
                if (!e) return c.default.Observable.empty();
                var t = "/tweet_engagement/" + e;
                return this.subscribeToTopic(t)
            }
        }, {
            key: "subscribeToTopic",
            value: function(e) {
                var t = this;
                return e ? c.default.Observable.create(function(i) {
                    var s = t.livepipeline.subscribeTopic(e, function(t) {
                        i.next({
                            topic: e,
                            payload: t
                        })
                    });
                    return function() {
                        return s.teardown()
                    }
                }) : c.default.Observable.empty()
            }
        }, {
            key: "subscribeToGraphQLQuery",
            value: function(e) {
                var t = this,
                    i = "ok",
                    s = new c.default.BehaviorSubject(i);
                return e ? {
                    status$: s.distinctUntilChanged(),
                    messages$: c.default.Observable.create(function(n) {
                        var r = new v(4e4, function() {
                                i = "notOk", s.next(i), TD.util.metric("project-content:subscribe:ok-missing")
                            }),
                            a = new d.GraphQLSubscription({
                                livePipeline: t.livepipeline,
                                executeGraphQLQuery: function() {
                                    return t.executeGraphQLQuery(e)
                                },
                                callback: function(e) {
                                    n.next({
                                        payload: l.default.get(e, "data"),
                                        errors: l.default.get(e, "errors")
                                    })
                                },
                                onSubscriptionStatus: function(e) {
                                    "Ok" === e && (r.reset(), i = "ok", s.next(i)), TD.util.metric("project-content:subscribe:status-" + e.toLowerCase())
                                },
                                onGraphQLResponse: function(e) {
                                    return TD.util.metric("project-content:subscribe:graphql-response-" + e)
                                },
                                onBackoff: function(e) {
                                    return TD.util.metric("project-content:subscribe:backoff", [e], "metric")
                                }
                            });
                        return function() {
                            r.stop(), a.teardown()
                        }
                    })
                } : {
                    status$: s,
                    messages$: c.default.Observable.empty()
                }
            }
        }]), e
    }();
    t.default = g;
    var v = function() {
        function e(t, i) {
            (0, n.default)(this, e), this.onTimeout = i, this.timeoutMs = t
        }
        return (0, r.default)(e, [{
            key: "reset",
            value: function() {
                this.stop(), this.intervalId = setInterval(this.onTimeout, this.timeoutMs)
            }
        }, {
            key: "stop",
            value: function() {
                this.intervalId && clearInterval(this.intervalId)
            }
        }]), e
    }()
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(8),
        o = i(85),
        c = i(1),
        l = i(160);
    e.exports = o.mixin(function() {
        this.attributes({
            replies: null,
            excludedRecipientsIds: [],
            withUserBio: !0,
            replyCheckboxSelector: ".js-reply-checkbox",
            autoFocus: !0,
            withComposeContext: !1
        }), this.after("initialize", function() {
            var e = this.attr,
                t = e.replies,
                i = e.excludedRecipientsIds,
                s = t[0];
            c.map(t, function(e, t) {
                e.isChecked = !c.includes(i, e.id)
            }), s.isChecked = !0, s.isDisabled = !0;
            var n = a.render("compose/reply_list", this.attr);
            this.$node.html(n), this.on("change", {
                replyCheckboxSelector: this.handleReplyCheckbox
            })
        }), this.handleReplyCheckbox = function(e, t) {
            var i = (0, r.default)(t.el).attr("data-id"),
                s = !t.el.checked;
            this.trigger(document, "uiRecipientToggledFromList", {
                userId: i,
                shouldExclude: s
            })
        }
    }, l)
}, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.namespaceStringFromTerms = function(e) {
        return s.map(function(t) {
            return e[t] || ""
        }).join(":")
    }, t.scribeTermsMatch = n, t.scribeQueryMatch = function(e, t) {
        return n(t, e)
    };
    var s = ["client", "page", "section", "component", "element", "action"];

    function n(e, t) {
        var i = t.split(":");
        return s.every(function(t, s) {
            var n = e[t] || "",
                r = i[s] || "";
            return "*" === r || r === n
        })
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.PLACE_TYPE = void 0;
    var s = r(i(10)),
        n = r(i(11));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = t.PLACE_TYPE = {
            SUPERNAME: 19,
            COUNTRY: 12,
            TOWN: 7
        },
        o = function() {
            function e() {
                (0, s.default)(this, e), this.placeType = null, this.name = "", this.woeid = -1, this.url = "", this.countryCode = "", this.country = "", this.label = "", this.sortString = "", this.isTown = !1
            }
            return (0, n.default)(e, [{
                key: "fromJSONObject",
                value: function(e) {
                    switch (this.name = e.name, this.woeid = e.woeid, this.url = e.url, this.countryCode = e.countryCode, this.country = e.country, this.placeType = e.placeType, this.placeType.code) {
                        case a.TOWN:
                            this.label = "—" + this.name, this.sortString = this.country + this.name, this.isTown = !0;
                            break;
                        case a.SUPERNAME:
                            this.label = this.name.toUpperCase(), this.sortString = "";
                            break;
                        default:
                            this.label = this.name, this.sortString = this.name
                    }
                    return this
                }
            }]), e
        }();
    t.default = o
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.GridChartReact = void 0;
    var s = g(i(7)),
        n = g(i(13)),
        r = g(i(10)),
        a = g(i(11)),
        o = g(i(14)),
        c = g(i(15)),
        l = i(6),
        u = g(l),
        d = (g(i(9)), function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(251))),
        h = i(1902),
        m = g(i(608)),
        f = i(243),
        p = i(12);

    function g(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var v = function(e) {
        function t() {
            return (0, r.default)(this, t), (0, o.default)(this, (t.__proto__ || (0, n.default)(t)).apply(this, arguments))
        }
        return (0, c.default)(t, e), (0, a.default)(t, [{
            key: "renderLegend",
            value: function() {
                if (!this.props.chartData) return null;
                var e = this.props.chartOptions;
                return this.props.chartData.map(function(t, i) {
                    return u.default.createElement(m.default, {
                        key: t.label || i,
                        className: "margin-r--20",
                        color: e.seriesColor(null, i),
                        label: t.label,
                        value: TD.util.truncateNumber(d.sum(t.data, function(e) {
                            return e.count
                        }))
                    })
                })
            }
        }, {
            key: "render",
            value: function() {
                return u.default.createElement(l.Fragment, null, u.default.createElement("div", {
                    className: "flex"
                }, this.props.displayLegend ? this.renderLegend() : null), u.default.createElement(h.GridChartTimeSeriesUtc, (0, s.default)({}, this.props.chartOptions, {
                    data: this.props.chartData,
                    style: {
                        width: this.props.chartWidth,
                        height: this.props.chartHeight
                    }
                })))
            }
        }]), t
    }(l.Component);
    v.defaultProps = {
        displayLegend: !0,
        chartOptions: (0, f.makeChartDefaults)(),
        chartWidth: "100%",
        chartHeight: "300px"
    }, t.default = (0, p.reactToUiBase)(v);
    t.GridChartReact = v
}, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.isGif = function(e) {
        return "image/gif" === e.type
    }, t.isVideo = function(e) {
        return "video/mp4" === e.type
    }, t.getMaxAllowedFiles = function() {
        return 4
    }, t.getMaxAllowedSize = function() {
        return (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).bytes ? 5 * s : 5
    }, t.getMaxAllowedGifSize = function() {
        return (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).bytes ? 15 * s : 15
    }, t.getMaxAllowedVideoSize = function() {
        return (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).bytes ? 512 * s : 512
    }, t.getFileType = function(e) {
        return e.type.split("/")[1]
    };
    var s = 1048576
}, function(e, t, i) {
    "use strict";
    var s = i(5).component,
        n = i(1996);
    e.exports = s(function() {
        this.attributes({
            searchControlSelector: ".js-search-input-control"
        }), this.waitingForAsyncResponse = function(e, t) {
            this.trigger(this.$searchControls, "uiAsyncFormWaitingForResponse")
        }, this.receivedAsyncResponse = function(e, t) {
            this.trigger(this.$searchControls, "uiAsyncFormReceivedResponse")
        }, this.handleSearchInputCleared = function() {
            this.$node.closest("form").submit()
        }, this.destroy = function(e, t) {
            this.teardown()
        }, this.before("teardown", function() {
            this.trigger(this.$searchControls, "uiSearchInputDestroy")
        }), this.after("initialize", function() {
            this.on("uiReceivedAsyncResponse", this.receivedAsyncResponse), this.on("uiWaitingForAsyncResponse", this.waitingForAsyncResponse), this.on("uiDestroyAsynchronousForm", this.destroy), this.on("uiSearchInputCleared", this.handleSearchInputCleared), this.$searchControls = this.select("searchControlSelector"), n.attachTo(this.$searchControls)
        })
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = u(i(7));
    t.getTrends = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : p(),
            i = h + "/trends/plus.json",
            s = {
                account: t,
                handleSuccess: !0,
                handleError: !0,
                method: "GET",
                processor: f,
                params: e
            },
            r = l.default.request(i, s);
        return r.addCallbacks(function(e) {
            return n.default.processSuccessResponse(i, s, e, {
                oauth: {
                    account: t
                }
            }).data
        }, function(e) {
            return n.default.processErrorResponse(i, s, e, t)
        }), r
    }, t.getTrendLocations = function() {
        var e = h + "/trends/available.json",
            t = p(),
            i = {
                account: t,
                handleSuccess: !0,
                handleError: !0,
                method: "GET",
                processor: m
            },
            s = l.default.request(e, i);
        return s.addCallbacks(function(s) {
            return n.default.processSuccessResponse(e, i, s, {
                oauth: {
                    account: t
                }
            }).data
        }, function(s) {
            return n.default.processErrorResponse(e, i, s, t)
        }), s
    }, t.fetchHorizonWebCardDataFromGraphQL = function(e) {
        return l.default.graphqlRequest((0, s.default)({}, c.default, {
            variables: {
                tweet_id: e
            }
        }))
    };
    var n = u(i(192)),
        r = u(i(604)),
        a = u(i(357)),
        o = i(19),
        c = u(i(2023)),
        l = u(i(107));

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var d = TD.config,
        h = d.twitter_api_base + "/" + d.twitter_api_version;

    function m(e) {
        return e.map(function(e) {
            return (new a.default).fromJSONObject(e)
        }).sort(o.compareBySortString)
    }

    function f(e) {
        return e.modules.map(function(e) {
            return (new r.default).fromJSONObject({
                name: e.trend.name,
                query: e.trend.target.query,
                metaDescription: e.trend.meta_description,
                rank: e.trend.rank,
                target: e.trend.target,
                badges: e.trend.badges
            })
        })
    }

    function p() {
        return TD.storage.accountController.getPreferredAccount("twitter")
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component,
        o = i(623),
        c = i(2025),
        l = i(2026),
        u = i(2027),
        d = i(2028),
        h = i(2029),
        m = i(2030),
        f = i(2031),
        p = i(1);
    e.exports = a(function() {
        this.attributes({
            inputSelector: ".js-app-search-input",
            dropdownSelector: ".js-typeahead-dropdown",
            itemsSelector: ".js-typeahead-item",
            itemSelectedClass: "is-selected",
            itemSelectedSelector: ".js-typeahead-item.is-selected",
            deciders: {
                showDebugInfo: !1
            },
            datasources: ["topics", "savedSearches", "recentSearches", "users", "lists", "conversations", "locations"],
            limits: {
                users: 5,
                topics: 5,
                lists: 2,
                conversations: 3,
                locations: 4
            },
            datasourcesRecentOnly: ["recentSearches"],
            queryTypes: ["topic", "saved-search", "recent-search", "user", "conversation", "location"],
            minHeight: 300,
            hideAfterSelect: !1,
            autoSelect: !1,
            delayOnInputInMs: 0,
            withClickTrap: !1
        }), this.after("initialize", function() {
            if (this.query = null, this.on(document, "dataTypeaheadSuggestions", this.handleDataTypeaheadSuggestions), this.on("uiTypeaheadInputFocus", this.handleTypeaheadInputFocus), this.on("uiTypeaheadInputBlur", this.handleTypeaheadInputBlur), this.on("uiTypeaheadInputSubmit", this.handleTypeaheadInputSubmit), this.on("uiTypeaheadInputChanged", p.debounce(this.handleTypeaheadInputChanged, this.attr.delayOnInputInMs)), this.on("uiTypeaheadInputMoveUp", this.handleTypeaheadInputMoveUp), this.on("uiTypeaheadInputMoveDown", this.handleTypeaheadInputMoveDown), this.on("uiTypeaheadInputRight", this.handleTypeaheadInputMoveRight), this.on("uiTypeaheadInputLeft", this.handleTypeaheadInputMoveLeft), this.on("uiTypeaheadInputTab", this.completeSelection), this.on("uiTypeaheadInputEscaped", this.handleTypeaheadInputEscaped), this.on("mouseover", {
                    itemsSelector: this.handleItemMouseover
                }), this.on("mouseout", {
                    itemsSelector: this.handleItemMouseout
                }), this.on("click", {
                    itemsSelector: this.handleItemClick
                }), this.attr.withClickTrap) {
                var e = this.select("dropdownSelector").add(this.select("inputSelector"));
                this.setClickTrapTarget(e), this.onReceiveClick(this.handleClickTrapClick)
            }
        }), this.handleClickTrapClick = function() {
            this.hideDropdown(), this.trigger(this.select("inputSelector"), "uiTypeaheadNoItemSelected")
        }, this.handleTypeaheadInputEscaped = function() {
            this.hideDropdown()
        }, this.handleTypeaheadInputFocus = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            this.hasFocus = !0, t.query !== this.query && this.handleTypeaheadInputChanged(e, t)
        }, this.handleTypeaheadInputBlur = function() {
            this.hasFocus = !1, this.trigger("dataTypeaheadQueryReset")
        }, this.handleItemMouseover = function(e, t) {
            this.select("itemsSelector").removeClass(this.attr.itemSelectedClass), (0, r.default)(t.el).addClass(this.attr.itemSelectedClass)
        }, this.handleItemMouseout = function(e, t) {
            this.select("itemsSelector").removeClass(this.attr.itemSelectedClass)
        }, this.moveSelection = function(e) {
            var t, i = this.select("itemsSelector").filter(":visible"),
                s = i.filter(this.attr.itemSelectedSelector);
            s.removeClass(this.attr.itemSelectedClass), (t = s.length ? i.index(s) + e : -1 + e) < 0 ? t = i.length - 1 : t >= i.length && (t = 0), i.eq(t).addClass(this.attr.itemSelectedClass)
        }, this.getSelectedItemIndex = function() {
            var e = this.select("itemsSelector").filter(":visible"),
                t = e.filter(this.attr.itemSelectedSelector);
            return e.index(t)
        }, this.handleTypeaheadInputMoveUp = function(e) {
            this.moveSelection(-1)
        }, this.handleTypeaheadInputMoveDown = function(e) {
            this.moveSelection(1)
        }, this.handleTypeaheadInputMoveRight = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                i = t.query || ""; - 1 === this.getSelectedItemIndex() ? t.cursorPosition >= i.length && this.moveSelection(1) : this.completeSelection(e, t)
        }, this.handleTypeaheadInputMoveLeft = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            "rtl" === t.dir ? this.completeSelection(e, t) : (this.select("itemsSelector").removeClass(this.attr.itemSelectedClass), this.trigger("uiTypeaheadInputFocus", t))
        }, this.handleTypeaheadInputChanged = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                i = t.query || "",
                s = this.attr.datasources;
            0 === i.trim().length && (s = this.attr.datasourcesRecentOnly), this.query = i, this.select("itemsSelector").removeClass(this.attr.itemSelectedClass), this.trigger("uiNeedsTypeaheadSuggestions", {
                query: i,
                datasources: s,
                dropdownId: this.getDropdownId(),
                type: "search",
                limits: this.attr.limits
            })
        }, this.getDropdownId = function() {
            return this.dropdownId || (this.dropdownId = "swift_typeahead_dropdown_" + Date.now()), this.dropdownId
        }, this.generateItemFromSelectedElement = function(e) {
            var t, i = e.attr("data-search-type");
            switch (i) {
                case "user":
                    t = {
                        id: e.attr("data-user-id"),
                        name: e.attr("data-user-name"),
                        screenName: e.attr("data-screen-name"),
                        profileImageURL: e.attr("data-profile-image-url"),
                        verified: "true" === e.attr("data-verified")
                    };
                    break;
                case "conversation":
                    t = {
                        conversationId: e.attr("data-conversation-id"),
                        accountKey: e.attr("data-account-key")
                    };
                    break;
                case "location":
                    t = {
                        name: e.attr("data-location-name"),
                        lat: e.attr("data-location-lat"),
                        lng: e.attr("data-location-lng")
                    };
                    break;
                default:
                    t = {}
            }
            return t
        }, this.triggerSelectionEvent = function(e) {
            var t = e.$selected,
                i = e.removeItem,
                s = this.select("itemsSelector"),
                n = s.index(t),
                r = this.query,
                a = t.data("search-query"),
                o = t.data("search-scope");
            (r || a) && (this.trigger(t, "uiTypeaheadItemSelected", {
                index: n,
                searchType: t.data("search-type"),
                query: a,
                input: r,
                item: this.generateItemFromSelectedElement(t),
                removeItem: Boolean(i),
                searchScope: o
            }), this.attr.hideAfterSelect && this.hideDropdown())
        }, this.handleItemClick = function(e, t) {
            var i = (0, r.default)(e.target).hasClass("remove-recent-search-item");
            this.triggerSelectionEvent({
                $selected: (0, r.default)(t.el),
                removeItem: i
            })
        }, this.handleTypeaheadInputSubmit = function(e) {
            var t = this.select("itemsSelector").filter(this.attr.itemSelectedSelector).filter(":visible").first();
            t.length ? this.triggerSelectionEvent({
                $selected: t
            }) : this.trigger(this.select("inputSelector"), "uiTypeaheadNoItemSelected")
        }, this.completeSelection = function(e, t) {
            var i = t && "rtl" === t.dir ? "rtl" : "ltr";
            if (!("rtl" === i && "uiTypeaheadInputRight" === e.type || -1 !== ["ltr", void 0, ""].indexOf(i) && "uiTypeaheadInputLeft" === e.type)) {
                var s = this.select("itemsSelector").filter(this.attr.itemSelectedSelector).first();
                if (!s.length) {
                    var n = (s = this.select("itemsSelector").first()).data("search-query") !== this.query;
                    if (!n) return void("uiTypeaheadInputTab" === e.type && (this.hasFocus = !1))
                }
                var r = s.data("search-type"),
                    a = this.attr.queryTypes.some(function(e) {
                        return e === r
                    });
                if (a) {
                    var o = s.data("search-query"),
                        c = this.select("itemsSelector"),
                        l = c.index(s);
                    this.trigger("uiTypeaheadItemComplete", {
                        value: o,
                        searchType: s.data("search-type"),
                        index: l,
                        query: o,
                        item: this.generateItemFromSelectedElement(s)
                    }), this.hideDropdown()
                } else "uiTypeaheadInputTab" === e.type && (this.hasFocus = !1)
            }
        }, this.hideDropdown = function() {
            this.attr.withClickTrap && this.disableClickTrap(), this.attr.hideAfterSelect && this.select("dropdownSelector").addClass("is-hidden")
        }, this.showDropdown = function() {
            this.attr.hideAfterSelect && this.select("dropdownSelector").removeClass("is-hidden"), this.attr.withClickTrap && this.enableClickTrap()
        }, this.handleDataTypeaheadSuggestions = function(e, t) {
            var i = this.select("itemsSelector").filter(this.attr.itemSelectedSelector);
            if (t.dropdownId === this.getDropdownId() && t.query === this.query && this.hasFocus && !i.length) {
                this.trigger("uiTypeaheadRenderResults", t);
                var s = this.attr.datasources.some(function(e) {
                    return t.suggestions[e] && t.suggestions[e].length
                });
                if (s) {
                    this.trigger("uiTypeaheadSuggestions"), this.showDropdown(), this.attr.autoSelect && 0 === this.select("itemSelectedSelector").length && this.select("itemsSelector").first().addClass("is-selected");
                    var n = p.get(t, "datasources", []),
                        r = 1 === n.length && "recentSearches" === n[0];
                    this.select("itemsSelector").removeClass("list-item-last").filter(":visible").last().addClass(r ? "list-item" : "list-item-last")
                } else this.trigger("uiTypeaheadNoSuggestions")
            }
        }
    }, o, u, c, l, h, m, d, f)
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    i.r(t);
    var s, n = i(0);
    (s = i.n(n).a).createElement = function(e) {
        return s(document.createElement(e))
    }
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    var s, n = i(1535),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    e.exports = {
        parse: function(e) {
            return r.default.parse(e, function(e) {
                switch (e) {
                    case "a9":
                    case "ae":
                    case "2122":
                        return !1
                }
                return "https://abs.twimg.com/emoji/v2/72x72/" + e + ".png"
            })
        }
    }
}, , function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(1));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = {
        _index: null,
        _initialiseIndex: function() {
            var e = a.getAllLanguages();
            a._index = {}, e.forEach(function(e) {
                a._index[e.code] = e, e.actual_code && (a._index[e.actual_code] = e)
            })
        },
        getLanguageFromISOCode: function(e) {
            a._index || a._initialiseIndex();
            var t = a._index[e];
            return n.default.clone(t)
        },
        getSystemLanguageCode: function(e) {
            var t = navigator.language || navigator.userLanguage || "";
            return e && (t = t.replace(/-[a-z]+$/i, "")), t
        },
        isSupportedTranslationSourceLanguage: function(e) {
            return -1 !== a.getSupportedTranslationSourceLanguages().indexOf(e.toLowerCase())
        },
        isSystemLangSupportedDestinationLanguage: function() {
            var e = a.getSupportedTranslationDestinationLanguages();
            return -1 !== e.indexOf(a.getSystemLanguageCode(!0).toLowerCase()) || -1 !== e.indexOf(a.getSystemLanguageCode(!1).toLowerCase())
        },
        getSupportedDestinationSystemLanguage: function() {
            return -1 !== a.getSupportedTranslationDestinationLanguages().indexOf(a.getSystemLanguageCode(!0).toLowerCase()) ? a.getSystemLanguageCode(!0) : a.getSystemLanguageCode(!1)
        },
        getAllLanguages: function() {
            return [{
                code: "am",
                localized_name: (0, s.default)("Amharic"),
                name: "አማርኛ"
            }, {
                code: "ar",
                localized_name: (0, s.default)("Arabic"),
                name: "العربية"
            }, {
                code: "bg",
                localized_name: (0, s.default)("Bulgarian"),
                name: "Български"
            }, {
                code: "bn",
                localized_name: (0, s.default)("Bengali"),
                name: "বাংলা"
            }, {
                code: "bo",
                localized_name: (0, s.default)("Tibetan"),
                name: "བོད་སྐད"
            }, {
                code: "ca",
                localized_name: (0, s.default)("Catalan"),
                name: "Català"
            }, {
                code: "chr",
                localized_name: (0, s.default)("Cherokee"),
                name: "ᏣᎳᎩ"
            }, {
                code: "cs",
                localized_name: (0, s.default)("Czech"),
                name: "čeština"
            }, {
                code: "da",
                localized_name: (0, s.default)("Danish"),
                name: "Dansk"
            }, {
                code: "de",
                localized_name: (0, s.default)("German"),
                name: "Deutsch"
            }, {
                code: "dv",
                localized_name: (0, s.default)("Maldivian"),
                name: "ދިވެހި"
            }, {
                code: "el",
                localized_name: (0, s.default)("Greek"),
                name: "Ελληνικά"
            }, {
                code: "en",
                localized_name: (0, s.default)("English"),
                name: "English"
            }, {
                code: "es",
                localized_name: (0, s.default)("Spanish"),
                name: "Español"
            }, {
                code: "et",
                localized_name: (0, s.default)("Estonian"),
                name: "eesti"
            }, {
                code: "fa",
                localized_name: (0, s.default)("Persian"),
                name: "فارسی"
            }, {
                code: "fi",
                localized_name: (0, s.default)("Finnish"),
                name: "Suomi"
            }, {
                code: "fr",
                localized_name: (0, s.default)("French"),
                name: "Français"
            }, {
                code: "gu",
                localized_name: (0, s.default)("Gujarati"),
                name: "ગુજરાતી"
            }, {
                code: "iw",
                actual_code: "he",
                localized_name: (0, s.default)("Hebrew"),
                name: "עברית"
            }, {
                code: "hi",
                localized_name: (0, s.default)("Hindi"),
                name: "हिंदी"
            }, {
                code: "ht",
                localized_name: (0, s.default)("Haitian Creole"),
                name: "Kreyòl ayisyen"
            }, {
                code: "hu",
                localized_name: (0, s.default)("Hungarian"),
                name: "Magyar"
            }, {
                code: "hy",
                localized_name: (0, s.default)("Armenian"),
                name: "Հայերեն"
            }, {
                code: "in",
                actual_code: "id",
                localized_name: (0, s.default)("Indonesian"),
                name: "Bahasa Indonesia"
            }, {
                code: "is",
                localized_name: (0, s.default)("Icelandic"),
                name: "Íslenska"
            }, {
                code: "it",
                localized_name: (0, s.default)("Italian"),
                name: "Italiano"
            }, {
                code: "iu",
                localized_name: (0, s.default)("Inuktitut"),
                name: "ᐃᓄᒃᑎᑐᑦ"
            }, {
                code: "ja",
                localized_name: (0, s.default)("Japanese"),
                name: "日本語"
            }, {
                code: "ka",
                localized_name: (0, s.default)("Georgian"),
                name: "ქართული"
            }, {
                code: "km",
                localized_name: (0, s.default)("Khmer"),
                name: "ខ្មែរ"
            }, {
                code: "kn",
                localized_name: (0, s.default)("Kannada"),
                name: "ಕನ್ನಡ"
            }, {
                code: "ko",
                localized_name: (0, s.default)("Korean"),
                name: "한국어"
            }, {
                code: "lo",
                localized_name: (0, s.default)("Lao"),
                name: "ລາວ"
            }, {
                code: "lt",
                localized_name: (0, s.default)("Lithuanian"),
                name: "Lietuvių"
            }, {
                code: "lv",
                localized_name: (0, s.default)("Latvian"),
                name: "latviešu valoda"
            }, {
                code: "ml",
                localized_name: (0, s.default)("Malayalam"),
                name: "മലയാളം"
            }, {
                code: "my",
                localized_name: (0, s.default)("Myanmar"),
                name: "မြန်မာဘာသာ"
            }, {
                code: "ne",
                localized_name: (0, s.default)("Nepali"),
                name: "नेपाली"
            }, {
                code: "nl",
                localized_name: (0, s.default)("Dutch"),
                name: "Nederlands"
            }, {
                code: "no",
                localized_name: (0, s.default)("Norwegian"),
                name: "Norsk"
            }, {
                code: "or",
                localized_name: (0, s.default)("Oriya"),
                name: "ଓଡ଼ିଆ"
            }, {
                code: "pa",
                localized_name: (0, s.default)("Panjabi"),
                name: "ਪੰਜਾਬੀ"
            }, {
                code: "pl",
                localized_name: (0, s.default)("Polish"),
                name: "Polski"
            }, {
                code: "pt",
                localized_name: (0, s.default)("Portuguese"),
                name: "Português"
            }, {
                code: "ro",
                localized_name: (0, s.default)("Romanian"),
                name: "limba română"
            }, {
                code: "ru",
                localized_name: (0, s.default)("Russian"),
                name: "Русский"
            }, {
                code: "si",
                localized_name: (0, s.default)("Sinhala"),
                name: "සිංහල"
            }, {
                code: "sk",
                localized_name: (0, s.default)("Slovak"),
                name: "slovenčina"
            }, {
                code: "sl",
                localized_name: (0, s.default)("Slovene"),
                name: "slovenski jezik"
            }, {
                code: "sv",
                localized_name: (0, s.default)("Swedish"),
                name: "Svenska"
            }, {
                code: "ta",
                localized_name: (0, s.default)("Tamil"),
                name: "தமிழ்"
            }, {
                code: "te",
                localized_name: (0, s.default)("Telugu"),
                name: "తెలుగు"
            }, {
                code: "th",
                localized_name: (0, s.default)("Thai"),
                name: "ไทย"
            }, {
                code: "tl",
                localized_name: (0, s.default)("Tagalog"),
                name: "Tagalog"
            }, {
                code: "tr",
                localized_name: (0, s.default)("Turkish"),
                name: "Türkçe"
            }, {
                code: "uk",
                localized_name: (0, s.default)("Ukrainian"),
                name: "українська мова"
            }, {
                code: "ur",
                localized_name: (0, s.default)("Urdu"),
                name: "ﺍﺭﺩﻭ"
            }, {
                code: "vi",
                localized_name: (0, s.default)("Vietnamese"),
                name: "Tiếng Việt"
            }, {
                code: "zh",
                localized_name: (0, s.default)("Chinese"),
                name: "中文"
            }]
        },
        getSupportedTranslationSourceLanguages: function() {
            return ["bg", "ca", "zh", "cs", "da", "nl", "en", "et", "fi", "fr", "de", "el", "ht", "hi", "hu", "id", "in", "it", "iw", "ja", "ko", "lv", "lt", "no", "pl", "pt", "ro", "ru", "sk", "sl", "es", "sv", "th", "tr", "uk", "vi", "ar", "fa", "he"]
        },
        getSupportedTranslationDestinationLanguages: function() {
            return ["bg", "ca", "zh-cn", "zh-tw", "cs", "da", "nl", "en", "et", "fi", "fr", "de", "el", "ht", "hi", "hu", "id", "in", "it", "iw", "ja", "ko", "lv", "lt", "no", "pl", "pt", "ro", "ru", "sk", "sl", "es", "sv", "th", "tr", "uk", "vi", "ar", "fa", "he"]
        }
    };
    e.exports = TD.languages = a
}, , , , , function(e, t, i) {
    i(1555), i(469), i(1556), i(1557), i(1558), i(1559), i(1560), i(1561)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = r(i(0)),
        n = r(i(1563));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.default = TD.components.Base = (0, n.default)(function() {
        this.$node = s.default.createElement("div").addClass("js-component")
    }).methods({
        $find: function() {
            return this.$node.find.apply(this.$node, arguments)
        },
        publishEvent: function(e, t) {
            var i = {
                data: t,
                target: this
            };
            TD.storage.notification.notify(e, i)
        },
        bubbleEvent: function(e, t) {
            var i = {
                data: t,
                target: this
            };
            this.$node.trigger(e, [i])
        },
        destroy: function() {
            this.$node.remove()
        },
        show: function() {
            this.$node.show()
        },
        hide: function() {
            this.$node.hide()
        }
    })
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = m(i(13)),
        n = m(i(10)),
        r = m(i(11)),
        a = m(i(14)),
        o = m(i(15)),
        c = m(i(6)),
        l = (m(i(9)), m(i(3))),
        u = i(1773),
        d = m(i(587)),
        h = i(138);

    function m(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var f = function(e) {
        function t() {
            return (0, n.default)(this, t), (0, a.default)(this, (t.__proto__ || (0, s.default)(t)).apply(this, arguments))
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "renderLegacyCard",
            value: function() {
                var e = this.props.legacyCardParams;
                return c.default.createElement(u.LegacyCardReact, {
                    cardName: this.props.card.name,
                    isInvertedDark: e.isInvertedDark,
                    isPossiblySensitive: e.isPossiblySensitive,
                    isContributorAccount: e.isContributorAccount,
                    accountUserId: e.accountUserId,
                    id: e.id,
                    context: this.props.context,
                    scribeNamespace: this.props.scribeNamespace
                })
            }
        }, {
            key: "render",
            value: function() {
                var e = this;
                return (0, h.hasPoll)(this.props.card) ? "column" === this.props.context ? c.default.createElement(p, null) : this.renderLegacyCard() : c.default.createElement(d.default, {
                    cardData: this.props.card,
                    cardContext: this.props.cardContext,
                    renderFallback: function() {
                        return "detail" === e.props.context && (0, h.isAllowedLegacyCard)(e.props.card) ? e.renderLegacyCard() : null
                    }
                })
            }
        }]), t
    }(c.default.Component);

    function p() {
        return c.default.createElement("div", {
            "data-testid": "pollBadge",
            className: "media-badge txt-size-variable--12 txt-mute is-inverted-dark"
        }, c.default.createElement("i", {
            className: "icon icon-poll txt-size-variable--15 align-top"
        }), " ", (0, l.default)("Poll"))
    }
    t.default = f
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = v(i(13)),
        n = v(i(10)),
        r = v(i(11)),
        a = v(i(14)),
        o = v(i(15)),
        c = v(i(7));
    t.HorizonWebCard = b;
    var l = v(i(6)),
        u = (v(i(9)), i(155)),
        d = v(i(1775)),
        h = v(i(3)),
        m = v(i(19)),
        f = v(i(588)),
        p = i(36),
        g = i(159);

    function v(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var T = !1;
    var w = function(e) {
        function t() {
            (0, n.default)(this, t);
            var e = (0, a.default)(this, (t.__proto__ || (0, s.default)(t)).call(this));
            return e.handleScribeEvent = function(e) {
                    e.action, e.cardName, e.cardUrl, e.ctaIndex, e.isMessageMe
                },
                function() {
                    if (!T) {
                        var e = "webkitLineClamp" in document.body.style;
                        u.CardConfig.init({
                            getUserById: function(e) {
                                return f.default.getById(e).toPromise().then(function(e) {
                                    return e ? {
                                        profileImageUrl: e.profileImageURL,
                                        name: e.name,
                                        isVerified: e.isVerified,
                                        isProtected: e.isProtected,
                                        screenName: e.screenName,
                                        translatorType: void 0
                                    } : null
                                })
                            },
                            getCtaString: function(e) {
                                switch (e) {
                                    case "play":
                                        return (0, h.default)("Play");
                                    case "shop":
                                        return (0, h.default)("Shop");
                                    case "book":
                                        return (0, h.default)("Book");
                                    case "connect":
                                        return (0, h.default)("Connect");
                                    case "order":
                                        return (0, h.default)("Order");
                                    case "open":
                                        return (0, h.default)("Open");
                                    case "install":
                                    default:
                                        return (0, h.default)("Install")
                                }
                            },
                            renderLink: function(e, t) {
                                return function(i) {
                                    return l.default.createElement("a", (0, c.default)({
                                        href: e,
                                        target: "_blank",
                                        rel: "url noopener noreferrer",
                                        className: "flex flex-column flex-auto"
                                    }, t), i)
                                }
                            },
                            renderMomentLink: function(e, t) {
                                return function(i) {
                                    return l.default.createElement("a", (0, c.default)({
                                        href: "https://twitter.com/i/moments/" + e,
                                        target: "_blank",
                                        rel: "url noopener noreferrer",
                                        className: "flex flex-column flex-auto"
                                    }, t), i)
                                }
                            },
                            renderProfileLink: function(e, t) {
                                return function(i) {
                                    return l.default.createElement(d.default, (0, c.default)({
                                        screenName: e
                                    }, t), i)
                                }
                            },
                            renderTwemojiText: function(e) {
                                return l.default.createElement("span", {
                                    dangerouslySetInnerHTML: {
                                        __html: m.default.cleanWithEmoji(e)
                                    }
                                })
                            },
                            renderRatingsLabel: function(e) {
                                var t = e.appStarRating,
                                    i = e.appNumRatings;
                                return (0, h.default)("{{stars}} stars – {{ratings}} ratings", {
                                    stars: t + "/5.0",
                                    ratings: i
                                })
                            },
                            shouldLimitTextToSingleLine: function() {
                                return !e
                            }
                        }), T = !0
                    }
                }(), e
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "renderCard",
            value: function() {
                var e = this;
                return l.default.createElement(g.Observe, {
                    observable: p.horizonWebCardsStatic$
                }, function(t) {
                    if (null == t) return null;
                    var i = t.includes(e.props.cardData.name) ? "static" : "default";
                    return l.default.createElement(b, {
                        state: i,
                        cardData: e.props.cardData,
                        cardContext: e.props.cardContext,
                        onScribeEvent: e.handleScribeEvent
                    })
                })
            }
        }, {
            key: "render",
            value: function() {
                var e = this;
                return l.default.createElement(g.Observe, {
                    observable: p.horizonWebCardsEnabled$
                }, function(t) {
                    if (null == t) return null;
                    var i = e.props.cardData;
                    return t.includes(i.name) ? e.renderCard() : e.props.renderFallback()
                })
            }
        }]), t
    }(l.default.Component);

    function b(e) {
        return l.default.createElement("div", {
            "data-testid": "card",
            className: "hw-card-container margin-vm"
        }, l.default.createElement(u.Card, {
            isUnifiedCard: !1,
            state: e.state,
            card: e.cardData,
            cardContext: e.cardContext,
            onScribeEvent: e.onScribeEvent
        }))
    }
    w.defaultProps = {
        renderFallback: function() {
            return null
        }
    }, t.default = w
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = TD.cache.twitterUsers = function() {
        var e = {},
            t = {},
            i = {},
            r = [],
            a = 500;

        function o(e, s) {
            var r, a, o, c, l = TD.util.deMentionify(s || "").toLowerCase();
            return e || s ? (r = e ? t[e] : i[l]) ? c = TD.core.defer.succeed(r) : (a = TD.storage.accountController.getPreferredAccount("twitter"), o = TD.controller.clients.getClient(a.getKey()), c = new TD.core.defer.Deferred, o.showUser(e, l, function(e) {
                c.callback(e)
            }, function(t, i, s) {
                c.errback(new TD.core.defer.XMLHttpRequestError(t, s)), t && t.errors && t.errors.forEach(function() {
                    63 === (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).twitterErrorCode && n.default.publish("/user/suspended", [e, l])
                })
            })) : c = TD.core.defer.fail("Must provide user ID or screen name"), c
        }
        return e.add = function(e) {
            var o = t[e.id];
            o ? delete i[o.screenName.toLowerCase()] : r.unshift(e), t[e.id] = e, i[e.screenName.toLowerCase()] = e, (0, n.default)(document).trigger("dataCachedTwitterUser", e), s.default.each(r.splice(a), function(e) {
                delete t[e.id], delete i[e.screenName.toLowerCase()]
            })
        }, e.getById = function(e) {
            return o(e, null)
        }, e.getByScreenName = function(e) {
            return o(null, e)
        }, e
    }()
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.attributes({
            account: null,
            twitterUser: null,
            follows: "s-follows"
        }), this.handleRelationshipData = function(e, t) {
            t && t.relationship && this.account.isSameUser(t.relationship.source.screen_name) && this.twitterUser.isSameUser(t.relationship.target.screen_name) && this.$node.toggleClass(this.attr.follows, t.relationship.target.following)
        }, this.destroy = function(e) {
            e.stopPropagation(), this.teardown()
        }, this.after("initialize", function() {
            if (this.account = this.attr.account, this.twitterUser = this.attr.twitterUser, !(this.account instanceof TD.storage.Account)) throw new Error("source must be instance of TD.storage.Account");
            if (!(this.twitterUser instanceof TD.services.TwitterUser)) throw new Error("target must be instance of TD.services.TwitterUser");
            this.on(document, "dataRelationship", this.handleRelationshipData), this.attr.closeEvent && this.on(this.attr.closeEvent, this.destroy), this.trigger("uiNeedsRelationship", {
                account: this.account,
                screenName: this.twitterUser.screenName
            })
        })
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.attributes({
            account: null,
            twitterUser: null,
            states: {
                blocking: "blocking",
                following: "following",
                me: "me",
                notFollowing: "notFollowing",
                pending: "pending",
                unknown: "unknown"
            },
            classNamesForStates: {
                blocking: "s-blocking",
                following: "s-following",
                me: "s-thats-you",
                notFollowing: "s-not-following",
                pending: "s-pending",
                unknown: "unknown"
            },
            buttonEnabledForStates: {
                blocking: !0,
                following: !0,
                me: !0,
                notFollowing: !0,
                pending: !1,
                unknown: !1
            },
            followButton: ".js-follow-button"
        }), this.after("initialize", function() {
            this.account = this.attr.account, this.twitterUser = this.attr.twitterUser, this.state = this.attr.states.unknown, this.on(document, "dataRelationship", this.handleRelationshipData), this.on("click", {
                followButton: this.handleFollowButtonClick
            }), this.on(document, "uiFollowAction dataUnfollowActionError", this.handleActionFactory("following")), this.on(document, "uiFollowProtectedUserAction", this.handleActionFactory("pending")), this.on(document, "uiUnfollowAction dataFollowActionError", this.handleActionFactory("notFollowing")), this.on(document, "uiBlockAction dataUnblockActionError", this.handleActionFactory("blocking")), this.on(document, "uiUnblockAction dataBlockActionError dataReportActionError", this.handleActionFactory("notFollowing")), r.default.subscribe("/user/" + this.screenName + "/block", this.handlePubSubEvent("blocking")), r.default.subscribe("/user/" + this.screenName + "/unblock", this.handlePubSubEvent("notFollowing")), this.attr.closeEvent && this.on(this.attr.closeEvent, this.destroy), this.trigger("uiNeedsRelationship", {
                account: this.account,
                screenName: this.twitterUser.screenName
            })
        }), this.resetState = function() {
            this.$node.removeClass(this.attr.classNamesForStates[this.state])
        }, this.setState = function(e, t) {
            e.following ? this.state = this.attr.states.following : e.following_requested ? this.state = this.attr.states.pending : this.state = this.attr.states.notFollowing, e.id === t.id && (this.state = this.attr.states.me), e.blocking && (this.state = this.attr.states.blocking)
        }, this.handleFollowButtonClick = function(e) {
            var t = {
                account: this.account,
                twitterUser: this.twitterUser
            };
            switch (this.state) {
                case this.attr.states.following:
                    this.trigger("uiUnfollowAction", t);
                    break;
                case this.attr.states.notFollowing:
                    this.twitterUser.isProtected ? this.trigger("uiFollowProtectedUserAction", t) : this.trigger("uiFollowAction", t);
                    break;
                case this.attr.states.blocking:
                    this.trigger("uiUnblockAction", t);
                    break;
                case this.attr.states.me:
                    TD.util.openURL("https://twitter.com/settings/profile")
            }
            e.stopPropagation()
        }, this.toggleEnableButton = function(e) {
            this.select("followButton").toggleClass("is-disabled", !e)
        }, this.setTargetElementState = function() {
            this.$node.addClass(this.attr.classNamesForStates[this.state])
        }, this.isRelevantRelationship = function(e) {
            return this.account.isSameUser(e.source.screen_name) && this.twitterUser.isSameUser(e.target.screen_name)
        }, this.handleRelationshipData = function(e, t) {
            t && t.relationship && this.isRelevantRelationship(t.relationship) && (this.resetState(), this.setState(t.relationship.source, t.relationship.target), this.toggleEnableButton(this.attr.buttonEnabledForStates[this.state]), this.setTargetElementState())
        }, this.isRelevantAction = function(e) {
            return e && e.twitterUser && e.twitterUser.isSameUser(this.twitterUser) && e.account === this.account
        }, this.handleActionFactory = function(e) {
            return function(t, i) {
                i = i || {}, this.isRelevantAction(i.request || i) && (this.resetState(), this.state = this.attr.states[e], this.setTargetElementState(), this.toggleEnableButton(this.attr.buttonEnabledForStates[e]))
            }.bind(this)
        }, this.handlePubSubEvent = function(e) {
            return function(t, i) {
                i.getAccountKey() === this.account.getAccountKey() && (this.resetState(), this.state = this.attr.states[e], this.setTargetElementState())
            }.bind(this)
        }, this.destroy = function(e) {
            e.stopPropagation(), this.teardown()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(8)),
        r = a(i(12));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            template: "video_preview",
            data: null,
            isScheduled: !1,
            maxVideoDurationInSeconds: 140,
            videoSelector: "video",
            videoContainerSelector: ".js-video-container",
            videoControlsSelector: ".js-custom-video-controls",
            playPauseSelector: ".js-play-pause",
            muteUnmuteSelector: ".js-mute-unmute",
            timeDurationSelector: ".js-video-time-duration",
            progressBarSelector: ".js-video-progress",
            processingVideoSelector: ".js-processing-video",
            videoWidth: "100%",
            videoHeight: "100%"
        }), this.initialState({
            videoSrc: function() {
                var e = this.attr.data;
                return e.videoSrc || URL.createObjectURL(e.files[0])
            },
            duration: 0,
            currentTime: 0,
            playState: "ended",
            muted: !1
        }), this._getDuration = function() {
            return this.videoEl.duration
        }, this.componentDidInitialize = function() {
            var e = this;
            this.initialRender(), this.$video = this.select("videoSelector"), this.videoEl = this.$video.get(0), this.on(this.$video, "loadedmetadata", function() {
                e._getDuration() > e.attr.maxVideoDurationInSeconds ? e.trigger("uiComposeVideoTooLarge") : e.mergeState({
                    duration: e._getDuration()
                })
            }), this.on(this.$video, "timeupdate", function() {
                return e.mergeState({
                    currentTime: e.videoEl.currentTime
                })
            }), this.on(this.$video, "playing", function() {
                return e.mergeState({
                    playState: "playing"
                })
            }), this.on(this.$video, "pause", function() {
                return e.mergeState({
                    playState: "paused"
                })
            }), this.on(this.$video, "ended", function() {
                return e.mergeState({
                    playState: "ended"
                })
            }), this.on(this.$video, "volumechange", function() {
                return e.mergeState({
                    muted: e.videoEl.muted
                })
            }), this.on("click", {
                playPauseSelector: function() {
                    return "playing" === e.state.playState ? e.videoEl.pause() : e.videoEl.play()
                },
                muteUnmuteSelector: function() {
                    return e.videoEl.muted = !e.state.muted
                },
                progressBarSelector: this.handleProgressBarClick
            })
        }, this.componentWillTeardown = function() {
            this.$video && this.$video.attr("src", "")
        }, this.initialRender = function() {
            var e = n.default.render(this.attr.template, {
                isScheduled: this.attr.isScheduled,
                videoWidth: this.attr.videoWidth,
                videoHeight: this.attr.videoHeight
            });
            this.$node.html(e), this.select("videoControlsSelector").html(n.default.render("compose/custom_video_controls"))
        }, this.render = function() {
            this.renderProcessorOrPreview(), this.renderVideoSrc(), this.renderPlayPauseButton(), this.renderMuteUnmuteButton(), this.renderTimeDurationText(), this.renderProgressBar()
        }, this.renderProcessorOrPreview = function() {
            var e = Boolean(this.state.duration);
            this.select("videoContainerSelector").toggleClass("is-hidden", !e), this.select("processingVideoSelector").toggleClass("is-hidden", e)
        }, this.renderVideoSrc = function() {
            var e = this.$video.attr("src");
            this.state.videoSrc && this.state.videoSrc !== e && this.$video.attr("src", this.state.videoSrc)
        }, this.renderPlayPauseButton = function() {
            var e = this.select("playPauseSelector");
            switch (e.removeClass("icon-pause icon-play"), this.state.playState) {
                case "playing":
                    e.addClass("icon-pause");
                    break;
                case "paused":
                case "ended":
                    e.addClass("icon-play")
            }
        }, this.renderMuteUnmuteButton = function() {
            var e = this.select("muteUnmuteSelector");
            this.state.muted ? e.removeClass("icon-sound").addClass("icon-sound-off") : e.removeClass("icon-sound-off").addClass("icon-sound")
        }, this.renderTimeDurationText = function() {
            var e = this.select("timeDurationSelector"),
                t = this.getCurrentTimeAndDuration(this.state.currentTime, this.state.duration);
            e.text(t)
        }, this.renderProgressBar = function() {
            var e = this.select("progressBarSelector");
            e.attr("max", this.state.duration).attr("aria-valuemax", this.state.duration), e.get(0).value = this.state.currentTime
        }, this.handleProgressBarClick = function(e) {
            var t = this.select("progressBarSelector"),
                i = e.pageX,
                s = t.offset().left,
                n = t.get(0).offsetWidth,
                r = this.state.duration,
                a = (i - s) / n * r;
            this.videoEl.currentTime = a
        }, this.formatSeconds = function(e) {
            if (e >= 3600 || e < 0) throw new RangeError("Cannot format seconds greater than 3600 or less than 0");
            var t = Math.floor(e / 60),
                i = Math.floor(e % 60);
            return i < 10 ? t + ":0" + i : t + ":" + i
        }, this.getCurrentTimeAndDuration = function(e, t) {
            try {
                return (0, s.default)("{{videoCurrentTime}} / {{videoDuration}}", {
                    videoCurrentTime: this.formatSeconds(e),
                    videoDuration: this.formatSeconds(t)
                })
            } catch (e) {
                return ""
            }
        }
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = a(i(10)),
        n = a(i(11)),
        r = a(i(182));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = function() {
        function e(t, i) {
            if ((0, s.default)(this, e), this.created = t, this.cursors = i, !i.length) throw Error("AggregateCursor created with no cursors");
            this.interval = i.reduce(function(e, t) {
                return e.hull(t.interval)
            }, r.default.empty)
        }
        return (0, n.default)(e, [{
            key: "getCursors",
            value: function() {
                return this.cursors
            }
        }]), e
    }();
    t.default = o
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(70);
    e.exports = TD.vo.ContentFilter = function(e) {
        this.fromJSONObject(e)
    }, TD.vo.ContentFilter.TYPE_ANYTHING = "anything", TD.vo.ContentFilter.TYPE_IMG = "img", TD.vo.ContentFilter.TYPE_VID = "vid", TD.vo.ContentFilter.TYPE_GIF = "gif", TD.vo.ContentFilter.TYPE_VINE = "vine", TD.vo.ContentFilter.TYPE_BROADCAST = "broadcast", TD.vo.ContentFilter.TYPE_IMG_AND_VID = "img_vid", TD.vo.ContentFilter.TYPE_LINKS = "links", TD.vo.ContentFilter.LANG_ANY = "any", TD.vo.ContentFilter.prototype.matching = "", TD.vo.ContentFilter.prototype.excluding = "", TD.vo.ContentFilter.prototype.type = "anything", TD.vo.ContentFilter.prototype.lang = "any", TD.vo.ContentFilter.prototype.includeRTs = !0, TD.vo.ContentFilter.prototype.sinceTimeInSec = "", TD.vo.ContentFilter.prototype.untilTimeInSec = "", TD.vo.ContentFilter.prototype.setMatching = function(e) {
        this.matching = e || ""
    }, TD.vo.ContentFilter.prototype.setExcluding = function(e) {
        this.excluding = e || ""
    }, TD.vo.ContentFilter.prototype.setType = function(e) {
        this.type = e || TD.vo.ContentFilter.TYPE_ANYTHING
    }, TD.vo.ContentFilter.prototype.setLanguage = function(e) {
        this.lang = e || TD.vo.ContentFilter.LANG_ANY
    }, TD.vo.ContentFilter.prototype.setIncludeRTs = function(e) {
        this.includeRTs = void 0 === e || Boolean(e)
    }, TD.vo.ContentFilter.prototype.setSinceTimeInSec = function(e) {
        this.sinceTimeInSec = a.unix(e).isValid() ? e : ""
    }, TD.vo.ContentFilter.prototype.setUntilTimeInSec = function(e) {
        this.untilTimeInSec = a.unix(e).isValid() ? e : ""
    }, TD.vo.ContentFilter.prototype.toJSONObject = function() {
        return {
            matching: this.matching,
            excluding: this.excluding,
            type: this.type,
            lang: this.lang,
            includeRTs: this.includeRTs,
            sinceTimeInSec: this.sinceTimeInSec,
            untilTimeInSec: this.untilTimeInSec
        }
    }, TD.vo.ContentFilter.prototype.fromJSONObject = function(e) {
        e && (this.setMatching(e.matching), this.setExcluding(e.excluding), this.setType(e.type), this.setLanguage(e.lang), this.setIncludeRTs(e.includeRTs), this.setSinceTimeInSec(e.sinceTimeInSec), this.setUntilTimeInSec(e.untilTimeInSec))
    }, TD.vo.ContentFilter.prototype.getQueryString = function() {
        var e = [];
        switch (this.type) {
            case TD.vo.ContentFilter.TYPE_IMG:
                e.push("filter:images");
                break;
            case TD.vo.ContentFilter.TYPE_VID:
                e.push("filter:videos");
                break;
            case TD.vo.ContentFilter.TYPE_GIF:
                e.push("card_name:animated_gif");
                break;
            case TD.vo.ContentFilter.TYPE_VINE:
                e.push("filter:vine");
                break;
            case TD.vo.ContentFilter.TYPE_BROADCAST:
                e.push('(card_domain:pscp.tv OR card_domain:periscope.tv OR "twitter.com/i/broadcasts/")');
                break;
            case TD.vo.ContentFilter.TYPE_IMG_AND_VID:
                e.push("(filter:images OR filter:videos)");
                break;
            case TD.vo.ContentFilter.TYPE_LINKS:
                e.push("filter:links")
        }
        return this.lang !== TD.vo.ContentFilter.LANG_ANY && e.push("lang:" + this.lang), this.includeRTs || e.push("exclude:nativeretweets exclude:retweets"), this.excluding && e.push(this.getExcludingQuery()), this.sinceTimeInSec && e.push("since_time:" + this.sinceTimeInSec), this.untilTimeInSec && e.push("until_time:" + this.untilTimeInSec), e.join(" ")
    }, TD.vo.ContentFilter.prototype.getSummaryText = function() {
        var e = [];
        switch (this.type) {
            case TD.vo.ContentFilter.TYPE_IMG:
                e.push((0, r.default)("showing images"));
                break;
            case TD.vo.ContentFilter.TYPE_VID:
                e.push((0, r.default)("showing videos"));
                break;
            case TD.vo.ContentFilter.TYPE_GIF:
                e.push((0, r.default)("showing GIFs"));
                break;
            case TD.vo.ContentFilter.TYPE_VINE:
                e.push((0, r.default)("showing Vines"));
                break;
            case TD.vo.ContentFilter.TYPE_BROADCAST:
                e.push((0, r.default)("showing broadcasts"));
                break;
            case TD.vo.ContentFilter.TYPE_IMG_AND_VID:
                e.push((0, r.default)("showing images and videos"));
                break;
            case TD.vo.ContentFilter.TYPE_LINKS:
                e.push((0, r.default)("showing links"))
        }
        if (this.matching && e.push((0, r.default)("matching ‘{{{matching}}}’", {
                matching: this.matching
            })), this.excluding && e.push((0, r.default)("excluding ‘{{{excluding}}}’", {
                excluding: this.excluding
            })), this.lang !== TD.vo.ContentFilter.LANG_ANY) {
            var t = TD.languages.getLanguageFromISOCode(this.lang);
            e.push((0, r.default)("written in {{{lang}}}", {
                lang: t.localized_name
            }))
        }
        return this.includeRTs || e.push((0, r.default)("Retweets excluded")), this.sinceTimeInSec && e.push((0, r.default)("from {{sinceDatePretty}}", {
            sinceDatePretty: TD.util.prettyDateFromUnixTimestamp(this.sinceTimeInSec)
        })), this.untilTimeInSec && e.push((0, r.default)("to {{untilDatePretty}}", {
            untilDatePretty: TD.util.prettyDateFromUnixTimestamp(this.untilTimeInSec)
        })), 0 === e.length ? "" : e.join(", ")
    }, TD.vo.ContentFilter.prototype.getExcludingQuery = function() {
        if (!this.excluding) return "";
        var e = TD.services.TwitterSearchParser.extractPhrases(this.excluding, !0);
        return (e = e.map(function(e) {
            return "-" + e
        })).join(" ")
    }, TD.vo.ContentFilter.prototype.getFilters = function() {
        var e, t = [];
        switch (this.type) {
            case TD.vo.ContentFilter.TYPE_IMG:
                e = new TD.vo.Filter(TD.vo.Filter.HAS_IMAGE, !0, !0), t.push(e);
                break;
            case TD.vo.ContentFilter.TYPE_VID:
                e = new TD.vo.Filter(TD.vo.Filter.HAS_VIDEO, !0, !0), t.push(e);
                break;
            case TD.vo.ContentFilter.TYPE_GIF:
                e = new TD.vo.Filter(TD.vo.Filter.HAS_GIF, !0, !0), t.push(e);
                break;
            case TD.vo.ContentFilter.TYPE_VINE:
                e = new TD.vo.Filter(TD.vo.Filter.HAS_VINE, !0, !0), t.push(e);
                break;
            case TD.vo.ContentFilter.TYPE_IMG_AND_VID:
                e = new TD.vo.Filter(TD.vo.Filter.HAS_MEDIA, !0, !0), t.push(e);
                break;
            case TD.vo.ContentFilter.TYPE_LINKS:
                e = new TD.vo.Filter(TD.vo.Filter.HAS_LINK, !0, !0), t.push(e)
        }
        return this.matching && TD.services.TwitterSearchParser.extractPhrases(this.matching, !1).forEach(function(i) {
            e = new TD.vo.Filter(TD.vo.Filter.PHRASE, i, !0), t.push(e)
        }), this.excluding && TD.services.TwitterSearchParser.extractPhrases(this.excluding, !1).forEach(function(i) {
            e = new TD.vo.Filter(TD.vo.Filter.PHRASE, i, !1), t.push(e)
        }), this.sinceTimeInSec && t.push(new TD.vo.Filter(TD.vo.Filter.SINCE_TIME, this.sinceTimeInSec, !0)), this.untilTimeInSec && t.push(new TD.vo.Filter(TD.vo.Filter.UNTIL_TIME, this.untilTimeInSec, !0)), this.includeRTs || (e = new TD.vo.Filter(TD.vo.Filter.IS_RETWEET, !1, !0), t.push(e)), t
    }, TD.vo.ContentFilter.prototype.hasActiveMediaFilter = function() {
        return [TD.vo.ContentFilter.TYPE_IMG, TD.vo.ContentFilter.TYPE_VID, TD.vo.ContentFilter.TYPE_GIF, TD.vo.ContentFilter.TYPE_VINE, TD.vo.ContentFilter.TYPE_BROADCAST, TD.vo.ContentFilter.TYPE_IMG_AND_VID].indexOf(this.type) > -1
    }
}, function(e, t, i) {
    "use strict";
    t.getPrettyCoordinates = function(e, t, i) {
        return Math.abs(Math.round(10 * e) / 10) + "°" + (e > 0 ? "N" : "S") + ", " + Math.abs(Math.round(10 * t) / 10) + "°" + (t > 0 ? "E" : "W")
    }
}, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = a(i(10)),
        n = a(i(11)),
        r = a(i(1));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = function() {
        function e(t) {
            (0, s.default)(this, e), this.maxSize = t, this.length = 0, this._first = void 0, this._last = void 0, this._index = {}, this._lefts = {}, this._rights = {}
        }
        return (0, n.default)(e, [{
            key: "enqueue",
            value: function(e, t) {
                e && (this.dequeue(e), 0 == this.length ? this._first = this._last = e : (this._lefts[this._first] = e, this._rights[e] = this._first, this._first = e), this._index[e] = t, this.length++, this.prune())
            }
        }, {
            key: "dequeue",
            value: function(e) {
                if (!r.default.isUndefined(this._index[e])) {
                    var t = this._lefts[e],
                        i = this._rights[e];
                    t ? this._rights[t] = i : this._first = i, i ? this._lefts[i] = t : this._last = t, delete this._index[e], delete this._rights[e], delete this._lefts[e], this.length--
                }
            }
        }, {
            key: "prune",
            value: function() {
                for (; this.maxSize && this.length > this.maxSize;) this.dequeue(this._last)
            }
        }, {
            key: "get",
            value: function(e) {
                return this._index[e]
            }
        }, {
            key: "getOrElse",
            value: function(e, t) {
                var i = this._index[e];
                return void 0 === i && (i = r.default.isFunction(t) ? t() : t, this.enqueue(e, i)), i
            }
        }, {
            key: "take",
            value: function(e) {
                var t = [],
                    i = this._first;
                e = Math.min(e, this.length);
                for (var s = 0; s < e; s++) t.push(this._index[i]), i = this._rights[i];
                return t
            }
        }]), e
    }();
    t.default = o
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.trackQuerySupportedByContent = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
        if (!(e = (e || "").trim()).length) return (0, r.default)(document).trigger("metric", {
            key: "project-content:unsupported-search-reason:empty-query"
        }), !1;
        if (e.match(/\bfilter:/)) return (0, r.default)(document).trigger("metric", {
            key: "project-content:unsupported-search-reason:filter"
        }), !1;
        if (e.match(/"[^"]+"/)) return (0, r.default)(document).trigger("metric", {
            key: "project-content:unsupported-search-reason:phrase"
        }), !1;
        if (e.match(/\bmin_replies:/)) return (0, r.default)(document).trigger("metric", {
            key: "project-content:unsupported-search-reason:min-replies"
        }), !1;
        if (e.match(/\bmin_retweets:/)) return (0, r.default)(document).trigger("metric", {
            key: "project-content:unsupported-search-reason:min-retweets"
        }), !1;
        if (e.match(/\bmin_faves:/)) return (0, r.default)(document).trigger("metric", {
            key: "project-content:unsupported-search-reason:min-faves"
        }), !1;
        if (e.match(/\B\-\w+/)) return (0, r.default)(document).trigger("metric", {
            key: "project-content:unsupported-search-reason:negation"
        }), !1;
        if (e.match(a)) return (0, r.default)(document).trigger("metric", {
            key: "project-content:unsupported-search-reason:disallowed-characters"
        }), !1;
        if (e.match(o)) return (0, r.default)(document).trigger("metric", {
            key: "project-content:unsupported-search-reason:operator-or"
        }), !1;
        if (e.match(l)) return (0, r.default)(document).trigger("metric", {
            key: "project-content:unsupported-search-reason:scriptio-continua"
        }), !1;
        if (!e.match(c)) return (0, r.default)(document).trigger("metric", {
            key: "project-content:unsupported-search-reason:no-unicode-word-characters"
        }), !1;
        return !0
    }, t.feedSupportedByContent = function(e) {
        return "usertweets" === e || "search" === e
    };
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = /[!"%-'\*-\/:-\?\[\]-_\{-~♦“”]/,
        o = /\bOR\b/,
        c = /[0-9A-Z_a-z](?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*/g,
        l = /(?:[\u0E00-\u0E7F\u3040-\u30FF\u31F0-\u31FF\u3300-\u4DB5\u4E00-\u9FFF\uA980-\uA9DF\uF900-\uFAFF]|[\uD840-\uD868\uD86A-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD87A[\uDC00-\uDFEF]|\uD87E[\uDC00-\uDE1F])/
}, function(e, t, i) {
    "use strict";
    var s = o(i(47)),
        n = o(i(32)),
        r = o(i(1)),
        a = o(i(0));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var c = i(1819),
        l = i(335),
        u = i(1820);

    function d() {
        this._initBackend()
    }
    var h = ["ScribeTransport"],
        m = h.concat(["__version__", "previousMultiUserAccount", "currentAuthType", "guestID", "ScribeTransport"]),
        f = {
            local: localStorage,
            session: sessionStorage
        };
    d.PERSISTENT_SESSION_ITEMS = ["twitterAccountID", "_session", "__hasAlreadyReloaded"], d._testStore = function(e, t) {
        l.stateLog("_testStore()");
        for (var i = !1, s = !1, n = "test"; n.length < 1024;) n += n;
        try {
            e.setItem("__test__", n), i = e.getItem("__test__") === n, e.removeItem("__test__")
        } catch (t) {
            i = !1, (s = t.code === window.DOMException.QUOTA_EXCEEDED_ERR) && 0 === e.length && TD.sync.util.warn(t, "In Safari private browsing mode")
        }
        if (t && s) try {
            d.flushDataFromStore(e), i = d._testStore(e, !1)
        } catch (e) {
            i = !1
        }
        return i
    }, d.flushDataFromStore = function(e, t) {
        t = (t || []).concat(m), d.wipe(e, t)
    }, d.flushBackend = function(e, t) {
        return d.flushDataFromStore(f[e], t)
    }, d.wipeAll = function() {
        [localStorage, sessionStorage].forEach(d.wipe)
    }, d.wipe = function(e, t) {
        var i = {};
        (t = r.default.uniq((t || []).concat(h))).forEach(function(t) {
            var s = e.getItem(t);
            s && (i[t] = s)
        });
        try {
            e.clear()
        } catch (t) {
            console.warn("Clearing", e, "failed:", t)
        }
        r.default.each(i, function(t, i) {
            e.setItem(i, t)
        })
    }, d.flushWebstorage = function(e) {
        TD.sync.util.trace("clearing web storage");
        try {
            (0, n.default)(f).forEach(function(t) {
                d.flushDataFromStore(f[t], e)
            })
        } catch (e) {
            console.error("Unable to clear webstorage.", e)
        }
    }, d.clearOtherBackends = function(e) {
        (0, n.default)(f).forEach(function(t) {
            t !== e && d.wipe(f[t])
        })
    }, d.prototype.storeLoginResult = function(e) {
        var t = this.getTwitterLoginAccountID();
        t && e !== t && d.flushWebstorage(), this.setTwitterLoginAccountID(e)
    }, d.prototype._initBackend = function() {
        this._backendType = "unknown", d._testStore(window.localStorage, !0) ? (this._migrateBackend(window.localStorage), this._backend = window.localStorage, this._backendType = "local") : d._testStore(window.sessionStorage, !0) ? (this._migrateBackend(window.sessionStorage), this._backend = window.sessionStorage, this._backendType = "session") : (l.stateLog("store._initBackend(): Falling back to MemoryStorage."), this._backend = new c, this._backendType = "memory"), this._tryUpgrade(), d.clearOtherBackends(this._backendType)
    }, d.prototype._migrateBackend = function(e, t) {
        if ((t = t || this._getPersistentBackend()) !== e)
            for (var i in t)
                if (t.hasOwnProperty(i)) {
                    try {
                        e.setItem(i, t.getItem(i))
                    } catch (e) {
                        if (e.code === window.DOMException.QUOTA_EXCEEDED_ERR) return void TD.sync.util.warn("Migration failed due to quota limits.", e);
                        throw e
                    }
                    t.removeItem(i)
                }
    }, d.prototype._getPersistentBackend = function() {
        return this._backend instanceof c ? localStorage : this._backend
    }, d.prototype._tryUpgrade = function() {
        try {
            u.doUpgrade(this)
        } catch (e) {
            TD.sync.util.warn("Error during store upgrade:", e), d.flushWebstorage()
        }
    }, d.prototype.getTwitterLoginAccountID = function() {
        var e = this._backend.getItem("twitterAccountID");
        if (e) return e;
        l.stateLog("store.getTwitterLoginAccountID(): account invalid", e)
    }, d.prototype.setTwitterLoginAccountID = function(e) {
        this._backend.setItem("twitterAccountID", e)
    }, d.prototype.getTwitterLoginAccount = function() {
        var e = this.getTwitterLoginAccountID(),
            t = TD.storage.Account.generateKeyFor("twitter", e);
        return TD.storage.accountController.get(t)
    }, d.prototype.getOrCreateTwitterLoginAccount = function() {
        var e = this;
        return TD.core.defer.maybeDeferred(function() {
            return e.getTwitterLoginAccount() || TD.storage.accountController.verifyTwitterCookieAccount()
        })
    }, d.prototype.getOrCreateGuestID = function() {
        var e = localStorage.getItem("guestID");
        if (!e) {
            e = this.createGuestID();
            try {
                localStorage.setItem("guestID", e)
            } catch (t) {
                this._backend.setItem("guestID", e)
            }
        }
        return e
    }, d.prototype.createGuestID = function() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e) {
            var t = 16 * Math.random() | 0;
            return ("x" == e ? t : 3 & t | 8).toString(16)
        })
    }, d.prototype.getSessionMigratedToWeb = function() {
        return this._getPersistentBackend().getItem("sessionMigratedToWeb")
    }, d.prototype.setSessionMigratedToWeb = function() {
        this._getPersistentBackend().setItem("sessionMigratedToWeb", !0)
    }, d.prototype.removeSessionMigratedToWeb = function() {
        this._getPersistentBackend().removeItem("sessionMigratedToWeb")
    }, d.prototype._getLastVerifiedTimestamps = function() {
        var e = {};
        try {
            e = this.getJSON("accountsLastVerified")
        } catch (e) {
            l.stateLog("_getLastVerifiedTimestamps(): failed", e)
        }
        return e
    }, d.prototype.getLastVerifiedTimestamp = function(e) {
        var t, i;
        return t = this._getLastVerifiedTimestamps()[e.getKey()] || 0, i = e.getUpdated() || 0, Math.max(t, i)
    }, d.prototype.setLastVerifiedTimestamp = function(e) {
        var t = this._getLastVerifiedTimestamps(),
            i = t[e.getKey()] || 0,
            s = e.getUpdated() || 0,
            n = Math.max(i, s);
        n !== i && (t[e.getKey()] = n, this.setJSON("accountsLastVerified", t))
    }, d.prototype.removeLastVerifiedTimestamp = function(e) {
        var t = this._getLastVerifiedTimestamps();
        delete t[e.getKey()], this.setJSON("accountsLastVerified", t)
    }, d.prototype.setLastVersionRefreshTimestamp = function(e) {
        this._getPersistentBackend().setItem("lastVersionRefreshTimestamp", "" + e)
    }, d.prototype.getLastVersionRefreshTimestamp = function(e) {
        var t = parseInt("" + this._getPersistentBackend().getItem("lastVersionRefreshTimestamp"), 10);
        return "number" == typeof t && !isNaN(t) && t > 0 ? t : 0
    }, d.prototype.getSessionData = function() {
        var e = {
            uid: this._backend.getItem("twitterAccountID"),
            migrate: {},
            session: null
        };
        if (e.uid) try {
            e.session = JSON.parse(this._backend.getItem("_session"))
        } catch (t) {
            e.session = null
        }
        return e
    }, d.prototype.setSessionData = function(e) {
        this._backend.setItem("_session", (0, s.default)(e))
    }, d.prototype.getSessionMigrationData = function() {
        var e = ["__version__", "previousMultiUserAccount", "currentAuthType", "guestID", "tweetdeckAccount", "_session", "accountsLastVerified"];
        return {
            local: e.reduce(function(e, t) {
                var i = localStorage.getItem(t);
                return null !== i && (e[t] = i), e
            }, {}),
            session: e.reduce(function(e, t) {
                var i = sessionStorage.getItem(t);
                return null !== i && (e[t] = i), e
            }, {})
        }
    }, d.prototype.checkVersion = function() {
        var e = u.CURRENT_VERSION,
            t = this._backend.getItem("__version__");
        if (null !== t && ~t != ~e) throw new Error("Wrong version number in store. (saved) %s != (given) %s", t, e)
    }, d.prototype.setVersion = function(e) {
        this._backend.setItem("__version__", e)
    }, d.prototype.getJSON = function(e) {
        return JSON.parse(this._backend.getItem(e) || "{}")
    }, d.prototype.setJSON = function(e, t) {
        this._backend.setItem(e, (0, s.default)(t))
    }, d.prototype.setJSONCritical = function(e, t, i) {
        try {
            this._backend.setItem(e, (0, s.default)(t))
        } catch (s) {
            if (s.code !== window.DOMException.QUOTA_EXCEEDED_ERR || i) throw s;
            (0, a.default)(document).trigger("dataStorageFull"), this.setJSONCritical(e, t, !0)
        }
    }, e.exports = {
        Store: d,
        MemoryStorage: c,
        store: new d
    }
}, function(e, t, i) {
    "use strict";
    t.generateAccountKey = function(e, t) {
        return "tweetdeck" === e ? "tweetdeck" : encodeURI(e + ":" + t)
    }, t.generateEggAvatarForId = function(e) {
        return "https://abs.twimg.com/sticky/default_profile_images/default_profile_" + Number(e) % 7 + "_bigger.png"
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = l(i(7));
    t.getDeferred = h, t.getLoggedInUser = function() {
        return h().addCallback(function(e) {
            var t = n.default.get(e, "data.data.viewer.user");
            return m(t)
        })
    }, t.getContributees = function() {
        return h().addCallback(function(e) {
            return n.default.get(e, "data.data.viewer.teams.act_as", []).map(f)
        })
    };
    var n = l(i(1)),
        r = l(i(29)),
        a = l(i(49)),
        o = l(i(107)),
        c = l(i(1837));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var u = {
            "content-type": "application/json"
        },
        d = r.default.Observable.of(!0).flatMap(function() {
            var e = o.default.request(TD.config.twitter_api_base + "/graphql", {
                method: "POST",
                headers: u,
                params: c.default
            });
            return a.default.fromDeferred(e)
        }).share();

    function h() {
        return a.default.toDeferred(d)
    }

    function m(e) {
        return (0, s.default)({}, e.legacy, {
            id_str: e.rest_id
        })
    }

    function f(e) {
        return {
            admin: "ADMIN" === e.access_level || "Admin" === e.access_level,
            user: m(e.user)
        }
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(19);
    var o = (0, i(531).createInterval)();
    t.getTweetText = function(e) {
        return e.full_text || r.default.get(e, "extended_tweet.full_text", "") || e.text
    }, t.getUnicodeDisplayRange = function(e) {
        return r.default.get(e, "extended_tweet.display_text_range", null) || e.display_text_range
    }, t.getTweetEntities = function(e) {
        var i = t.extractEntities(e.extended_tweet || e),
            s = t.getUnicodeDisplayRange(e);
        return t.identifyQuoteTweetAttachmentUrls(i, s), t.identifyMediaAttachmentUrls(i, s), t.identifyImplicitMentions(i, s), i
    }, t.extractEntities = function(e) {
        var t = e.entities || {},
            i = {
                hashtags: t.hashtags,
                urls: t.urls,
                user_mentions: t.user_mentions,
                cashtags: t.cashtags,
                media: t.media
            };
        return r.default.get(e, "extended_entities.media.length", 0) > 0 && (i.media = e.extended_entities.media), i
    }, t.identifyMediaAttachmentUrls = function(e, i) {
        if (i && e && !e.convertedToUTF16) {
            var s = e.media;
            (void 0 === s ? [] : s).filter(t.entityIsOutsideDisplayRange.bind(t, i)).forEach(function(e) {
                e.isUrlForAttachment = !0
            })
        }
    }, t.identifyQuoteTweetAttachmentUrls = function(e, i) {
        if (e && i && !e.convertedToUTF16) {
            var s = e.urls;
            (void 0 === s ? [] : s).filter(t.entityIsOutsideDisplayRange.bind(t, i)).forEach(function(e) {
                var t = (0, a.extractTweetIdFromPermalink)(e.expanded_url);
                e.isUrlForAttachment = Boolean(t)
            })
        }
    }, t.identifyImplicitMentions = function(e, i) {
        if (i && e) {
            var s = e.user_mentions;
            (void 0 === s ? [] : s).filter(t.entityIsOutsideDisplayRange.bind(t, i)).forEach(function(e) {
                e.isImplicitMention = !0
            })
        }
    }, t.entityIsOutsideDisplayRange = function(e, t) {
        var i = new o(o.inclusiveEndpoint(e[0]), o.exclusiveEndpoint(e[1])),
            s = new o(o.inclusiveEndpoint(t.indices[0]), o.exclusiveEndpoint(t.indices[1]));
        return i.intersection(s).empty
    }
}, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getHumanFormatOptions = function() {
        return {
            separator: "",
            decimals: 0
        }
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = r(i(10)),
        n = r(i(11));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = function() {
        function e() {
            (0, s.default)(this, e), this.name = "", this.query = "", this.url = "", this.description = "", this.attribution = "", this.created = 0, this.promotedContent = null, this.events = null
        }
        return (0, n.default)(e, [{
            key: "fromJSONObject",
            value: function(e) {
                return this.name = e.name, this.query = e.query, this.metaDescription = e.metaDescription, this.rank = e.rank, this.target = e.target, this.badges = e.badges, this.promotedContent = e.promoted_content, this.events = e.events, this.created = (new Date).getTime(), this.query = encodeURIComponent(this.name), this.url || (this.url = "http://search.twitter.com/search?q=" + this.query), this.promotedContent && this.promotedContent.description && (this.description = TD.util.escape(this.promotedContent.description)), this
            }
        }]), e
    }();
    t.default = a
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    e.exports = {
        AUTHENTICATION_FAILED: {
            twitterErrorCode: 32,
            message: (0, r.default)("Your username and password did not match our records or have expired")
        },
        404: {
            twitterErrorCode: 34,
            message: (0, r.default)("We could not complete your request because the tweet may be protected or deleted")
        },
        SUSPENDED_USER: {
            twitterErrorCode: 63,
            message: (0, r.default)("This user has been suspended")
        },
        SUSPENDED_ACCOUNT: {
            twitterErrorCode: 64,
            message: (0, r.default)("Your account is suspended and is not permitted to access this feature")
        },
        RATE_LIMITED: {
            twitterErrorCode: 88,
            message: (0, r.default)("Sorry, you've made too many requests so Twitter has temporarily limited your access. Try again in a few minutes")
        },
        RATE_LIMITED_DM_SEND: {
            twitterErrorCode: 88,
            message: (0, r.default)("You hit your daily limit for sending messages")
        },
        INVALID_TOKEN: {
            twitterErrorCode: 89,
            message: (0, r.default)("Your access is invalid or has expired")
        },
        RECIPIENT_DOES_NOT_EXIST: {
            twitterErrorCode: 108,
            message: (0, r.default)("There is no user by that name.")
        },
        OVER_CAPACITY: {
            twitterErrorCode: 130,
            message: (0, r.default)("Twitter is temporarily over capacity. Please try again later")
        },
        INTERNAL_ERROR: {
            twitterErrorCode: 131,
            message: (0, r.default)("There's something wrong. Please try again later")
        },
        USER_AUTHENTICATION_FAILED: {
            twitterErrorCode: 135,
            message: (0, r.default)("Could not authenticate you")
        },
        NOT_FOLLOWING: {
            twitterErrorCode: 150,
            message: (0, r.default)("This user doesn't follow you. You can only send messages to people who do.")
        },
        MESSAGE_SEND_ERROR: {
            twitterErrorCode: 151,
            message: (0, r.default)("Something went wrong, but don't fret, it's not your fault.")
        },
        DUPLICATE_TWEET: {
            twitterErrorCode: 187,
            message: (0, r.default)("You already tweeted that")
        },
        INVALID_SEARCH_QUERY: {
            twitterErrorCode: 195,
            message: (0, r.default)("Invalid search query")
        },
        ACCESS_REVOKED: {
            twitterErrorCode: 220,
            message: (0, r.default)("Unable to access this resource")
        },
        DUPLICATE_MESSAGE: {
            twitterErrorCode: 311,
            message: (0, r.default)("You have already sent this message")
        },
        TOO_MANY_CONTRIBUTORS: {
            twitterErrorCode: 317,
            message: (0, r.default)("You cannot add any more Team members.")
        },
        TOO_MANY_CONTRIBUTEES: {
            twitterErrorCode: 318,
            message: (0, r.default)("That user cannot be added to any more Teams.")
        },
        CONTRIBUTION_DISALLOWED: {
            twitterErrorCode: 330,
            message: (0, r.default)("That user has privacy settings enabled preventing them from being added to this team.")
        },
        PROTECTED_TWEET: {
            message: (0, r.default)("Sorry, we could not perform your retweet because the tweet is protected")
        },
        DUPLICATE_RETWEET: {
            message: (0, r.default)("Whoops! You've already Retweeted that…")
        },
        USER_DOES_NOT_EXIST: {
            message: (0, r.default)("That user does not exist")
        },
        UNKNOWN: {
            message: (0, r.default)("An unknown error occurred. Please try again shortly.")
        }
    }
}, , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = TD.config,
        n = s.twitter_api_base,
        r = s.twitter_api_version;
    t.insights = n + "/" + r + "/tweetdeck/insights"
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.default = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};

        function i(i) {
            var s = t.pollInterval * (1 + Math.random() * t.jitter);
            return n.default.Observable.timer(0, s).flatMap(function() {
                return r.default.fromDeferred(function(t) {
                    return a.default.request(e, {
                        account: t
                    })
                }(i)).catch(function(e) {
                    return n.default.Observable.empty()
                })
            }).pluck("data").publishReplay(1).refCount()
        }
        t = s.default.defaults(t || {}, {
            pollInterval: 3e5,
            jitter: .05
        });
        var o = {};
        return function(e) {
            var t = e.account,
                n = t ? t.getKey() : "";
            s.default.contains(o, n) || (o[n] = i(t));
            return o[n]
        }
    };
    var s = o(i(1)),
        n = o(i(29)),
        r = o(i(49)),
        a = o(i(107));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    e.exports = function() {
        this.getLoginAccountAccessDeniedMessageId = function() {
            return "expired-login-error"
        }, this.getLoginAccountAccessDeniedMessageData = function(e) {
            return {
                id: this.getLoginAccountAccessDeniedMessageId(),
                text: [(0, r.default)("TweetDeck no longer has permission to access your main login account @{{1}}.", {
                    1: e.account.getUsername()
                }), (0, r.default)("You will be logged out to prevent unauthorized access.")].join(" "),
                colors: {
                    background: "#b2d5ed",
                    foreground: "#555"
                }
            }
        }, this.getDataminrAccountAccessDeniedMessageData = function(e) {
            return {
                id: "expired-dataminr-login-error",
                text: (0, r.default)("TweetDeck no longer has permission to access your Dataminr account.") + " " + (0, r.default)("Please check your Dataminr settings."),
                colors: {
                    background: "#b2d5ed",
                    foreground: "#555"
                }
            }
        }
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.CALLBACK_URL_REQUIRED = t.BASE_URL_REQUIRED = t.CANCELLED = t.POPUP_BLOCKED = void 0;
    var s = u(i(83)),
        n = u(i(7));
    t.observedPopup = function(e) {
        if (!(e = (0, n.default)({
                pollInterval: 100,
                windowOpener: l.default.isMacApp() ? c.default : window.open.bind(window),
                queryParams: {}
            }, e)).baseUrl) return s.default.reject(new Error(m));
        if (!e.callbackUrl) return s.default.reject(new Error(f));
        var t = (screen.width - 800) / 2,
            i = (screen.height - 820) / 2,
            u = e.windowOpener(function(e) {
                return (0, o.default)(e.baseUrl).setSearch(e.queryParams).toString()
            }(e), null, "width=800,height=820,left=" + t + ",top=" + i + ",resizable,scrollbars,status");
        if (null === u) return s.default.reject(new Error(d));
        return a.default.Observable.timer(e.pollInterval, e.pollInterval).map(function() {
            return function(e, t) {
                var i = t.callbackUrl,
                    s = t.paramToExtractValueFrom,
                    a = "";
                try {
                    a = r.default.get(e, "location.href", "")
                } catch (e) {}
                var c = Boolean(s) ? function(e, t) {
                    return {
                        valueFromParams: (0, o.default)(t).search(!0)[e]
                    }
                }(s, a) : {};
                return (0, n.default)({
                    cancelled: e.closed,
                    complete: 0 === a.indexOf(i)
                }, c)
            }(u, e)
        }).filter(p).take(1).do(u.close.bind(u)).map(function(e) {
            if (e.cancelled) throw new Error(h);
            return e
        }).toPromise()
    };
    var r = u(i(1)),
        a = u(i(29)),
        o = u(i(69)),
        c = u(i(1970)),
        l = u(i(19));

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var d = t.POPUP_BLOCKED = "popup_blocked",
        h = t.CANCELLED = "cancelled",
        m = t.BASE_URL_REQUIRED = "baseUrl is required",
        f = t.CALLBACK_URL_REQUIRED = "callbackUrl is required";

    function p(e) {
        return e.cancelled || e.complete
    }
}, function(e, t, i) {
    "use strict";
    var s = i(69),
        n = {
            getLoginUrl: function(e) {
                e = e || {};
                var t = new s(window.location.href);
                t.setQuery({
                    via_twitter_login: !0
                });
                var i = new s("https://twitter.com/login");
                return i.setQuery({
                    hide_message: !0,
                    redirect_after_login: t.href()
                }), e.usernameOrEmail && i.setQuery({
                    username_or_email: e.usernameOrEmail
                }), i.href()
            },
            getLogoutUrl: function() {
                var e = new s(window.location.href),
                    t = new s("https://twitter.com/logout");
                return t.setQuery({
                    redirect_after_logout: e.href()
                }), t.href()
            }
        };
    e.exports = n
}, function(e, t, i) {
    "use strict";
    var s = o(i(0)),
        n = o(i(8)),
        r = i(12),
        a = o(r);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = a.default.mixin(function() {
        this.initialState({
            showFilterCallout: function() {
                return this.attr.getSetting()
            }
        }), this.attributes({
            template: "column/filter_callout",
            content: null,
            getSetting: null,
            setSetting: null,
            scribeComponent: "",
            onClick: function() {
                return function() {}
            }
        }), this.after("initialize", function() {
            this.on("click", this.handleFilterCalloutClick), this.on("uiRemoveSearchCallout", this.teardown)
        }), this.handleFilterCalloutClick = function() {
            this.trigger("uiEnterSettings"), this.attr.onClick(), (0, s.default)(document).trigger("scribeEvent", {
                terms: {
                    page: "column",
                    section: "twitter",
                    component: this.attr.scribeComponent,
                    element: "filter_callout",
                    action: "click"
                }
            })
        }, this.render = function() {
            if (this.state.showFilterCallout) {
                var e = n.default.render(this.attr.template, {
                    content: this.attr.content
                });
                this.$node.html(e), this.attr.setSetting(!1)
            }
        }, this.after("teardown", function() {
            this.$node.remove()
        })
    }), e.exports.FilterCalloutReact = (0, r.uiBaseToReact)(e.exports)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.FilterMessageUiBase = t.default = void 0;
    var s = a(i(6)),
        n = (a(i(9)), i(12)),
        r = a(i(161));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }

    function o(e) {
        var t = e.title,
            i = e.filters,
            n = e.onClick;
        return s.default.createElement("div", {
            onClick: function(e) {
                e.stopPropagation(), n()
            },
            className: "flex flex-align--center is-actionable with-column-divider-bottom column-message padding-l--20 padding-rxs padding-vs txt-size--13 txt-line-height--23",
            "data-testid": "filterMessage"
        }, t ? s.default.createElement("p", {
            className: "flex-shrink--0 padding-r--5"
        }, t) : null, i && i.map(function(e) {
            return s.default.createElement("span", {
                key: e.name,
                onClick: function(t) {
                    t.stopPropagation(), n(e.name)
                },
                className: "inline-flex padding-rs"
            }, s.default.createElement("span", {
                className: "txt-size--16 txt-line-height--20 color-twitter-darker-gray dark-only--color-twitter-gray"
            }, s.default.createElement(r.default, {
                name: e.icon
            })), " ", e.text ? s.default.createElement("span", {
                className: "margin-l--6 flex-grow--1"
            }, e.text) : null)
        }))
    }
    t.default = o;
    t.FilterMessageUiBase = (0, n.reactToUiBase)(o)
}, function(e, t, i) {
    "use strict";
    var s, n = i(245),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    e.exports = {
        getRemainingCharCount: function(e, t) {
            var i = r.default.getLanguageWeight();
            return Math.floor((e - t) / i)
        },
        isWithinCharLimit: function(e, t) {
            return t <= e
        },
        isOverCharLimit: function(e, t) {
            return t > e
        }
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(23);
    var o = i(5).component,
        c = i(53),
        l = i(362),
        u = i(8);
    e.exports = o(function() {
        this.attributes({
            selectionFormat: "user",
            focusOnInit: !0,
            clearOnSelect: !0,
            blurOnSelect: !0,
            templateName: "user_selector",
            placeholder: (0, r.default)("Enter Twitter username…"),
            selectButtonIconClass: "icon-plus",
            selectButtonSelector: ".js-select-button",
            inputSelector: ".js-username-input",
            withSelectButton: !0,
            withAutocompleteAboveInput: !1,
            withAutoRepositionInsideViewport: !0
        }), this.after("initialize", function() {
            var e = u.render(this.attr.templateName, {
                searchInputControlClass: "margin-tm",
                selectButtonIconClass: this.attr.selectButtonIconClass,
                placeholder: this.attr.placeholder,
                withSelectButton: this.attr.withSelectButton
            });
            this.$node.html(e), this.attachChild(l, this.$node), this.on("click", {
                selectButtonSelector: this.handleInputSelection
            }), this.on("uiInputSubmit", {
                inputSelector: this.handleInputSelection
            }), this.autocomplete = new TD.components.Autocomplete(this.select("inputSelector"), {
                dmMode: !0,
                position: this.attr.withAutocompleteAboveInput ? "above" : "below",
                repositionInViewport: this.attr.withAutoRepositionInsideViewport
            }), this.on(this.autocomplete.$node, "td-autocomplete-select", this.handleTDAutocompleteSelect), this.attr.focusOnInit && this.select("inputSelector").focus()
        }), this.handleTDAutocompleteSelect = function(e, t) {
            this.select("inputSelector").val(t.screenName), this.handleInputSelection()
        }, this.handleInputSelection = function() {
            var e = this.select("inputSelector").val();
            if (e) {
                if ("screenName" === this.attr.selectionFormat) return this.triggerScreenNameSelection(e);
                this.trigger(this.attr.inputSelector, "uiWaitingForAsyncResponse");
                var t = TD.cache.twitterUsers.getByScreenName(e);
                t.addCallbacks(this.triggerUserSelection.bind(this), this.handleError.bind(this)), t.addBoth(this.trigger.bind(this, this.attr.inputSelector, "uiReceivedAsyncResponse"))
            }
        }, this.triggerScreenNameSelection = function(e) {
            this.trigger("uiScreenNameSelected", {
                screenName: e
            }), this.clear()
        }, this.triggerUserSelection = function(e) {
            this.trigger("uiUserSelected", {
                user: e
            }), this.clear()
        }, this.clear = function() {
            this.attr.clearOnSelect && this.select("inputSelector").val(""), this.attr.blurOnSelect && this.select("inputSelector").blur()
        }, this.handleError = function(e) {
            var t;
            try {
                t = e.req.errors[0].message
            } finally {
                t && (0, a.showErrorNotification)({
                    message: t
                })
            }
        }
    }, c)
}, function(e, t, i) {
    "use strict";
    var s = u(i(0)),
        n = u(i(2015)),
        r = u(i(2016)),
        a = u(i(2017)),
        o = u(i(17)),
        c = i(12),
        l = u(c);

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var d = i(2049),
        h = i(636),
        m = i(110),
        f = i(8);
    e.exports = l.default.mixin(function() {
        this.attributes({
            actionButton: "[data-action]",
            searchInputForm: ".js-column-options-search-form",
            searchInput: ".js-search-input",
            scribeSection: "column_options",
            isAnimatingClass: "is-column-options-animating",
            column: null,
            columnType: null,
            onFilterChange: null,
            onShowing: function() {
                return function() {}
            },
            onShown: function() {
                return function() {}
            },
            onHiding: function() {
                return function() {}
            },
            onHidden: function() {
                return function() {}
            },
            expandContentFilter: !1,
            expandUserFilter: !1,
            expandActionFilter: !1,
            expandEngagementFilter: !1,
            expandLocationFilter: !1,
            isTouchColumnOptionsClass: "is-touch-column-options",
            hideContentClass: "scroll-none",
            accordionSelector: ".js-accordion",
            scribeElementSelector: "[data-scribe-element]",
            searchFilterSelector: ".js-search-filter",
            contentFilterSelector: ".js-content-filter",
            userFilterSelector: ".js-user-filter"
        }), this.updateHeight = function() {
            this.$node.css("height", ""), this.$node.height(this.$node.height()), this.trigger("uiAccordionTotalHeightChanged")
        }, this.handleChildTransitionExpandStart = function(e, t) {
            this.$node.css("height", "")
        }, this.handleChildTransitionExpandEnd = function() {
            this.$node.css("height", "")
        }, this.handleUpdateSearchFilter = function(e) {
            this.attr.onFilterChange(e)
        }, this.handleShowUserFilter = function(e) {
            e.stopPropagation(), this.showAccordionPanel(this.select("userFilterSelector"))
        }, this.handleShowContentFilter = function(e) {
            e.stopPropagation(), this.showAccordionPanel(this.select("contentFilterSelector"))
        }, this.hide = function() {
            var e = this,
                t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
            this.$node.hasClass(this.attr.isAnimatingClass) || (this.attr.onHiding(), this.$node.addClass(this.attr.hideContentClass), this.transitionCollapse(this.$node, this.attr.isAnimatingClass, function() {
                t && e.$node.empty(), e.attr.onHidden()
            }), t && this.teardown())
        }, this.showColumnOptions = function() {
            var e = this;
            this.attr.onShowing(), this.$node.addClass(this.attr.hideContentClass), this.transitionExpand(this.$node, this.attr.isAnimatingClass, function() {
                e.$node.removeClass(e.attr.hideContentClass), e.attr.onShown()
            })
        }, this.handleClickEvents = function(e) {
            var t = (0, s.default)(e.target).closest(this.attr.actionButton),
                i = t.data("action"),
                n = this.column.model.getKey();
            switch (i) {
                case "remove":
                    this.trigger("uiDeleteColumnAction", {
                        columnId: n
                    });
                    break;
                case "clear":
                    this.column.clear(), this.trigger("uiClearColumnAction", {
                        columnId: n
                    });
                    break;
                case "left":
                case "right":
                    this.trigger("uiMoveColumnAction", {
                        columnId: n,
                        action: i
                    });
                    break;
                case "edit-list":
                    this.trigger("uiShowEditListMembers", {
                        list: o.default.getOwnList(this.column)
                    });
                    break;
                case "edit-customtimeline":
                    var r = this.column.getCustomTimelineFeed(),
                        a = this.column.getCustomTimeline(),
                        c = {
                            timelineId: r.getMetadata().id,
                            accountKey: r.getAccountKey(),
                            name: a.name,
                            description: a.description,
                            columnKey: this.column.model.getKey()
                        };
                    this.trigger("uiShowEditCustomTimeline", c);
                    break;
                case "embed":
                    this.trigger("uiEmbedTimelineAction", {
                        column: this.column
                    });
                    break;
                case "view-on-web":
                    this.trigger("uiViewTimeline");
                    break;
                case "reference-to":
                    this.trigger("uiReferenceTimeline");
                    break;
                case "copy-search-query":
                    var l = o.default.getBaseQuery(this.column),
                        u = this.props.searchFilter.getQueryString(),
                        d = [l, u].join(" ");
                    this.trigger("uiShowCopySearchQuery", {
                        query: d
                    });
                    break;
                case "moment":
                    this.trigger("uiCreateMomentAction", {
                        collection: this.column.getCustomTimeline()
                    })
            }
        }, this.handleScribeElementClick = function(e) {
            var t = (0, s.default)(e.target).closest(this.attr.scribeElementSelector).attr("data-scribe-element");
            TD.controller.stats.generic({
                section: this.attr.scribeSection,
                element: t,
                action: "click"
            })
        }, this.attachColumnFilters = function() {
            var e = this,
                t = o.default.isSearchColumn(this.attr.column) || o.default.isEventColumn(this.attr.column),
                i = this.attr.column instanceof TD.vo.Column,
                s = this.connect(a.default, {
                    mapStateToProps: function() {
                        return {
                            searchFilter: e.props.searchFilter
                        }
                    }
                });
            this.attachChild(s, this.select("searchFilterSelector"), {
                renderOptions: i ? {
                    withUsersFilter: !0,
                    withLanguage: t,
                    withDateTime: t,
                    withRetweetsToggle: !0,
                    withFromList: t,
                    withUsersIFollow: o.default.canFilterByUsersIFollow(this.column),
                    withActionFilter: o.default.isActionsColumn(this.column),
                    withEngagementFilter: t,
                    withPeriscopeFilter: t,
                    withLocationFilter: t,
                    expandContentFilter: this.attr.expandContentFilter,
                    expandUserFilter: this.attr.expandUserFilter,
                    expandActionFilter: this.attr.expandActionFilter,
                    expandEngagementFilter: this.attr.expandEngagementFilter,
                    expandLocationFilter: this.attr.expandLocationFilter
                } : {
                    expandContentFilter: this.attr.expandContentFilter
                },
                accordionSelector: this.attr.accordionSelector,
                contentFilterSelector: this.attr.contentFilterSelector,
                userFilterSelector: this.attr.userFilterSelector,
                scribeSection: this.attr.scribeSection,
                column: this.column,
                isSearchOrEventColumn: t,
                onChange: function() {
                    return e.handleUpdateSearchFilter.bind(e)
                }
            })
        }, this.componentDidInitialize = function() {
            var e;
            this.column = this.attr.column, this.on("uiShowUserFilter", this.handleShowUserFilter), this.on("uiShowContentFilter", this.handleShowContentFilter), this.on("uiColumnOptionsCloseAction", this.hide), this.on("uiAccordionExpandAction", this.updateHeight), this.on("uiAccordionCollapseAction", this.updateHeight), this.on(document, "uiColumnWidthChange", this.updateHeight), this.on("uiTransitionExpandStart", {
                searchFilterSelector: this.handleChildTransitionExpandStart
            }), this.on("uiTransitionExpandEnd", {
                searchFilterSelector: this.handleChildTransitionExpandEnd
            }), this.on("click", {
                actionButton: this.handleClickEvents,
                scribeElementSelector: this.handleScribeElementClick
            });
            var t = o.default.isTouchColumnOptions();
            t ? this.$node.addClass(this.attr.isTouchColumnOptionsClass) : this.$node.removeClass(this.attr.isTouchColumnOptionsClass), e = {
                searchTerm: o.default.getBaseQuery(this.column),
                isOwnList: Boolean(o.default.getOwnList(this.column)),
                isOwnCustomTimeline: o.default.isOwnCustomTimeline(this.column),
                isShareableOrEmbeddable: o.default.isShareable(this.column) || o.default.isEmbeddable(this.column),
                isClearable: o.default.isClearable(this.column),
                isTouchColumnOptions: t,
                isDataminr: o.default.isDataminr(this.column)
            };
            var i = f.render("column/column_options", e);
            this.$node.html(i), o.default.isFilterable(this.column) && this.attachColumnFilters(), o.default.hasPreferences(this.column) && this.attachChild(d, this.select("accordionSelector"), {
                column: this.column
            }), this.attachChild(n.default, ".js-notification-filter-info", {
                columnType: this.attr.columnType,
                columnAccounts: this.attr.column.getFeeds().map(function(e) {
                    return TD.storage.accountController.get(e.getAccountKey())
                })
            }), this.attachChild(r.default, ".js-quality-filter-info", {
                columnType: this.attr.columnType,
                columnAccounts: this.attr.column.getFeeds().map(function(e) {
                    return TD.storage.accountController.get(e.getAccountKey())
                })
            }), void 0 === this.props.isOpen && this.showColumnOptions()
        }, this.shouldComponentUpdate = function(e) {
            return this.props.isOpen !== e.isOpen
        }, this.render = function() {
            void 0 !== this.props.isOpen && (this.props.isOpen ? this.showColumnOptions() : this.hide(!1))
        }
    }, h, m), e.exports.ColumnOptionsReact = (0, c.uiBaseToReact)(e.exports)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = m(i(13)),
        n = m(i(10)),
        r = m(i(11)),
        a = m(i(14)),
        o = m(i(15)),
        c = m(i(84)),
        l = m(i(6)),
        u = (m(i(9)), m(i(2022))),
        d = i(363),
        h = i(357);

    function m(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var f = void 0;

    function p() {
        return f || (f = (0, d.getTrendLocations)()).addCallback(function(e) {
            var t = [],
                i = {},
                s = {},
                n = {},
                r = {};
            return e.forEach(function(e) {
                if (function(e) {
                        return -1 !== (0, c.default)(h.PLACE_TYPE).indexOf(e.placeType.code)
                    }(e)) switch (s[e.woeid] = e, e.placeType.code) {
                    case h.PLACE_TYPE.SUPERNAME:
                    case h.PLACE_TYPE.COUNTRY:
                        t.push(e), i[e.countryCode] = e;
                        break;
                    case h.PLACE_TYPE.TOWN:
                        var a = i[e.countryCode].woeid;
                        r[e.woeid] = a;
                        var o = n[a];
                        o || (n[a] = o = []), o.push(e)
                }
            }), {
                countries: t,
                locationByWoeid: s,
                citiesByCountryWoeid: n,
                countryWoeidByCityWoeid: r
            }
        }), f
    }
    var g = function(e) {
        function t() {
            return (0, n.default)(this, t), (0, a.default)(this, (t.__proto__ || (0, s.default)(t)).apply(this, arguments))
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "render",
            value: function() {
                var e = this;
                return l.default.createElement(u.default, {
                    runDeferred: p
                }, function(t) {
                    return e.props.children(t)
                })
            }
        }]), t
    }(l.default.Component);
    t.default = g
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = function() {
        var e = [],
            t = [],
            i = !1;
        this.onReceiveClick = function(t) {
            e.push(t)
        }, this.onLoseClick = function(e) {
            t.push(e)
        }, this.runReceiveHandlers = function() {
            e.forEach(function(e) {
                e.call(this)
            }, this)
        }, this.runLoseHandlers = function(e) {
            this.targetWithinComponent(e.target) || t.forEach(function(e) {
                e.call(this)
            }, this)
        }, this.targetWithinComponent = function(e) {
            return (0, n.default)(e).closest(this.$clickTrapTarget || this.$node).length > 0
        }, this.setClickTrapTarget = function(e) {
            this.$clickTrapTarget = e
        }, this.enableClickTrap = function() {
            i || (s.default.defer(function() {
                (0, n.default)("body").on("click.clicktrap", "*", this.runLoseHandlers.bind(this)), this.$node.on("click.clicktrap", "*", this.runReceiveHandlers.bind(this))
            }.bind(this)), i = !0)
        }, this.disableClickTrap = function() {
            i && ((0, n.default)("body").off("click.clicktrap"), this.$node.off("click.clicktrap"), i = !1)
        }
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.attributes({
            inputSelector: ".js-typeahead-input",
            KEY_CODE_MAP: {
                8: {
                    name: "BACKSPACE",
                    event: "uiTypeaheadInputBackspace",
                    on: "keydown",
                    preventDefault: !1
                },
                13: {
                    name: "ENTER",
                    event: "uiTypeaheadInputSubmit",
                    on: "keypress",
                    preventDefault: !0
                },
                27: {
                    name: "ESC",
                    event: "uiTypeaheadInputEscaped",
                    on: "keydown"
                },
                9: {
                    name: "TAB",
                    event: "uiTypeaheadInputTab",
                    on: "keydown",
                    preventDefault: !0
                },
                37: {
                    name: "LEFT",
                    event: "uiTypeaheadInputLeft",
                    on: "keydown"
                },
                39: {
                    name: "RIGHT",
                    event: "uiTypeaheadInputRight",
                    on: "keydown"
                },
                38: {
                    name: "UP",
                    event: "uiTypeaheadInputMoveUp",
                    on: "keydown",
                    preventDefault: !0
                },
                40: {
                    name: "DOWN",
                    event: "uiTypeaheadInputMoveDown",
                    on: "keydown",
                    preventDefault: !0
                }
            }
        }), this.after("initialize", function() {
            this.$input = this.select("inputSelector");
            var e = this.domEventToComponentEventFactory.bind(this);
            this.on(this.$input, "input", e("uiTypeaheadInputChanged")), this.on(this.$input, "focus", e("uiTypeaheadInputFocus")), this.on(this.$input, "blur", e("uiTypeaheadInputBlur")), this.on(this.$input, "keydown keypress", this.maybeTriggerModifierEvent)
        }), this.domEventToComponentEventFactory = function(e) {
            return function(t, i) {
                this.trigger(this.$input, e, {
                    query: this.$input.val()
                })
            }.bind(this)
        }, this.maybeTriggerModifierEvent = function(e) {
            var t = this.attr.KEY_CODE_MAP[e.which || e.keyCode];
            if (t) {
                if (e.type !== t.on) return;
                var i = (0, r.default)(e.currentTarget),
                    s = i.val();
                if ("BACKSPACE" === t.name && "" !== s) return;
                if ("TAB" === t.name && "" === s) return;
                t.preventDefault && e.preventDefault(), s = "" === s.trim() ? "" : s, this.trigger(i, t.event, {
                    query: s
                })
            }
        }
    })
}, , , , , , , , , , , , function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).compose,
        o = i(110);
    e.exports = function() {
        a.mixin(this, [o]), this.attributes({
            accordionItemSelector: ".js-accordion-item",
            accordionIsExpandedClass: "is-expanded",
            accordionIsActiveClass: "is-active",
            accordionToggleSelector: ".js-accordion-toggle-view",
            accordionTogglePreventSelector: ".js-accordion-toggle-view-prevent",
            accordionPanelSelector: ".js-accordion-panel",
            isAccordionPanelAnimatingClass: "is-accordion-panel-animating"
        }), this.expandAccordionItem = function(e) {
            var t = this;
            this.trigger(e, "uiAccordionWillExpand");
            var i = e.find(this.attr.accordionPanelSelector);
            e.addClass(this.attr.accordionIsActiveClass), this.transitionExpand(i, this.attr.isAccordionPanelAnimatingClass, function() {
                e.addClass(t.attr.accordionIsExpandedClass), t.updatePanelHeights(), t.trigger(e, "uiAccordionDidExpand")
            }), this.trigger(e, "uiAccordionExpandAction")
        }, this.collapseAccordionItem = function(e) {
            var t = this,
                i = e.find(this.attr.accordionPanelSelector);
            e.removeClass(this.attr.accordionIsExpandedClass), this.transitionCollapse(i, this.attr.isAccordionPanelAnimatingClass, function() {
                e.removeClass(t.attr.accordionIsActiveClass), t.trigger("uiAccordionTotalHeightChanged")
            }), this.trigger(e, "uiAccordionCollapseAction")
        }, this.getOpenAccordionItem = function() {
            return this.select("accordionItemSelector").filter(function(e, t) {
                return (0, n.default)(t).hasClass(this.attr.accordionIsExpandedClass)
            }.bind(this))
        }, this.accordionToggle = function(e) {
            var t = (0, n.default)(e.target),
                i = t.closest(this.attr.accordionTogglePreventSelector);
            if (!(i.length > 0 && (0, n.default)(e.currentTarget).find(i).length > 0)) {
                var s = t.closest(this.attr.accordionItemSelector),
                    r = this.getOpenAccordionItem();
                r.length > 0 && this.collapseAccordionItem(r), s.is(r) || this.expandAccordionItem(s)
            }
        }, this.showAccordionPanel = function(e) {
            var t = e.closest(this.attr.accordionItemSelector),
                i = this.getOpenAccordionItem();
            t.is(i) || (this.collapseAccordionItem(i), this.expandAccordionItem(t))
        }, this.updatePanelHeights = function() {
            var e = ":visible:not(." + this.attr.isAccordionPanelAnimatingClass + ")";
            this.select("accordionPanelSelector").filter(e).each(function(e, t) {
                var i = (0, n.default)(t);
                i.css("height", ""), i.height(i.height()), this.trigger("uiAccordionTotalHeightChanged")
            }.bind(this))
        }, this.after("initialize", function() {
            this.on("click", {
                accordionToggleSelector: s.default.throttle(this.accordionToggle, 300).bind(this)
            }), this.on("uiAccordionUpdatePanelHeights", this.updatePanelHeights)
        })
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s, n = i(6),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    t.default = function() {
        var e = TD.ui.template.render("column_loading_placeholder");
        return r.default.createElement("div", {
            dangerouslySetInnerHTML: {
                __html: e
            }
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = r(i(118)),
        n = r(i(1));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = {},
        o = 1,
        c = {
            linear: function(e) {
                return e
            },
            inQuad: function(e) {
                return e * e
            },
            outQuad: function(e) {
                return e * (2 - e)
            },
            inOutQuad: function(e) {
                return e < .5 ? 2 * e * e : (4 - 2 * e) * e - 1
            },
            inCubic: function(e) {
                return e * e * e
            },
            outCubic: function(e) {
                return --e * e * e + 1
            },
            inOutCubic: function(e) {
                return e < .5 ? 4 * e * e * e : (e - 1) * (2 * e - 2) * (2 * e - 2) + 1
            },
            inQuart: function(e) {
                return e * e * e * e
            },
            outQuart: function(e) {
                return 1 - --e * e * e * e
            },
            inOutQuart: function(e) {
                return e < .5 ? 8 * e * e * e * e : 1 - 8 * --e * e * e * e
            },
            inQuint: function(e) {
                return e * e * e * e * e
            },
            outQuint: function(e) {
                return 1 + --e * e * e * e * e
            },
            inOutQuint: function(e) {
                return e < .5 ? 16 * e * e * e * e * e : 1 + 16 * --e * e * e * e * e
            }
        };

    function l(e) {
        var t = c[e];
        if (!t) throw new Error("No such method");
        return function(e, i, s) {
            return i + s * t(e)
        }
    }
    e.exports = {
        easeFn: l,
        ease: function(e) {
            if (e = e || {}, [(0, s.default)(e.from), (0, s.default)(e.time), (0, s.default)(e.applicator)].indexOf("undefined") > -1) throw new Error("animate requires from, time and applicator.");
            var t = parseFloat(e.from);
            if (!n.default.isNumber(t)) throw new Error("A numeric from value is required.");
            if (void 0 === e.to && void 0 === e.delta) throw new Error("animate either a to amount or a delta.");
            var i = parseFloat(e.to);
            if (void 0 !== e.delta && (i = t + parseFloat(e.delta)), !n.default.isNumber(i)) throw new Error("A numeric to value is required.");
            var r = e.time;
            n.default.isNumber(r) || (r = parseFloat(r));
            var c = e.easing;
            "function" != typeof c && (c = l("linear"));
            var u = e.applicator;
            if ("function" != typeof u) throw new Error("applicator must be a function.");
            var d = e.name,
                h = e.done || function() {},
                m = Date.now(),
                f = i - t;
            0 !== f && (d && (a[d] = o), window.requestAnimationFrame(function e(i) {
                var s = Date.now() - m,
                    n = s / r;
                return s >= r ? (u(c(1, t, f)), h(s)) : d && a[d] !== i ? h(s) : (window.requestAnimationFrame(e.bind(this, i)), void u(c(n, t, f), t, n))
            }.bind(this, o)), o += 1)
        }
    }
}, , function(e, t, i) {
    "use strict";
    var s, n = i(12),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    e.exports = r.default.mixin(function() {
        this.attributes({
            characterCountInvalidClass: "color-twitter-red"
        }), this.render = function() {
            var e = this.props,
                t = e.hideCharacterCount,
                i = void 0 !== t && t,
                s = e.hasValidCharacterCount,
                n = void 0 !== s && s,
                r = e.displayedCharacterCount,
                a = void 0 === r ? 160 : r;
            this.$node.toggle(!i), this.$node.html(a), this.$node.toggleClass(this.attr.characterCountInvalidClass, !n)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(0)),
        n = r(i(8));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).compose,
        o = i(247);
    e.exports = function() {
        a.mixin(this, [o]), this.after("initialize", function() {
            this.mouseDown = !1, this.setupDragDrop({
                indicateDrop: !1,
                dragstart: this.mouseDownOff,
                dragend: function() {
                    this.mouseDownOff(), this.destroyFlyover()
                }
            }), this.on(document, "mousedown", this.mouseDownOn), this.on(document, "mouseup", this.mouseDownOff)
        }), this.mouseDownOn = function(e) {
            this.mouseDown = !0
        }, this.mouseDownOff = function(e) {
            this.mouseDown = !1
        }, this.renderFlyover = function(e, t) {
            var i;
            if (!this.mouseDown && (i = t && t.content ? t.content : e.data("title"))) {
                this.$flyover = (0, s.default)(n.default.render("column_nav_flyout", {
                    content: i
                })), (0, s.default)("body").append(this.$flyover);
                var r = e.height();
                this.$flyover.css({
                    lineHeight: r + "px"
                }), this.$flyover.children().height(r), this.repositionFlyover(e)
            }
        }, this.destroyFlyover = function() {
            this.$flyover && (this.$flyover.remove(), this.$flyover = null)
        }, this.repositionFlyover = function(e) {
            var t;
            this.$flyover && (t = e.offset().top - (this.$flyover.height() - e.height()) / 2, this.$flyover.css("top", t))
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(0)),
        r = a(i(20));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = i(5).component,
        c = i(37),
        l = i(49);
    e.exports = o(r.default, function() {
        this.attributes({
            stateSource: null,
            typeTextSelector: ".js-account-safeguard-text"
        }), this.after("initialize", function() {
            this.observe(this.requestResource(this.attr.stateSource)).map(l.filterKeys(["tweetType", "scheduledDate", "isSelectedAccountSafeguarded", "selectedAccountKeys", "tweetText", "files"])).distinctUntilChanged(l.shallowEquals()).subscribe(this.render.bind(this)), this.on(this.$node.find("input"), "change", this.handleChange)
        }), this.getText = function(e) {
            return "message" === e.tweetType ? (0, s.default)("Ready to send?") : null !== e.scheduledDate ? (0, s.default)("Ready to schedule?") : (0, s.default)("Ready to Tweet?")
        }, this.render = function(e) {
            this.select("typeTextSelector").html(this.getText(e)), this.$node.toggleClass("is-hidden", !e.isSelectedAccountSafeguarded), this.$node.find("input").prop("checked", !1).change()
        }, this.handleChange = function(e) {
            this.trigger("uiAccountSafeguardCheckboxChange", {
                checked: (0, n.default)(e.target).prop("checked")
            })
        }
    }, c)
}, function(e, t, i) {
    "use strict";
    var s = r(i(20)),
        n = r(i(245));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).component,
        o = i(37),
        c = i(49);
    e.exports = a(s.default, function() {
        this.attributes({
            characterCountValidClass: "color-twitter-dark-gray",
            characterCountInvalidClass: "color-twitter-red",
            isHiddenClass: "is-hidden",
            stateSource: null
        }), this.after("initialize", function() {
            this.observe(this.requestResource(this.attr.stateSource)).map(c.filterKeys(["displayedCharacterCount", "hasValidCharacterCount", "hideCharacterCount"])).distinctUntilChanged().subscribe(this.render.bind(this))
        }), this.render = function(e) {
            var t = n.default.getAvailableCharacterPercent(e.displayedCharacterCount);
            this.$node.toggle(!e.hideCharacterCount), e.displayedCharacterCount !== this.displayedCharacterCount && (this.displayedCharacterCount = e.displayedCharacterCount, this.$node.text(e.displayedCharacterCount), this.$node.toggleClass(this.attr.characterCountInvalidClass, !e.hasValidCharacterCount || 0 === t), this.$node.toggleClass(this.attr.characterCountValidClass, e.hasValidCharacterCount && 0 !== t), e.hideCharacterCount || this.$node.toggleClass(this.attr.isHiddenClass, t > n.default.remainingPercentageThreshold))
        }
    }, o)
}, function(e, t, i) {
    "use strict";
    var s = o(i(95)),
        n = o(i(245)),
        r = o(i(2123)),
        a = o(i(12));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = a.default.mixin(function() {
        this.attributes({
            progressCircleSelector: ".js-progress-circle"
        }), this.shouldComponentUpdate = function(e) {
            return this.props.characterCount !== e.characterCount
        }, this.componentDidInitialize = function() {
            this.initialRender()
        }, this.initialRender = function() {
            var e = this.select("progressCircleSelector");
            this.progressIndicator = new r.default(e[0])
        }, this.getStrokeClass = function(e) {
            return e <= 0 ? "stroke-twitter-red" : e <= n.default.remainingPercentageThreshold ? "stroke-twitter-yellow" : "stroke-twitter-blue"
        }, this.shouldHideProgress = function() {
            return "message" === this.props.tweetType
        }, this.toggleVisibility = function() {
            var e = this.$node.get(0);
            (0, s.default)(this.shouldHideProgress(), function() {
                return e.classList.add("is-hidden")
            }, function() {
                return e.classList.remove("is-hidden")
            })
        }, this.getProgress = function() {
            var e = n.default.getAvailableCharacterPercent(this.props.characterCount),
                t = Math.max(0, e),
                i = this.getStrokeClass(e);
            return {
                newProgress: t,
                strokeClass: i
            }
        }, this.render = function() {
            if (this.toggleVisibility(), !this.shouldHideProgress()) {
                var e = this.getProgress();
                this.progressIndicator.updateProgress(100 - Math.min(e.newProgress, 100)).updateClassList([e.strokeClass])
            }
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(1)),
        n = a(i(0)),
        r = a(i(20));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = i(5).component,
        c = i(37),
        l = i(646);
    e.exports = o(r.default, function() {
        this.attributes({
            stateSource: null,
            sendButtonSelector: ".js-send-button",
            composeSuccess: ".js-compose-sending-success",
            spinnerButtonSelector: ".js-spinner-button",
            spinnerButtonActiveSelector: ".js-spinner-button-active",
            spinnerButtonActiveClass: "spinner-button-is-active",
            spinnerButtonHiddenClass: "is-hidden",
            spinnerButtonWithProgressClass: "spinner-button-with-progress",
            spinnerButtonWithProgressIconClass: "spinner-button-icon-with-progress",
            spinnerButtonTextHiddenClass: "text-hidden"
        }), this.after("initialize", function() {
            this.$sendButton = this.select("sendButtonSelector"), this.$spinnerBtn = this.select("spinnerButtonSelector"), this.$spinnerBtnActive = this.select("spinnerButtonActiveSelector"), this.on(this.$sendButton, "click keydown", this.handleClick);
            var e = this.observe(this.requestResource(this.attr.stateSource));
            e.pluck("sendButtonText").distinctUntilChanged().subscribe(this.renderButtonText.bind(this)), e.pluck("sendButtonTooltip").distinctUntilChanged().subscribe(this.renderTooltip.bind(this)), e.map(function(e) {
                return {
                    tweetSentWhileVideoUploadInProgress: e.tweetSentWhileVideoUploadInProgress,
                    sendingStatus: e.sendingStatus
                }
            }).distinctUntilChanged(s.default.isEqual).subscribe(this.renderSendingStatus.bind(this)), e.pluck("canSend").distinctUntilChanged().subscribe(this.toggleEnabled.bind(this))
        }), this.renderButtonText = function(e) {
            this.$sendButton.text(e)
        }, this.renderTooltip = function(e) {
            var t = (0, n.default)("<div/>").html(e).text();
            this.$sendButton.attr("data-original-title", t)
        }, this.renderSendingStatus = function(e) {
            var t = e.tweetSentWhileVideoUploadInProgress,
                i = e.sendingStatus;
            t ? this.spinnerWithProgressButtonToggle("sending" === i) : this.spinnerButtonToggle("sending" === i), this.select("composeSuccess").toggleClass("is-hidden", "success" !== i), t || this.$sendButton.toggleClass("text-hidden", "ready" !== i).removeClass(this.attr.spinnerButtonWithProgressClass + " " + this.attr.spinnerButtonWithProgressIconClass)
        }, this.toggleEnabled = function(e) {
            this.$sendButton.toggleClass("is-disabled", !e)
        }, this.handleClick = function(e) {
            (!l.eventIsKey(e) || l.isEnter(e) || l.isSpacebar(e)) && this.trigger("uiComposeSendTweet", {})
        }, this.spinnerButtonToggle = function(e) {
            this.$spinnerBtn.toggleClass(this.attr.spinnerButtonActiveClass, e), this.$spinnerBtnActive.toggleClass(this.attr.spinnerButtonHiddenClass, !e)
        }, this.spinnerWithProgressButtonToggle = function(e) {
            this.$spinnerBtn.toggleClass(this.attr.spinnerButtonWithProgressClass, e), this.$spinnerBtn.toggleClass(this.attr.spinnerButtonTextHiddenClass, !e), this.$spinnerBtnActive.toggleClass(this.attr.spinnerButtonWithProgressIconClass, e), this.$spinnerBtnActive.toggleClass(this.attr.spinnerButtonHiddenClass, !e)
        }
    }, c)
}, function(e, t, i) {
    "use strict";
    var s = {
        eventIsKey: function(e) {
            return e.which > 3
        },
        isEnter: function(e) {
            return e.which === TD.constants.keyCodes.enter
        },
        isSpacebar: function(e) {
            return e.which === TD.constants.keyCodes.spacebar
        }
    };
    e.exports = s
}, function(e, t, i) {
    "use strict";
    var s = d(i(7)),
        n = d(i(3)),
        r = d(i(12)),
        a = d(i(354)),
        o = d(i(140)),
        c = d(i(8)),
        l = d(i(190)),
        u = d(i(1));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            otherRepliesLinkSelector: ".js-other-replies-link"
        }), this.componentDidInitialize = function() {
            this.on("click", {
                otherRepliesLinkSelector: this.handleOthersLinkClick
            }), this.on(document, "dataTwitterUsers", this.handleTwitterUsers)
        }, this.shouldComponentUpdate = function(e) {
            return !1 === u.default.isEqual(this.props, e)
        }, this.render = function() {
            var e = this.props.batchMode,
                t = this.props.recipients || [],
                i = this.props.excludedRecipientsIds || [];
            if (0 !== t.length && "subsequent" !== e) {
                var s = c.default.render("compose/reply_info", {
                    recipients: l.default.getRecipientsToDisplay(t, i)
                });
                this.$node.removeClass("is-hidden").html(s)
            } else this.$node.addClass("is-hidden").empty()
        }, this.handleOthersLinkClick = function() {
            this.requestId = l.default.requestUsers(this.props.recipients)
        }, this.handleTwitterUsers = function(e, t) {
            if (t.requestId === this.requestId) {
                var i = l.default.getDefaultModalOptions();
                this.showModal(a.default, {
                    replies: t.users,
                    excludedRecipientsIds: this.props.excludedRecipientsIds,
                    withComposeContext: !0
                }, (0, s.default)({}, i, {
                    title: (0, n.default)("Replying to")
                }))
            }
        }
    }, o.default)
}, function(e, t, i) {
    "use strict";
    var s, n = i(20),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component,
        o = i(37);
    e.exports = a(r.default, function() {
        this.attributes({
            stateSource: null,
            defaultHeight: 130,
            expandedHeight: 180,
            minimumHeightCharacters: 180
        }), this.after("initialize", function() {
            var e = this.observe(this.requestResource(this.attr.stateSource)),
                t = e.pluck("tweetText").distinctUntilChanged();
            this.observe(t).filter(function(e) {
                return this.$node.val() !== e
            }, this).subscribe(function(e) {
                this.$node.val(e)
            }.bind(this)), this.observe(e).pluck("sendingStatus").map(this.shouldDisable, this).distinctUntilChanged().subscribe(this.toggleDisable.bind(this)), this.observe(e).pluck("selectionIndices").distinctUntilChanged().subscribe(this.setSelection.bind(this)), this.observe(e).pluck("tweetTextFocused").distinctUntilChanged().filter(this.isNotTouch).subscribe(this.toggleFocus.bind(this)), this.observe(t).map(this.calculateHeight, this).distinctUntilChanged().subscribe(this.setHeight.bind(this)), this.on("input propertychange change", this.handleChange), this.on("focus", this.triggerFocusChange.bind(this, !0)), this.on("blur", this.triggerFocusChange.bind(this, !1)), this.textAutoComplete = new TD.components.Autocomplete(this.$node)
        }), this.after("teardown", function() {
            this.textAutoComplete.destroy()
        }), this.handleChange = function(e) {
            this.trigger("uiComposeTextChanged", {
                value: this.node.value
            })
        }, this.triggerFocusChange = function(e) {
            this.trigger("uiComposeTextFocus", {
                focused: e
            })
        }, this.toggleFocus = function(e) {
            e ? this.node.focus() : this.node.blur()
        }, this.shouldDisable = function(e) {
            return "ready" !== e
        }, this.toggleDisable = function(e) {
            this.$node.prop("disabled", e)
        }, this.setSelection = function(e) {
            var t = e[0],
                i = e[1];
            this.node.selectionStart = t, this.node.selectionEnd = i, setTimeout(function() {
                this.node.selectionStart = t, this.node.selectionEnd = i
            }.bind(this), 70), this.triggerFocusChange(!0)
        }, this.calculateHeight = function(e) {
            return e.length > this.attr.minimumHeightCharacters ? this.attr.expandedHeight : this.attr.defaultHeight
        }, this.setHeight = function(e) {
            this.$node.css({
                height: e
            })
        }, this.isNotTouch = function() {
            return !TD.util.isiOSDevice() || !TD.decider.get("touchdeck_compose_v2")
        }
    }, o)
}, function(e, t, i) {
    "use strict";
    var s = l(i(7)),
        n = l(i(3)),
        r = l(i(0)),
        a = i(23),
        o = i(38),
        c = i(2124);

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }

    function u(e, t) {
        if (e.scheduledDate) {
            var i = t.map(function(t) {
                return (0, s.default)({}, t, {
                    tweetData: e
                })
            });
            this.trigger("uiSendScheduledTweets", {
                requestId: e.requestId,
                requests: i,
                scheduledDate: e.scheduledDate,
                tokenToDelete: e.scheduledId,
                metadata: e.metadata
            })
        } else {
            var n = "message" === e.type ? "uiSendDm" : "uiSendTweet";
            this.trigger("metric", {
                type: "metric",
                key: "tweet:data:selected-accounts",
                value: [t.length]
            }), t.forEach(function(t) {
                this.trigger(n, (0, s.default)({}, t, {
                    tweetData: e
                }))
            }, this), this.trigger("uiSendScheduledTweets", {
                requestId: e.requestId,
                requests: [],
                scheduledDate: e.scheduledDate,
                tokenToDelete: e.scheduledId,
                metadata: e.metadata
            })
        }
    }
    e.exports = function() {
        var e = [],
            t = null,
            i = [];
        this.after("initialize", function() {
            this.on(document, "dataTweetSent", this.forCurrentRequest(this.handleDataTweetSent)), this.on(document, "dataTweetError", this.forCurrentRequest(this.handleDataTweetError)), this.on(document, "dataDmSent", this.forCurrentRequest(this.handleDataDmSent)), this.on(document, "dataDmError", this.forCurrentRequest(this.handleDataDmError)), this.on(document, "dataScheduledTweetsSent", this.forCurrentRequest(this.handleDataScheduledTweetsSent)), this.on(document, "dataScheduledTweetsError", this.forCurrentRequest(this.handleDataScheduledTweetsError))
        }), this.forCurrentRequest = function(e) {
            return function(i, s) {
                t && s.request && s.request.requestId === t.requestId && e.call(this, i, s)
            }
        }, this.resetSendTweet = function() {
            e = [], i = [], t = null
        }, this.maybeShortenTextLinks = function(e) {
            return "bitly" === TD.settings.getLinkShortener() ? TD.services.bitly.shortenTextLinks(e) : TD.core.defer.succeed(e)
        }, this.sendTweet = function(e) {
            var i = this;
            this.trigger("uiComposeTweetSending"), this.resetSendTweet(), t = e, this.maybeShortenTextLinks(e.text).addCallback(function(t) {
                e.text = t, i.actuallySendTweet(e)
            })
        }, this.actuallySendTweet = function(e) {
            var t = [],
                i = e.from.map(function(i) {
                    var s = {
                        accountKey: i
                    };
                    return e.accountsMediaIds && (s.mediaIds = e.accountsMediaIds[i], t.push(s.mediaIds)), r.default.extend({}, e, s)
                });
            t.length ? new TD.core.defer.DeferredList(t).addCallback(u.bind(this, e, i)) : u.call(this, e, i)
        }, this.handleTweetResponse = function(s) {
            i.push(s.request), i.length === t.from.length && (0 === e.length ? this.triggerTweetSuccess() : this.triggerTweetError())
        }, this.handleDataTweetSent = function(e, t) {
            this.handleTweetResponse(t)
        }, this.handleDataDmSent = function(e, t) {
            this.handleTweetResponse(t)
        }, this.handleDataScheduledTweetsSent = function(e, t) {
            this.triggerTweetSuccess()
        }, this.handleDataTweetError = function(t, i) {
            e.push(i), this.handleTweetResponse(i)
        }, this.handleDataDmError = function(e, t) {
            this.handleDataTweetError(e, t)
        }, this.handleDataScheduledTweetsError = function(e, t) {
            var i, s, r;
            if (t.response.humanReadableMessage) i = t.response.humanReadableMessage;
            else {
                try {
                    s = JSON.parse(t.response.req.responseText)
                } catch (e) {}
                r = s && s.error ? s.error : t.response.req.status, i = (0, n.default)("Scheduling failed. Please try again. ({{message}})", {
                    message: r
                })
            }(0, a.showErrorNotification)({
                message: i
            }), this.triggerTweetError()
        }, this.showTweetErrors = function(e) {
            if (0 !== e.length) {
                var i = e.map(function(e) {
                    var i = {};
                    try {
                        i = JSON.parse(e.response.responseText).errors[0]
                    } catch (t) {
                        e && e.response && TD.util.isNetworkFailure(e.response) && (i.code = "0")
                    }
                    var s = (0, c.getApiErrorMessage)(i);
                    e.response && e.response.message && (s = e.response.message);
                    var r = (0, o.getAccountData)(e.request.accountKey),
                        a = r ? r.screenName : "unknown account";
                    switch (t.type) {
                        case "message":
                            return (0, n.default)("Message from @{{screenName}} failed: " + s, {
                                screenName: a
                            });
                        default:
                            return (0, n.default)("Tweet from @{{screenName}} failed: " + s, {
                                screenName: a
                            })
                    }
                }, this);
                (0, a.showErrorNotification)({
                    message: i.join("\n")
                })
            }
        }, this.triggerTweetSuccess = function() {
            this.trigger("uiComposeTweetSent")
        }, this.triggerTweetError = function() {
            this.showTweetErrors(e), this.trigger("uiComposeTweetError", {
                errors: t.scheduledDate ? null : e
            })
        }
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(158),
        o = i(619),
        c = i(245),
        l = i(2125),
        u = i(2126),
        d = i(2127),
        h = i(2128),
        m = i(2129);
    e.exports = function(e) {
        var t = r.default.clone(e);
        t.configuration = t.configuration || {}, t.settings = t.settings || {}, t.hasMediaAttached = !!t.files && t.files.length > 0, t.hasQuotedTweet = !!t.quotedTweet;
        var i = c.getConfiguration(),
            s = "message" === t.tweetType,
            n = i.maxWeightedTweetLength,
            f = a.getTweetLength(t.tweetText.trim(), c.getConfiguration()),
            p = t.configuration.characters_reserved_per_media + (t.scheduledDate ? 1 : 0),
            g = t.hasMediaAttached && !TD.decider.get("compose_character_limit_do_not_count_attachments") ? p : 0,
            v = t.hasQuotedTweet && !TD.decider.get("compose_character_limit_do_not_count_attachments") ? t.configuration.transformedURLLength + 1 : 0;
        return t.characterCountLimit = s ? t.configuration.dm_text_character_limit : n, t.characterCount = f + g + v, t.hasValidCharacterCount = o.isWithinCharLimit(t.characterCountLimit, t.characterCount), t.remainingCharCount = o.getRemainingCharCount(t.characterCountLimit, t.characterCount), t.isJustWhitespace = 0 === t.characterCount, t.displayedCharacterCount = t.remainingCharCount, t.hideCharacterCount = s && t.remainingCharCount >= 0, TD.decider.get("compose_quoted_tweet_as_attachment") || (t.rawTweetText = t.tweetText + (t.quotedTweet ? " " + t.quotedTweet.getChirpURL() : "")), t.hasSelectedAccounts = t.selectedAccountKeys.length > 0, t.isSelectedAccountSafeguarded = l.isSelectedAccountSafeguarded(t), t.safeguardingOk = l.isSafeguardingOk(t), t.hasMessageRecipients = t.messageRecipients.length > 0 || t.messageConversation, t.hasValidScheduledDate = t.scheduledDate && t.scheduledDate > t.currentTime, t.schedulingOk = !t.scheduledDate || t.hasValidScheduledDate, t.sendButtonText = u.getButtonText(t), t.sendButtonTooltip = u.getTooltipText(t), t.canAddMedia = d.canAddMedia(t), t.addImageButtonTooltip = d.getTooltipText(t), t.addImageButtonText = d.getButtonText(t), t.canSchedule = h.canSchedule(t), t.scheduleButtonTooltip = h.getTooltipText(t), t.scheduleButtonText = h.getButtonText(t), t.canSwitchTweetType = m.canSwitchTweetType(t), t.tweetTypeButtonTooltip = m.getTooltipText(t), t.canSend = function(e) {
            if ("sending" === e.sendingStatus) return !1;
            if ("message" === e.tweetType) {
                if (!e.hasMessageRecipients) return !1;
                if (e.hasQuotedTweet || e.hasMediaAttached) return !0
            }
            return !(!e.hasValidCharacterCount || !e.hasSelectedAccounts) && (!(e.isJustWhitespace && !e.hasMediaAttached) && (!!e.safeguardingOk && (!!e.schedulingOk && (!e.hasQuotedTweet || !e.hasMediaAttached))))
        }(t), t
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = r(i(32));
    t.isSending = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        if (!e.sendingStatus) return !1;
        return "sending" === e.sendingStatus
    }, t.isProcessing = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        if (!e.uploadsInProgress) return !1;
        return (0, s.default)(e.uploadsInProgress).every(function(t) {
            var i = e.uploadsInProgress[t].mode;
            return "waiting" === i || "processing" === i
        })
    }, t.isUploading = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        if (!e.uploadsInProgress) return !1;
        return (0, s.default)(e.uploadsInProgress).some(function(t) {
            return "uploading" === e.uploadsInProgress[t].mode
        })
    }, t.getMinimumProgress = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        if (!e.uploadsInProgress) return 0;
        var t = (0, s.default)(e.uploadsInProgress).filter(function(t) {
            return "uploading" === e.uploadsInProgress[t].mode
        }).map(function(t) {
            return Math.floor(e.uploadsInProgress[t].percent)
        });
        return n.default.min(t)
    };
    var n = r(i(1));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.hasVideo = function(e) {
        return 1 === e.files.length && (0, s.isVideo)(e.files[0])
    };
    var s = i(361)
}, function(e, t, i) {
    "use strict";
    var s = i(158),
        n = i(1),
        r = {
            prependRecipients: function(e) {
                return e.messageRecipients.map(function(e) {
                    return s.atMentionify(e.screenName)
                }).join(" ") + " " + e.tweetText
            },
            appendText: function(e, t) {
                return (t.tweetText && t.tweetText.trim()) + " " + e
            },
            stripNamesFromText: function(e, t) {
                return n.difference(e.split(" "), t).join(" ").trim()
            },
            mergeRepliesAndMentions: function(e, t, i, a, o) {
                var c = o.map(function(e) {
                        return s.atMentionify(e.screenName)
                    }),
                    l = n.union(e, [i.user.screenName].map(s.atMentionify)),
                    u = n.union(t, n.pluck(a, "screenName").map(s.atMentionify));
                return {
                    replies: r.stripRepliesFromMentions(l, c),
                    mentions: r.stripRepliesFromMentions(u, c.concat(l))
                }
            },
            stripRepliesFromMentions: function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                    t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
                return e.filter(function(e) {
                    return t.map(function(e) {
                        return e.toLowerCase()
                    }).indexOf(e.toLowerCase()) < 0
                })
            },
            getSelectionIndices: function(e, t, i) {
                return 0 === i.length ? 0 === t.length ? [] : [t[0].length + 1, t[0].length + 1] : [i.map(e.indexOf.bind(e)).reduce(function(e, t) {
                    return Math.min(e, t)
                }), i.map(function(t) {
                    return e.indexOf(t) + t.length + 1
                }).reduce(function(e, t) {
                    return Math.max(e, t)
                })]
            },
            getStackedRepliesText: function(e, t, i) {
                var s = r.stripNamesFromText(e, t.concat(i)),
                    n = [].concat(t).concat(s.length ? s : []).concat(i).join(" ");
                return n.length ? n + " " : ""
            }
        };
    e.exports = r
}, function(e, t, i) {
    i(655), e.exports = i(857)
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    i(858), i(859), i(860), i(861), i(862), i(1893), i(1894)
}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t) {}, function(e, t, i) {
    "use strict";
    i(863), i(1208), i(309), i(1217), i(1221), i(1562), i(533), i(1564), i(1565), i(1566), i(1567), i(1568), i(1569), i(1570), i(1571), i(1572), i(1573), i(1574), i(1575), i(1748), i(1749), i(1750), i(1751), i(1752), i(1753), i(1754), i(1755), i(1762), i(1763), i(1764), i(1765), i(1766), i(1767), i(1768), i(1769), i(1770), i(1771), i(1772), i(1781), i(1782), i(1783), i(1784), i(1785), i(1786), i(1787), i(1789), i(1793), i(1794), i(1795), i(1796), i(1797), i(593), i(1798), i(1799), i(1800), i(1801), i(596), i(1805), i(588), i(1806), i(1807), i(1808), i(1810), i(1811), i(1814), i(64), i(1817), TD.decider = i(1818), TD.storage = i(598), i(1821), i(1822), i(1823), i(1824), i(1825), i(1826), i(1827), i(1828), i(1829), i(1830), i(1831), i(1832), i(1833), i(1834), i(1835), i(1836), TD.ui.template = i(8), i(1838), TD.controller.init = i(1842), i(1844), i(1845), i(1847), i(1848), i(1849), i(182), i(592), i(1850), i(1852), i(1853), i(1854), i(1855), i(1856), i(1857), i(1858), i(1859), i(1860), i(1861), i(1863), i(1864), i(604), i(357), i(1865), i(1866), i(1867), i(1868), i(1869), i(1870), i(1871), i(1872), i(1873), i(1874), i(1875), i(1876), i(1877), i(1878), i(1879), i(1880), i(1881), i(1882), i(1883), i(1884), i(1886), i(1887), i(1888), i(1889), i(1890), TD.net.ajax = i(107), i(532), i(1891), i(1892)
}, function(e, t, i) {
    "use strict";
    window.TD_mustaches = i(864), window.Hogan = i(402), window.StateMachine = i(1185), window.twttrTxt = i(403), i(469)
}, function(e, t, i) {
    "use strict";
    var s, n = {};
    (s = i(865)).keys().forEach(function(e) {
        return n[e.substr(2)] = s(e).default
    }), e.exports = n
}, function(e, t, i) {
    var s = {
        "./account_selector_avatar.mustache": 866,
        "./account_settings_account_summary.mustache": 867,
        "./account_summary.mustache": 868,
        "./account_summary_inline.mustache": 869,
        "./action_header.mustache": 870,
        "./actions/action_dialog.mustache": 871,
        "./actions/add_to_customtimeline_dialog.mustache": 872,
        "./actions/add_to_list_dialog.mustache": 873,
        "./actions/add_to_list_footer.mustache": 874,
        "./actions/copy_text_modal.mustache": 875,
        "./actions/follow_from.mustache": 876,
        "./add_account_info.mustache": 877,
        "./add_column_search_input.mustache": 878,
        "./add_image_description.mustache": 879,
        "./app_container.mustache": 880,
        "./app_links.mustache": 881,
        "./buttons/favorite.mustache": 882,
        "./buttons/load_more.mustache": 883,
        "./chart_with_controls.mustache": 884,
        "./column.mustache": 885,
        "./column/add_to_custom_timeline.mustache": 886,
        "./column/add_to_customtimeline_drop_indicator.mustache": 887,
        "./column/add_to_customtimeline_drop_indicator_spinner.mustache": 888,
        "./column/chirp_container.mustache": 889,
        "./column/column_dm_participants.mustache": 890,
        "./column/column_filter_error.mustache": 891,
        "./column/column_header.mustache": 892,
        "./column/column_header_detail.mustache": 893,
        "./column/column_options.mustache": 894,
        "./column/column_options_header.mustache": 895,
        "./column/custom_timeline_description.mustache": 896,
        "./column/dm_rename_conversation.mustache": 897,
        "./column/filter_callout.mustache": 898,
        "./column/preferences.mustache": 899,
        "./column/trend_select_item.mustache": 900,
        "./column/trends_options.mustache": 901,
        "./column_loading_placeholder.mustache": 902,
        "./column_nav_flyout.mustache": 903,
        "./column_title.mustache": 904,
        "./column_title_editable.mustache": 905,
        "./command_palette/base.mustache": 906,
        "./command_palette/command_list.mustache": 907,
        "./compose/account_selector.mustache": 908,
        "./compose/account_selector_grid_toggle.mustache": 909,
        "./compose/accounts.mustache": 910,
        "./compose/autocomplete_hashtag.mustache": 911,
        "./compose/autocomplete_twitter_user.mustache": 912,
        "./compose/character_count_with_circle.mustache": 913,
        "./compose/close_button.mustache": 914,
        "./compose/compose_inline_reply.mustache": 915,
        "./compose/custom_video_controls.mustache": 916,
        "./compose/docked_compose.mustache": 917,
        "./compose/image_description_field.mustache": 918,
        "./compose/in_reply_to.mustache": 919,
        "./compose/media_bar_image.mustache": 920,
        "./compose/media_bar_infobar.mustache": 921,
        "./compose/message_conversation.mustache": 922,
        "./compose/message_recipients.mustache": 923,
        "./compose/reply_info.mustache": 924,
        "./compose/reply_list.mustache": 925,
        "./compose/schedule.mustache": 926,
        "./contributor_list_account_summary.mustache": 927,
        "./contributors/contributor_list.mustache": 928,
        "./contributors/contributor_list_error.mustache": 929,
        "./contributors/contributor_list_row.mustache": 930,
        "./contributors/contributor_manager.mustache": 931,
        "./contributors/contributors_loading.mustache": 932,
        "./customtimeline/edit_customtimeline.mustache": 933,
        "./data_drawer.mustache": 934,
        "./drawer.mustache": 935,
        "./embed_tweet.mustache": 936,
        "./favorite_from_options.mustache": 937,
        "./feather-component-card-video.mustache": 938,
        "./follow_button.mustache": 939,
        "./heartsprite.mustache": 940,
        "./important_update.mustache": 941,
        "./inline_confirmation.mustache": 942,
        "./insights/demographics.mustache": 943,
        "./insights/insights_panel.mustache": 944,
        "./insights/no_data.mustache": 945,
        "./insights/related_words.mustache": 946,
        "./item_box.mustache": 947,
        "./keyboard_shortcut_list.mustache": 948,
        "./large_modal.mustache": 949,
        "./learn_more_about_reporting.mustache": 950,
        "./list_module_account_item.mustache": 951,
        "./list_module_dataminr_watchlist.mustache": 952,
        "./list_module_events.mustache": 953,
        "./list_module_list_item.mustache": 954,
        "./list_module_livevideos.mustache": 955,
        "./list_module_subtitle_item.mustache": 956,
        "./list_module_trend_header.mustache": 957,
        "./list_module_trends.mustache": 958,
        "./list_module_twitter_customtimeline_item.mustache": 959,
        "./list_module_twitter_list_item.mustache": 960,
        "./list_option_dropdown.mustache": 961,
        "./list_trend_item.mustache": 962,
        "./list_trend_promoted_item.mustache": 963,
        "./lists/add_users_to_list_button.mustache": 964,
        "./lists/edit_footer.mustache": 965,
        "./lists/edit_list_details.mustache": 966,
        "./lists/edit_members_footer.mustache": 967,
        "./lists/member.mustache": 968,
        "./lists/member_export.mustache": 969,
        "./lists/member_import.mustache": 970,
        "./lists/member_list.mustache": 971,
        "./live_video.mustache": 972,
        "./login/login_form.mustache": 973,
        "./login/login_form_message.mustache": 974,
        "./login/promo_for_login_form.mustache": 975,
        "./login/twitter_account_login_form.mustache": 976,
        "./media/animated_gif.mustache": 977,
        "./media/media_gallery.mustache": 978,
        "./media/media_upload.mustache": 979,
        "./media/native_video.mustache": 980,
        "./media/scheduled_video.mustache": 981,
        "./media/tagged_users.mustache": 982,
        "./media/video_overlay.mustache": 983,
        "./media/vine.mustache": 984,
        "./media/youtube.mustache": 985,
        "./menus/accordion_header.mustache": 986,
        "./menus/actions.mustache": 987,
        "./menus/actions_directmessage.mustache": 988,
        "./menus/column_nav_menu.mustache": 989,
        "./menus/column_share.mustache": 990,
        "./menus/datetime_footer.mustache": 991,
        "./menus/datetime_input.mustache": 992,
        "./menus/dm_conversations_menu.mustache": 993,
        "./menus/dropdown.mustache": 994,
        "./menus/filter_info_generic.mustache": 995,
        "./menus/flagged_media.mustache": 996,
        "./menus/follow_menuitem.mustache": 997,
        "./menus/notifications_info.mustache": 998,
        "./menus/quality_filter_info.mustache": 999,
        "./menus/search_accordion.mustache": 1e3,
        "./menus/search_action_form.mustache": 1001,
        "./menus/search_content_form.mustache": 1002,
        "./menus/search_datetime_form.mustache": 1003,
        "./menus/search_engagement_form.mustache": 1004,
        "./menus/search_location_form.mustache": 1005,
        "./menus/search_user_form.mustache": 1006,
        "./menus/topbar_menu.mustache": 1007,
        "./menus/user_results.mustache": 1008,
        "./modal.mustache": 1009,
        "./modal/modal_context.mustache": 1010,
        "./modal/modal_context_footer.mustache": 1011,
        "./modal/modal_context_header.mustache": 1012,
        "./modal_header.mustache": 1013,
        "./new_custom_timeline_button.mustache": 1014,
        "./number_ticker.mustache": 1015,
        "./open_column_footer.mustache": 1016,
        "./open_column_home.mustache": 1017,
        "./open_column_list_group.mustache": 1018,
        "./open_column_list_multi_group.mustache": 1019,
        "./open_column_list_with_header.mustache": 1020,
        "./open_column_modal.mustache": 1021,
        "./open_column_temp_help.mustache": 1022,
        "./open_split_menu.mustache": 1023,
        "./overlay.mustache": 1024,
        "./participants_tooltip.mustache": 1025,
        "./popover.mustache": 1026,
        "./profile/profile_full.mustache": 1027,
        "./profile_card_bio.mustache": 1028,
        "./profile_card_stats.mustache": 1029,
        "./report_flow.mustache": 1030,
        "./report_message_options.mustache": 1031,
        "./report_tweet_options.mustache": 1032,
        "./report_tweet_options_abusive.mustache": 1033,
        "./reverse_image_search.mustache": 1034,
        "./scheduled_hint.mustache": 1035,
        "./search/search_in_popover.mustache": 1036,
        "./search/search_results.mustache": 1037,
        "./search_input.mustache": 1038,
        "./search_no_tweets_placeholder.mustache": 1039,
        "./search_no_users_placeholder.mustache": 1040,
        "./search_operator_list.mustache": 1041,
        "./search_operator_list_item.mustache": 1042,
        "./search_operator_list_item_group.mustache": 1043,
        "./settings/account_settings.mustache": 1044,
        "./settings/account_settings_detail.mustache": 1045,
        "./settings/account_settings_join_team.mustache": 1046,
        "./settings/account_settings_login_account.mustache": 1047,
        "./settings/account_settings_remove_account.mustache": 1048,
        "./settings/account_settings_row.mustache": 1049,
        "./settings/global_setting_filter.mustache": 1050,
        "./settings/global_setting_filter_add_btn.mustache": 1051,
        "./settings/global_setting_filter_list.mustache": 1052,
        "./settings/global_setting_filter_row.mustache": 1053,
        "./settings/global_setting_general.mustache": 1054,
        "./settings/global_setting_link_shortening.mustache": 1055,
        "./settings/global_settings_modal.mustache": 1056,
        "./settings/invitations_panel.mustache": 1057,
        "./settings/link_shortening_bitly_form.mustache": 1058,
        "./short_modal.mustache": 1059,
        "./spinner.mustache": 1060,
        "./spinner_large.mustache": 1061,
        "./spinner_large_white.mustache": 1062,
        "./splash/whats_new.mustache": 1063,
        "./startflow_wrapper.mustache": 1064,
        "./status/attachment_image.mustache": 1065,
        "./status/attachment_tweet.mustache": 1066,
        "./status/conversation.mustache": 1067,
        "./status/conversation_cursor_top.mustache": 1068,
        "./status/conversation_failed_participants.mustache": 1069,
        "./status/conversation_failed_participants_preview.mustache": 1070,
        "./status/conversation_header.mustache": 1071,
        "./status/conversation_join.mustache": 1072,
        "./status/conversation_join_preview.mustache": 1073,
        "./status/conversation_name_update.mustache": 1074,
        "./status/conversation_name_update_preview.mustache": 1075,
        "./status/conversation_participants_join.mustache": 1076,
        "./status/conversation_participants_join_preview.mustache": 1077,
        "./status/conversation_participants_leave.mustache": 1078,
        "./status/conversation_participants_leave_preview.mustache": 1079,
        "./status/conversation_show_more.mustache": 1080,
        "./status/conversation_timestamp.mustache": 1081,
        "./status/dataminr.mustache": 1082,
        "./status/dataminr_footer.mustache": 1083,
        "./status/dataminr_header.mustache": 1084,
        "./status/dataminr_in_stream.mustache": 1085,
        "./status/dataminr_single_footer.mustache": 1086,
        "./status/follow_activity.mustache": 1087,
        "./status/follow_activity_in_stream.mustache": 1088,
        "./status/gap_in_stream.mustache": 1089,
        "./status/list_activity.mustache": 1090,
        "./status/media_image_container.mustache": 1091,
        "./status/media_large_preview.mustache": 1092,
        "./status/media_preview.mustache": 1093,
        "./status/media_sensitive.mustache": 1094,
        "./status/media_thumb.mustache": 1095,
        "./status/media_unique_preview.mustache": 1096,
        "./status/message.mustache": 1097,
        "./status/message_in_box.mustache": 1098,
        "./status/message_in_stream.mustache": 1099,
        "./status/message_thread.mustache": 1100,
        "./status/message_timestamp.mustache": 1101,
        "./status/message_wrapper.mustache": 1102,
        "./status/quoted_tweet.mustache": 1103,
        "./status/quoted_tweet_missing.mustache": 1104,
        "./status/scheduled_tweet.mustache": 1105,
        "./status/scheduled_tweet_single.mustache": 1106,
        "./status/scheduled_tweet_single_header.mustache": 1107,
        "./status/social_proof_for_tweet.mustache": 1108,
        "./status/trend_item.mustache": 1109,
        "./status/tweet_activity.mustache": 1110,
        "./status/tweet_activity_header.mustache": 1111,
        "./status/tweet_activity_in_box.mustache": 1112,
        "./status/tweet_activity_in_stream.mustache": 1113,
        "./status/tweet_activity_timestamp.mustache": 1114,
        "./status/tweet_detail.mustache": 1115,
        "./status/tweet_detail_actions.mustache": 1116,
        "./status/tweet_detail_inreplyto.mustache": 1117,
        "./status/tweet_detail_media.mustache": 1118,
        "./status/tweet_detail_repliesto.mustache": 1119,
        "./status/tweet_detail_replybar.mustache": 1120,
        "./status/tweet_detail_socialstats.mustache": 1121,
        "./status/tweet_detail_wrapper.mustache": 1122,
        "./status/tweet_in_box.mustache": 1123,
        "./status/tweet_in_stream.mustache": 1124,
        "./status/tweet_media_indications.mustache": 1125,
        "./status/tweet_media_wrapper.mustache": 1126,
        "./status/tweet_single.mustache": 1127,
        "./status/tweet_single_actions.mustache": 1128,
        "./status/tweet_single_footer.mustache": 1129,
        "./status/tweet_single_header.mustache": 1130,
        "./status/tweet_timestamp.mustache": 1131,
        "./status/tweet_translation.mustache": 1132,
        "./stream_item.mustache": 1133,
        "./suggest_refresh.mustache": 1134,
        "./team_invitations.mustache": 1135,
        "./terms_privacy_update.mustache": 1136,
        "./text/already_registered.mustache": 1137,
        "./text/b.mustache": 1138,
        "./text/br.mustache": 1139,
        "./text/close_em.mustache": 1140,
        "./text/close_strong.mustache": 1141,
        "./text/em.mustache": 1142,
        "./text/favorite_action.mustache": 1143,
        "./text/followers_you_follow_link.mustache": 1144,
        "./text/gallery_flag_media.mustache": 1145,
        "./text/gallery_original_link.mustache": 1146,
        "./text/global_filter_value.mustache": 1147,
        "./text/hashflag.mustache": 1148,
        "./text/list_link_real_name.mustache": 1149,
        "./text/list_link_slug.mustache": 1150,
        "./text/login_verification_link.mustache": 1151,
        "./text/microsoft_translator_link.mustache": 1152,
        "./text/open_strong.mustache": 1153,
        "./text/profile_link.mustache": 1154,
        "./text/retweet_by_link.mustache": 1155,
        "./text/screenname_txt.mustache": 1156,
        "./text/search_link.mustache": 1157,
        "./text/social_proof_link.mustache": 1158,
        "./text/strong.mustache": 1159,
        "./text/user_link_fullname.mustache": 1160,
        "./text/user_link_screenname.mustache": 1161,
        "./topbar/app_header.mustache": 1162,
        "./topbar/app_title.mustache": 1163,
        "./topbar/app_title_beta.mustache": 1164,
        "./topbar/message_banner.mustache": 1165,
        "./topbar/navbar_account_summary.mustache": 1166,
        "./try_search_query_button.mustache": 1167,
        "./twitter_profile.mustache": 1168,
        "./twitter_profile_social_proof.mustache": 1169,
        "./typeahead/typeahead_conversations.mustache": 1170,
        "./typeahead/typeahead_dropdown.mustache": 1171,
        "./typeahead/typeahead_lists.mustache": 1172,
        "./typeahead/typeahead_locations.mustache": 1173,
        "./typeahead/typeahead_recent_searches.mustache": 1174,
        "./typeahead/typeahead_saved_searches.mustache": 1175,
        "./typeahead/typeahead_topics.mustache": 1176,
        "./typeahead/typeahead_users.mustache": 1177,
        "./typeahead/typeahead_users_compose.mustache": 1178,
        "./user_actions_btn_inv.mustache": 1179,
        "./user_selector.mustache": 1180,
        "./version.mustache": 1181,
        "./video_preview.mustache": 1182
    };

    function n(e) {
        var t = r(e);
        return i(t)
    }

    function r(e) {
        var t = s[e];
        if (!(t + 1)) {
            var i = new Error("Cannot find module '" + e + "'");
            throw i.code = "MODULE_NOT_FOUND", i
        }
        return t
    }
    n.keys = function() {
        return Object.keys(s)
    }, n.resolve = r, e.exports = n, n.id = 865
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<img src="{{profileImageURL}}" alt="{{_i}}{{screenName}}\'s avatar{{/i}}" width="{{avatarSize}}" height="{{avatarSize}}" class="avatar compose-account-img size{{avatarSize}}" /> <div class="compose-account-selected"> <i class="icon icon-check txt-size--12 color-twitter-white"></i> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="account-summary flex flex-row flex-align--center"> <a href="{{getProfileURL}}" class="js-accordion-toggle-view-prevent txt-size--0 flex" rel="user" target="_blank"> <img class="avatar size flex-shrink--0" src="{{profileImageURL}}" alt="{{screenName}}\'s avatar"> {{#cookieProfileImageURL}} <img class="avatar size16 avatar-border--2 margin-l---16 margin-t--20" src="{{cookieProfileImageURL}}" alt="{{screenName}}\'s avatar"> {{/cookieProfileImageURL}} </a> <div class="account-link margin-l--10 flex-auto"> <div class="margin-b--2 {{#isBadged}}fullname-badged-container{{/isBadged}}"> <b class="fullname txt-ellipsis inline-block link-complex-target txt-size--14 {{#isBadged}}fullname-badged{{/isBadged}} {{#isTranslator}}badge-translator{{/isTranslator}} {{#isVerified}}badge-verified{{/isVerified}}"> {{{emojifiedName}}} </b> </div> <div> <span class="username color-twitter-darker-gray txt-size--13 inline-block txt-ellipsis">@{{screenName}} {{#isProtected}}<i class="icon icon-protected icon-match-context icon-tt"></i>{{/isProtected}}</span> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="account-summary cf"> <a class="obj-left item-img" href="{{getProfileURL}}" data-user-name="{{screenName}}" rel="user" target="_blank" tabindex="-1"> {{^withoutAvatar}} <img class="tweet-avatar avatar pull-right" src="{{profileImageURL}}" alt="{{screenName}}\'s avatar"> {{/withoutAvatar}} </a> {{#withUserMenu}} <div class="obj-right with-dropdown position-rel"> <button class="js-user-actions-menu btn btn-on-dark btn-round" rel="actionsMenu" data-user-id="{{id}}"> <i class="icon icon-user-dd"></i> </button> </div> {{/withUserMenu}} <div class="account-summary-text nbfc {{^withUserBio}}{{/withUserBio}}"> <a class="account-link link-complex block" href="{{getProfileURL}}" data-user-name="{{screenName}}" rel="user" target="_blank"> <span class="{{#isInline}}account-inline {{#isProtected}}is-protected{{/isProtected}}{{/isInline}} txt-ellipsis {{#isBadged}}fullname-badged-container{{/isBadged}}"> <b class="fullname inline-block link-complex-target {{#isBadged}}fullname-badged{{/isBadged}} {{#isTranslator}}badge-translator{{/isTranslator}} {{#isVerified}}badge-verified{{/isVerified}} position-rel txt-ellipsis"> {{{emojifiedName}}} </b> {{#isInline}} <span class="username txt-mute">@{{screenName}}</span> {{#isProtected}}<i class="icon icon-protected txt-mute txt-size--14"></i>{{/isProtected}} {{/isInline}} </span> {{^isInline}} <div class="{{#isProtected}}is-protected{{/isProtected}}"> <a href="{{getProfileURL}}" class="account-link link-complex" target="_blank" data-user-name="{{screenName}}" rel="user"> <span class="username txt-mute">@{{screenName}}</span> {{#isProtected}}<i class="icon icon-protected txt-mute txt-size--14 align-top"></i>{{/isProtected}} </a> </div> {{/isInline}} </a> {{#withUserBio}} <p class="account-bio txt-sub-antialiased color-twitter-darker-gray txt-size-variable--13 padding-t--5">{{{bio}}}</p> {{/withUserBio}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<img class="avatar size16 avatar-inline neg-margin-bxs" src="{{profileImageURL}}" alt="{{screenName}}\'s avatar"> @{{screenName}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<h4 class="js-action-header-user-list">{{_i}}From{{/i}}</h4> <div class="js-account-selector-container"></div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="mdl-inner bg-color-twitter-lightest-gray padding-h--20 mdl-header-divider"></div> <div class="js-inreply cmp-replyto item-box cf padding-a--20"></div> <div class="cf padding-b--20 padding-r--20 padding-t--5"> <div class="pull-right"> {{^isProtected}} <button data-action="quote" class="js-action-button btn margin-r--8">{{_i}}Retweet with comment{{/i}}</button> <button data-action="retweet" class="js-action-button js-retweet-button Button--primary">{{_i}}Retweet{{/i}}</button> {{/isProtected}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<section> <form class="frm"> <fieldset> <ul class="control-group padding-bn"> {{#myCustomTimelines}} <li class="margin-b--10"> <label class="checkbox"> <input type="checkbox" name="{{name}}" data-id="{{id}}" data-account="{{#account}}{{getKey}}{{/account}}"/> <span>{{>text/strong}}</span> </label> </li> {{/myCustomTimelines}} </ul> </fieldset> </form> </section>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<section> <form class="frm"> <fieldset> <ul class="control-group padding-bs"> {{#myLists}} <li class="margin-b--10"> <label class="checkbox"> <input type="checkbox" name="{{name}}" id="{{id}}" data-account="{{#account}}{{getKey}}{{/account}}" class="margin-t--5"/> <span class="txt-size--14 color-twitter-dark-black"> {{>text/strong}} {{#isPrivate}}<i class="icon icon-protected icon-small txt-mute txt-size--14"></i>{{/isPrivate}} </span> <span class="txt-size--14 txt-mute">{{_i}}by{{/i}} @{{#user}}{{screenName}}{{/user}}</span> </label> </li> {{/myLists}} </ul> </fieldset> <a href="#" class="js-create-list">+ {{_i}}Create new List{{/i}}</a> </form> </section>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<button class="btn js-create-list">{{_i}}Create List{{/i}}</button>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-t--15 padding-h--15 bg-color-twitter-white color-twitter-deep-black width--490"> <p class="txt-size--13">{{{explanatoryText}}}</p> <div class="flex margin-t--10 margin-b--15"> <input class="js-text-field margin-r--15 min-height--30 flex-auto" name="copy-text" type="text" {{#readonly}}readonly="readonly" {{/readonly}}placeholder="{{placeholderText}}"> {{#showButton}} <button class="js-copy-button Button--primary no-wrap flex-shrink--0" type="button"> {{buttonText}} </button> {{/showButton}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-follow-from l-table padding-al"> <div class="l-cell follow-from-accounts-button margin-r--10"> {{>follow_button}} </div> {{^hideFromAccountName}} <div class="js-from-username l-cell padding-lm follow-from-accounts-username"> {{#account}} <img class="avatar size32 pull-left" src={{getProfileImageURL}} /> <span class="from-handle padding-l--6">from @{{getUsername}}</span> {{/account}} </div> {{/hideFromAccountName}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-t--15 txt-center"> <img class="avatar size64" src="{{#asset}}/web/assets/global/backgrounds/default_profile.png{{/asset}}" alt="Default avatar"> <img class="avatar size30 avatar-border--2 margin-l---30 margin-t--21" src="{{profileImageURL}}" alt="{{screenName}}\'s avatar"> </div> <p class="padding-t--10"> {{_i}}Linking another account here will add{{/i}} <span class="txt-bold">@{{screenName}}</span> {{_i}}as a contributor to that account, with admin privileges.{{/i}} </p> <p class="padding-t--10"> {{_i}}This means that when you or anyone else logs in to TweetDeck, Twitter for iOS or Twitter for Android as{{/i}} <span class="txt-bold">@{{screenName}}</span> {{_i}}in the future, they will be able to take actions on behalf of the account you link here, as well as view and manage other team members.{{/i}} </p> <p class="padding-t--10"> {{_i}}If you are trying to join a shared account as a team member, ask an admin for the account to invite you as a team member instead of completing this action.{{/i}} <a href="https://support.twitter.com/articles/20171753" target="_blank">{{_i}}Learn more about teams{{/i}}</a> </p> <div class="pull-right padding-v--16 margin-r---14"> <button class="js-add-account-continue Button--primary"> {{_i}}Continue{{/i}} </button> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<form action="#" class="search-input-list padding-a--10"> {{> search_input}} </form>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="width--490"> <img class="width--490" alt="{{_i}}Your uploaded image for description{{/i}}" src="{{src}}"> <div class="flex flex-align--center"> <input type="text" class="js-input-image-description js-input js-submittable-input js-escapable-input height--36 br--6 margin-a--10" maxlength="420" placeholder="{{_i}}Describe this photo for the visually impaired{{/i}}" value="{{initialDescription}}" autofocus data-testid="inputImageDescription"> <span> <button class="js-submit-image-description Button--primary margin-a--10 {{^canSubmit}}is-disabled{{/canSubmit}}" data-testid="submitImageDescription">{{_i}}Apply{{/i}}</button> </span> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-progress-indicator"></div> <div class="js-app-content app-content"> {{>drawer}} <div class="js-app-columns-container app-columns-container scroll-h needs-scroll-bottom-offset {{#styledScrollbar}}scroll-styled-h{{/styledScrollbar}}" id="container"> <div class="js-app-columns app-columns horizontal-flow-container"> </div> </div> <div class="js-send-feedback"></div> </div> <div id="compose-modal" class="js-modal ovl scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}}"></div> <div id="open-modal" class="js-modal open-modal ovl scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}}"></div> <div id="actions-modal" class="js-modal ovl scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}}"></div> <div id="lists-modal" class="js-modal lists-modal ovl scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}}"></div> <div id="splash-modal" class="js-modal ovl scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}}"></div> <div id="settings-modal" class="js-modal settings-modal ovl scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}}"></div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="https://www.twitter.com/tos" target="_blank">{{_i}}Terms of Service{{/i}}</a> &middot; <a href="https://twitter.com/privacy" target="_blank">{{_i}}Privacy Policy{{/i}}</a> &middot; <a href="https://support.twitter.com/articles/20170514" target="_blank">{{_i}}Cookies{{/i}}</a> &middot; <span class="inline-block"> {{version}} </span>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-btn-fav js-show-tip pull-left btn-fav margin-r--5" data-account-key="{{getKey}}"> <button class="btn-loader"> <span> <img src="{{#asset}}/web/assets/global/backgrounds/spinner_small_trans.gif{{/asset}}" alt="{{_i}}Loading…{{/i}}"> </span> </button> <button class="btn-fav-fav-text Button--tertiary"> <i class="icon icon-favorite icon-favorite-color"></i> <span class="label">{{_i}}Like{{/i}}</span> </button> <button class="btn-fav-faved-text Button--primary"> <span class="label">{{_i}}Liked{{/i}}</span> </button> <button class="btn-fav-unfav-text"> <span class="label">{{_i}}Unlike{{/i}}</span> </button> <button class="btn-fav-protected-text"> <i class="icon icon-protected"></i> <span class="label">{{_i}}Protected{{/i}}</span> </button> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<input type="button" name="remove-account" value="Load more" class="js-load-more small btn btn-alt margin-vl obj-center">'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="flex flex-justify-content--space-between flex-align--center margin-b--20"> <h1 class="txt-size--16 txt-bold max-width-p--60">{{title}}</h1> <div class="js-insights-date-picker"></div> </div> <div class="js-chart-terms margin-b--20"></div> <div class="js-insights-grid-chart"></div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-column-holder column-holder"> <div class="column-panel flex flex-column height-p--100"> {{> column/column_header}} {{#isSearch}} <div class="js-search-filter-callout"></div> {{/isSearch}} <div class="js-column-content column-content flex-auto position-rel flex flex-column height-p--100"> <div class="js-column-options-container column-options flex-shrink--0 z-index--2"> <div class="js-column-options {{#isTouchColumnOptions}}with-touch-txt-base{{/isTouchColumnOptions}}"></div> <div class="js-customtimeline-description scroll-none with-column-divider-bottom is-hidden"></div> </div> <div class="js-insights-entry-point"></div> {{^isTemporary}} <div> <div class="js-column-message scroll-none"></div> </div> {{/isTemporary}} <div class="js-live-video"></div> {{> column/chirp_container}} <div class="js-column-drag-drop-overlay column-drag-drop-overlay drag-drop-indicator pin-all"> <div class="l-table column-drag-drop-overlay-inner drag-drop-indicator"> <div class="l-cell js-drag-drop-overlay-text"> {{_i}}Add here{{/i}} </div> <div class="l-cell js-drag-drop-overlay-spinner is-hidden"> {{> column/add_to_customtimeline_drop_indicator_spinner}} </div> </div> </div> <div class="js-more-tweets-btn-container more-tweets-btn-container pin-top-full-width more-tweets-btn-container--hidden"> <div class="js-more-tweets-glow more-tweets-glow obj-center is-hidden"></div> <button class="js-more-tweets-btn Button--primary more-tweets-btn txt-size--12"> <div class="more-tweets-btn-inner-default"> <i class="icon icon-pointer-u icon-match-context icon-tt"></i> <span class="js-more-tweets-btn-text"></span> </div> <div class="more-tweets-btn-inner-mouse-release"> {{_i}}Release to refresh{{/i}} </div> <div class="more-tweets-btn-inner-loading">{{_i}}Loading...{{/i}}</div> </button> </div> </div> <div class="js-add-to-customtimeline add-by-url padding-hm is-hidden flex-shrink--0"></div> </div> <div class="js-column-detail column-detail column-panel flex flex-column height-p--100"></div> <div class="js-column-social-proof column-detail-level-2 column-panel flex flex-column height-p--100"></div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="InputGroup margin-t--8"> <input class="js-add-to-customtimeline-input js-submittable-input" type="text" placeholder="{{_i}}Enter Tweet URL{{/i}}" value="" data-account-key="{{accountKey}}" data-customtimeline-id="{{customTimelineId}}" > <button class="js-add-to-customtimeline-button js-spinner-button btn-round"> <i class="icon icon-arrow-r"></i> <i class="js-spinner-button-active icon spinner-small-trans icon-center-16 is-hidden"></i> </button> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div id="{{dropIndicatorIdName}}" class="{{dropIndicatorClassName}} drag-drop-indicator color-twitter-white padding-v--16 txt-center is-animating"> {{dropIndicatorText}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="spinner-small spinner-small-blue-bg spinner-centered-auto"></div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-column-scroller js-dropdown-container column-scroller position-rel scroll-v flex-auto height-p--100 {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}} {{#isTemporary}}column-background-fill scroll-alt{{/isTemporary}}"> <div class="js-chirp-container chirp-container" data-column="{{columnkey}}"> {{>column_loading_placeholder}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{> column/column_header_detail}} <div class="js-conversation-adder add-participant padding-a--10"></div> <div class="column-content flex-auto position-rel"> <div class="column-scroller pin-all scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}}"> {{#users}} {{<stream_item}} {{$content}} {{>account_summary}} {{/content}} {{/stream_item}} {{/users}} {{^users}} {{>column_loading_placeholder}} {{/users}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<p class="is-actionable txt-uppercase txt-center padding-as" data-action="action-filter"> {{_i}}Filter error{{/i}} </p>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<header class="js-column-header js-action-header flex-shrink--0 {{^isTemporary}}column-header{{/isTemporary}} {{#isTemporary}}column-header-temp{{/isTemporary}}" data-action="resetToTopColumn"> {{^isTemporary}} <i class="js-column-drag-handle is-movable column-drag-handle pull-left sprite sprite-drag-vertical"></i> {{/isTemporary}} <i class="pull-left margin-l--10 margin-r--2 column-type-icon icon {{columniconclass}}"> {{#withMarkAllRead}} <span class="js-unread-count msg-unread-count numbered-badge bg-color-twitter-blue numbered-badge-onheader anim anim-slower {{#unreadCount}}is-visible{{/unreadCount}}">{{unreadCount}}</span> {{/withMarkAllRead}} </i> {{#isTemporary}} <button class="js-action-header-button pull-right btn Button--tertiary margin-t--10 margin-r--10 is-hidden" data-action="editList"></button> {{/isTemporary}} {{^isTemporary}} <span class="column-number"></span> {{/isTemporary}} <div class="column-title flex flex-justify-content--space-between{{#withEditableTitle}} column-title-editable {{^isSearch}}with-image-attribution{{/isSearch}}{{/withEditableTitle}}"> <div class="column-header-title flex flex-align--center {{^withDMComposeButton}}flex-wrap--wrap{{/withDMComposeButton}}{{#withDMComposeButton}}flex-wrap--no-wrap max-width-p--57{{/withDMComposeButton}} flex-grow--2"> {{{columntitle}}} </div> <div class="column-header-links"> {{#withDMComposeButton}} <a class="js-action-header-button column-header-link open-compose-dm-link" href="#" data-action="compose-dm"> <i class="js-show-tip icon icon-compose-dm" data-placement="bottom" title="{{_i}}Compose new message{{/i}}"></i> </a> {{/withDMComposeButton}} {{#withMarkAllRead}} <a class="js-action-header-button column-header-link mark-all-read-link" href="#" data-action="mark-all-read"> <i class="js-show-tip icon icon-mark-read" data-placement="bottom" title="{{_i}}Mark all as read{{/i}}"></i> </a> {{/withMarkAllRead}} {{^isTemporary}} <a data-testid="optionsToggle" class="js-action-header-button column-header-link column-settings-link" href="#" data-action="options"> <i class="icon icon-sliders"></i> </a> {{/isTemporary}} </div> </div> </header>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<header class="{{headerClass}} visible-overflow--important column-header flex flex-justify-content--space-between padding-h--10" data-action="{{headerAction}}"> <a class="{{headerLinkClass}} link-complex flex-auto" href="#"> {{^getConversationTitleInformation}} <div class="column-title-back txt-ellipsis"> <i class="icon icon-arrow-l"></i> <span class="js-tooltip-target link-complex-target">{{_i}}Back to {{{columntitle}}}{{/i}}</span> </div> {{/getConversationTitleInformation}} {{#getConversationTitleInformation}} <div class="flex txt-size--14 txt-bold column-title-container"> <i class="icon icon-arrow-l margin-l---5"></i> {{! if there is a conversation name, show it as it is }} <div class="margin-l--2 height-4 txt-ellipsis column-title-items max-width-p--90"> {{#name}} <span class="js-tooltip-target">{{{name}}}</span> {{/name}} {{^name}} {{! currently showing name and screenName for one to one }} {{#isOneToOne}} {{#participants.0}} <span class="js-tooltip-target"> <b>{{{emojifiedName}}}</b> {{^isDeleted}} <span class="username txt-mute txt-size-variable--12 margin-l--5">@{{screenName}}</span> {{/isDeleted}} </span> {{/participants.0}} {{/isOneToOne}} {{! other two participants, need to wrap around names }} {{#isThreeway}} <span class="js-tooltip-target title-content"> {{#participants.0}} <span class="no-wrap">{{{emojifiedName}}}</span>, {{/participants.0}} {{#participants.1}} <span class="no-wrap">{{{emojifiedName}}}</span> {{/participants.1}} </span> {{/isThreeway}} {{! first participant name + the amount of participants }} {{#isOneToMany}} <span class="js-tooltip-target title-content"> {{#participants.0}}{{{emojifiedName}}}{{/participants.0}} +{{numberOfOtherParticipants}} </span> {{/isOneToMany}} {{/name}} </div> </div> {{/getConversationTitleInformation}} {{#withConversationMenu}} {{^isTemporary}} <a class="js-action-header-button column-header-link column-settings-link link-no-focus" href="#" data-action="message-menu" data-conversation-id="{{conversationId}}" data-account-key="{{accountKey}}"> <i class="js-menu-target icon icon-more"></i> </a> {{/isTemporary}} {{> column/dm_rename_conversation }} {{/withConversationMenu}} </a> </header>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<form data-testid="columnOptions" class="with-column-divider-bottom"> <fieldset class="js-search-filter"> <div class="js-accordion accordion"></div> </fieldset> {{#isOwnList}} <button class="full-width Button--link btn-bg-positive" type="button" data-action="edit-list"> <i class="icon icon-edit txt-size--14"></i> <span class="label margin-ln">{{_i}}Edit List{{/i}}</span> </button> {{/isOwnList}} {{#isOwnCustomTimeline}} <button class="full-width Button--link btn-bg-positive" type="button" data-action="edit-customtimeline"> <i class="icon icon-edit txt-size--14"></i> <span class="label margin-ln">{{_i}}Edit Collection{{/i}}</span> </button> {{/isOwnCustomTimeline}} {{#isDataminr}} <a class="full-width Button--link btn-bg-positive url-ext" type="button" href="https://news.dataminr.com/app/core/news/settings.html" rel="url noopener noreferrer" target="_blank" data-scribe-element="dataminr_settings"> <i class="icon icon-dataminr icon-small-valigned"></i> <span class="label margin-ln">{{_i}}Dataminr settings{{/i}}</span> </a> {{/isDataminr}} <fieldset class="button-tray padding-a--6"> <div class="button-group"> <button type="button" class="Button--link btn-options-tray pull-left padding-hn" data-action="left"> <i class="icon icon-arrow-l icon-small-valigned"></i> <span class="is-vishidden">{{_i}}Left{{/i}}</span> </button> <button type="button" class="Button--link btn-options-tray pull-left padding-hn" data-action="right"> <i class="icon icon-arrow-r icon-small-valigned"></i> <span class="is-vishidden">{{_i}}Right{{/i}}</span> </button> </div> <div class="button-group position-rel"> <button type="button" class="js-share-column Button--link btn-options-tray padding-hn{{^isShareableOrEmbeddable}} is-invisible{{/isShareableOrEmbeddable}}"> <i class="icon icon-share"></i> <span class="label">{{_i}}Share{{/i}}</span> </button> </div> <div class="button-group"> <button type="button" class="Button--link btn-options-tray padding-hn {{^isClearable}}is-invisible{{/isClearable}}" data-action="clear"> <i class="icon icon-clear-timeline"></i> <span class="label">{{_i}}Clear{{/i}}</span> </button> </div> <div class="button-group"> <button type="button" class="Button--link btn-options-tray padding-hn padding-rs" data-action="remove"> <i class="icon icon-close"></i> <span class="label">Remove</span> </button> </div> </fieldset> \x3c!-- Revisit IF needed for touch --\x3e \x3c!-- {{#isTouchColumnOptions}} <fieldset class="margin-hs padding-tm padding-bm column-options-divider"> <div class="button-group"> <a class="column-action-link is-actionable pull-left" data-action="left"> <i class="icon icon-chevron-left"></i> <span class="is-vishidden">{{_i}}Left{{/i}}</span> </a> <a class="column-action-link is-actionable pull-left" data-action="right"> <i class="icon icon-chevron-left"></i> <span class="is-vishidden">{{_i}}Right{{/i}}</span> </a> </div> <div class="pull-right"> {{#isEmbeddable}} <a class="column-action-link is-actionable" data-action="embed"><i class="icon icon-share"></i></a> {{/isEmbeddable}} {{#isClearable}} <a class="column-action-link is-actionable" data-action="clear">{{_i}}Clear column{{/i}}</a> {{/isClearable}} {{#isOwnCustomTimeline}} <a class="column-action-link is-actionable" data-action="delete-customtimeline">{{_i}}Delete Collection{{/i}}</a> {{/isOwnCustomTimeline}} <button type="button" class="Button--danger" data-action="remove"><i class="icon icon-trash"></i></button> </div> </fieldset> {{/isTouchColumnOptions}} --\x3e </form>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = ""
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#description}} {{#editable}} <button class="js-edit pull-right padding-a--0 width--30 Button--link margin-txs"> <i class="icon icon-edit txt-mute txt-size--14 padding-txs"></i> </button> {{/editable}} <div class="nbfc"> <p class="padding-v--10 padding-l--10 txt-mute txt-size--13">{{{description}}}</p> </div> {{/description}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-edit-conversation-name edit-conversation-name cf" data-conversation-id="{{conversationId}}" data-account-key="{{accountKey}}" > <div class="obj-right"> <button class="btn-round bg-color-transparent" data-action="confirm-edit-conversation"> <i class="icon icon-check color-twitter-blue"></i> </button> <button class="btn-round bg-color-transparent" data-action="close-edit-conversation"> <i class="icon icon-close color-twitter-blue"></i> </button> </div> <div class="nbfc"> <input class="js-conversation-name js-submittable-input js-escapable-input" maxlength="20"> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div data-testid="filterCallout"> <div class="search-filter-callout-triangle pin-right margin-r--13 margin-t---14"></div> <div class="bg-color-twitter-blue flex flex-align--center padding-a--5 color-twitter-white full-width min-height--30 padding-l--10 txt-size--12 txt-bold is-actionable"> {{content}} </div> <div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-accordion-item facet-type facet-type-preferences"> {{>menus/accordion_header}} <div class="js-accordion-panel accordion-panel {{#columnWithTweets}}height--225{{/columnWithTweets}}{{^columnWithTweets}}height--60{{/columnWithTweets}} padding-b--5"> <div class="padding-hl control-s"> <div class="margin-v--6 txt-mute txt-size--13"> <span class="txt-size--11 txt-uppercase txt-bold">{{_i}}Notifications{{/i}}</span> </div> <div class="control-group"> {{#notificationOptions}} <div class="controls margin-l--0"> <label class="txt-mute"> <input type="checkbox" {{#on}}checked{{/on}} data-action="{{action}}"> {{option}} </label> </div> {{/notificationOptions}} </div> </div> {{#columnWithTweets}} <div class="padding-hl control-s"> <div class="margin-v--6 txt-mute txt-size--13"> <span class="txt-size--11 txt-uppercase txt-bold">{{_i}}Media preview size{{/i}}</span> </div> <div> {{#mediaPreviewSizeOptions}} <div class="js-toggle-item toggle-item pull-left padding-r--8" data-value="{{dataValue}}"> <span class="toggle-item-text txt-size--11 txt-mute">{{text}}</span> <img class="media-size-image js-unselected-media block margin-t--5" src="{{unselectedSrc}}" /> <img class="media-size-image js-selected-media block margin-t--5 is-hidden" src="{{selectedSrc}}" /> </div> {{/mediaPreviewSizeOptions}} </div> </div> {{/columnWithTweets}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<option value="{{value}}" {{#isSelected}}selected{{/isSelected}}>{{title}}</option>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-a--8"> <div class="position-rel"> <label for="select-trend-for" class="vertical-center pull-left txt-mute">Trends for</label> <select name="select-trend-for" class="js-trend-select trend-select"> </select> </div> <div class="js-city-select-panel position-rel margin-t--5 "> <label for="select-trend-for" class="vertical-center pull-left txt-mute">City</label> <select name="select-trend-for" class="js-cities-select trend-select"> </select> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div data-testid="columnLoadingPlaceholder" class="js-column-loading-placeholder list-placeholder column-loading-placeholder"> <p><span class="spinner-small"></span> {{^isUpdating}}Loading&#8230;{{/isUpdating}}{{#isUpdating}}Updating&#8230;{{/isUpdating}}</p> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-column-nav-menu-flyover column-nav-flyout"> <div class="column-nav-item padding-lm padding-rl txt-ellipsis">{{{content}}}</div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<span class="column-heading">{{{emojifiedTitle}}}</span> {{#needsUserAttribution}} <span class="attribution txt-mute txt-sub-antialiased txt-ellipsis vertical-align--baseline">{{screenName}}</span> {{/needsUserAttribution}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<input type="text" class="js-submittable-input js-column-title-edit-box column-title-edit-box Button--large txt-size--14 {{editableFieldClass}}" maxlength="{{maxLength}}" value="{{title}}">'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="width--490 max-height--400 padding-a--10 br--6 bg-color-twitter-lightest-gray flex flex-column"> <input type="text" class="js-input js-submittable-input js-escapable-input height--36 br--6 flex-shrink--0" placeholder="{{_i}}Type a command…{{/i}}"> <div class="js-command-list full-width scroll-v margin-t--10 flex-auto"></div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<ul> {{#commands}} <li class="js-command {{classes}} padding-a--8 br--6 is-actionable txt-size--13 txt-line-height--13" data-index="{{index}}"> <div class="flex flex-row"> <div class="flex-auto padding-r--8">{{{html}}}</div> {{#shortcut}} <div class="flex-shrink--0 txt-capitalize"> <kbd class="text-like-keyboard-key color-twitter-darker-gray">{{modifier}} {{key}}</kbd> </div> {{/shortcut}} </div> </li> {{/commands}} {{^commands.length}} <li class="padding-a--8">{{_i}}No matches found{{/i}}</li> {{/commands.length}} </ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="margin-b--11 compose-accounts cf {{gridModeClass}}"> {{#accounts}} <a class="js-account-item {{^isListGridMode}}js-show-tip{{/isListGridMode}} compose-account is-actionable {{#isSelected}}is-selected{{/isSelected}} {{#isListGridMode}}cf{{/isListGridMode}} link-clean" tabindex="0" title="@{{screenName}}" data-account-key="{{accountKey}}"> {{#isListGridMode}} <div class="position-rel obj-left"> <img src="{{profileImageURL}}" alt="" width="{{avatarSize}}" height="{{avatarSize}}" class="avatar compose-account-img size{{avatarSize}}" /> <div class="compose-account-selected"><i class="icon icon-check txt-size--12"></i></div> </div> <div class="nbfc compose-account-names link-clean"> <b class="txt-size--14 txt-ellipsis inline-block">{{{emojifiedName}}}</b> <p class="txt-size--13 txt-ellipsis">@{{screenName}}</p> </div> {{/isListGridMode}} {{^isListGridMode}} {{> account_selector_avatar}} {{/isListGridMode}} </a> {{/accounts}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a class="pull-left margin-r--6 is-actionable account-selector-grid-mode {{#grid}}is-selected{{/grid}}" data-grid-mode="grid"><i class="color-twitter-white icon icon-compose-grid"></i><span class="is-vishidden">grid</span></a> <a class="pull-left margin-r--6 is-actionable account-selector-grid-mode {{#minigrid}}is-selected{{/minigrid}}" data-grid-mode="minigrid"><i class="color-twitter-white icon icon-compose-minigrid"></i><span class="is-vishidden">grid</span></a> <a class="pull-left is-actionable account-selector-grid-mode {{#list}}is-selected{{/list}}" data-grid-mode="list"><i class="color-twitter-white icon icon-compose-list"></i><span class="is-vishidden">grid</span></a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#accounts}} <li> <a class="js-account-item js-show-tip compose-account is-actionable link-clean margin-b--0" tabindex="0" title="@{{screenName}}" data-account-key="{{accountKey}}" data-id="{{accountKey}}"> {{> account_selector_avatar}}</a> </li> {{/accounts}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#results}} <li class="typeahead-item padding-am cf is-actionable"> <p class="js-hashtag txt-ellipsis">{{{value}}}{{>text/hashflag}}</p> </li> {{/results}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#results}} <li class="typeahead-item padding-am cf is-actionable" data-id="{{id}}"> <img src="{{pic}}" class="avatar obj-left size24"> <div class="nbfc txt-ellipsis padding-ts"> <strong class="fullname">{{{emojifiedName}}}</strong> {{#isVerified}}<i class="js-show-tip sprite sprite-verified-mini" title="{{_i}}Verified account{{/i}}"></i>{{/isVerified}} <span class="username"><span>@</span><span class="js-screenname">{{{screenName}}}</span></span> </div> </li> {{/results}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="txt-right height--16 margin-t--4 {{#inline}}margin-r--7 margin-b--11{{/inline}} {{^inline}}margin-r---3 margin-b--1{{/inline}}"> <span class="js-character-count txt-size--12 color-twitter-dark-gray bg-color-transparent no-border txt-line-height--20 margin-r--6"></span> <span class="js-progress-svg"> <svg class="pull-right height--20 width--20 rotate---90"> <circle class="stroke-twitter-light-gray" cx="50%" cy="50%" r="8" fill="none" stroke-width="2"></circle> <circle class="js-progress-circle" cx="50%" cy="50%" r="8" fill="none" stroke-width="2"></circle> </svg> </span> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<i class="icon icon-close color-twitter-white bg-color-twitter-deep-black txt-size--16 padding-a--3 br-100 opacity--70 opacity-hover--100 lh--14"></i>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-inline-reply inline-reply item-box-full-bleed is-inline-inactive is-inline-active position-rel"> <div class="padding-t--10 padding-lxl padding-rxl padding-b--10"> <div class="position-rel compose-text-container margin-v--6 br--4"> <div class="js-reply-info-container txt-size-variable--12 is-hidden padding-h--10 padding-t--10" /> <textarea class="js-compose-text compose-text txt-size-variable--14 scroll-v scroll-styled-v scroll-styled-h scroll-alt" placeholder="{{#addSubsequentTweet}}{{_i}}Add another Tweet{{/i}}{{/addSubsequentTweet}}{{^addSubsequentTweet}}{{_i}}Tweet your reply{{/i}}{{/addSubsequentTweet}}" tabindex="100"></textarea> {{> compose/character_count_with_circle}} </div> \x3c!-- safeguard checkbox --\x3e <div class="js-account-safeguard-checkbox cf"> <label for="inline-account-safeguard-checkbox" class="pull-right txt-size-variable--12">Ready to Tweet? <input id="inline-account-safeguard-checkbox" class="on-blue" type="checkbox" tabindex="100" /></label> </div> <div class="cf margin-t--4 full-width"> <div class="pull-right"> <a class="js-account-item js-show-tip compose-account is-actionable is-selected margin-an margin-rl" tabindex="101" data-account-key="{{account.accountKey}}" title="@{{account.screenName}}"> <img src="{{account.profileImageURL}}" alt="" width="30" height="30" class="avatar compose-account-img size30" /> </a> <div class="js-send-button-container spinner-button-container"> <button class="js-send-button js-spinner-button js-show-tip Button--primary" tabindex="100"> {{_i}}Tweet{{/i}} </button> <i class="js-compose-sending-success icon-center-16 compose-send-button-success icon icon-check is-hidden"></i> <i class="js-spinner-button-active icon-center-16 spinner-button-icon-spinner is-hidden"></i> </div> </div> <div class="pull-left neg-margin-lm"> <button class="js-inline-compose-close padding-a--0 width--30 Button--link" tabindex="103"> <i class="icon icon-close icon-medium color-twitter-white"></i> </button> <button class="js-inline-compose-pop js-show-tip padding-a--0 width--30 Button--link" tabindex="102" title="{{_i}}Popout{{/i}}"> <i class="icon icon-popout icon-medium color-twitter-white"></i> </button> </div> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="video-controls br--4 full-width padding-a--5 pin-bottom border-box"> <progress class="js-video-progress opacity--80 opacity-hover--100 ProgressBar ProgressBar--white width-p--95" role="progressbar" value="0" max="1" aria-valuenow="0" aria-valuemin="0" aria-valuemax="1"></progress> <div class="margin-t--8 margin-b--6 flex flex-align--center"> <i class="js-play-pause opacity--80 opacity-hover--100 icon icon-pause is-actionable"></i> <div class="flex flex-justify-content--flex-end flex-grow--1 flex-align--center"> <span class="js-video-time-duration video-duration opacity--80 txt-size--12 padding-r--5 is-default"></span> <i class="js-mute-unmute opacity--80 opacity-hover--100 icon icon-sound is-actionable"></i> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-docked-compose compose txt-size--14"> <div class="js-compose-scroller compose-content antiscroll-wrap pin-all"> <div class="antiscroll-inner scroll-v scroll-styled-v padding-h--15"> <header class="js-compose-header compose-header"> <div class="position-rel compose-title inline-block"> <h1 class="js-compose-title compose-title-text txt-ellipsis inline-block">{{_i}}New Tweet{{/i}}</h1> </div> <i class="js-drawer-close is-actionable icon icon-close margin-v--20 pull-right"></i> </header> <div class="js-inline-confirmation margin-bxl"></div> <div class="margin-v--14 cf"> <div class="pull-left compose-text-title"> {{_i}}From{{/i}} </div> <div class="js-account-selector-grid-toggle pull-right account-selector-grid-toggle"> </div> </div> \x3c!-- Accounts --\x3e <div class="js-account-list"> {{>compose/account_selector}} </div> \x3c!-- end Accounts --\x3e \x3c!-- Direct Message --\x3e <div class="js-compose-message-recipient-container compose-message-recipient-container margin-bxl position-rel cf"> <p class="padding-b--9 compose-text-title">{{_i}}To{{/i}}</p> <div class="js-compose-message-recipient-input-container compose-message-recipient-input-container scroll-v position-rel bg-color-twitter-white br--4"> <div class="js-compose-message-recipient-list flex flex-wrap--wrap compose-message-recipient-list position-rel is-hidden cf border-box padding-r--4 padding-b--4 br--4 padding-l--4"> </div> \x3c!-- message recipient input --\x3e <input type="text" class="js-compose-message-account js-non-escapable-input compose-message-account"> <a href="#" class="js-clear-input txt-size--14 input-clear-control" tabindex="-1"> <i class="icon icon-close icon-small txt-size--18"></i> </a> </div> <div class="js-typeahead-dropdown border-box typeahead-dropdown dropdown-menu br--6 bs-1 bg-color-twitter-white color-twitter-dark-black is-hidden scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}} padding-v--0"> <ul class="js-typeahead-conversation-list is-hidden"></ul> <ul class="js-typeahead-user-list is-hidden"></ul> </div> </div> \x3c!-- end Direct Message --\x3e <div class="js-compose-message-header margin-b--9 compose-text-title"></div> \x3c!-- reply to tweet --\x3e <div class="js-in-reply-to compose-reply-tweet padding-al margin-b---4 br-top--4 is-hidden"></div> \x3c!-- end reply to tweet --\x3e \x3c!-- Compose box --\x3e <div class="position-rel compose-text-container padding-a--10 br--4"> \x3c!-- Simplified replies container --\x3e <div class="js-reply-info-container is-hidden txt-size--12 padding-b--6"></div> <textarea class="js-compose-text compose-text txt-size--14 scroll-v scroll-styled-v scroll-styled-h scroll-alt padding-a--0" placeholder="{{_i}}What\'s happening?{{/i}}"></textarea> {{> compose/character_count_with_circle}} </div> \x3c!-- Media bar --\x3e <div class="js-media-added is-hidden"></div> \x3c!-- Quote Tweet --\x3e <div class="js-quote-tweet-holder padding-a--10 bg-color-twitter-white margin-t---4 br-bottom--4"></div> \x3c!-- End compose box --\x3e \x3c!-- Hint bar --\x3e <div class="js-compose-hint margin-vl"> </div> \x3c!-- safeguard checkbox --\x3e <div class="js-account-safeguard-checkbox cf margin-v--7"> <label for="account-safeguard-checkbox" class="pull-right txt-size-variable--12"><span class="js-account-safeguard-text">Ready to Tweet?</span> <input id="account-safeguard-checkbox" class="on-blue" type="checkbox" /></label> </div> \x3c!-- Send tweet button  & character count --\x3e <div class="cf margin-t--12 margin-b--30"> <div class="pull-right"> <div class="js-send-button-container spinner-button-container"> <button class="js-send-button js-spinner-button js-show-tip Button--primary btn-extra-height padding-v--6 padding-h--12 is-disabled"> {{_i}}Tweet{{/i}}> </button> <i class="js-compose-sending-success icon-center-16 compose-send-button-success icon icon-check is-hidden"></i> <span class="js-media-upload-progress media-upload-progress is-hidden"></span> <i class="js-spinner-button-active icon-center-16 spinner-button-icon-spinner is-hidden"></i> </div> </div> </div> \x3c!-- Option buttons --\x3e <button class="js-add-image-button js-show-tip needsclick btn btn-on-blue full-width txt-left margin-b--12 padding-v--6 padding-h--12 is-disabled"> <i class="Icon icon-camera txt-size--18"></i> <span class="js-add-image-button-label label padding-ls">{{_i}}Add image{{/i}}</span> </button> <div class="js-scheduler"> <button class="js-schedule-button js-show-tip btn btn-on-blue full-width txt-left margin-b--12 padding-v--6 padding-h--12 is-disabled"> <i class="Icon icon-schedule txt-size--18"></i> <span class="js-schedule-button-label label padding-ls">{{_i}}Schedule Tweet{{/i}}</span> </button> <span class="js-schedule-datepicker-holder"/> </div> <div class="js-tweet-type-button"> <button class="js-tweet-button btn btn-on-blue full-width txt-left margin-b--12 padding-v--6 padding-h--12 is-hidden"> <i class="Icon icon-twitter-bird txt-size--18"></i> <span class="label padding-ls">{{_i}}New Tweet{{/i}}</span> </button> <button class="js-dm-button js-show-tip btn btn-on-blue full-width txt-left padding-v--6 padding-h--12 margin-b--12"> <i class="Icon icon-message txt-size--18"></i> <span class="label padding-ls">{{_i}}Direct message{{/i}}</span> </button> </div> \x3c!-- end option buttons --\x3e </div> </div> <footer class="pin-bottom-full-width margin-a--15"> <label class="checkbox checkbox-reversed compose-remember-state pull-right"> {{_i}}Stay open{{/i}} <input class="js-compose-stay-open on-blue" type="checkbox"/> </label> </footer> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-add-image-description color-twitter-white bg-color-twitter-deep-black {{#isMediaGridContent}}padding-a--4 pin-left pin-bottom txt-size--11{{/isMediaGridContent}}{{^isMediaGridContent}}txt-size--12 padding-a--10 pin-left--15 pin-bottom--17{{/isMediaGridContent}} br--14 opacity--70 opacity-hover--100 is-actionable margin-t---20 z-index--1 txt-ellipsis max-width-p--70"> {{#description}}{{description}}{{/description}}{{^description}}{{_i}}Add description{{/i}}{{/description}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#user}} <header class="tweet-header padding-bm position-rel"> <a href="#" class="js-in-reply-to-remove pull-right compose-reply-tweet-remove margin-axs"><i class="icon icon-close"></i></a> <a class="account-link link-complex block txt-ellipsis margin-r--10" href="https://twitter.com/{{screenName}}" rel="user" target="_blank"> <img class="compose-reply-avatar avatar size24" src="{{profileImageURL}}" width="24" height="24"> <b class="fullname link-complex-target">{{name}}</b> {{#isVerified}}<i class="js-show-tip sprite sprite-verified-mini" title="{{_i}}Verified account{{/i}}"></i>{{/isVerified}} <span class="username txt-mute {{#isVerified}}block{{/isVerified}}">@{{screenName}}</span> </a> </header> {{/user}} <div class="tweet-body"> <p class="js-tweet-text tweet-text with-linebreaks">{{{htmlText}}}</p> </div> <div class="replyto-caret"></div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#isMediaGridContent}} <div class="compose-media-grid-holder bg-color-twitter-white padding-am margin-t---4"> <div class="media-grid-container"> <div class="media-grid-{{mediaLength}}"> {{#mediaInfo}} <div class="media-image-container block position-rel"> <div class="pin-all media-image br--4" style="background-image: url({{src}});" > <a class="js-media-bar-remove compose-media-grid-remove is-actionable" data-file-index="{{fileIndex}}"> {{>compose/close_button}} </a> {{>compose/image_description_field}} </div> </div> {{/mediaInfo}} </div> </div> </div> {{/isMediaGridContent}} {{^isMediaGridContent}} <div class="compose-media-bar-holder padding-al br-bottom br-bottom--4 margin-t---4"> <div class="compose-media-bar br--4"> <a class="js-media-bar-remove compose-media-bar-remove is-actionable z-index--1"> {{>compose/close_button}} </a> {{#isVideo}} {{#mediaInfo}} <div class="js-video"></div> {{/mediaInfo}} {{/isVideo}} {{^isVideo}} {{#mediaInfo}} <img class="js-media-bar-thumb compose-media-bar-thumb full-width br--14" alt="" src="{{src}}" data-file-index="{{fileIndex}}"> {{^isGif}} {{>compose/image_description_field}} {{/isGif}} {{/mediaInfo}} {{/isVideo}} </div> </div> {{/isMediaGridContent}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="compose-media-info-bar-holder padding-al"> <div class="compose-media-info-bar cf padding-as"> <div class="obj-left"> <i class="icon icon-camera align-middle"></i> <span class="align-middle">{{_i}}Image added{{/i}}</span> </div> <div class="obj-right"> <a href="#" class="js-media-bar-remove align-middle">{{_i}}Remove{{/i}}</a> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} <div class="js-compose-message-recipient compose-message-recipient margin-t--4 margin-l--4 color-twitter-darker-gray flex flex-row flex-align--center max-full-width br--14" data-conversation-id="{{conversationId}}"> {{^withMultipleAvatars}} {{#avatars.0}} <img class="flex-shrink--0 margin-a--1 br-100" src="{{profileImageURL}}" width="24" height="24" alt="{{screenName}}\'s avatar"> {{/avatars.0}} {{/withMultipleAvatars}} {{#withMultipleAvatars}} <div class="flex-shrink--0 margin-a--1 media-grid-container multiple-avatar-grid-mini "> <div class="{{avatarsClass}}"> {{#avatars}} <div class="media-image-container media-image-container-mini"> <div class="media-image block position-rel" style="background-image: url({{profileImageURL}});" ></div> </div> {{/avatars}} </div> </div> {{/withMultipleAvatars}} <span class="flex-shrink--1 txt-ellipsis margin-l--4"> {{#getConversationTitleInformation}} {{#name}} {{{name}}} {{/name}} {{^name}} {{#isOneToOne}} {{#participants.0}} {{name}} </a> {{/participants.0}} {{/isOneToOne}} {{#isThreeway}} {{#participants.0}} {{name}}, {{/participants.0}} {{#participants.1}} {{name}} {{/participants.1}} {{/isThreeway}} {{#isOneToMany}} {{#participants.0}} {{name}} + {{numberOfOtherParticipants}} {{/participants.0}} {{/isOneToMany}} {{/name}} {{/getConversationTitleInformation}} </span> <a class="js-remove-conversation is-actionable txt-mute flex-shrink--0 padding-l--4 padding-r--5 padding-t--2"><i class="icon icon-close txt-size--12"></i></a> </div> {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#users}} <div class="js-compose-message-recipient compose-message-recipient margin-t--4 color-twitter-darker-gray flex flex-row flex-align--center max-full-width br--14 border-box" data-user-id="{{id}}" data-screen-name="{{screenName}}"> <img class="flex-shrink--0 padding-a--1 br-100" src="{{profileImageURL}}" width="24" height="24" /> <span class="flex-shrink--1 txt-ellipsis margin-l--4">{{name}}</span> <a class="js-remove-recipient is-actionable txt-mute flex-shrink--0 padding-l--4 padding-r--5 padding-t--2" data-user-id="{{id}}"><i class="icon icon-close txt-size--12"></i></a> </div> {{/users}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{_i}} <div class="other-replies txt-ellipsis"> Replying {{#recipients}} to <a href="#" class="js-other-replies-link other-replies-link" data-recipient-ids="{{userIds}}"> {{#users}} @{{screenName}} {{/users}} {{#remainder}} and {{remainder}} others {{/remainder}} </a> {{/recipients}} </div> {{/i}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="bg-color-twitter-white color-twitter-dark-black"> <ul class="lst"> <li class="padding-axl"> <p class="txt-size--14 color-twitter-dark-gray"> {{#withComposeContext}} {{_i}}Your Tweet will go to the people in this conversation.{{/i}} {{/withComposeContext}} {{^withComposeContext}} {{_i}}This conversation includes these people.{{/i}} {{/withComposeContext}} </p> </li> {{#replies}} <li class="padding-axl flex flex-row flex-align--center"> <div class="flex-auto margin-rxl">{{> account_summary}}</div> {{#withComposeContext}} <input type="checkbox" {{#isChecked}}checked{{/isChecked}} {{#isDisabled}}disabled{{/isDisabled}} class="js-reply-checkbox flex-shrink--0 txt-size--16" data-id="{{id}}"> {{/withComposeContext}} </li> {{/replies}} </ul> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="popover popover-position-t margin-ll padding-a--3" style="display:block"> <div class="caret"> <span class="caret-outer"></span> <span class="caret-inner"></span> </div> <div class="cal"> <header> <input id="scheduled-hour" type="text" pattern="\\d*" inputmode="numeric" tabindex="2"> <span>:</span> <input id="scheduled-minute" type="text" pattern="\\d*" inputmode="numeric" tabindex="3"> <button id="amPm" class="Button Button--small" data-value="{{isPM}}"> <span class="label">{{meridiemText}}</span> </button> </header> <div id="calendar" class="form-calendar"> <div class="nav-group button-group"> <button id="prev-month" class="btn-round"> <i class="Icon icon-arrow-l icon-center-16"></i> </button> <button id="next-month" class="btn-round"> <i class="Icon icon-arrow-r icon-center-16"></i> </button> </div> <input type="date" name="datepicker" id="datepicker"> </div> </div> <div class="padding-as"> <button class="js-remove Button--danger full-width"> <i class="Icon icon-trash Icon--large"></i> <span>{{_i}}Remove{{/i}}</span> </button> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="account-summary cf flex"> <div class="obj-left item-img flex-align-self--center"> <img class="avatar size36 avatar pull-right" src="{{profileImageURL}}" width="36" height="36" alt="{{screenName}}\'s avatar"> </div> <div class="account-summary-text nbfc account-link"> <span class="account-inline txt-ellipsis {{#isProtected}}is-protected{{/isProtected}}"> <b class="fullname link-complex-target txt-size--14 {{#isBadged}}fullname-badged badge-size--14 padding-r--14 margin-r--2{{/isBadged}} {{#isTranslator}}badge-translator{{/isTranslator}} {{#isVerified}}badge-verified{{/isVerified}} position-rel"> {{{emojifiedName}}} </b> <span class="username color-twitter-dark-gray txt-size--12"> @{{screenName}} {{#isProtected}}<i class="icon icon-protected"></i>{{/isProtected}} </span> </span> <div class="contributor-detail padding-t--5 cf txt-size--13 color-twitter-dark-gray" data-show-when-state="closed"> <span data-show-when-contributor-role="admin"> {{_i}}Admin{{/i}} </span> <span data-show-when-contributor-role="contributor"> {{_i}}Contributor{{/i}} </span> &middot; <a href="#" class="js-contributor-open-settings" data-user-id="{{user.id}}"> {{_i}}Change role{{/i}} </a> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "{{#contributors}} {{>contributors/contributor_list_row}} {{/contributors}}"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-axl margin-tl color-twitter-red"> {{_i}}Could not retrieve team members.{{/i}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#contributor}} <div class="js-contributor-row contributor-row position-rel padding-axl account-settings-bb" data-state="{{initialState}}" data-state-error data-user-id="{{user.id}}" data-name="{{user.name}}" data-contributor-role="{{#isAdmin}}admin{{/isAdmin}}{{^isAdmin}}contributor{{/isAdmin}}"> {{#user}} {{>contributor_list_account_summary}} {{/user}} <div class="contributor-settings control-s margin-txl cf" data-show-when-state="settings confirmRemove"> <div class="contributor-settings-role margin-bl padding-bl margin-" data-hide-when-state="confirmRemove"> <div class="radio"> <label class="contributor-option cf block"> <input type="radio" name="contributor-role-{{user.id}}" class="js-contributor-role margin-tm block obj-left" data-user-id="{{user.id}}" data-contributor-role="contributor" {{^isAdmin}}checked="checked"{{/isAdmin}}> <div class="nbfc"> <strong class="block">{{_i}}Contributor{{/i}}</strong> <span class="color-twitter-dark-gray">{{_i}}Can Tweet as @{{contributee.getUsername}}{{/i}}</span> </div> </label> <label class="contributor-option cf block"> <input type="radio" name="contributor-role-{{user.id}}" class="js-contributor-role margin-tm block obj-left" data-user-id="{{user.id}}" data-contributor-role="admin" {{#isAdmin}}checked="checked"{{/isAdmin}}> <div class="nbfc"> <strong class="block">{{_i}}Admin{{/i}}</strong> <span class="color-twitter-dark-gray">{{_i}}Can Tweet and manage team{{/i}}</span> </div> </label> </div> <div class="contributor-confirm-change cf margin-txl"> <button class="js-contributor-action-confirm Button--primary pull-left margin-r--10" data-user-id="{{user.id}}"> <span class="label">{{_i}}Confirm{{/i}}</span> </button> <button class="js-contributor-action-cancel cf btn pull-left" data-user-id="{{user.id}}"> {{_i}}Cancel{{/i}} </button> </div> </div> <div class="contributor-remove" data-hide-when-state="confirmRemove"> <button class="js-contributor-remove Button--danger pull-left" data-user-id="{{user.id}}"> <span class="label">{{_i}}Remove from team{{/i}}</span> </button> </div> <div class="contributor-confirm-remove padding-bl color-twitter-darker-gray" data-show-when-state="confirmRemove"> {{^isSigninAccount}} {{_i}}Remove @{{user.screenName}} from the team?{{/i}} {{/isSigninAccount}} {{#isSigninAccount}} {{_i}}You are signed in as @{{user.screenName}}, so this will remove @{{contributee.getUsername}} from your TweetDeck and you will no longer be able to manage the team.{{/i}} {{/isSigninAccount}} </div> <div class="contributor-confirm-remove cf" data-show-when-state="confirmRemove"> <button class="js-contributor-action-confirm Button--danger pull-left margin-r--10" data-user-id="{{user.id}}"> <span class="label">{{_i}}Remove{{/i}}</span> </button> <button class="js-contributor-action-cancel cf btn pull-left" data-user-id="{{user.id}}"> {{_i}}Cancel{{/i}} </button> </div> </div> <div class="contributor-confirm-add padding-vl txt-size--13 color-twitter-dark-gray" data-show-when-state="confirmAdd confirmAdd-added"> {{_i}}This user will be able to use Twitter as @{{contributee.getUsername}}, including:{{/i}} <ul class="padding-tl ul"> <li>{{_i}}Posting Tweets{{/i}}</li> <li>{{_i}}Accessing direct messages{{/i}}</li> <li>{{_i}}Liking and Retweeting{{/i}}</li> </ul> </div> <div class="contributor-confirm-add" data-show-when-state="confirmAdd confirmAdd-added"> <div class="cf"> <button class="js-contributor-action-confirm Button--primary pull-left" data-user-id="{{user.id}}"> {{_i}}Authorize{{/i}} </button> <button class="js-contributor-action-cancel cf btn margin-hm pull-left" data-user-id="{{user.id}}"> {{_i}}Cancel{{/i}} </button> </div> </div> <div class="contributor-confirm-deadmin padding-hs padding-vm color-twitter-darker-gray" data-show-when-state="confirmDeadmin"> {{_i}}Warning: You will no longer be able to manage the team from this TweetDeck{{/i}} </div> <div class="contributor-confirm-deadmin" data-show-when-state="confirmDeadmin"> <button class="js-contributor-action-confirm Button--primary padding-h--20 pull-left margin-r--10" data-user-id="{{user.id}}"> <span class="label">{{_i}}Continue{{/i}}</span> </button> <button class="js-contributor-action-cancel cf btn padding-h--20 pull-left" data-user-id="{{user.id}}"> {{_i}}Cancel{{/i}} </button> </div> <div class="js-contributor-error-message margin-txl color-twitter-deep-red" data-show-when-state-error></div> <div class="txt-size--13 color-twitter-dark-gray margin-txl" data-show-when-state="confirmAdd confirmAdd-added"> <a href="https://support.twitter.com/articles/20171753-using-team-accounts-on-tweetdeck" target="_blank" rel="url noopener noreferrer">{{_i}}Read more about teams.{{/i}}</a> </div> </div> {{/contributor}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="drawer-header padding-lxl flex-shrink--0"> <h1 class="js-contributor-manager-back is-actionable pull-left txt-weight-normal"> <span class="drawer-header-title block drawer-column-header-title"> <i class="icon icon-arrow-l icon-tt"></i> {{_i}}Manage team{{/i}} </span> </h1> <a class="js-drawer-close column-close-link color-twitter-darker-gray" href="#"> <i class="icon icon-close icon-center-24"></i> </a> </div> <div class="js-contributor-manager contributor-manager drawer-content scroll-v margin-b---1"> <div class="padding-txl padding-lxl padding-rxl padding-bn account-settings-bb"> {{! Account summary }} {{#account}} <a class="account-link link-complex block br--3" href="{{getProfileURL}}" data-user-name="{{screenName}}" rel="user" target="_blank"> <div class="padding-al bg-color-twitter-white br--3"> {{> account_settings_account_summary }} </div> </a> {{/account}} <p class="padding-txl color-twitter-gray txt-size--13 margin-bxxl"> {{_i}}Members of this team can use Twitter as @{{account.screenName}} without knowing the password.{{/i}} <a href="https://support.twitter.com/articles/20171753-using-team-accounts-on-tweetdeck" target="_blank" rel="url noopener noreferrer">{{_i}}Learn more{{/i}}</a> </p> </div> <span class="js-contributors"> <div class="padding-v--12 account-settings-bb"> <h1 class="txt-size--13 color-twitter-darker-gray padding-hxl"> {{_i}}Team members{{/i}} </h1> </div> <div class="js-contributor-list"></div> </span> <span class="js-pending"> <div class="padding-v--12 account-settings-bb"> <h1 class="txt-size--13 color-twitter-darker-gray padding-hxl"> {{_i}}Pending requests{{/i}} </h1> </div> <div class="js-contributor-list-pending"></div> </span> </div> <div class="padding-b--16 padding-h--16 flex-shrink--0 account-settings-bt account-settings-bb"> <h1 class="txt-size--13 color-twitter-darker-gray padding-l--2 padding-v--12">{{_i}}Add a team member{{/i}}</h1> <div class="js-contributor-adder height--30"></div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-hxl"> {{_i}}Loading team...{{/i}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="customtimeline-details margin-b--15 padding-t--25 padding-h--15 bg-color-twitter-white color-twitter-deep-black width--490"> <fieldset> <div class="control-group padding-b--15"> <label for="customtimeline-account" class="control-label">{{_i}}Account{{/i}}</label> <div class="controls"> <select{{#timelineId}} disabled{{/timelineId}} name="customtimeline-account" id="customtimeline-account" class="js-customtimeline-account width--300"> {{#accounts}}<option value="{{getKey}}">@{{getUsername}}</option>{{/accounts}} </select> </div> </div> <div class="control-group padding-b--15"> <label for="customtimeline-name" class="control-label">{{_i}}Name{{/i}}</label> <div class="controls"> <input class="width--300 js-customtimeline-name js-submittable-input" id="customtimeline-name" name="customtimeline-name" maxlength="25" required="required" type="text" placeholder="{{_i}}New Collection{{/i}}"> </div> </div> <div class="control-group"> <label for="customtimeline-description" class="control-label padding-t--6"> {{_i}}Description{{/i}} </label> <div class="controls"> <textarea class="width--300 js-customtimeline-description height--55" id="customtimeline-description" name="customtimeline-description" rows="10"></textarea> </div> <div class="controls margin-t--6 color-twitter-darker-gray width--300 txt-size--12"> <span>Under 160 characters, optional</span> <span class="js-character-count obj-right"></span> </div> </div> <div class="pull-right padding-t--10"> {{#timelineId}} <button class="js-delete-customtimeline js-submittable-input Button--danger margin-r--12" type="button"> {{_i}}Delete{{/i}} </button> {{/timelineId}} <button class="js-save-customtimeline js-submittable-input Button--primary" type="submit"> {{_i}}Save{{/i}} </button> </div> </fieldset> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-drawer-body"> <div class="js-insights-panel"> </div> </div> <div class="js-drawer-footer"> <button class="js-drawer-action Button--primary pull-right">Tweet {{insightTerm}}</button> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-drawer drawer" data-drawer="compose"> {{>compose/docked_compose}} </div> <div class="js-drawer drawer" data-drawer="accountSettings"> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="bg-color-twitter-white color-twitter-dark-black"> {{$content}} <div class="margin-h--15 margin-b--20"> <span class="block margin-bl">{{_i}}Add this Tweet to your website by copying the code below. If your CMS supports it, you can just paste in the link.{{/i}} <a class="url" target="_blank" href="https://dev.twitter.com/docs/embedded-tweets">{{_i}}Learn more{{/i}}</a> {{_i}}about embedded Tweets.{{/i}}</span> <textarea class="js-embed-textarea block margin-bl" rows="2" readonly>{{html}}</textarea> {{#isReply}} <label class="checkbox is-actionable block">{{_i}}Include parent Tweet{{/i}} <input type="checkbox" {{#includeParentTweet}}checked{{/includeParentTweet}} class="js-embed-include-parent"> </label> {{/isReply}} <p class="color-twitter-darker-gray">{{_i}}By embedding Twitter content in your website or app, you are agreeing to the{{/i}} <a class="url" target="_blank" href="https://dev.twitter.com/overview/terms/agreement">{{_i}}Developer Agreement{{/i}}</a> {{_i}}and{{/i}} <a class="url" target="_blank" href="https://dev.twitter.com/overview/terms/policy">{{_i}}Developer Policy{{/i}}</a>.</p> {{#hasMedia}} <label class="checkbox is-actionable block">{{_i}}Include media{{/i}} <input type="checkbox" {{#includeMedia}}checked{{/includeMedia}} class="js-embed-include-media"> </label> {{/hasMedia}} </div> <b class="block margin-ll color-twitter-darker-gray margin-h--15">{{_i}}Preview{{/i}}</b> <div class="js-embed-loading-container embed-loading-container margin-h--15"> <img src="{{#asset}}/web/assets/global/backgrounds/spinner_large_white.gif{{/asset}}" class="embed-loading" alt="Loading…" /> </div> <div class="js-embed-iframe-container embed-iframe-container margin-h--7"> <iframe class="js-embed-iframe embed-iframe"> </iframe> </div> {{/content}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#accounts}} <div class="l-table padding-al"> <div class="l-cell"> {{>buttons/favorite}} <div class="inline-block"> <img class="avatar size32 pull-left" src={{getProfileImageURL}} /> <span class="from-handle padding-l--6">@{{getUsername}}</span> </div> </div> </div> {{/accounts}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="Card-video"> {{#cardUsePublishedVideo}} <iframe class="Card-videoIframe" src="https://twitter.com/i/videos/{{tweetId}}?square_corners=1"></iframe> {{/cardUsePublishedVideo}} {{^cardUsePublishedVideo}} {{! This component currently doesn\'t need cross-frame communication. The `json_rpc=1` param silences XDM setup errors. In the URL below, the inline Mustache comments allow for slightly more readable code formatting with line breaks, rather than one enormous line. }} <iframe class="Card-videoIframe" {{#cardVideoPosterImageOnly}}data-{{/cardVideoPosterImageOnly}}src="https://twitter.com/i/videos/static?{{! }}json_rpc=1&square_corners=1{{! }}{{#cardVideoPosterImageOnly}}&autoplay=1{{/cardVideoPosterImageOnly}}{{! }}{{#posterImageUrl}}&image_src={{posterImageUrl}}{{/posterImageUrl}}{{! }}{{#videoUrl}}&video_url={{videoUrl}}{{/videoUrl}}{{! }}{{#visitCallToActionUrl}}&visit_cta_url={{visitCallToActionUrl}}{{/visitCallToActionUrl}}{{! }}{{#vmapUrl}}&vmap_url={{vmapUrl}}{{/vmapUrl}}{{! }}{{#watchNowCallToActionUrl}}&watch_now_cta_url={{watchNowCallToActionUrl}}{{/watchNowCallToActionUrl}}{{! }}"></iframe> <button class="Card-videoPosterImageContainer"> <img alt="" class="Card-videoPosterImage" src="{{rawPosterImageUrl}}" /> <span class="Card-videoPosterImagePlayButton Icon Icon--playButton"></span> </button> {{/cardUsePublishedVideo}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-action-follow btn-relation-group"> <div class="js-follow-button pull-left {{^isSingleAccount}}js-show-tip{{/isSingleAccount}} follow-btn margin-r--4{{^showAccountMenu}} Button--tertiary{{/showAccountMenu}} is-disabled" {{^isSingleAccount}}title="{{_i}}From {{#account}}@{{getUsername}}{{/account}}{{/i}}"{{/isSingleAccount}}> <button class="btn-loader"> <span> <img src="{{#asset}}/web/assets/global/backgrounds/spinner_small_trans.gif{{/asset}}" alt="{{_i}}Loading…{{/i}}"> </span> </button> <button class="action-text follow-text"> <i class="Icon icon-follow"></i> <span class="label">{{_i}}Follow{{/i}}</span> </button> <button class="action-text Button--primary following-text"> {{_i}}Following{{/i}} </button> <button class="js-action-unfollow action-text unfollow-text"> {{_i}}Unfollow{{/i}} </button> <button class="action-text block-text"> {{_i}}Blocked{{/i}} </button> <button class="js-action-unblock action-text unblock-text action-text"> {{_i}}Unblock{{/i}} </button> <button class="pending-text action-text"> {{_i}}Pending{{/i}} </button> <button class="js-action-unfollow action-text cancel-req-text "> {{_i}}Cancel{{/i}} </button> <button class="js-action-profile action-text thats-you-text"> {{_i}}Edit profile{{/i}} </button> </div> {{#showAccountMenu}} {{> user_actions_btn_inv}} {{/showAccountMenu}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<i class="heartsprite heart-anim"></i>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div data-testid="gdprImportantUpdateModal" class="txt-center padding-v--30 padding-h--50 width--523"> <i class="padding-v--30 icon icon-twitter-bird color-twitter-blue txt-size--30"></i> <h1 class="padding-v--20 color-twitter-black txt-size--22 txt-bold">{{_i}}Updates to the Twitter Terms of Service and Privacy Policy{{/i}}</h1> <p class="padding-t--5 padding-b--20 color-twitter-dark-gray txt-size--14">{{_i}}Twitter is updating its Terms of Service and Privacy Policy to provide you with even more transparency into the data Twitter collects about you, how it\'s used, and the controls you have over your personal data. These updates will take effect on May 25, 2018.{{/i}} <a href="https://help.twitter.com/en/rules-and-policies/update-privacy-policy">{{_i}}Learn more{{/i}}</a></p> <button class="js-dismiss margin-t--10 margin-b--20 Button Button--primary">{{_i}}Got it{{/i}}</button> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="inline-confirmation-container is-inverted-dark padding-axl {{backgroundColorClass}} br--4"> <div class="inline-confirmation-text {{textColorClass}}"> {{confirmationText}} </div> <div class="margin-txl cf"> <button class="js-btn-primary {{^buttonPrimaryIsNegative}}Button--primary{{/buttonPrimaryIsNegative}} {{#buttonPrimaryIsNegative}}Button--danger{{/buttonPrimaryIsNegative}} pull-left margin-r--10"> <span class="label">{{primaryButtonText}}</span> </button> <button class="js-btn-secondary btn pull-left"> {{secondaryButtonText}} </button> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="margin-v--26"> <h4 class="txt-size--16 txt-bold margin-b--8">{{title}}</h4> <div class="txt-right txt-size--12">{{_i}}% of audience{{/i}}</div> <ol class="border-separated"> {{#ageInsights}} <li class="flex txt-size--14 margin-t--4 padding-v--20"> <div class="width-p--5"> {{ordinal}} </div> <div class="width-p--50"> {{name}} </div> <div class="width-p--45 flex"> <div class="width-5 margin-h--10 txt-right">{{percentage}}%</div> <div class="block flex-grow--1 flex-align-self--center height-0 margin-l--10 bg-color-twitter-lightest-gray"> <div class="height-p--100 bg-color-twitter-blue" style="width: {{percentage}}%"></div> </div> </div> </li> {{/ageInsights}} </ol> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="color-twitter-black"> <div class="js-insights-main-chart"></div> <div class="js-no-data"></div> <div class="js-top-related"></div> <div class="js-demographics"> <div class="js-demographics-age"></div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="txt-center color-twitter-dark-gray margin-t--50"> <p class="txt-size--18 padding-b--8">{{_i}}Nothing to see here &mdash; yet{{/i}}</p> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="margin-v--26"> <h4 class="txt-size--16 txt-bold margin-b--8">{{_i}}Related terms{{/i}}</h4> <ol class="border-separated"> {{#rows}} <li class="flex flex-align--center txt-size--14 margin-t--4 padding-v--15"> <div class="width-p--5"> {{ordinal}} </div> <div class="width-p--50"> {{word}}<br/> <span class="color-twitter-dark-gray">{{volume}}{{_i}} Tweets{{/i}}</span> </div> <div class="width-p--45"> <div id="js-sparkline-{{key}}"> </div> <span class="txt-mute txt-size--12 margin-v--2 pull-right">{{_i}}Past week{{/i}}</span> </div> </li> {{/rows}} </ol> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="item-box {{$item_box_classes}}{{/item_box_classes}}" {{$item_box_data}}{{/item_box_data}}> {{$content}}{{/content}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="bg-color-twitter-white color-twitter-dark-black"> {{$content}} <dl class="keyboard-shortcut-list mdl-column"> <dt class="keyboard-shortcut-title"><b>Actions</b></dt> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">R</kbd>  Reply</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">T</kbd>  Retweet</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">F</kbd> {{_i}}Like{{/i}} </dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">N</kbd>  New Tweet</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">D</kbd>  Direct Message</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">P</kbd>  View user profile</dd> <dd class="keyboard-shortcut-definition"> <kbd class="text-like-keyboard-key">{{#isMac}}Return{{/isMac}}{{^isMac}}Enter{{/isMac}}</kbd> View Tweet details </dd> <dd class="keyboard-shortcut-definition"> <kbd class="text-like-keyboard-key">Backspace</kbd> Close Tweet details </dd> <dd class="keyboard-shortcut-definition"> <kbd class="text-like-keyboard-key">{{#isMac}}Cmd &#8984;{{/isMac}}{{^isMac}}Ctrl{{/isMac}}</kbd> + <kbd class="text-like-keyboard-key">{{#isMac}}Return{{/isMac}}{{^isMac}}Enter{{/isMac}}</kbd> Send Tweet </dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">A</kbd>  Add column</dd> {{#withCommandPalette}} <dd class="keyboard-shortcut-definition"> <kbd class="text-like-keyboard-key">;</kbd> {{_i}}Command palette — <b>NEW!</b>{{/i}} <img class="emoji" draggable="false" alt="✨" src="https://abs.twimg.com/emoji/v2/72x72/2728.png"> </dd> {{/withCommandPalette}} </dl> <dl class="keyboard-shortcut-list mdl-column"> <dt class="keyboard-shortcut-title"><b>Navigation</b></dt> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">?</kbd>  This menu</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">&#8594;</kbd>  Right</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">&#8592;</kbd>  Left</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">&#8595;</kbd>  Down</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">&#8593;</kbd>  Up</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">1</kbd> … <kbd class="text-like-keyboard-key">9</kbd>  Column 1－9</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">0</kbd>  Final column</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">X</kbd>  Expand/Collapse navigation</dd> <dd class="keyboard-shortcut-definition"><kbd class="text-like-keyboard-key">S</kbd>  Search</dd> </dl> {{/content}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-modal-panel mdl s-tall-fixed is-inverted-dark"> {{> modal_header}} <div class="mdl-inner"> <div class="mdl-content js-mdl-content horizontal-flow-container"> </div> <footer class="mdl-buttonbar"></footer> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<p class="padding-axl color-twitter-deep-black">{{_i}} <a href="https://support.twitter.com/articles/15794-online-abuse" target="_blank" rel="url">Learn more</a> about reporting violations of our rules.{{/i}} </p>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<li> <a href="#" class="list-account s-justify cf"> <img src="{{profileImageURL}}" alt="@{{username}}" class="avatar obj-left"> <div class="nbfc"> <strong class="fullname"> {{{emojifiedName}}}{{^emojifiedName}}{{fullname}}{{/emojifiedName}} </strong> <span class="username">@{{username}}</span> </div> </a> </li>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<li> <a href="#" class="list-twitter-list" data-id="{{id}}"> <div class="inner" > <strong>{{name}}</strong> </div> <p>{{description}}</p> </a> </li>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="lst-group"> <ul class="js-events-list"></ul> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<li class="{{#selected}}selected{{/selected}} {{classes}}"><a href="#" class="list-link" data-action="{{action}}"><strong>{{title}}</strong><i class="chev-right"></i></a></li>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="lst-group"> <ul class="js-live-videos-list"></ul> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<li><a href="#" class="list-subtitle">{{title}}<span>{{subtitle}}</span><i class="chev-right"></i></a></li>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<header class="margin-am"> <div class="js-trends control-group is-hidden"> <label class="padding-ts pull-left txt-mute cont">{{_i}}Trends{{/i}}</label> <div class="controls-space-58"> <select class="js-trends-select"></select> </div> </div> <div class="js-cities control-group is-hidden margin-ts"> <label class="padding-ts pull-left txt-mute cont">{{_i}}City{{/i}}</label> <div class="controls-space-58"> <select class="js-cities-select"></select> </div> </div> </header>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="lst-group"> {{^withLocationSelector}} <h3>{{_i}}Worldwide{{/i}}</h3> {{/withLocationSelector}} {{> list_module_trend_header}} <ul class="js-trend-list"></ul> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<li> <a href="#" class="list-twitter-list"> <div class="inner" > <strong>{{{title}}}</strong> </div> <p>{{{description}}}</p> </a> </li>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<li> <a href="#" class="list-twitter-list"> <div class="inner"> <div class="txt-ellipsis"> {{#isPrivate}}<i class="icon icon-protected icon-small inline"></i>{{/isPrivate}} <strong>{{{title}}}</strong> <span class="bytext">{{by}}</span> </div> </div> <p class="txt-ellipsis">{{{description}}}</p> <span class="subtitle">{{subtitle}}</span> <img src="{{miniProfileURL}}" alt="avatar" class="avatar size24"> </a> </li>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<span class="btn-dropdown-group"> <a href="#" class="btn-dropdown"> <span class="js-menu-selected-item">{{choice}}</span> <i class="carrot-down"></i> </a> <ul class="options-dropdown dropdown-menu" style="display:block"> <li><a href="#">{{_i}}Ping{{/i}}</a></li> <li><a href="#">{{_i}}Ping 2{{/i}}</a></li> <li><a href="#">{{_i}}Ping 3{{/i}}</a></li> <li><a href="#">{{_i}}Ping 4{{/i}}</a></li> </ul> </span>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<li><a href="#" data-action="search" data-query="{{name}}">{{name}}</a></li>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<li><a class="promoted" href="#" data-action="search" data-query="{{name}}">{{name}}<i class="badge-promoted"></i><span>promoted</span></a></li>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<button class="js-add-multiple Button--primary margin-t--10" {{^canAddMembers}}disabled{{/canAddMembers}}> {{_i}}Add users to List{{/i}} </button>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<span class="pull-right"> <button class="js-save Button--primary"><i class="add"></i>{{_i}}Save{{/i}}</button> </span>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="margin-b--15 padding-t--25 padding-h--15 bg-color-twitter-white color-twitter-deep-black width--490"> <fieldset> <legend class="frm-legend">{{_i}}List Details{{/i}}</legend> <div class="control-group padding-b--15"> <label for="list-account" class="control-label">{{_i}}Account{{/i}}</label> <div class="controls"> <select{{#listId}} disabled{{/listId}} name="list-account" id="list-account" class="js-list-account width--300"> {{#accounts}}<option value="{{getKey}}">@{{getUsername}}</option>{{/accounts}} </select> </div> </div> <div class="control-group padding-b--15"> <label for="list-name" class="control-label">{{_i}}Name{{/i}}</label> <div class="controls"> <input class="width--300 js-list-name js-submittable-input" id="list-name" name="list-name" maxlength="25" required="required" type="text" placeholder="{{_i}}New List{{/i}}"> </div> </div> <div class="control-group"> <label for="list-description" class="control-label padding-t--6"> {{_i}}Description{{/i}} </label> <div class="controls"> <textarea class="width--300 js-list-description height--55" id="list-description" name="list-description" rows="10"></textarea> </div> <div class="controls margin-t--6 color-twitter-darker-gray width--300 txt-size--12"> <span>Under 100 characters, optional</span> <span class="js-character-count obj-right"></span> </div> </div> <div class="control-group"> <label for="list-mode"  class="control-label">{{_i}}Privacy{{/i}}</label> <div class="controls frm-inputs-list padding-t--5"> <label class="radio"> <input type="radio" value="public" id="list-mode-public" name="list-mode" checked="checked"> <span>{{_i}}Public{{/i}}</span> <span class="color-twitter-gray txt-size--12">&#8226 {{_i}}anyone can view{{/i}}</span> </label> <label class="radio"> <input type="radio" value="private" id="list-mode-private" name="list-mode"> <span>{{_i}}Private{{/i}}</span> <span class="color-twitter-gray txt-size--12">&#8226 {{_i}}only visible to the owner{{/i}}</span> </label> </div> </div> <div class="pull-right padding-t--10"> <button class="js-save-list js-submittable-input Button--primary" type="submit"> {{_i}}Save{{/i}} </button> </div> </fieldset> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<button class="js-delete Button--danger"> <span class="label">{{_i}}Delete List{{/i}}</span> </button> <span class="pull-right"> <label class="js-add-column-option is-hidden pull-left checkbox frm-add-col"> <input type="checkbox" class="js-add-column-checkbox" name="add-column-checkbox"/> <span>{{_i}}Add column{{/i}}</span> </label> <button class="js-edit btn Button--tertiary margin-r--6">{{_i}}Edit details{{/i}}</button> <button class="js-done Button--primary"></i>{{_i}}Done{{/i}}</button> </span>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<li class="list-listmember cf"> <img src="{{profileImageURL}}" alt="@{{username}}" class="avatar"> <button class="js-add-remove btn btn-round Button--tertiary"> <div class="working action-btn"> <span> <img src="{{#asset}}/web/assets/global/backgrounds/spinner_small_trans.gif{{/asset}}" alt="Loading…"> </span> </div> <div class="member action-btn"><i class="icon icon-trash"></i></div> <div class="checked action-btn"><i class="icon icon-check icon-small"></i></div> <div class="nonmember action-btn"><i class="icon icon-plus icon-small"></i></div> </button> <div class="content "> <strong class="fullname txt-ellipsis inline-block">{{fullname}}</strong> <span class="username">@{{username}} {{#isProtected}}<i class="icon icon-protected icon-small"></i>{{/isProtected}}{{#isVerified}}<i title="{{_i}}Verified account{{/i}}" class="sprite sprite-verified-mini js-show-tip"></i>{{/isVerified}}</span> <p class="bio">{{description}}</p> </div> </li>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="lst-group bg-color-twitter-white"> <div class="margin-a--16"> <p class="padding-b--8 color-twitter-dark-gray">{{_i}}These are the accounts in {{/i}}{{{name}}}{{_i}}. You can copy them to share.{{/i}}</p> <textarea class="height--415 js-copy-users-input" readonly>{{members}}</textarea> <div> <button class="js-dismiss-top-modal btn margin-t--10 pull-left"> {{_i}}← Back{{/i}} </button> {{#showCopyButton}} <div class="pull-right"> <button class="js-copy-members Button--primary margin-t--10"> {{_i}}Copy List{{/i}} </button> </div> {{/showCopyButton}} </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="lst-group bg-color-twitter-white"> <div class="margin-a--16 color-twitter-dark-gray"> <p class="padding-b--8">{{_i}}Enter the @usernames of the people you would like to add to this List.{{/i}}</p> <p class="padding-b--16 txt-size-variable--12 pull-left width-p--90">{{_i}}You can add up to 100 members to a List at a time.{{/i}}</p> <i class="js-show-tip icon icon-info pull-right" data-title="{{_i}}You can add the @usernames one per line, or they can be separated by spaces, commas or tabs.{{/i}}"/> <textarea class="height--415 js-multiple-users-input placeholder-text" autofocus placeholder="{{placeholderText}}"></textarea> <div> <button class="js-dismiss-top-modal btn margin-t--10 pull-left"> {{_i}}← Back{{/i}} </button> <div class="js-add-users-to-list-btn pull-right"> {{> lists/add_users_to_list_button}} </div> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<section id="{{columnkey}}" data-column="{{columnkey}}" class="flex flex-column height-p--100"> <header class="column-header column-header-temp flex-shrink--0"> <h1 class="pull-left padding-h--10"><strong>{{_i}}Members{{/i}}</strong> (<span class="js-member-count"></span>)</h1> <button class="js-action-header-export-button pull-right btn Button--tertiary margin-t--10 is-hidden" data-action="exportList">{{_i}}Export List{{/i}}</button> </header> <div class="scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}} scroll-alt column-content flex-auto"> <ul class="js-member-list"></ul> </div> </section>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-live-video-container live-video-container position-rel"></div> {{^isTemporaryColumn}} {{#hasMultipleTimelines}} <div class="live-video-timelines height--30 {{^decider.live_video_timelines}}is-hidden{{/decider.live_video_timelines}}"> <button class="Button Button--small js-live-video-timelines"> <span class="Button-label js-live-video-timelines-label">{{primaryTimeline.title}}</span> <span class="Button-adornment"> <span class="Icon Icon--caretDown"></span> </span> </button> <ul class="Dropdown js-live-video-timelines-list margin-t--0 margin-l--10" role="menu"> {{#timelines}} <li class="Dropdown-menuItem"> <label class="Dropdown-menuItemContent margin-v--5 margin-h--0" role="menuitemradio"> <input type="radio" name="timeline" value="{{timeline_id}}"> {{title}} </label> </li> {{/timelines}} </ul> </div> {{/hasMultipleTimelines}} {{/isTemporaryColumn}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="app-signin-wrap"> <div class="js-signin-ui app-signin-form pin-top pin-right txt-weight-normal"></div> {{> login/promo_for_login_form}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-login-error form-message form-error-message error txt-center padding-al margin-bxl {{^message}}is-hidden{{/message}}"> <p class="js-login-error-message">{{message}}</p> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="app-info txt-size-variable--18 margin-txxl"> <div class="app-info-panel cf"> <div class="app-info-text pull-left"> <span class="app-info-title" data-test-id="app-info-title">Tweet like a pro.</span> <p>{{_i}}The most powerful Twitter tool for real-time tracking, organizing, and engagement. Reach your audiences and discover the best of Twitter.{{/i}}</p> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<form class="js-login-form form-login startflow-panel-rounded" data-auth-type="twitter"> <legend class="form-legend padding-axl"> {{_i}}Log in with your Twitter account{{/i}} </legend> <div class="margin-a--16"> {{> login/login_form_message}} <a href="{{twitterLoginUrl}}" class="Button Button--primary block txt-size--18 txt-center"> Log in </a> </div> <div class="divider-bar margin-v--0 margin-h--16"></div> <div class="padding-axl"> {{_i}}New to Twitter?{{/i}} <a href="https://twitter.com/signup" class="startflow-link" rel="url" target="_blank">{{_i}}Sign up now{{/i}} &raquo;</a></p> </div> </form>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-media-gif-container media-item nbfc {{thumbSizeClass}}" style="background-image: url({{imageSrc}})"> {{#isGifActive}} <video class="js-media-gif media-item-gif full-width block {{#isPossiblySensitive}}is-invisible{{/isPossiblySensitive}}" {{#withAutoplay}}autoplay{{/withAutoplay}}  loop src="{{src}}"> <source video-src="{{src}}" type="{{contentType}}" src="{{src}}"> </video> <div class="gif-badge"><i class="sprite sprite-gif"></i></div> <a class="js-gif-pause is-actionable gif-pause" rel="pause"><i class="sprite sprite-gif-pause"></i></a> <a class="js-gif-play pin-all gif-play" rel="play">{{> media/video_overlay}}</a> {{/isGifActive}} {{^isGifActive}} <div class="media-item-gif full-width block" /> {{/isGifActive}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-mediatable ovl-block is-inverted-light" tabindex="-1"> <div class="s-padded"> <div class="js-modal-panel mdl s-full med-fullpanel"> <a href="#" class="mdl-dismiss js-dismiss mdl-dismiss-media mdl-btn-media" rel="dismiss"><i class="icon txt-size--24 icon-close"></i></a> <div class="js-embeditem med-embeditem"> <div class="l-table"> <div class="l-cell"> <div class="med-tray js-mediaembed"></div> </div> </div> <a href="#" class="js-media-gallery-prev link-no-focus mdl-btn-media mdl-media-prev is-hidden"> <i class="icon txt-size--26 icon-arrow-l"></i> </a> <a href="#" class="js-media-gallery-next link-no-focus mdl-btn-media mdl-media-next is-hidden"> <i class="icon txt-size--26 icon-arrow-r"></i> </a> </div> <div id="media-gallery-tray"></div> <div class="js-med-tweet med-tweet"></div> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<input class="js-media-upload" type="file" accept="{{acceptedMedia}}" multiple />'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="position-rel"> <iframe src="https://twitter.com/i/videos/{{#isDM}}dm{{/isDM}}{{^isDM}}tweet{{/isDM}}/{{chirpId}}?image_src={{imageSrc}}&amp;media_id={{mediaId}}&amp;video_url={{videoUrl}}&amp;content_type={{contentType}}&amp;owner_id={{ownerId}}&amp;auto_buffer=1&amp;autoplay={{autoplay}}" class="js-media-native-video {{#isPossiblySensitive}}is-invisible{{/isPossiblySensitive}}" height="{{height}}" width="{{width}}" frameborder="0" scrolling="no" allowfullscreen style="margin: 0px; padding: 0px; border: 0px;"> </iframe> {{> status/media_sensitive}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-scheduled-video"></div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#taggedUsers.length}} <div class="margin-v--4 txt-mute txt-size-variable--12"> <i class="icon icon-user icon-xsmall icon-base-valigned "></i> {{#taggedUsers}} {{{userLink}}}{{^isBeforeLast}}{{^isLast}}, {{/isLast}}{{/isBeforeLast}} {{#hasTwoOrMoreUsers}} {{#isBeforeLast}} {{_i}}and{{/i}} {{/isBeforeLast}} {{/hasTwoOrMoreUsers}} {{/taggedUsers}} </div> {{/taggedUsers.length}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="video-overlay icon-with-bg-round"> <i class="icon icon-bg-dot icon-twitter-blue-color"></i> <i class="icon icon-play-video"></i> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<iframe class="vine-player" width="{{width}}" height="{{height}}" src="https://vine.co/v/{{id}}/card" frameborder="0"> </iframe>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<iframe class="youtube-player" type="text/html" width="{{width}}" height="{{height}}" src="https://www.youtube.com/embed/{{id}}?autoplay={{autoplay}}{{#startTime}}&start={{startTime}}{{/startTime}}" allowfullscreen frameborder="0"> </iframe>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-accordion-toggle-view accordion-header is-actionable link-clean block cf txt-size--14"> <div class="facet-title padding-l--36"> <i class="icon {{iconClass}} facet-type-icon"></i> <span class="txt-size--13">{{title}}</span> </div> <i class="icon icon-arrow-d pull-right txt-size--10"></i> <i class="icon icon-arrow-u pull-right txt-size--10"></i> <div class="{{jsClass}} facet-subtitle padding-t--3 padding-r--12 padding-l--36 nbfc"> {{summaryText}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<ul> {{#chirp}} {{#user}}{{^isProtected}} <li class="is-selectable"><a href="#" data-action="embed">{{_i}}Embed this Tweet{{/i}}</a></li> <li class="is-selectable"><a href="#" data-action="reference-to">{{_i}}Copy link to this Tweet{{/i}}</a></li> <li class="is-selectable"><a href="#" data-action="message-to">{{_i}}Share via Direct Message{{/i}}</a></li> <li class="is-selectable"><a href="#" data-action="email">{{_i}}Share via Email{{/i}}</a></li> <li class="drp-h-divider"></li> {{/isProtected}}{{/user}} {{/chirp}} {{#user}} <li class="is-selectable"><a href="#" data-action="mention" class="txt-ellipsis">{{_i}}Tweet to @{{screenName}}{{/i}}</a></li> {{> menus/follow_menuitem }} {{#showFavorite}} <li class="is-selectable"> <a href="#" data-action="favoriteOrUnfavorite"> {{_i}}Like from accounts…{{/i}} </a> </li> {{/showFavorite}} <li class="is-selectable"><a href="#" data-action="message">{{_i}}Send a Direct Message{{/i}}</a></li> <li class="is-selectable"><a href="#" data-action="lists">{{_i}}Add or remove from Lists…{{/i}}</a></li> {{#chirp}}{{#user}}{{^isProtected}} <li class="feature-customtimelines is-selectable"><a href="#" data-action="customtimelines">{{_i}}Add to Collection…{{/i}}</a></li> {{/isProtected}}{{/user}}{{/chirp}} {{#chirp}}<li class="is-selectable"><a href="#" data-action="search-for-quoted">{{_i}}See who quoted this Tweet{{/i}}</a></li>{{/chirp}} {{/user}} {{#user}} {{^isMe}} <li class="drp-h-divider"></li> {{#chirp}} {{#hasMedia}} <li class="is-selectable"> <a class="js-flag-media-link {{#isFlagged}}is-hidden{{/isFlagged}}" href="#" data-action="flag-media">{{_i}}Flag media{{/i}}</a> <a class="js-flag-more-info-link {{^isFlagged}}is-hidden{{/isFlagged}}" href="https://support.twitter.com/articles/20069937" data-action target="_blank" rel="url">{{_i}}Flagged (learn more){{/i}}</a> </li> {{/hasMedia}} {{/chirp}} {{^isMuted}} <li class="is-selectable"><a href="#" data-action="mute" class="txt-ellipsis">{{_i}}Mute @{{screenName}}{{/i}}</a></li> {{/isMuted}} {{#isMuted}} <li class="is-selectable"><a href="#" data-action="unmute" class="txt-ellipsis">{{_i}}Unmute @{{screenName}}{{/i}}</a></li> {{/isMuted}} {{#chirp}} {{#isTweetDetailAction}} {{^isMutedConversation}} <li class="is-selectable"><a href="#" data-action="muteConversation" class="txt-ellipsis">{{_i}}Mute this conversation{{/i}}</a></li> {{/isMutedConversation}} {{#isMutedConversation}} <li class="is-selectable"><a href="#" data-action="unmuteConversation" class="txt-ellipsis">{{_i}}Unmute this conversation{{/i}}</a></li> {{/isMutedConversation}} {{/isTweetDetailAction}} {{/chirp}} <li class="is-selectable"><a href="#" data-action="block" class="txt-ellipsis">{{_i}}Block @{{screenName}}{{/i}}</a></li> {{#chirp}} <li class="is-selectable"><a href="#" data-action="report-tweet" class="txt-ellipsis">{{_i}}Report Tweet{{/i}}</a></li> {{/chirp}} {{^chirp}} <li class="is-selectable"><a href="#" class="txt-ellipsis" data-action="report-spam">{{_i}}Report @{{screenName}}{{/i}}</a></li> {{/chirp}} {{/isMe}} {{/user}} {{#chirp}} {{#isTranslatable}} <li class="drp-h-divider"></li> <li class="is-selectable"><a href="#" data-action="translate">{{_i}}Translate this Tweet{{/i}}</a></li> {{/isTranslatable}} {{#isRetweeted}} <li class="drp-h-divider"></li> <li class="is-selectable"><a href="#" data-action="undo-retweet">{{_i}}Undo Retweet{{/i}}</a></li> {{/isRetweeted}} {{#isOwnChirp}} {{^isRetweeted}} <li class="drp-h-divider"></li> <li class="is-selectable"><a href="#" data-action="destroy">{{_i}}Delete{{/i}}</a></li> {{/isRetweeted}} {{/isOwnChirp}} {{/chirp}} </ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<ul> {{#user}} {{> menus/follow_menuitem }} <li class="is-selectable"><a href="#" data-action="lists">{{_i}}Add or remove from Lists…{{/i}}</a></li> {{^isMe}} <li class="drp-h-divider"></li> {{^isMuted}} <li class="is-selectable"><a href="#" data-action="mute">{{_i}}Mute @{{screenName}}{{/i}}</a></li> {{/isMuted}} {{#isMuted}} <li class="is-selectable"><a href="#" data-action="unmute">{{_i}}Unmute @{{screenName}}{{/i}}</a></li> {{/isMuted}} <li class="is-selectable"><a href="#" data-action="block">{{_i}}Block @{{screenName}}{{/i}}</a></li> <li class="is-selectable"><a href="#" data-action="report-tweet">{{_i}}Flag message{{/i}}</a></li> {{/isMe}} {{/user}} {{#chirp}} <li class="drp-h-divider"></li> <li class="is-selectable"><a href="#" data-action="destroy">{{_i}}Delete{{/i}}</a></li> {{/chirp}} </ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-column-nav-list"> <ul class="js-int-scroller"> {{#columns}} <li class="js-column-nav-menu-item column-nav-item {{#isNew}}is-new{{/isNew}} {{#customTimelineId}}js-droptarget{{/customTimelineId}}" data-column="{{key}}" data-customtimeline-id="{{customTimelineId}}" data-customtimeline-account="{{customTimelineAccount}}" > <i class="icon icon-xsmall icon-dot column-nav-updates"></i> <a class="js-header-action js-drag-handle drag-handle link-clean cf padding-h--10 column-nav-link txt-size--16" data-action="jumpto" data-column="{{key}}"> <div class="obj-left"> <i class="icon {{iconclass}} icon-large position-rel" data-action="drag"> {{#isMessageColumn}} <span class="js-unread-count msg-unread-count numbered-badge bg-color-twitter-blue numbered-badge-onnav anim anim-slower {{#unreadCount}}is-visible{{/unreadCount}}">{{unreadCount}}</span> {{/isMessageColumn}} </i> </div> <div class="js-column-title nbfc hide-condensed">{{{title}}}</div> </a> </li> {{/columns}} </ul> <a class="js-header-action js-header-add-column link-clean cf app-nav-link padding-h--10 margin-tm with-nav-border-t" data-action="add-column" data-title="{{_i}}Add column{{/i}}"> <div class="obj-left margin-l--2"> <i class="icon icon-plus icon-medium"></i> </div> <div class="nbfc padding-ts hide-condensed txt-size--16 app-nav-link-text">{{_i}}Add column{{/i}}</div> </a> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<ul class="dropdown-text-large"> {{#isEmbeddable}} <li class="is-selectable"> <a href="#" data-action="embed"> <i class="icon icon-dropdown-context icon-share margin-rs"></i> {{_i}} {{>text/open_strong}}Embed{{>text/close_strong}} {{#isCustomTimeline}} Collection {{/isCustomTimeline}} {{^isCustomTimeline}} timeline {{/isCustomTimeline}} {{/i}} </a> </li> {{/isEmbeddable}} {{#isSearchColumn}} <li class="is-selectable"> <a href="#" data-action="copy-search-query"> <i class="icon icon-dropdown-context icon-share margin-rs"></i> {{_i}}{{>text/open_strong}}Copy{{>text/close_strong}} search query{{/i}} </a> </li> {{/isSearchColumn}} {{#isViewable}} <li class="is-selectable"> <a href="#" data-action="view-on-web"> <i class="icon icon-dropdown-context icon-twitter-bird margin-rs"></i> {{_i}}{{>text/open_strong}}View{{>text/close_strong}} on twitter.com{{/i}} </a> </li> {{/isViewable}} {{#isShareable}} <li class="is-selectable"> <a href="#" data-action="reference-to"> <i class="icon icon-dropdown-context icon-compose margin-rs"></i> {{_i}} {{>text/open_strong}}Tweet{{>text/close_strong}} about this {{#isCustomTimeline}} Collection {{/isCustomTimeline}} {{^isCustomTimeline}} timeline {{/isCustomTimeline}} {{/i}} </a> </li> {{/isShareable}} {{#canCreateMoment}} <li class="is-selectable"> <a href="#" data-action="moment"> <i class="icon icon-dropdown-context icon-lightning margin-rs"></i> {{_i}} {{>text/open_strong}}Create Moment{{>text/close_strong}} {{/i}} </a> </li> {{/canCreateMoment}} </ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div> <button type="button" class="btn Button--tertiary js-clear-date">Clear</button> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="search-input-control"> <input type="text" class="js-datetime-input txt-left width-p--100 bg-color-twitter-white" placeholder="{{placeHolderText}}" readonly /> <a href="#" class="js-select-date search-input-perform-search" tabindex="-1"> <i class="icon icon-calendar icon-small"></i> </a> <a href="#" class="js-clear-date search-input-clear-search" tabindex="-1"> <i class="icon icon-close icon-small"></i> </a> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<ul> <li class="is-selectable"><a href="#" data-action="view-people">{{_i}}Add / view people{{/i}}</a></li> {{#group}} <li class="is-selectable"><a href="#" data-action="rename-conversation">{{_i}}Edit group name{{/i}}</a></li> {{/group}} {{#loginAccount}} <li class="is-selectable"><a href="#" data-action="notify-conversation"> {{^notificationsDisabled}}{{_i}}Turn off notifications{{/i}}{{/notificationsDisabled}} {{#notificationsDisabled}}{{_i}}Turn on notifications{{/i}}{{/notificationsDisabled}} </a></li> {{/loginAccount}} <li class="is-selectable"><a href="#" data-action="leave-conversation">{{_i}}Leave{{/i}}</a></li> <li class="is-selectable"><a href="#" data-action="flag-conversation">{{_i}}Flag conversation{{/i}}</a></li> </ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-dropdown dropdown-menu br--6 bs-1 bg-color-twitter-white color-twitter-dark-black padding-v--9 {{position}}"> <div class="caret"> <span class="caret-outer"></span> <span class="caret-inner"></span> </div> <div class="js-dropdown-content"> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="txt-size--11 padding-b--10 flex flex-row"> <div class="flex-shrink--0 margin-r--6"> <i class="icon icon-info icon-small"/> </div> <div> {{_i}} Your notification settings on <a rel="url noopener noreferrer" target="_blank" href="https://twitter.com/settings/notifications_timeline">Twitter.com</a> may be affecting the mentions you see here {{/i}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = ""
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#isSingleAccount}} {{^isMe}} {{#following}} <li class="is-selectable"><a href="#" data-action="unfollow" class="txt-ellipsis">{{_i}}Unfollow @{{screenName}}{{/i}}</a></li> {{/following}} {{^following}} <li class="is-selectable"><a href="#" data-action="follow" class="txt-ellipsis">{{_i}}Follow @{{screenName}}{{/i}}</a></li> {{/following}} {{/isMe}} {{/isSingleAccount}} {{^isSingleAccount}} <li class="is-selectable"><a href="#" data-action="followOrUnfollow">{{_i}}Follow from accounts…{{/i}}</a></li> {{/isSingleAccount}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#filters.length}} <div class="txt-size--13 padding-b--5"> <div class="txt-bold padding-b--3">{{_i}}Hiding notifications from users:{{/i}}</div> <ul> {{#filters}} <li class="padding-b--3"> <i class="icon icon-check notifications-info-icon"/> {{text}} </li> {{/filters}} </ul> </div> <div class="txt-size--11 padding-b--12"> {{_i}}These filters will not affect notifications from people you follow.{{/i}} <a rel="url noopener noreferrer" target="_blank" href="https://twitter.com/settings/notifications_timeline"> {{_i}}Update your preferences on Twitter.com{{/i}} </a> </div> {{/filters.length}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="txt-size--11 padding-b--10 flex flex-row"> <div class="flex-shrink--0 margin-r--6"> <i class="icon icon-info icon-small"/> </div> <div> <div class="txt-size--13">Quality filter {{qualityFilterText}}</div> {{_i}}Improves the quality of Tweets you\'ll see.{{/i}} <a rel="url noopener noreferrer" target="_blank" href="https://twitter.com/settings/notifications_timeline"> {{_i}}Update your preferences on Twitter.com{{/i}} </a> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#action}} <div class="js-accordion-item facet-type facet-type-action {{#isExpanded}}is-expanded is-active{{/isExpanded}}"> {{>menus/accordion_header}} <div class="js-action-filter js-accordion-panel accordion-panel"> </div> </div> {{/action}} {{#content}} <div class="js-accordion-item facet-type facet-type-content {{#isExpanded}}is-expanded is-active{{/isExpanded}}"> {{>menus/accordion_header}} <div class="js-content-filter js-accordion-panel accordion-panel"> </div> </div> {{/content}} {{#location}} <div class="js-accordion-item facet-type facet-type-location {{#isExpanded}}is-expanded is-active{{/isExpanded}}"> {{>menus/accordion_header}} <div class="js-accordion-panel accordion-panel m-b--10"> <div class="js-location-filter" style="height: 270px"></div> </div> </div> {{/location}} {{#user}} <div class="js-accordion-item facet-type facet-type-user {{#isExpanded}}is-expanded is-active{{/isExpanded}}"> {{>menus/accordion_header}} <div class="js-user-filter js-accordion-panel accordion-panel"> </div> </div> {{/user}} {{#engagement}} <div class="js-accordion-item facet-type facet-type-engagement {{#isExpanded}}is-expanded is-active{{/isExpanded}}"> {{>menus/accordion_header}} <div class="js-engagement-filter js-accordion-panel accordion-panel"> </div> </div> {{/engagement}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-l--10 control-s"> <div class="control-group"> {{#available.showMentions}} <div class="controls margin-l--0 {{^available.showMentions}}is-hidden{{/available.showMentions}}"> <label class="txt-mute"> <input class="js-show-mentions" type="checkbox" value="mentions" {{#checked.showMentions}}checked="checked"{{/checked.showMentions}} /> <i class="icon icon-small-valigned icon-mention icon-mention-color"></i> {{_i}}Mentions{{/i}} </label> </div> {{/available.showMentions}} {{#available.showQuoted}} <div class="controls margin-l--0"> <label class="txt-mute"> <input class="js-show-quoted" type="checkbox" value="quoted" {{#checked.showQuoted}}checked="checked"{{/checked.showQuoted}} /> <i class="icon icon-small-valigned icon-content color-twitter-darker-gray"></i> {{_i}}Quoted Tweets{{/i}} </label> </div> {{/available.showQuoted}} {{#available.showRetweets}} <div class="controls margin-l--0"> <label class="txt-mute"> <input class="js-show-retweets" type="checkbox" value="retweets" {{#checked.showRetweets}}checked="checked"{{/checked.showRetweets}} /> <i class="icon icon-small-valigned icon-retweet-filled icon-retweet-color"></i> {{_i}}Retweets{{/i}} </label> </div> {{/available.showRetweets}} {{#available.showFavorites}} <div class="controls margin-l--0"> <label class="txt-mute"> <input class="js-show-favorites" type="checkbox" value="favorites" {{#checked.showFavorites}}checked="checked"{{/checked.showFavorites}} /> <i class="icon icon-small-valigned icon-heart-filled icon-favorite-color"></i> {{_i}}Likes{{/i}} </label> </div> {{/available.showFavorites}} {{#available.showFollowers}} <div class="controls margin-l--0"> <label class="txt-mute"> <input class="js-show-followers" type="checkbox" value="followers" {{#checked.showFollowers}}checked="checked"{{/checked.showFollowers}} /> <i class="icon icon-small-valigned icon-user-filled icon-follow-color"></i> {{_i}}Followers{{/i}} </label> </div> {{/available.showFollowers}} {{#available.showLists}} <div class="controls margin-l--0"> <label class="txt-mute"> <input class="js-show-lists" type="checkbox" value="lists" {{#checked.showLists}}checked="checked"{{/checked.showLists}} /> <i class="icon icon-small-valigned icon-list icon-list-color"></i> {{_i}}Lists{{/i}} </label> </div> {{/available.showLists}} {{#available.showActionsOnRetweets}} <div class="controls margin-l--0 padding-t--3"> <label class="txt-mute"> <input class="js-show-actions-on-retweets margin-r--1" type="checkbox" value="actionsOnRTs" {{#checked.showActionsOnRetweets}}checked="checked"{{/checked.showActionsOnRetweets}} /> <i class="icon icon-small-valigned icon-retweet-filled icon-retweet-color"></i> {{_i}}Actions on my Retweets{{/i}} </label> </div> {{/available.showActionsOnRetweets}} {{#available.showInteractionsOnMentioned}} <div class="controls margin-l--0 padding-t--3"> <label class="txt-mute"> <input class="js-show-interactions-on-mentioned margin-r--1" type="checkbox" value="actionsOnMentioned" {{#checked.showInteractionsOnMentioned}}checked="checked"{{/checked.showInteractionsOnMentioned}} /> <i class="icon icon-small-valigned icon-mention icon-mention-color"></i> {{_i}}Actions on Tweets I\'m mentioned in{{/i}} </label> </div> {{/available.showInteractionsOnMentioned}} {{#available.showInteractionsOnTagged}} <div class="controls margin-l--0 padding-t--3"> <label class="txt-mute"> <input class="js-show-interactions-on-tagged margin-r--1" type="checkbox" value="actionsOnTagged" {{#checked.showInteractionsOnTagged}}checked="checked"{{/checked.showInteractionsOnTagged}} /> <i class="icon icon-small-valigned icon-image icon-image-color"></i> {{_i}}Actions on Tweets I\'m tagged in{{/i}} </label> </div> {{/available.showInteractionsOnTagged}} </div> <div class="js-action-filter-error txt-center srt-error-msg margin-bm {{^showError}}is-hidden{{/showError}}"> {{_i}}Please select at least one interaction type{{/i}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-hl control-s"> <div class="control-group"> <label class="control-label txt-mute">{{_i}}Showing{{/i}}</label> <div class="controls"> <select class="js-containing" data-title="type"> {{#containingOptions}} {{^hidden}} <option value="{{value}}">{{title}}</option> {{/hidden}} {{/containingOptions}} </select> </div> </div> {{#withMatching}} <div class="control-group"> <label class="control-label txt-mute">{{_i}}Matching{{/i}}</label> {{>search_input}} </div> {{/withMatching}} {{#withExcluding}} <div class="control-group"> <label class="control-label txt-mute">{{_i}}Excluding{{/i}}</label> {{>search_input}} </div> {{/withExcluding}} {{#withDateTime}} <div class="js-datetime-filter" /> {{/withDateTime}} {{#withLanguage}} <div class="control-group"> <label class="control-label txt-mute">{{_i}}Written in{{/i}}</label> <div class="controls"> <select class="js-written-in" data-title="lang"> <option value="any" >{{_i}}any language{{/i}}</option> <option value="0" disabled="disabled">---</option> {{#userLanguage}} <option value="{{code}}">{{name}}</option> <option value="0" disabled="disabled">---</option> {{/userLanguage}} {{#allLanguages}} <option value="{{code}}">{{localized_name}} ({{name}})</option> {{/allLanguages}} </select> </div> </div> {{/withLanguage}} {{#withRetweetsToggle}} <div class="control-group"> <label class="control-label txt-mute">{{_i}}Retweets{{/i}}</label> <div class="controls"> <select class="js-retweets" data-title="includeRTs"> {{#retweetOptions}} <option value="{{value}}">{{title}}</option> {{/retweetOptions}} </select> </div> </div> {{/withRetweetsToggle}} <div class="js-quality-filter-info txt-mute-text-only"></div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="control-group"> <label class="control-label txt-mute">{{_i}}From{{/i}}</label> <div class="controls"> <div class="js-from-datepicker-holder search-input-control" /> </div> </div> <div class="control-group"> <label class="control-label txt-mute">{{_i}}To{{/i}}</label> <div class="controls"> <div class="js-to-datepicker-holder search-input-control" /> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-hl control-m"> <div class="control-group"> <label> <div class="control-label">{{_i}}At least{{/i}}</div> <div class="controls"> <input type="text" data-title="retweets" class="js-min-retweets frm-input-3-digit" value="{{minRetweets}}" inputmode="numeric" /> <i class="icon icon-small-valigned icon-retweet padding-h--2"></i> {{_i}}Retweets{{/i}} </div> </label> <label> <div class="control-label">{{_i}}at least{{/i}}</div> <div class="controls"> <input type="text" data-title="favorites" class="js-min-favorites frm-input-3-digit" value="{{minFavorites}}" inputmode="numeric" /> <i class="icon icon-small-valigned icon-favorite padding-h--2"></i> {{_i}}likes{{/i}} </div> </label> <label> <div class="control-label">{{_i}}and at least{{/i}}</div> <div class="controls"> <input type="text" data-title="replies" class="js-min-replies frm-input-3-digit" value="{{minReplies}}" inputmode="numeric" /> <i class="icon icon-small-valigned icon-reply padding-h--2"></i> {{_i}}replies{{/i}} </div> </label> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-hl control-s l-fullheight location-form"> <label class="txt-mute">{{_i}}Tweets geo-tagged near{{/i}} <span class="js-pretty-lat-lng">{{prettyLatLng}}</span></label> <input type="text" class="js-geo-search js-non-escapable-input geo-search padding-l--23" value="{{name}}" placeholder="Type in a location"> <i class="icon icon-translator icon-small bg-color-twitter-white color-twitter-gray"></i> <div class="js-typeahead-dropdown border-box typeahead-dropdown dropdown-menu bs-1 bg-color-twitter-white color-twitter-dark-black scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}} padding-v--0"> <ul class="js-typeahead-location-list is-hidden" data-identity="{{identity}}"></ul> </div> <div class="control-group map-group height-p--60 margin-v--10 padding-b--0"> <i class="icon txt-size--16 txt-line-height--16 color-twitter-dark-black icon-close pin-right br-100 margin-t--5 margin-r--16 z-index--2 is-actionable {{#hideMapClear}}is-hidden{{/hideMapClear}} js-clear-map padding-a--4"></i> <div id="mapbox-map-{{identity}}" class="js-map-location l-fullheight z-index--1 br-1"></div> </div> <div class="control-group radius-group"> <label class="control-label txt-mute">{{_i}}Radius{{/i}}</label> <div class="controls"> <select class="js-radius" data-title="radius"> {{#radiusOptions}} <option value="{{value}}" {{#selected}} selected {{/selected}}>{{title}}</option> {{/radiusOptions}} </select> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-hl control-s"> <div class="control-group"> <label class="control-label txt-mute">{{_i}}By{{/i}}</label> <div class="controls"> <select class="js-tweets-from" data-title="tweets_from"> {{#tweetsFromOptions}} <option value="{{value}}">{{title}}</option> {{/tweetsFromOptions}} </select> </div> <div class="controls"> {{#tweetsFromUser}} {{>search_input}} {{/tweetsFromUser}} {{#tweetsFromList}} {{>search_input}} {{/tweetsFromList}} <select class="js-tweets-from-me margin-txs" data-title="from_me"> {{#myAccounts}} <option value="{{value}}" {{#isDefault}}selected="selected"{{/isDefault}}>{{title}}</option> {{/myAccounts}} </select> </div> </div> <div class="control-group"> <label class="control-label txt-mute">{{_i}}Mentioning{{/i}}</label> <div class="controls"> <select class="js-mentioning" data-title="mentioning"> {{#mentioningOptions}} <option value="{{value}}">{{title}}</option> {{/mentioningOptions}} </select> </div> <div class="controls"> {{#mentioningUser}} {{>search_input}} {{/mentioningUser}} <select class="js-mentioning-me margin-txs" data-title="mentioning_me"> {{#myAccounts}} <option value="{{value}}" {{#isDefault}}selected="selected"{{/isDefault}}>{{title}}</option> {{/myAccounts}} </select> </div> </div> <div class="js-notification-filter-info txt-mute-text-only"></div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<ul> <li><b class="non-selectable-item txt-ellipsis"> @{{account}} </b></li> <li class="drp-h-divider"></li> {{^isTouchDevice}} <li class="is-selectable"> <a href="#" data-action="keyboardShortcutList">{{_i}}Keyboard shortcuts{{/i}}</a> </li> {{/isTouchDevice}} <li class="is-selectable"> <a href="#" data-action="searchOperatorList">{{_i}}Search tips{{/i}}</a> </li> <li class="is-selectable"> <a href="#" data-action="globalSettings">{{_i}}Settings{{/i}}</a> </li> {{#showUpdateAvailable}} <li class="drp-h-divider"></li> <li class="is-selectable margin-v---6"> <a href="#" data-action="updateAvailable" class="update-available-item padding-v--10"> {{_i}}Update TweetDeck{{/i}} </a> </li> {{/showUpdateAvailable}} {{#showDisableDogfood}} <li class="drp-h-divider"></li> <li class="is-selectable margin-v---6"> <a href="#" data-action="disableDogfood" class="update-available-item padding-v--10"> {{_i}}Disable dev/dogfood features{{/i}} </a> </li> {{/showDisableDogfood}} <li class="drp-h-divider"></li> <li class="is-selectable"> <a href="#" data-action="signOut">{{_i}}Log out{{/i}}</a> </li> </ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-dropdown-container scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}} scroll-alt column-scroller column-background-fill margin-bs height-p--100 br--6"> {{#users}} {{<stream_item}} {{$content}} {{> account_summary }} {{/content}} {{/stream_item}} {{/users}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-modal-panel mdl s-tall-fixed is-inverted-dark {{$modal_class}}{{/modal_class}} {{#loading}}is-loading{{/loading}}"> {{#loading}} <img src="{{#asset}}/web/assets/global/backgrounds/spinner_large_white.gif{{/asset}}" alt="{{_i}}Loading…{{/i}}" /> {{/loading}} {{^loading}} {{> modal_header}} <div class="mdl-inner"> <div class="mdl-content js-mdl-content {{^no_horiz_flow_container}}horizontal-flow-container{{/no_horiz_flow_container}}"> {{$content}}default content{{/content}} </div> <footer class="mdl-buttonbar"> {{$footer_content}}{{/footer_content}} </footer> </div> {{/loading}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-modal-context {{#withClickTrap}}js-click-trap{{/withClickTrap}} {{#withNonDismissible}}js-non-dismissible{{/withNonDismissible}} overlay overlay-super scroll-v"> <div class="js-modal-inner mdl margin-v--20 s-fluid"> {{#withHeader}} {{> modal/modal_context_header}} {{/withHeader}} {{#withDismissButton}} <a href="#" class="js-dismiss mdl-dismiss link-normal-dark"><i class="icon icon-close txt-size--18"></i></a> {{/withDismissButton}} <div class="js-modal-content modal-content {{#withBorder}}modal-content-with-border{{/withBorder}} position-rel is-inverted-dark"></div> {{#withFooter}} {{> modal/modal_context_footer}} {{/withFooter}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<footer class="padding-axl no-collapse {{#withCenteredFooter}}txt-center{{/withCenteredFooter}}"> {{#withDoneButton}} <button class="js-dismiss Button--primary"> <i class="icon icon-check icon-small padding-rs"></i> <span class="label">{{_i}}Done{{/i}}</span> </button> {{/withDoneButton}} </footer>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<header class="js-drag-handle padding-a--12 no-collapse mdl-header is-movable {{#withHeaderDivider}}mdl-header-divider{{/withHeaderDivider}}"> {{#title}} <h3 class="mdl-header-title">{{{title}}}</h3> {{/title}} </header>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<header class="js-drag-handle padding-a--12 no-collapse mdl-header is-movable mdl-header-divider"> <h3 class="mdl-header-title js-header-title">{{{title}}}</h3> <a href="#" class="mdl-dismiss js-dismiss link-normal-dark"><i class="{{$close_class}}icon icon-close{{/close_class}}"></i></a> </header>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<button class="Button--primary margin-al"> <i class="icon icon-plus icon-small-valigned"></i> <span class="label padding-ls">{{{buttonText}}}</span> </button>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="ticker-outer"> <span class="js-ticker-inner ticker-inner"> {{#values}}<span class="js-ticker-value">{{value}}</span><br>{{/values}} </span> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<button class="js-back btn btn-back">&larr; {{_i}}Back{{/i}}</button> <span class="pull-right"> <button class="js-add-column Button--primary"><i class="add"></i>{{_i}}Add column{{/i}}</button> </span>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<ul class="lst-launcher cf"> {{#options}} <li class="js-item-launch {{class}}{{#isDisabled}} is-disabled{{/isDisabled}}{{#isHidden}} is-hidden{{/isHidden}}" data-type="{{type}}"> <a href="#" class="btn{{#isDisabled}} js-show-tip is-disabled{{/isDisabled}}"{{#isDisabled}}title="{{_i}}You have already added this column{{/i}}"{{/isDisabled}}> <i class="block column-type-icon icon color-twitter-blue {{columnIconClass}}"></i> <span class="txt-size--14 with-linebreaks color-twitter-darker-gray txt-weight--500">{{title}}</span> {{#newColumnType}} <div class="margin-t--4"> <span class="bg-color-twitter-yellow color-twitter-white txt-size--9 txt-uppercase letter-spacing--1 padding-v--3 padding-h--7 br--14">{{_i}}New{{/i}}</span> </div> {{/newColumnType}} {{#premiumColumnType}} <div class="margin-t--4"> <span class="bg-color-twitter-deep-blue color-twitter-white txt-size--9 txt-uppercase letter-spacing--1 padding-v--3 padding-h--7 br--14">{{_i}}Beta{{/i}}</span> </div> {{/premiumColumnType}} {{#attribution}} <span class="txt-size--11 color-twitter-gray attribution block">{{attribution}}</span> {{/attribution}} </a> </li> {{/options}} </ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#isFilterable}} <input type="search" class="js-search-filter width-p--85 margin-b--8 margin-h--8 padding-v--0 padding-h--8" placeholder="{{_i}}Search{{/i}}" /> {{/isFilterable}} <p class="js-no-match padding-v--11 padding-h--12 txt-mute is-hidden">{{_i}}No{{/i}} {{itemType}} {{_i}}match that name{{/i}}</p> {{#title}}<h3 class="js-title {{#isHidden}}is-hidden{{/isHidden}}">{{title}}</h3>{{/title}} <ul class="js-list-container {{className}}"></ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="lst-group"> {{#groups}} {{>open_column_list_group}} {{/groups}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="lst-group"> {{>open_column_list_group}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-modal-panel mdl s-tall-fixed "> {{> modal_header}} <div class="mdl-inner"> <div class="mdl-content js-mdl-content"> </div> <footer class="mdl-buttonbar"> </footer> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="l-table"> <div class="l-cell mdl-placeholder txt-size--16"> <p>{{helpText}}</p> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="l-column mdl-column mdl-column-med"> <div class="js-left-pinned pin-top-full-width {{#hasAddMultipleUsersButton}}width-p--85{{/hasAddMultipleUsersButton}}"></div> {{#hasAddMultipleUsersButton}} <button class="js-add-multiple js-show-tip add-multiple btn Button--tertiary btn-round" data-title="Add multiple users"><i class="icon icon-small icon-user-team-mgr"></i></button> {{/hasAddMultipleUsersButton}} <div class="l-column-scrollv scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}} scroll-alt js-left-column"></div> <div class="js-left-pinned-bottom pin-bottom-full-width"></div> </div> <div class="l-column mdl-column mdl-column-med mdl-column-rhs"> <div class="js-right-column scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}} scroll-alt l-fullheight"></div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="overlay is-hidden"></div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-tooltip margin-b--5 padding-h--5"> {{#title}}<b class="txt-size--14 block padding-v--10 conversation-tooltip-title">{{{title}}}</b>{{/title}} {{#participants}} <p class="txt-left txt-ellipsis padding-v--3"> <b class="txt-size--14">{{{emojifiedName}}}</b> <span class="txt-size--13">@{{screenName}}</span> </p> {{/participants}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-popover popover br-1 bs-1 bg-color-twitter-white color-twitter-dark-black is-hidden is-inverted-dark"> <div class="caret"> <span class="caret-outer"></span> <span class="caret-inner"></span> </div> <div class="js-popover-content scroll-none"></div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="media-item profile-bg-strip" style="background-image: url({{profileBannerURL}})"></div> <div class="profile-full padding-hxl padding-bl"> <div class="profile-full-header cf pin-top"> <a class="prf-img profile-full-avatar obj-left link-clean" href="{{getProfileURL}}" target="_blank" data-user-name="{{screenName}}" rel="user"> <img src="{{biggerProfileImageURL}}" class="avatar size48 avatar-border--2"> </a> <div class="nbfc"> <div class="profile-follow-button"> {{>follow_button}} </div> </div> </div> <div class="{{#isBadged}}fullname-badged-container{{/isBadged}}"> <a href="{{getProfileURL}}" class="account-link link-complex" target="_blank" data-user-name="{{screenName}}" rel="user"> <b class="fullname txt-ellipsis inline-block link-complex-target {{#isBadged}}fullname-badged{{/isBadged}} {{#isTranslator}}badge-translator{{/isTranslator}} {{#isVerified}}badge-verified{{/isVerified}} position-rel txt-size-variable--18"> {{name}} </b></a> </div> <div class=" color-twitter-darker-gray"> <a href="{{getProfileURL}}" class="account-link link-complex" target="_blank" data-user-name="{{screenName}}" rel="user"> <span class="username txt-mute">@{{screenName}} {{#isProtected}}<i class="icon icon-protected icon-match-context icon-tt"></i>{{/isProtected}}</span> </a> </div> <p class="profile-bio padding-tm padding-bs">{{{bio}}}</p> <div class="padding-vm"> <a href="{{getFriendURL}}" rel="url" target="_blank" class="link-hover-override txt-uppercase txt-size-variable--12 txt-mute inline-block margin-rm" data-scribe-element="show_following">{{_i}}Following{{/i}}&nbsp;<b class="link-hover-target profile-full-bio-count">{{prettyFriendsCount}}</b></a> <a href="{{getFollowerURL}}" rel="url" target="_blank" class="link-hover-override txt-uppercase txt-size-variable--12 txt-mute inline-block" data-scribe-element="show_followers">{{_i}}Followers{{/i}}&nbsp;<b class="link-hover-target profile-full-bio-count">{{prettyFollowersCount}}</b></a> </div> {{#location}}<p class="profile-location txt-ellipsis padding-ts"><i class="profile-icon icon icon-small-valigned icon-geo icon-tt"></i>&nbsp;{{location}}</p>{{/location}} {{#getDisplayURL}}<p class="profile-url txt-ellipsis padding-ts"><i class="profile-icon icon icon-small-valigned icon-link icon-tt"></i>&nbsp;<a href="{{url}}" class="prf-siteurl js-action-url" target="_blank" data-scribe-element="website">{{getDisplayURL}}</a></p> <p class="js-show-tip profile-joined-date padding-ts inline-block" data-original-title="{{prettyTimeDateJoinedDate}}"><i class="profile-icon icon icon-small-valigned icon-schedule icon-tt" ></i>&nbsp;{{_i}}Joined{{/i}}&nbsp;{{prettyJoinedDate}}</p>{{/getDisplayURL}} <p class="profile-media padding-ts"><i class="profile-icon icon icon-small-valigned icon-camera icon-tt"></i>&nbsp;<a href="{{getMediaURL}}" rel="search" data-search-term="{{getMediaSearchQuery}}" data-scribe-element="user_media">{{_i}}Photos &amp; videos{{/i}}</a></p> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="prf-bio"> <p class="bio">{{{bio}}}</p> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="prf-meta cf"> <div class="prf-follow-state padding-al"> {{> follow_button}} </div> {{#profile}} <ul class="prf-stats"> <li> <a href="https://twitter.com/{{screenName}}" data-action="open" data-type="tweets" class="js-action-url" target="_blank"> {{_i}}Tweets{{/i}} <strong>{{prettyStatusesCount}}</strong> </a> </li> <li> <a href="{{getFriendURL}}" class="js-action-url" target="_blank"> {{_i}}Following{{/i}} <strong>{{prettyFriendsCount}}</strong> </a> </li> <li> <a href="{{getFollowerURL}}" class="js-action-url" target="_blank"> {{_i}}Followers{{/i}} <strong>{{prettyFollowersCount}}</strong> </a> </li> <li> <a href="{{getListedURL}}" class="js-action-url" target="_blank"> {{_i}}Listed{{/i}} <strong>{{prettyListedCount}}</strong> </a> </li> </ul> {{/profile}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<iframe class="report-flow" src="{{url}}"></iframe>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{^isFinished}} {{^isGroupConversation}} <p class="txt-size--16 color-twitter-deep-black padding-axl mdl-header-divider">{{_i}}Are you sure? The {{reportSource}} will be deleted from your inbox, and @{{screenName}} cannot message you until you message them first.{{/i}}</p> {{/isGroupConversation}} {{#isGroupConversation}} <p class="txt-size--16 color-twitter-deep-black padding-axl mdl-header-divider">{{_i}}Are you sure? The {{reportSource}} will be deleted from your inbox and you cannot be added to this group again.{{/i}}</p> {{/isGroupConversation}} <ul class="txt-size--14 txt-bold color-twitter-deep-black"> <li class="js-report-spam height--60 flex flex-align--center padding-axl mdl-header-divider border-box hover-bg-color-twitter-lightest-gray">{{_i}}Yes, it\'s spam{{/i}}</li> <li class="js-mark-abusive height--60 flex flex-align--center padding-axl mdl-header-divider border-box hover-bg-color-twitter-lightest-gray">{{_i}}Yes, it\'s abusive{{/i}}</li> </ul> {{>learn_more_about_reporting}} {{/isFinished}} {{#isFinished}} <p class="txt-size--16 color-twitter-deep-black padding-axl mdl-header-divider">{{_i}}The report has been sent and the {{reportSource}} has been deleted.{{/i}}</p> {{>learn_more_about_reporting}} {{/isFinished}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<fieldset> <legend>{{_i}}Report Tweet options{{/i}}</legend> <div class="padding-hl padding-tl"> <label class="radio margin-bl"> <input checked type="radio" name="report-options" value="spam" class="js-report-option"> <b class="txt-size--14">{{_i}}Spam{{/i}}</b> <p>{{_i}}This Tweet may be spam or from a spam account{{/i}}</p> </label> <label class="radio margin-bl"> <input type="radio" name="report-options" value="compromised" class="js-report-option"> <b class="txt-size--14">{{_i}}Compromised{{/i}}</b> <p>{{_i}}This user may not be in control of their account{{/i}}</p> </label> <label class="radio margin-bl"> <input type="radio" name="report-options" value="abusive" class="js-report-option"> <b class="txt-size--14">{{_i}}Abusive{{/i}}</b> <p>{{_i}}This Tweet may be in violation of the <a href="https://support.twitter.com/articles/18311-the-twitter-rules" target="_blank">Twitter Rules</a>. In order to file a report, you must still choose and complete a form. Select this option to continue.{{/i}}</p> </label> </div> <div class="divider-bar"></div> <div class="padding-hl"> <label class="checkbox"> <input type="checkbox" name="report-block" value="block" class="js-report-block"> <b class="txt-size--14">{{_i}}Block and unfollow{{/i}} @{{screenName}}</b> <p>Blocking will hide @{{screenName}} Tweets. Learn more about what <a href="https://support.twitter.com/articles/117063-blocking-people-on-twitter" target="_blank">blocking</a> means.</p> </label> </div> </fieldset> <div class="padding-vl padding-l--27"> <button class="js-report-submit Button--primary" disabled></i>{{_i}}Submit{{/i}}</button> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<p>{{_i}}Please choose the topic that best defines your issue. Once you complete and the submit the form your report will be filed with Twitter.{{/i}}</p> <ul class="margin-txl margin-lxl"> <li class="margin-bm"> <a href="https://support.twitter.com/forms/impersonation?reported_username={{screenName}}&amp;reported_tweet_id={{tweetId}}" target="_blank" data-scribe="impersonation" class="abuse-link">Impersonation</a> </li> <li class="margin-bm"> <a href="https://support.twitter.com/forms/trademark?reported_username={{screenName}}&amp;reported_tweet_id={{tweetId}}" target="_blank" data-scribe="trademarks" class="abuse-link">Trademarks</a> </li> <li class="margin-bm"> <a href="https://support.twitter.com/forms/abusiveuser?reported_username={{screenName}}&amp;reported_tweet_id={{tweetId}}" target="_blank" data-scribe="harassment" class="abuse-link">Harassment</a> </li> <li class="margin-bm"> <a href="https://support.twitter.com/forms/general?subtopic=self_harm&amp;reported_username={{screenName}}&amp;reported_tweet_id={{tweetId}}" target="_blank" data-scribe="report_self_harm" class="abuse-link">Report self harm</a> </li> <li class="margin-bm"> <a href="https://support.twitter.com/forms/ad?reported_username={{screenName}}&amp;reported_tweet_id={{tweetId}}" target="_blank" data-scribe="report_an_ad" class="abuse-link">Report an ad</a> </li> </ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="https://images.google.com/searchbyimage?image_url={{mediaPreviewSrc}}{{imageSrc}}" target="_blank" rel="url noopener noreferrer" class="js-show-tip reverse-image-search is-actionable {{#isMediaPreviewSmall}}media-size-small-reverse{{/isMediaPreviewSmall}}" title="Search image on Google"></a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="{{#showHint}}anim anim-fade-in{{/showHint}}{{^showHint}} is-hidden{{/showHint}}"> {{#showHint}}{{_i}}Your scheduled Tweet will send even if TweetDeck is not running at the time.{{/i}}{{/showHint}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '\x3c!-- app search --\x3e <form class="js-search-form app-search app-search-in-popover margin-a--10"> <label class="is-vishidden">{{_i}}Search{{/i}}</label> {{>search_input}} </form> \x3c!-- typeahead --\x3e {{>typeahead/typeahead_dropdown}} \x3c!-- search results --\x3e {{>search/search_results}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-search-results-container is-hidden height-vh--100"> <div class="js-user-results user-results"></div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-search-input-control search-input-control {{searchInputControlClass}} {{#isControl}}controls{{/isControl}}"> <input type="text" class="{{searchInputClassName}} search-input" data-title="{{searchInputTitle}}" placeholder="{{searchInputPlaceholder}}" value="{{searchInputValue}}"> <a href="#" class="js-perform-search txt-size--14 search-input-perform-search" tabindex="-1"> <i class="icon icon-search txt-size--16"></i> </a> <a href="#" class="js-clear-search txt-size--14 search-input-clear-search" tabindex="-1"> <i class="icon icon-close icon-small"></i> </a> <span class="js-spinner txt-size--14 spinner-small spinner-small-trans search-input-spinner"></span> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="list-placeholder l-table pin-all"> <div class="l-cell"> {{#isDropTarget}} <p class="txt-size--16"><i class="icon icon-move icon-tb"></i> <span>{{_i}}Drag Tweets into this Collection{{/i}}</span></p> {{/isDropTarget}} {{^isDropTarget}} <p class="txt-size--16">{{_i}}No recent Tweets.{{/i}}<br />{{_i}}New Tweets will appear here.{{/i}}</p> {{/isDropTarget}} </div> {{#withAddByUrl}} <p class="pin-bottom-full-width txt-center">{{_i}}Or add by URL{{/i}}</p> {{/withAddByUrl}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="list-placeholder"> <p>{{_i}}No users found.{{/i}}</p> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="bg-color-twitter-white color-twitter-dark-gray padding-v--20"> <table class="search-operator-list l-table"> <thead> <tr> <th class="{{tblLeftItemClass}}">{{_i}}Operator{{/i}}</th> <th class="{{tblRightItemClass}}">{{_i}}Find Tweets...{{/i}}</th> </tr> </thead> <tbody> {{#searchOperators}} {{>search_operator_list_item_group}} {{/searchOperators}} </tbody> </table> <div> {{#advancedSearches}} <div> <h4 class="{{sectionHeaderClass}}">{{sectionTitle}}</h4> <p class="{{advancedSearchContentClass}} txt-italic">{{sectionExplanation}}</p> {{#sectionExamples}} <p class="{{advancedSearchContentClass}} padding-t--20 txt-italic">{{example}}</p> <div class="{{advancedSearchContentClass}} query hover-bg-color-twitter-faint-blue flex flex-row flex-align--center"> <p class="inline-block flex-auto">{{query}}</p> {{>try_search_query_button}} </div> {{/sectionExamples}} </div> {{/advancedSearches}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<tr class="hover-bg-color-twitter-faint-blue txt-size--12"> <td class="{{tblLeftItemClass}}">{{query}}</td> <td class="{{tblRightItemClass}} query flex flex-row flex-align--center"> <p class="inline-block flex-auto">{{description}}</p> {{>try_search_query_button}} </td> </tr>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#sectionTitle}} <tr> <th colspan="2" class="{{sectionHeaderClass}}">{{sectionTitle}}</th> </tr> {{#sectionOperators}} {{>search_operator_list_item}} {{/sectionOperators}} {{/sectionTitle}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-accounts-column-holder is-inverted-dark column-holder txt-size--14"> <div class="js-account-manager-container column-panel border-box bg-color-twitter-lightest-gray flex flex-column"> <header class="drawer-header padding-lxl flex-shrink--0"> <h1 class="column-title"> <span class="drawer-header-title block drawer-column-header-title">{{_i}}Accounts{{/i}}</span> </h1> <a class="js-drawer-close column-close-link color-twitter-darker-gray" href="#" data-action="options"> <i class="icon icon-close icon-center-24"></i> </a> </header> <div class="js-account-settings-scroll-container scroll-v margin-b---1"> <div class="accordion is-active"> <div class="js-account-settings-login-account is-active"></div> <div class="js-invitations-panel"></div> <div class="js-account-settings-team-info padding-v--12 txt-size--13 color-twitter-darker-gray txt-bold padding-hxl position-rel account-row-separator-b is-hidden"> {{_i}}Accounts you can act as{{/i}} </div> <div class="js-account-settings-accounts bg-color-twitter-white"></div> </div> <div class="js-account-invited-accounts"></div> {{#decider.add_account}} <div class="join-team margin-t--10 width-p--100 bg-color-twitter-white"> {{>settings/account_settings_join_team}} </div> {{/decider.add_account}} </div> </div> <div class="js-contributor-manager-container column-panel border-box bg-color-twitter-lightest-gray flex flex-column"></div> <div class="js-team-invitations-container column-panel border-box bg-color-twitter-lightest-gray"> <div class="drawer-header padding-lxl"> <h1 class="js-team-invitations-back is-actionable pull-left txt-weight-normal"> <span class="drawer-header-title block drawer-column-header-title"> <i class="icon icon-arrow-l icon-tt"></i> {{_i}}Team invitations{{/i}} </span> </h1> <a class="js-drawer-close column-close-link color-twitter-darker-gray" href="#"> <i class="icon icon-close icon-center-24"></i> </a> </div> <div class="js-team-invitations team-invitations drawer-content pin-all scroll-v"></div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#requireConsent}} <div data-testid="gdprConsentMessage" class="border-a--2 br--4 border-color-twitter-blue color-twitter-deep-black padding-a--15 txt-size--12"> <h2 class="color-twitter-blue txt-size--14 txt-bold">{{_i}}Updates to the Twitter Terms of Service and Privacy Policy{{/i}}</h2> <p class="nbfc txt-size--13 padding-tm"> {{_i}}Twitter is updating its{{/i}} <a href="https://twitter.com/tos#new" target="_blank"> {{_i}}Terms{{/i}} </a> {{_i}}and{{/i}} <a href="https://twitter.com/privacy" target="_blank">{{_i}}Privacy Policy{{/i}}</a>. {{_i}}To continue contributing to this team account in TweetDeck, you or the team account’s owner need to visit Twitter’s website and agree to the updated Terms and Privacy Policy.{{/i}} </p> <p class="nbfc txt-size--13 padding-tm"> {{_i}}For more information, visit the{{/i}} <a href="https://help.twitter.com/rules-and-policies/update-privacy-policy" target="_blank">{{_i}}Help Center{{/i}}</a>. </p> </div> {{/requireConsent}} {{#withManageTeam}} <div class="js-manage-team-disabled txt-size-variable--16 color-twitter-darker-gray margin-vm cf"> <div class="obj-left"> <i class="icon icon-small icon-user-team-mgr pull-right"></i> </div> <div class="nbfc"> <p class="nbfc txt-size--13 padding-txs">{{_i}}Team @{{screenName}}{{/i}}</p> <p class="nbfc txt-size--13 padding-ts"> {{_i}}You\'re on the team! Only admins of this account can manage the team.{{/i}} <a href="https://support.twitter.com/articles/20171753-using-team-accounts-on-tweetdeck" target="_blank" rel="url">{{_i}}Learn more{{/i}}</a>. </p> </div> <div class="margin-l--23 margin-t--5"> {{>settings/account_settings_remove_account}} </div> </div> <div class="js-manage-team link-complex txt-size-variable--16 margin-vm cf is-hidden"> <div class="obj-left"> <i class="icon icon-small icon-user-team-mgr pull-right"></i> </div> <div class="nbfc"> <p class="nbfc txt-size--13 padding-txs">{{_i}}Team @{{screenName}}{{/i}}</p> <p class="nbfc color-twitter-darker-gray txt-size--13 padding-ts"> {{_i}}Invite colleagues to use Twitter as @{{screenName}} without sharing the password with them.{{/i}} </p> </div> <div class="margin-l--23 margin-t--5"> <button href="#" class="btn btn-primary js-account-action txt-size--12" data-action="manageContributors" data-account-key="{{accountKey}}">{{_i}}Manage team{{/i}}</button> {{>settings/account_settings_remove_account}} </div> </div> {{/withManageTeam}} <a class="js-account-action link-complex txt-size-variable--16 margin-vm cf" href="#" data-action="setAccountSafeguard" data-account-key="{{accountKey}}"> <div class="obj-left"> <i class="icon icon-small icon-toggle-{{#isSafeguarded}}on{{/isSafeguarded}}{{^isSafeguarded}}off{{/isSafeguarded}} pull-right color-twitter-blue js-account-safeguard-switch" id="account-safeguard-{{accountKey}}"></i> </div> <div class="nbfc"> <p class="nbfc link-complex-target txt-size--13 padding-txs link-complex-target">{{_i}}Confirmation step{{/i}}</p> <p class="nbfc color-twitter-darker-gray txt-size--13 padding-ts">{{_i}}Add a confirmation step before Tweeting as{{/i}} @{{screenName}}</p> </div> </a> {{#isDefault}} <div class="txt-size-variable--16 margin-vm cf"> <div class="obj-left"> <i class="icon icon-small icon-toggle-on pull-right color-twitter-blue"></i> </div> <div class="nbfc padding-t--4"> <p class="nbfc txt-size--13">{{_i}}Default account{{/i}}</p> <p class="nbfc color-twitter-darker-gray txt-size--13 padding-ts">{{_i}}@{{screenName}} is your default account for new Tweets and searches{{/i}}</p> </div> </div> {{/isDefault}} {{^isDefault}} <a class="js-account-action link-complex txt-size-variable--16 margin-vm cf" href="#" data-action="setDefault" data-account-key="{{accountKey}}"> <div class="obj-left"> <i class="icon icon-small icon-toggle-{{#isDefault}}on{{/isDefault}}{{^isDefault}}off{{/isDefault}} pull-right color-twitter-blue"></i> </div> <div class="nbfc padding-t--4"> <p class="nbfc link-complex-target txt-size--13 link-complex-target">{{_i}}Default account{{/i}}</p> <p class="nbfc color-twitter-darker-gray txt-size--13 padding-ts">{{_i}}Set @{{screenName}} as your default account for new Tweets and searches{{/i}}</p> </div> </a> {{/isDefault}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="#" class="js-log-in-account txt-size--13 padding-hxl txt-line-height--40">{{_i}}Link another account you own{{/i}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-accordion-item js-account-settings-row js-account-settings-summary account-settings-row bg-color-twitter-white {{#isSoleAccount}}is-expanded{{/isSoleAccount}}" data-account-key="{{accountKey}}" data-user-id="{{userId}}"> <div class="js-account-profile-header account-profile-header"></div> <div class="padding-h--16 padding-b--16 margin-t---24 account-settings-bb hyphenate"> <div class="flex flex-row"> <a href="{{getProfileURL}}" class="txt-size--0 " rel="user" target="_blank"> <img class="avatar size64 avatar-border--2" src="{{profileImageURL}}" width="64" height="64" alt="{{screenName}}\'s avatar"> </a> <a href="{{getProfileURL}}" class="link-complex margin-t--16 margin-l--10" rel="user" target="_blank"> <div class="margin-t--14"> <span class="txt-size--16 color-twitter-dark-black txt-bold"> <span class="link-complex-target">{{{emojifiedName}}}</span> {{#isProtected}}<i class="icon icon-protected icon-match-context icon-tt"></i>{{/isProtected}} {{#isVerified}}<i class="sprite sprite-verified"></i>{{/isVerified}} {{#isTranslator}}<i class="sprite sprite-translator"></i>{{/isTranslator}} </span> <span class="txt-size--14 color-twitter-dark-gray block"> @{{screenName}} </span> </div> </a> </div> <div class="js-accordion-panel padding-a--0 margin-t--10"> {{>settings/account_settings_detail}} </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#isRemovable}} <button {{#notRemovable}}title="{{notRemovableMessage}}"{{/notRemovable}} class="js-account-action js-show-tip btn Button--tertiary txt-size--12{{#notRemovable}} is-disabled{{/notRemovable}}" data-action="removeCheck" data-account-key="{{accountKey}}"> <span class="label">{{_i}}Leave team{{/i}}</span> </button> <div class="js-account-remove-check account-remove-check cf margin-tm padding-axl bg-color-twitter-lightest-gray br--4 padding-l--20 margin-l---20"> <div class="account-remove-check-message padding-bxl color-twitter-darker-gray txt-size--13"> Leave this team? You will no longer have access to the @{{screenName}} account. </div> <button class="js-account-action Button--danger pull-left" data-action="remove" data-account-key="{{accountKey}}"> <span class="label">{{_i}}Leave{{/i}}</span> </button> <button class="js-account-action cf btn pull-left margin-hm" data-action="removeCancel" data-account-key="{{accountKey}}"> {{_i}}Cancel{{/i}} </button> </div> {{/isRemovable}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div data-testid="accountRow" class="js-accordion-item js-account-settings-row padding-vxl cf account-row-separator-b account-settings-row position-rel" data-account-key="{{accountKey}}" data-user-id="{{userId}}"> <div data-testid="accountSummary" class="js-accordion-toggle-view position-rel padding-hxl is-actionable flex flex-row flex-align--center"> <div class="js-account-settings-summary nbfc flex-auto margin-r--3"> {{>account_settings_account_summary}} </div> {{#requireConsent}} <div data-testid="requireConsentBadgeContainer" class="js-consent-badge flex-shrink--0 margin-l--7"> <div data-testid="requireConsentBadge" class="color-twitter-white bg-color-twitter-blue br-100 min-width--10 height--10 txt-bold txt-center txt-size--10 txt-line-height--10 padding-a--4">1</div> </div> {{/requireConsent}} <div class="flex-shrink--0 margin-l--7"> <i class="icon icon-small icon-arrow-u color-twitter-dark-gray"></i> <i class="icon icon-small icon-arrow-d color-twitter-dark-gray"></i> </div> </div> <div class="js-accordion-panel accordion-panel padding-an"> <div class="padding-tm padding-hxl"> {{>settings/account_settings_detail}} </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<fieldset id="global_filter_settings"> <legend class="frm-legend">{{_i}}Mute Settings{{/i}}</legend> <div class="control-group"> <label for="filter-types" class="control-label">{{_i}}Mute{{/i}}</label> <div class="controls"> <select name="filter" class="js-filter-types"> <option value="phrase">{{_i}}Words or phrases{{/i}}</option> <option value="source">{{_i}}Tweet Source{{/i}}</option> </select> </div> </div> <div class="control-group"> <label for="filter-input" class="control-label">{{_i}}Matching{{/i}}</label> <div class="controls"> <input class="js-filter-input" name="filter-input" size="30" type="text" placeholder="{{placeholderText}}"> </div> </div> <div class="control-group"> <div class="controls js-add-filter-container"></div> </div> <div class="js-filter-list"></div> <div class="divider-bar"></div> <div class="txt-size--12"> <i class="icon icon-info icon-large obj-left color-twitter-gray"></i> <p class="nbfc margin-t--2"> {{_i}}User mutes work across TweetDeck & Twitter. To review your list of user mutes visit <a href="https://twitter.com/settings/muted" target="_blank" rel="url">twitter.com/settings/muted</a>.{{/i}} </p> </div> </fieldset>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<button name="add-filter" class="js-add-filter" {{^addFilterButtonEnabled}}disabled{{/addFilterButtonEnabled}}>{{_i}}Mute{{/i}}</button>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<ul class="min-height--90"> {{#filters}} {{>settings/global_setting_filter_row}} {{/filters}} </ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<li class="list-filter cf"> {{_i}}Muting {{getDisplayType}} {{>text/global_filter_value}}{{/i}} <input type="button" name="remove-filter" value="{{_i}}Remove{{/i}}" data-id="{{id}}" class="js-remove-filter small Button--danger"> </li>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<fieldset id="general_settings"> <legend>{{_i}}General Settings{{/i}}</legend> <div class="control-group"> <div> <i class="js-streaming-updates icon icon-small icon-toggle-off color-twitter-blue js-toggle-switch is-actionable align-top" id="streaming-updates"></i> <span class="margin-l--4">{{_i}}Stream Tweets in realtime{{/i}}</span> </div> <div> <i class="js-show-startup-notifications icon icon-small icon-toggle-off color-twitter-blue js-toggle-switch is-actionable align-top" id="show-startup-notifications"></i> <span class="margin-l--4">{{_i}}Show notifications on startup{{/i}}</span> </div> <div> <i class="js-display-sensitive-media icon icon-small icon-toggle-off color-twitter-blue js-toggle-switch is-actionable align-top" id="display-sensitive-media"></i> <span class="margin-l--4">{{_i}}Display media that may contain sensitive content{{/i}}</span> </div> <div> <i class="js-auto-play-gifs icon icon-small icon-toggle-off color-twitter-blue js-toggle-switch is-actionable align-top" id="auto-play-gifs"></i> <span class="margin-l--4">{{_i}}Autoplay GIFs{{/i}}</span> </div> <div class="divider-bar"></div> <div class="cf"> <div class="obj-left js-theme"> <label class="fixed-width-label txt-uppercase touch-larger-label"><b>{{_i}}Theme{{/i}}</b></label> <label class="fixed-width-label radio"> <input type="radio" class="js-settings-radio js-theme-radio touch-larger-label" name="theme" value="dark"> {{_i}}Dark{{/i}} </label> <label class="fixed-width-label radio"> <input type="radio" class="js-settings-radio js-theme-radio touch-larger-label" name="theme" value="light"> {{_i}}Light{{/i}} </label> </div> <div class="obj-left js-column-size"> <label class="fixed-width-label txt-uppercase touch-larger-label"><b>{{_i}}Columns{{/i}}</b></label> <label class="fixed-width-label radio"> <input type="radio" class="js-settings-radio js-column-size-radio touch-larger-label" name="column-size" value="narrow"> {{_i}}Narrow{{/i}} </label> <label class="fixed-width-label radio"> <input type="radio" class="js-settings-radio js-column-size-radio touch-larger-label" name="column-size" value="medium"> {{_i}}Medium{{/i}} </label> <label class="fixed-width-label radio"> <input type="radio" class="js-settings-radio js-column-size-radio touch-larger-label" name="column-size" value="wide"> {{_i}}Wide{{/i}} </label> </div> <div class="obj-left js-font-size"> <label class="fixed-width-label txt-uppercase touch-larger-label"><b>{{_i}}Font size{{/i}}</b></label> <label class="txt-size--12 fixed-width-label radio"> <input type="radio" class="js-settings-radio js-font-size-radio" name="font-size" value="smallest"> {{_i}}Smallest{{/i}} </label> <label class="txt-size--13 fixed-width-label radio"> <input type="radio" class="js-settings-radio js-font-size-radio" name="font-size" value="small"> {{_i}}Small{{/i}} </label> <label class="txt-size--14 fixed-width-label radio"> <input type="radio" class="js-settings-radio js-font-size-radio" name="font-size" value="medium"> {{_i}}Medium{{/i}} </label> <label class="txt-size--15 fixed-width-label radio"> <input type="radio" class="js-settings-radio js-font-size-radio" name="font-size" value="large"> {{_i}}Large{{/i}} </label> <label class="txt-size--16 fixed-width-label radio"> <input type="radio" class="js-settings-radio js-font-size-radio" name="font-size" value="largest"> {{_i}}Largest{{/i}} </label> </div> </div> </div> <div class="mdl-links"> {{> app_links}} </div> </fieldset>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '\x3c!-- Services --\x3e <fieldset id="services_settings" > <legend>{{_i}}Services Settings{{/i}}</legend> <div id="streaming-form" class="control-group"> <label for="link-shortening" class="control-label">{{_i}}Link Shortening{{/i}}</label> <div class="controls"> <select name="link-shortening" class="js-link-shortening"> <option value="twitter">Twitter</option> <option value="bitly">Bit.ly</option> </select> </div> </div> <div id="bitly-form" class="js-bitly-form"></div> </fieldset>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="l-column mdl-column mdl-column-sml"> <div class="l-column-scrollv scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}} scroll-alt bg-color-twitter-lightest-gray"> <ul class="lst-group js-setting-list"> {{#tabs}} {{> list_module_list_item}} {{/tabs}} </ul> </div> </div> <div class="l-column mdl-column mdl-column-lrg"> <div class="l-column-scrollv scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}} scroll-alt mdl-col-settings"> <form action="#" id="global-settings" accept-charset="utf-8" class="js-global-settings frm"></form> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#showInvitationPanel}} <div class="js-account-action js-account-settings-team-invitations padding-hxl padding-v--12 txt-size--13 color-twitter-darker-gray txt-bold position-rel account-row-separator-b flex flex-row flex-align--center is-actionable" data-action="showInvitations"> <span class="flex-grow--1">{{_i}}Team invitations{{/i}}</span> <div class="account-invitation-badge-container"> <span class="js-invitation-count numbered-badge bg-color-twitter-blue numbered-badge-account-invites" data-count={{invitationCount}}>{{invitationCount}} </span> </div> <i class="icon icon-arrow-r icon-small-valigned padding-l--5 padding-b--2"></i> </div> {{/showInvitationPanel}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="control-group"> <label for="bitly-email" class="control-label">{{_i}}Bit.ly Username{{/i}}</label> <div class="controls"> <input id="bitly-email" class="js-bitly-email" name="bitly-email" size="30" type="text" value="{{#bitlyAccount}}{{login}}{{/bitlyAccount}}"> </div> </div> <div class="control-group"> <label for="bitly-key" class="control-label">{{_i}}Bit.ly API Key{{/i}}</label> <div class="controls"> <input id="bitly-key" class="js-bitly-key" name="bitly-key" size="40" type="text" value="{{#bitlyAccount}}{{apiKey}}{{/bitlyAccount}}"> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-modal-panel mdl s-short is-inverted-dark"> {{> modal_header}} <div class="mdl-inner{{#modalClasses}} {{{modalClasses}}}{{/modalClasses}}"> <div class="mdl-content js-mdl-content horizontal-flow-container"> {{{content}}} </div> <footer class="{{^centeredFooter}}mdl-buttonbar{{/centeredFooter}}{{#centeredFooter}}padding-vxl txt-center{{/centeredFooter}}"> {{#hasDoneButton}} <button class="js-dismiss Button--primary pull-right"> <span class="label">{{_i}}Done{{/i}}</span> </button> {{/hasDoneButton}} </footer> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="disp-table"> <div class="disp-cell"> <div class="spinner"></div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-infinitespinner spinner-large"></div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="{{spinnerClasses}}"> <img src="{{#asset}}/web/assets/global/backgrounds/spinner_large_white.gif{{/asset}}" alt="{{_i}}Loading…{{/i}}"/> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="release-notes-header nbfc"> <img class="release-notes-image pull-left" src="{{#asset}}/web/assets/logos/64.png{{/asset}}" alt="{{_i}}TweetDeck logo{{/i}}"> <h1 class="release-notes-header-title">{{_i}}Welcome to TweetDeck{{/i}}</h1> </div> <div class="release-notes"> <div class="release-notes-section nbfc"> <img class="release-notes-image-bullet pull-left" src="{{#asset}}/web/assets/global/backgrounds/td_whatsnew_01.png{{/asset}}" alt="{{_i}}Create Collections{{/i}}"> <h2>{{_i}}Create a custom Twitter experience{{/i}}</h2> <p>{{_i}}Organize and build Collections, keep track of Lists, searches, activity and more. Click the + in the sidebar.{{/i}}</p> </div> <div class="release-notes-section nbfc"> <img class="release-notes-image-bullet pull-left" src="{{#asset}}/web/assets/global/backgrounds/td_whatsnew_02.png{{/asset}}" alt="{{_i}}Create filters{{/i}}"> <h2>{{_i}}Find exactly what you&rsquo;re looking for{{/i}}</h2> <p>{{_i}}Create searches to track topics, events and hashtags. Refine the results with filters at the top of each timeline.{{/i}}</p> </div> <div class="release-notes-section margin-bn nbfc"> <img class="release-notes-image-bullet pull-left" src="{{#asset}}/web/assets/global/backgrounds/td_whatsnew_03.png{{/asset}}" alt="{{_i}}Multiple accounts{{/i}}"> <h2>{{_i}}Manage multiple accounts{{/i}}</h2> <p>{{_i}}Tweet, monitor and follow new accounts from all &mdash; or just one of your accounts. Add another account in <a href="#" data-action="openSettings"><i class="icon icon-user-switch icon-bot"></i> Accounts</a>.{{/i}}</p> </div> </div> <button class="js-done Button--primary obj-center margin-tl"><i class="add"></i>{{_i}}Get started{{/i}}</button>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="startflow-background pin-all anim anim-slower anim-fade-in"></div> <div class="js-startflow-chrome app-masthead anim anim-slow anim-delayed anim-fade-in {{#withLoading}}is-hidden{{/withLoading}}"> <div class="app-signin-wrap"> <i class="sprite sprite-logo"></i> </div> </div> <div class="js-startflow-content startflow anim anim-slow anim-fade-in"> {{$content}}{{/content}} </div> <div class="js-startflow-chrome txt-center privacy-info pin-bottom-full-width padding-v--6 anim anim-slow anim-delayed anim-fade-in {{#withLoading}}is-hidden{{/withLoading}}"> <p> {{> app_links}} </p> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<p class="txt-italic txt-size-variable--12 txt-mute"><i class="icon icon-image txt-size-variable--12 align-top"></i> {{_i}}Image attached{{/i}}</p>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<p class="txt-ellipsis txt-size-variable--12">{{_i}}{{getLightChirpURL}}{{/i}}</p>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{<stream_item}} {{$stream_item_classes}}is-actionable {{#unread}}is-unread {{/unread}} {{/stream_item_classes}} {{$stream_item_content_classes}}js-show-detail {{/stream_item_content_classes}} {{$stream_item_data}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" {{/stream_item_data}} {{$content}} <div class="tweet tweet-message js-chirp"> <header class="tweet-header"> {{>status/conversation_timestamp}} {{#hasValidParticipant}} <div class="js-conversation-header"> {{> status/conversation_header }} </div> {{/hasValidParticipant}} </header> <div class="l-table"> <div class="l-cell"> <div class="l-table"> <div class="l-cell tweet-body align-top full-width"> {{#showSenderName}} {{#sender}} <p class="tweet-text txt-mute">{{{sender.emojifiedName}}}: </p> {{/sender}} {{/showSenderName}} {{#htmlText}} <p class="js-tweet-text tweet-text with-linebreaks">{{{htmlText}}}</p> {{/htmlText}} {{#previewText}} <p class="js-tweet-text tweet-text">{{{previewText}}}</p> {{/previewText}} {{#attachmentOnly}} {{>status/attachment_image}} {{/attachmentOnly}} {{#decider.tweet_hide_suffix}} {{#hasQuotedTweet}} {{>status/attachment_tweet}} {{/hasQuotedTweet}} {{/decider.tweet_hide_suffix}} </div> {{#hasMedia}} <div class="l-cell align-top padding-t--3 padding-r--8"> {{#getMedia}} <div class="tweet-message-attachment position-rel"> <div class="js-media-image-link media-item {{#isPossiblySensitive}}is-invisible{{/isPossiblySensitive}} {{#needsSecureUrl}}js-needs-secure-url{{/needsSecureUrl}} is-zoomable" {{#needsSecureUrl}}data-original-url="{{mediaPreviewSrc}}{{imageSrc}}"{{/needsSecureUrl}} {{^needsSecureUrl}}{{^imageSrc}}style="background-image:url({{mediaPreviewSrc}})"{{/imageSrc}}{{/needsSecureUrl}}> </div> </div> {{/getMedia}} </div> {{/hasMedia}} </div> </div> <div class="pull-right txt-right"> <i class="icon {{#replied}}icon-reply{{/replied}} txt-mute txt-size--14"></i> </div> </div> </div> {{/content}} {{/stream_item}} {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-stream-item js-cursor-top conversation-more stream-item is-actionable txt-link padding-v--10"> {{_i}}Show more{{/i}} </div> <div class="thread cursor-top-thread"></div> <div class="thread dot-thread dot-thread-top"></div> <div class="thread dot-thread dot-thread-top middle"></div> <div class="thread dot-thread dot-thread-top top"></div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{<stream_item}} {{$stream_item_classes}}conversation-event txt-mute padding-h--10{{/stream_item_classes}} {{$content}} {{#failedParticipants}} {{#participant}} <a href="{{profileURL}}" rel="user" target="_blank">{{name}}</a> {{/participant}} {{^isLastItem}}and{{/isLastItem}} {{/failedParticipants}} {{_i}}could not be added{{/i}} {{/content}} {{/stream_item}} {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<span class="txt-mute"> {{_i}}Some users could not be added.{{/i}} </span>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="account-link"> <div class="obj-left item-img tweet-img"> {{^withMultipleAvatars}} {{#avatars.0}} <a class="account-inline account-link txt-ellipsis link-complex" rel="user" href="{{profileURL}}"> <img class="tweet-avatar avatar pull-right" src="{{profileImageURL}}" alt="{{screenName}}\'s avatar"> </a> {{/avatars.0}} {{/withMultipleAvatars}} {{#withMultipleAvatars}} <div class="tweet-avatar media-grid-container multiple-avatar-grid"> <div class="{{avatarsClass}}"> {{#avatars}} <div class="media-image-container media-image-container-compact"> <div class="media-image block position-rel" style="background-image: url({{profileImageURL}});" ></div> </div> {{/avatars}} </div> </div> {{/withMultipleAvatars}} </div> <div class="nbfc"> {{#getConversationTitleInformation}} {{#name}} <b class="inline-block txt-ellipsis">{{{name}}}</b> {{/name}} {{^name}} {{#isOneToOne}} {{#participants.0}} <a class="account-inline account-link txt-ellipsis link-complex" rel="user" href="{{profileURL}}"> <b class="link-complex-target">{{{emojifiedName}}}</b> <span class="attribution username txt-mute txt-size-variable--12">@{{screenName}}</span> </a> {{/participants.0}} {{/isOneToOne}} {{#isThreeway}} <span class="account-inline txt-ellipsis"> {{#participants.0}} <a class="account-link" rel="user" href="{{profileURL}}"><b>{{{emojifiedName}}}</b></a><b>, </b> {{/participants.0}} {{#participants.1}} <a class="account-link" rel="user" href="{{profileURL}}"><b>{{{emojifiedName}}}</b></a> {{/participants.1}} </span> {{/isThreeway}} {{#isOneToMany}} {{#participants.0}} <div class="conversation-title-container"> <span class="conversation-title txt-ellipsis inline-block position-rel"><a class="txt-ellipsis account-link" rel="user" href="{{profileURL}}"><b>{{{emojifiedName}}}</b></a> <b>+ {{numberOfOtherParticipants}}</b> </span> </div> {{/participants.0}} {{/isOneToMany}} {{/name}} {{/getConversationTitleInformation}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{<stream_item}} {{$stream_item_classes}}conversation-event txt-mute padding-h--10{{/stream_item_classes}} {{$stream_item_data}} data-key="{{conversation.id}}" {{/stream_item_data}} {{$content}} <p class="margin-b--5"> {{#getParticipants}} {{#participant}} <a href="{{profileURL}}" rel="user" target="_blank"><img class="avatar size24" src="{{miniProfileImageURL}}" width="24" height="24" alt="{{name}} {{screenName}}" /></a> {{/participant}} {{#isEndOfRow}}<br />{{/isEndOfRow}} {{/getParticipants}} </p> <p class="margin-b--5"> {{_i}}There are{{/i}} <a href="#" rel="viewConversationParticipants">{{numberOfParticipants}} {{_i}}other people{{/i}}</a> {{_i}}in this group{{/i}} </p> {{#sender}} <a href="{{profileURL}}" rel="user" target="_blank">{{name}}</a> {{/sender}} {{_i}}added you{{/i}} {{/content}} {{/stream_item}} {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} <span class="txt-mute"> {{sender.name}} {{_i}}added you{{/i}} </span> {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{<stream_item}} {{$stream_item_classes}}conversation-event txt-mute padding-h--10{{/stream_item_classes}} {{$content}} {{#isOwnChirp}} {{_i}}You{{/i}} {{/isOwnChirp}} {{^isOwnChirp}} <a class="txt-mute conversation-participants-name-list" href="{{sender.profileURL}}" rel="user" target="_blank">{{sender.name}}</a> {{/isOwnChirp}} {{#sanitizedConversationName}} {{_i}}changed the group name to{{/i}} {{{sanitizedConversationName}}} {{/sanitizedConversationName}} {{^sanitizedConversationName}} {{_i}}removed the group name{{/i}} {{/sanitizedConversationName}} {{/content}} {{/stream_item}} {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} <span class="txt-mute"> {{#isOwnChirp}} {{_i}}You{{/i}} {{/isOwnChirp}} {{^isOwnChirp}} {{sender.name}} {{/isOwnChirp}} {{#sanitizedConversationName}} {{_i}}changed the group name to{{/i}} {{{sanitizedConversationName}}} {{/sanitizedConversationName}} {{^sanitizedConversationName}} {{_i}}removed the group name{{/i}} {{/sanitizedConversationName}} </span> {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{<stream_item}} {{$stream_item_classes}}conversation-event txt-mute padding-h--10{{/stream_item_classes}} {{$content}} {{#isOwnChirp}} {{_i}}You{{/i}} {{/isOwnChirp}} {{^isOwnChirp}} {{#sender}} <a href="{{profileURL}}" rel="user" target="_blank">{{{emojifiedName}}}</a> {{/sender}} {{/isOwnChirp}} {{_i}}added{{/i}} {{#addedParticipants}} <a class="txt-mute conversation-participants-name-list" href="{{profileURL}}" rel="user" target="_blank">{{{emojifiedName}}}</a> {{/addedParticipants}} {{/content}} {{/stream_item}} {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} <span class="txt-mute"> {{#isOwnChirp}} {{_i}}You added{{/i}} {{/isOwnChirp}} {{^isOwnChirp}} {{{sender.emojifiedName}}} {{_i}}added{{/i}} {{/isOwnChirp}} \x3c!-- one new participant --\x3e {{^addedParticipants.1}} {{{addedParticipants.0.emojifiedName}}} {{/addedParticipants.1}} {{#addedParticipants.1}} \x3c!-- two new participants --\x3e {{^addedParticipants.2}} {{{addedParticipants.0.emojifiedName}}} {{_i}}&amp;{{/i}} {{{addedParticipants.1.emojifiedName}}} {{/addedParticipants.2}} \x3c!-- more than 2 new participants --\x3e {{#addedParticipants.2}} {{{addedParticipants.0.emojifiedName}}} {{_i}}+{{/i}} {{numberOfOtherParticipants}} {{/addedParticipants.2}} {{/addedParticipants.1}} </span> {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{<stream_item}} {{$stream_item_classes}}conversation-event txt-mute padding-h--10{{/stream_item_classes}} {{$content}} {{#leftParticipants}} <a class="txt-mute conversation-participants-name-list" href="{{profileURL}}" rel="user" target="_blank">{{{emojifiedName}}}</a> {{/leftParticipants}} {{_i}}left{{/i}} {{/content}} {{/stream_item}} {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} <span class="txt-mute"> {{$content}} {{#leftParticipants}} {{{emojifiedName}}} {{/leftParticipants}} {{_i}}left{{/i}} {{/content}} </span> {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="thread show-more-thread"></div> <div class="thread dot-thread dot-thread-more"></div> <div class="thread dot-thread middle dot-thread-more"></div> <div class="thread dot-thread top dot-thread-more"></div> <div class="js-conversation-show-more conversation-more stream-item is-actionable txt-link padding-v--10"> {{actionText}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#created}} <time class="tweet-timestamp js-timestamp pull-right margin-t--2" data-time="{{getTime}}"> {{/created}} <span class="txt-size-variable--12 txt-mute"> {{createdPretty}} </span> {{#created}} </time> {{/created}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#dataminr}} {{> status/dataminr_header}} {{/dataminr}} <div class="is-dataminr-tweet"> {{> status/tweet_single}} {{> status/media_large_preview }} </div> {{#dataminr}} {{> status/dataminr_single_footer}} {{/dataminr}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-axl dataminr-external-link"> <a class="btn full-width padding-hn url-ext hidden-in-dark" href="{{expandAlertURL}}" rel="external noopener noreferrer" data-scribe-element="dataminr"> <i class="icon icon-dataminr"></i> <span class="label">{{_i}}Open in Dataminr{{/i}}</span> </a> <a class="btn full-width padding-hn url-ext hidden-in-light" href="{{expandAlertURL}}" rel="external noopener noreferrer" data-scribe-element="dataminr"> <i class="icon icon-dataminr"></i> <span class="label">{{_i}}Open in Dataminr{{/i}}</span> </a> </div> {{#eventLocation}} <p class="dataminr-title padding-al padding-hxl txt-size--12 txt-bold">{{_i}}Event Location{{/i}}{{#eventLocation.name}}: {{eventLocation.name}}{{/eventLocation.name}}</p> <div class="cf"> <a href="{{expandMapURL}}" target="_blank" rel="url noopener noreferrer" class="media-item block dataminr-map-img-full" style=\'background-image:url("{{eventMapLargeImageURL}}")\' data-scribe-element="map"></a> </div> {{/eventLocation}} <p class="dataminr-title padding-al padding-hxl txt-size--12 txt-bold">{{_i}}Event Keywords{{/i}}</p> <ul class="padding-vl padding-hxl block dataminr-search-terms-detail"> {{#relatedTerms}} <li class="inline-block dataminr-term"><a href="{{twitterUrl}}" data-search-term="{{query}}" target="_blank" rel="search" data-scribe-element="search">{{text}}</a></li> {{/relatedTerms}} <li class="dataminr-search-terms txt-size--13 padding-ts txt-bold"> <a href="{{anyRelatedTermsTwitterUrl}}" target="_blank" class="link-complex" rel="search" data-search-term="{{anyRelatedTermsQuery}}" data-scribe-element="search_any"> <i class="icon icon-search icon-match-context icon-tt"></i> <span class="link-complex-target">{{_i}}Search any{{/i}}</span> </a> or <a href="{{allRelatedTermsTwitterUrl}}" target="_blank" rel="search" data-search-term="{{allRelatedTermsQuery}}" data-scribe-element="search_all"> {{_i}}search all{{/i}} </a> </li> </ul> <p class="dataminr-title padding-al padding-hxl txt-size--12 txt-bold">{{_i}}Original Source{{/i}}</p> <div class="js-source-profile position-rel"></div> <div class="dataminr-user-profile padding-hxl padding-bl"> {{#userTopHashtags.length}} <p class="padding-tm"><i class="icon icon-small-valigned icon-hashtag profile-icon icon-tt"></i>&nbsp;{{_i}}Top Hashtags{{/i}}</p> <ul class="padding-vm"> {{#userTopHashtags}} <li class="padding-vs"> <a href="{{twitterUrl}}" class="txt-capitalize txt-size--13" target="_blank" rel="hashtag" data-scribe-element="hashtag">{{text}}</a> </li> {{/userTopHashtags}} </ul> {{/userTopHashtags.length}} </div> <p class="js-replies-header is-hidden dataminr-title padding-al padding-hxl txt-size--12 txt-bold">{{_i}}Replies{{/i}}</p>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="dataminr-header cf txt-size-variable--12 padding-bm"> <div class="txt-ellipsis"> {{#publisherCategory.name}} <span class="dataminr-category-pill dataminr-category-{{publisherCategory.shortName}} inline-block txt-capitalize pull-left"> <span class="dataminr-category-full">{{publisherCategory.name}}</span><span class="dataminr-category-short txt-uppercase"><abbr title="{{publisherCategory.name}}">{{publisherCategory.shortName}}</abbr></span></span> {{/publisherCategory.name}} <span class="pull-right padding-txs txt-dataminr"> <span class="dataminr-volume margin-rs"><i class="icon icon-small icon-user icon-match-context icon-tt"></i> {{eventVolume}}</span> {{#alertType}} <span class="dataminr-label dataminr-label-{{id}} margin-rs txt-dataminr">{{name}}<i class="sprite {{alertTypeSprite}} margin-ls"></i></span> {{/alertType}} {{createdAt}} </span> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{<stream_item}} {{$stream_item_classes}}is-actionable dataminr dataminr-separator{{/stream_item_classes}} {{$stream_item_content_classes}}js-show-detail{{/stream_item_content_classes}} {{$stream_item_data}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" {{/stream_item_data}} {{$content}} {{> status/dataminr }} {{/content}} {{/stream_item}} {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="margin-tm cf"> <div class="padding-bxxl"> {{#eventLocation}} <div class="obj-right txt-center dataminr-location"> <div class="cf"> {{#eventMapSmallImageURL}} <a href="{{expandMapURL}}" target="_blank" rel="url noopener noreferrer" class="media-item block dataminr-map-img pull-right" style=\'background-image:url("{{eventMapSmallImageURL}}")\' data-scribe-element="map"></a> {{/eventMapSmallImageURL}} </div> {{#name}} <div class="js-show-tip txt-ellipsis" data-original-title="{{name}}"> <a href="{{expandMapURL}}" target="_blank" rel="url noopener noreferrer" class="txt-size-variable--12" data-scribe-element="map" >{{name}}</a> </div> {{/name}} </div> {{/eventLocation}} <div class="nbfc"> <ul class="dataminr-related-terms"> {{#relatedTerms}} <li class="inline-block dataminr-term"><a href="{{twitterUrl}}" class="txt-size--13" data-search-term="{{query}}" target="_blank" rel="search"data-scribe-element="search">{{text}}</a></li> {{/relatedTerms}} </ul> {{#user}} <div class="margin-ts"> <span class="txt-size--12 txt-dataminr inline-block margin-rm">{{_i}}Joined{{/i}}&nbsp;<b class="dataminr-bio-count">{{prettyJoinedDate}}</b></span> <a href="{{getFollowerURL}}" rel="url" target="_blank" class="txt-size--12 inline-block" data-scribe-element="show_followers">{{_i}}Followers{{/i}}&nbsp;<b>{{prettyFollowersCount}}</b></a>&nbsp; </div> {{/user}} </div> </div> <a href="{{{expandAlertURL}}}" class="txt-size--13 dataminr-openin-link txt-dataminr" target="_blank" rel="url noopener noreferrer" data-scribe-element="dataminr">{{_i}}Open in Dataminr{{/i}}<i class="icon icon-match-context icon-dataminr icon-tt link-clean padding-ls"></i></a> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "{{#withActivityHeader}} {{> status/tweet_activity_header }} {{/withActivityHeader}} {{#getRelatedUser}} {{> account_summary }} {{/getRelatedUser}}"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#data}} {{<stream_item}} {{$stream_item_data}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" {{/stream_item_data}} {{$content}} {{> status/follow_activity }} {{/content}} {{/stream_item}} {{/data}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{<stream_item}} {{$stream_item_classes}}is-actionable gap-chirp{{/stream_item_classes}} {{$stream_item_content_classes}}js-expand-gap padding-v--18{{/stream_item_content_classes}} {{$stream_item_data}} data-key="{{id}}" {{/stream_item_data}} {{$content}} <div class="gap-chirp-text {{#showSize}}gap-chirp-text--with-size{{/showSize}} padding-v--4 padding-h--16"> {{^showSize}}{{_i}}Show more{{/i}}{{/showSize}} {{#showSize}}{{size}}+ {{_i}}more{{/i}}{{/showSize}} </div> <div class="gap-chirp-spinner margin-v--5"></div> {{/content}} {{/stream_item}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{<stream_item}} {{$stream_item_data}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" {{/stream_item_data}} {{$content}} <div class="activity-header flex flex-row flex-align--baseline"> <div class="margin-h--5 margin-t---8 item-img flex-shrink--0 txt-right"> <i class="pull-right icon icon-list-filled txt-size--16 color-twitter-darker-gray"></i> </div> <div class="nbfc txt-line-height--20 flex-auto padding-b--2"> {{#sourceAvatar}}<img class="avatar size24" src="{{sourceAvatar}}">{{/sourceAvatar}} {{{htmlText}}} </div> </div> {{/content}} {{/stream_item}} {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="media-image-container {{#isMediaPreviewCompact}}media-image-container-compact{{/isMediaPreviewCompact}} block position-rel"> <a class="js-media-image-link {{#needsSecureUrl}}js-needs-secure-url{{/needsSecureUrl}} pin-all media-image block {{#isPossiblySensitive}}is-invisible{{/isPossiblySensitive}}" {{#needsSecureUrl}}data-original-url="{{mediaPreviewSrc}}{{imageSrc}}"{{/needsSecureUrl}} {{^needsSecureUrl}}style="background-image:url({{mediaPreviewSrc}}{{imageSrc}})"{{/needsSecureUrl}} href="{{url}}" rel="mediaPreview" target="_blank" data-media-entity-id="{{mediaId}}" title="{{altText}}" ></a> {{> reverse_image_search }} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#withMediaPreview}} {{#hasMedia}} {{#isMediaPreviewLarge}} <div class="js-media position-rel item-box-full-bleed margin-tm {{#isMediaGridContent}}media-size-large-height{{/isMediaGridContent}} {{#dataminr}}dataminr-large-preview{{/dataminr}}" data-key="{{id}}"> {{#isMediaGridContent}} <div class="media-caret"></div> <div class="media-grid-{{mediaLength}}"> {{#getMedia}} {{> status/media_image_container}} {{/getMedia}} </div> {{#isPossiblySensitive}} {{> status/media_sensitive}} {{/isPossiblySensitive}} {{/isMediaGridContent}} {{^isMediaGridContent}} {{#getMedia}} {{>status/media_thumb}} {{/getMedia}} {{/isMediaGridContent}} </div> {{/isMediaPreviewLarge}} {{/hasMedia}} {{/withMediaPreview}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#isMediaGridContent}} <div class="media-grid-{{mediaLength}}"> {{#getMedia}} {{> status/media_image_container}} {{/getMedia}} </div> {{#isPossiblySensitive}} {{> status/media_sensitive}} {{/isPossiblySensitive}} {{/isMediaGridContent}} {{^isMediaGridContent}} {{#getMedia}} {{> status/media_thumb}} {{/getMedia}} {{/isMediaGridContent}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#isPossiblySensitive}} <div class="js-media-sensitive-overlay media-sensitive {{^isMediaPreviewSmall}}{{thumbSizeClass}}{{/isMediaPreviewSmall}} {{#isMediaPreviewSmall}}media-size-medium{{/isMediaPreviewSmall}} "> <div class="{{^isNarrowColumns}}media-sensitive-content{{/isNarrowColumns}} padding-am"> <b class="media-sensitive-title">{{_i}}The following media may contain sensitive material.{{/i}}</b> <p>{{_i}}Your <a href="#" rel="globalSettings">Tweet media display settings</a> are configured to inform you when media may be sensitive.{{/i}}</p> <a href="#" target="_blank" rel="showSensitiveMedia">{{_i}}View{{/i}}</a>&nbsp;&middot; <a href="#" target="_blank" rel="alwaysShowSensitiveMedia">{{_i}}Always show me sensitive media{{/i}}</a> </div> </div> {{/isPossiblySensitive}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class=" js-media-preview-container media-preview-container position-rel width-p--100 {{^isMediaPreviewLarge}}{{^isMediaPreviewCompact}}{{^isMediaPreviewInQuoted}}margin-vm{{/isMediaPreviewInQuoted}}{{/isMediaPreviewCompact}}{{/isMediaPreviewLarge}} {{#isMediaPreviewSmall}}{{#isPossiblySensitive}}media-size-small{{/isPossiblySensitive}}{{/isMediaPreviewSmall}} {{#isMediaPreviewCompact}}media-size-medium margin-t--8{{/isMediaPreviewCompact}} {{#isMediaPreviewInQuoted}}margin-tm{{/isMediaPreviewInQuoted}} {{#isMediaPreviewLarge}}margin-t--20{{/isMediaPreviewLarge}} {{#isAnimatedGif}}is-gif{{/isAnimatedGif}} {{#isVideo}}is-video{{/isVideo}} {{^withAutoPlay}}{{^detailView}}is-paused{{/detailView}}{{/withAutoPlay}} "> {{#isMediaPreviewLarge}} <div class="media-caret"></div> {{/isMediaPreviewLarge}} {{#isAnimatedGif}} {{> media/animated_gif}} {{/isAnimatedGif}} {{^isAnimatedGif}} <a class="js-media-image-link block med-link media-item {{thumbSizeClass}} {{#isPossiblySensitive}}is-invisible{{/isPossiblySensitive}} {{#needsSecureUrl}}js-needs-secure-url{{/needsSecureUrl}} {{^isGalleryView}}is-zoomable{{/isGalleryView}}" {{#needsSecureUrl}}data-original-url="{{mediaPreviewSrc}}{{imageSrc}}"{{/needsSecureUrl}} href="{{url}}" rel="mediaPreview" target="_blank" {{^needsSecureUrl}}{{^imageSrc}}style="background-image:url({{mediaPreviewSrc}})"{{/imageSrc}}{{/needsSecureUrl}} data-media-entity-id="{{mediaId}}" title="{{getAltText}}"> {{#isVideo}} {{> media/video_overlay}} {{/isVideo}} {{#imageSrc}} <img class="{{thumbClass}}" src="{{^needsSecureUrl}}{{imageSrc}}{{/needsSecureUrl}}" alt="{{altText}}"> {{/imageSrc}} {{^isDM}} {{^isFromProtectedUser}} {{> reverse_image_search }} {{/isFromProtectedUser}} {{/isDM}} </a> {{#showTaggedUsers}} {{{ renderTaggedUsers }}} {{/showTaggedUsers}} {{/isAnimatedGif}} {{> status/media_sensitive}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="media-grid-{{mediaLength}}"> {{#getUniqueMedia}} {{{media.renderGridView}}} {{/getUniqueMedia}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="tweet js-chirp {{#quotedTweet}}is-quote-tweet{{/quotedTweet}}"> <header class="tweet-header"> {{> status/message_timestamp}} {{#sender}} {{^isDeleted}} {{> status/tweet_single_header }} {{/isDeleted}} {{/sender}} </header> <div class="tweet-body"> <p class="js-tweet-text tweet-text with-linebreaks full-width">{{{htmlText}}}</p> {{#quotedTweet}} {{{ renderQuoted }}} {{/quotedTweet}} {{#quotedTweetMissing}} {{>status/quoted_tweet_missing}} {{/quotedTweetMissing}} {{>status/tweet_media_wrapper}} {{#withFooter}} <footer class="tweet-footer cf"> <ul class="tweet-actions"> <li class="position-rel"> {{#getMainUser}} <a class="tweet-action" href="#" rel="actionsMenu" data-user-id="{{id}}" data-chirp-id="{{message.id}}" data-actions-menu-position="pos-l" data-account-key="{{accountKey}}"> <i class="icon icon-more"></i> <span class="is-vishidden">{{_i}}More options{{/i}}</span> </a> {{/getMainUser}} </li> </ul> </footer> {{/withFooter}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#message}} {{<item_box}} {{$item_box_data}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" {{/item_box_data}} {{$content}} {{> status/message}} {{/content}} {{/item_box}} {{/message}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#message}} {{<stream_item}} {{$stream_item_content_classes}}message-stream-item{{/stream_item_content_classes}} {{$stream_item_data}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" {{/stream_item_data}} {{$content}} {{>status/message}} {{/content}} {{/stream_item}} {{/message}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{<stream_item}} {{$stream_item_classes}}is-actionable {{#unread}}is-unread {{/unread}}{{/stream_item_classes}} {{$stream_item_content_classes}}js-show-detail {{/stream_item_content_classes}} {{$stream_item_data}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" {{/stream_item_data}} {{$content}} <div class="tweet tweet-message js-chirp"> <header class="tweet-header"> {{>status/message_timestamp}} {{#getMainUser}} {{> status/tweet_single_header }} {{/getMainUser}} </header> <div class="l-table"> <div class="tweet-body l-cell"> <div class="l-table"> <p class="l-cell align-top"> {{#replied}} <i class="txt-size--14 txt-mute icon icon-reply"></i> {{/replied}} <span class="js-tweet-text tweet-text with-linebreaks">{{{htmlText}}}</span> {{#attachmentOnly}} <em>Attachment: image</em> {{/attachmentOnly}} </p> {{#hasMedia}} <div class="l-cell"> {{#getMedia}} <div class="tweet-message-attachment obj-right position-rel"> <div class="js-media-image-link media-item {{#isPossiblySensitive}}is-invisible{{/isPossiblySensitive}} {{#needsSecureUrl}}js-needs-secure-url{{/needsSecureUrl}} is-zoomable" {{#needsSecureUrl}}data-original-url="{{mediaPreviewSrc}}{{imageSrc}}"{{/needsSecureUrl}} {{^needsSecureUrl}}{{^imageSrc}}style="background-image:url({{mediaPreviewSrc}})"{{/imageSrc}}{{/needsSecureUrl}}> </div> </div> {{/getMedia}} </div> {{/hasMedia}} </div> </div> <div class="conversation-indicator l-cell"> <i class="icon icon-arrow-r"></i> </div> </div> </div> {{/content}} {{/stream_item}} {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#created}} <time class="tweet-timestamp pull-right margin-t--2" datetime="{{toISOString}}" data-time="{{getTime}}"> {{/created}} <span class="txt-size-variable--12 txt-mute"> {{createdPrettyTimeOrDate}} </span> {{#created}} </time> {{/created}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{> column/column_header_detail}} <div class="column-content flex-auto position-rel"> <div class="js-detail-container js-dropdown-container column-scroller scroll-v pin-all {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}}"> <div> <div class="js-message-box"></div> <div class="js-message-detail chirp-container"> {{> spinner_large}} </div> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#tweet}} <div class="js-quote-detail quoted-tweet nbfc br--14 padding-al margin-b--8 position-rel {{^inCompose}}margin-tm is-actionable {{/inCompose}}" data-tweet-id="{{id}}" data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" rel="viewDetails"> <div> <header class="tweet-header"> {{#user}} {{>status/tweet_single_header}} {{/user}} </header> <div class="js-reply-info-container"> <div class="nbfc txt-ellipsis txt-mute"> {{{ getReplyContext }}} </div> </div> <p class="js-quoted-tweet-text with-linebreaks">{{{htmlText}}}</p> {{>status/tweet_media_wrapper}} {{#isQuoteStatus}} {{>status/attachment_tweet}} {{/isQuoteStatus}} {{#isInThread}} <p class="margin-t--4 margin-b---3 txt-mute">{{_i}}Show this thread{{/i}}</p> {{/isInThread}} </div> {{#inCompose}} <a class="js-quote-tweet-remove compose-media-grid-remove is-actionable"> {{>compose/close_button}} </a> {{/inCompose}} </div> {{/tweet}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="quoted-tweet nbfc br--4 padding-al margin-t--5 quoted-tweet-unavailable{{#hideTweetUnavailableMsg}} is-vishidden{{/hideTweetUnavailableMsg}}"> <p class="txt-mute">{{_i}}This Tweet is unavailable{{/i}}</p> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#inStream}} {{<stream_item}} {{$stream_item_data}} data-key="{{chirp.key}}{{chirp.id}}" data-account-key="{{chirp.account.getKey}}" {{/stream_item_data}} {{$content}}{{> status/scheduled_tweet_single }}{{/content}} {{/stream_item}} {{/inStream}} {{#inBox}} {{<item_box}} {{$item_box_classes}}js-tweet-box{{/item_box_classes}} {{$item_box_data}} data-key="{{chirp.key}}{{chirp.id}}" data-account-key="{{chirp.account.getKey}}" {{/item_box_data}} {{$content}}{{> status/scheduled_tweet_single }}{{/content}} {{/item_box}} {{/inBox}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{#reasonText}} <div class="margin-bl padding-as srt-error-msg"> {{reasonText}} </div> {{/reasonText}} <div class="padding-b--5 flex flex-row flex-align--center"> <span class="no-wrap flex-grow--1 txt-size--13">{{ formattedTime }}</span> {{#canEdit}} <a href="#" rel="edit"><i class="icon icon-edit padding-r--10"></i></a> {{/canEdit}} <a href="#" rel="destroy"><i class="icon icon-trash"></i></a> </div> <div class="padding-al br--4 scheduled-tweet"> {{#updates}} {{>status/scheduled_tweet_single_header}} {{/updates}} <div class="txt-size-variable--12">{{{getReplyContext}}}</div> {{#hasText}} <p class="with-linebreaks">{{{htmlText}}} {{#attachmentUrl}}{{attachmentUrl}}{{/attachmentUrl}}</p> {{/hasText}} {{#hasMedia}} <div class="js-media media-preview position-rel" data-key="{{id}}"> {{#getMedia}} {{>status/media_thumb}} {{/getMedia}} </div> {{/hasMedia}} </div> {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a class="account-link link-complex flex flex-row flex-align--center padding-bl" href="{{user.profileURL}}" rel="user" target="_blank"> <img class="avatar size24" src="{{user.avatar}}" width="24" height="24" alt="{{user.screenName}}\'s avatar"> <span class="account-inline txt-ellipsis{{#user.isProtected}} is-protected{{/user.isProtected}}  padding-l--8"> <b class="fullname link-complex-target">{{{user.emojifiedName}}}</b> {{#user.isVerified}}<i class="js-show-tip sprite sprite-verified-mini" title="{{_i}}Verified account{{/i}}"></i>{{/user.isVerified}} <span class="username txt-mute">@{{user.screenName}}</span> {{#user.isProtected}}<i class="icon icon-protected txt-mute txt-size--14"></i>{{/user.isProtected}} </span> </a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{> column/column_header_detail}} <div class="column-content flex-auto position-rel"> <div class="column-scroller scroll-v pin-all {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}}"> <div class="social-proof-for-tweet-title padding-vl txt-center txt-size--14"> <b>{{title}}</b> </div> {{#users}} {{<stream_item}} {{$content}} {{>account_summary}} {{/content}} {{/stream_item}} {{/users}} {{^users}} {{>column_loading_placeholder}} {{/users}} </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#trends}}{{#trend}} <li class="padding-b--10"> <a href="#" class="js-trend-item trend-item link-complex txt-size-variable--13" data-action="search" data-query="{{target.query}}"> <b class="trend-item-name link-complex-target ">{{{name}}}</b> <span class="trend-item-context">{{{description}}}</span> <div class="trend-item-stats txt-mute">{{{meta_description}}}</div> </a> </li> {{/trend}}{{/trends}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "{{#withActivityHeader}} {{> status/tweet_activity_header }} {{/withActivityHeader}} {{#getRelatedTweet}} {{> status/tweet_single}} {{/getRelatedTweet}}"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="activity-header {{#sourceAvatar}}has-source-avatar{{/sourceAvatar}} flex flex-align--baseline"> <div class="margin-h--5 margin-t---8 item-img flex-shrink--0 txt-right"> <i class="icon {{iconClass}} txt-size--16"></i> </div> <div class="nbfc {{#withSourceMute}}txt-mute txt-size-variable--12 {{/withSourceMute}}txt-line-height--20 flex-auto padding-b--2"> {{#sourceAvatar}}<img class="avatar size24" src="{{sourceAvatar}}">{{/sourceAvatar}} {{{htmlText}}} </div> {{#isAboutYou}} {{>status/tweet_activity_timestamp}} {{/isAboutYou}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{<item_box}} {{$item_box_data}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" {{/item_box_data}} {{$content}} {{> status/tweet_activity }} {{/content}} {{/item_box}} {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} {{<stream_item}} {{$stream_item_classes}}is-actionable {{chirpClassnames}}{{/stream_item_classes}} {{$stream_item_content_classes}}js-show-detail {{/stream_item_content_classes}} {{$stream_item_data}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" data-tweet-id="{{#targetTweet}}{{id}}{{/targetTweet}}" {{/stream_item_data}} {{$content}} {{> status/tweet_activity }} {{> status/media_large_preview }} {{/content}} {{/stream_item}} {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#created}} <time class="js-timestamp tweet-timestamp txt-mute flex-shrink--0 txt-size-variable--12" datetime="{{toISOString}}" data-time="{{getTime}}"> {{/created}} <span class="txt-size-variable--12 txt-mute">{{createdPretty}}</span> {{#created}} </time> {{/created}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{<stream_item}} {{$stream_item_data}} {{#chirp}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" data-tweet-id="{{#getMainTweet}}{{id}}{{/getMainTweet}}" {{/chirp}} {{/stream_item_data}} {{$content}} {{#chirp}} <div class="js-tweet tweet-detail {{#isFavorite}}is-favorite{{/isFavorite}} {{#isRetweeted}}is-retweet{{/isRetweeted}} {{#quotedTweet}}is-quote-tweet{{/quotedTweet}} {{#isInThread}}{{#hasReplies}}js-has-replies {{#indentedChirp}}margin-l--58{{/indentedChirp}}{{/hasReplies}}{{/isInThread}}"> <div class="{{^indentedChirp}}margin-b--10{{/indentedChirp}} {{#indentedChirp}}margin-l---58{{/indentedChirp}}"> {{#getMainUser}} {{> account_summary }} {{/getMainUser}} </div> {{^isInThread}} <div class="txt-size-variable--12 margin-b--2"> {{{getReplyContext}}} </div> {{/isInThread}} {{#indentedChirp}} <div class="thread margin-t--4"></div> {{/indentedChirp}} <p class="js-tweet-text tweet-text txt-size-variable--18 margin-b--10 with-linebreaks {{#translation}}tweet-translation-original-text margin-bn{{/translation}}" lang="{{lang}}">{{{htmlText}}}</p> {{#translation}}{{>status/tweet_translation}}{{/translation}} {{#isTranslatable}}{{^translation}}<a class="js-translate-call-to-action txt-mute" href="#" rel="translateTweet">{{_i}}Translate Tweet{{/i}}</a>{{/translation}}{{/isTranslatable}} {{#getMainTweet}} <div class="js-tweet-media tweet-detail-media margin-v--15 margin-h--0 is-hidden {{#user}}{{#isProtected}}is-protected{{/isProtected}}{{/user}}"></div> {{^hasMedia}} {{#quotedTweet}} {{{ renderQuoted }}} {{/quotedTweet}} {{/hasMedia}} {{#quotedTweetMissing}} {{! placeholder to be replaced when quoted tweet is fetched}} <div class="js-attachment-tweet"> {{>status/attachment_tweet}} </div> {{/quotedTweetMissing}} <div class="js-card-container"></div> <div class="margin-tl txt-mute txt-size-variable--12"> <a href="{{getChirpURL}}" rel="url" target="_blank">{{createdPrettyFull}}</a> &middot; <a href="{{sourceUrl}}" rel="url" target="_blank">{{sourceNoHTML}}</a> </div> {{#hasLocationData}} <div class="margin-bl txt-mute txt-size-variable--12 tweet-location"> <a href="{{getLocationURL}}" rel="url" target="_blank"><i class="icon icon-base-valigned icon-geo"></i>{{getLocationFullName}}</a> </div> {{/hasLocationData}} <footer> <div class="js-tweet-stats"></div> {{> status/tweet_detail_actions}} </footer> {{/getMainTweet}} </div> <div class="js-detail-view-inline detail-view-inline item-box-full-bleed padding-axl scroll-conversation {{^isInThread}}dark-border-top{{/isInThread}} {{#indentedChirp}}dark-border margin-l--58{{/indentedChirp}}"> <div rel="reply" class="js-detail-view-inline-text detail-view-inline-text padding-al inline-block full-width txt-ellipsis">{{_i}}Reply to{{/i}} {{mentions}}</div> </div> {{#dataminr}} <a class="js-skip-to-replies is-hidden is-actionable link-complex block item-box-full-bleed padding-hxl padding-bl scroll-conversation" rel="skipToReplies"> &#8595; <span class="link-complex-target align-middle">{{_i}}Skip to replies{{/i}}</span> </a> {{/dataminr}} {{/chirp}} {{/content}} {{/stream_item}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<ul class="tweet-detail-actions {{^withRemove}}{{^withDragHandle}}without-tweet-drag-handles{{/withDragHandle}}{{/withRemove}}"> <li class="tweet-detail-action-item margin-ln"> <a class="js-reply-action tweet-detail-action position-rel" href="#" rel="reply"> <i class="icon icon-reply"></i><span class="is-vishidden">{{_i}}Reply{{/i}}</span> <span class="reply-triangle"></span> </a> </li> {{#getMainUser}} <li class="tweet-detail-action-item {{#isProtected}}is-protected-action{{/isProtected}}"> <a class="tweet-detail-action {{#isProtected}}no-pointer-events{{/isProtected}}" href="#" rel="retweet"> <i class="js-icon-retweet icon icon-retweet{{#isRetweeted}}-filled{{/isRetweeted}} icon-retweet-toggle"></i> <span class="is-vishidden">{{_i}}Retweet{{/i}}</span> </a> </li> {{/getMainUser}} <li class="tweet-detail-action-item"> {{#account}} <a class="js-show-tip tweet-detail-action position-rel" href="#" rel="favorite" title="{{>text/favorite_action}}"> <i class="js-icon-favorite icon {{^isFavorited}}icon-favorite{{/isFavorited}}{{#isFavorited}}icon-heart-filled{{/isFavorited}} icon-favorite-toggle txt-center"></i>            <span class="is-vishidden"> {{_i}}Like{{/i}} </span> </a> {{/account}} </li> <li class="tweet-detail-action-item position-rel"> <a class="js-tweet-detail-action tweet-detail-action" href="#" rel="actionsMenu" data-user-id="{{#getMainUser}}{{id}}{{/getMainUser}}" data-chirp-id="{{#getMainTweet}}{{id}}{{/getMainTweet}}" data-account-key="{{account.getKey}}"> <i class="icon icon-more"></i><span class="is-vishidden">{{_i}}Options{{/i}}</span> </a> </li> {{#withDragHandle}} <li class="feature-customtimelines tweet-drag-handle tweet-detail-action-item"> <span class="tweet-detail-action is-actionable" href="{{getChirpURL}}"> <i class="icon icon-move"></i><span class="is-vishidden">{{_i}}Drag to Collection{{/i}}</span> </span> </li> {{/withDragHandle}} {{#withRemove}} <li class="feature-customtimelines tweet-detail-action-item"> <a class="js-show-tip tweet-detail-action tweet-detail-action" href="{{getChirpURL}}" rel="removeFromCustomTimeline" data-tweet-id="{{#getMainTweet}}{{id}}{{/getMainTweet}}" title="{{_i}}Remove from collection{{/i}}" data-placement="bottom"> <i class="icon icon-close"></i> </a> </li> {{/withRemove}} </ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-replies-before tweet-detail-reply"></div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#hasMedia}} {{#isMediaGridContent}} {{^isPossiblySensitive}} <div class="js-media media-preview detail-preview media-size-large"> {{> status/media_unique_preview}} </div> {{/isPossiblySensitive}} {{#isPossiblySensitive}} <div class="js-media media-preview detail-preview"> {{#getFirstMedia}} {{#media.renderDetailView}}{{/media.renderDetailView}} {{/getFirstMedia}} </div> {{/isPossiblySensitive}} {{/isMediaGridContent}} {{^isMediaGridContent}} <div class="js-media media-preview detail-preview"> {{#getUniqueMedia}} {{#media.renderDetailView}}{{/media.renderDetailView}} {{/getUniqueMedia}} </div> {{/isMediaGridContent}} {{/hasMedia}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-replies-to replies-after"></div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="rpl"> <textarea name="inreplyto" class="js-reply-tweetbox scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}} scroll-alt"></textarea> <div class="rpl-actions cf"> <button class="js-reply-popout js-show-tip Button--link padding-a--0 width--30 dm-action" title="{{_i}}Popout{{/i}}"> <i class="icon icon-popout icon-medium"></i> </button> <button class="js-reply-add-image js-show-tip Button--link padding-a--0 width--30 dm-action" title="{{_i}}Add image{{/i}}"> <i class="icon icon-camera icon-medium"></i> </button> <div class="pull-right"> <input type="text" readonly="readonly" class="js-reply-charcount pull-left"/> {{#avatarURL}} <img src="{{avatarURL}}" title="@{{from}}" class="js-show-tip avatar size30 neg-margin-bl obj-left"/> {{/avatarURL}} <button class="Button--primary js-send">{{_i}}Reply{{/i}}</button> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#analytics}} <div class="tweet-stats tweet-stat txt-size-variable--12 txt-mute padding-t--5"> <a href="{{url}}" target="_blank" rel="url noopener noreferrer" class="js-open-analytics js-show-tip full-width" title="{{_i}}View on analytics.twitter.com{{/i}}" data-placement="bottom"> <i class="icon icon-analytics icon-tb"></i> <span class="txt-size-variable--10">{{text}}</span> </a> </div> {{/analytics}} {{#stats.length}} <div class="js-stats-list tweet-stats flex flex-row flex-align--baseline flex-wrap--wrap"> {{#stats}} <div data-type="{{type}}" class="{{^noLink}}js-tweet-stat is-actionable{{/noLink}} tweet-stat txt-size-variable--12 flex flex-row flex-align--baseline"> <b class="js-value margin-r--5"></b> <span class="js-label stat-word txt-size-variable--11">{{label}}</span> </div> {{/stats}} </div> {{/stats.length}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{> column/column_header_detail}} <div class="column-content flex-auto position-rel"> <div class="js-detail-container js-dropdown-container column-scroller scroll-v pin-all {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}} scroll-conversation"> <div class="js-detail-content"> <div class="js-inreplyto"></div> {{#withDataminr}}<div class="js-dataminr-header dataminr padding-tm padding-hl padding-bn">Dataminr header</div>{{/withDataminr}} <div class="js-tweet-detail tweet-detail-wrapper"> {{> spinner_large}} </div> {{#withDataminr}}<div class="js-dataminr-footer dataminr">Dataminr footer</div>{{/withDataminr}} <div class="js-tweet-replies tweet-detail-reply"></div> </div> </div> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#tweet}} {{<item_box}} {{$item_box_classes}}js-tweet-box{{/item_box_classes}} {{$item_box_data}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" {{/item_box_data}} {{$content}} {{> status/tweet_single }} {{/content}} {{/item_box}} {{/tweet}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#tweet}} {{<stream_item}} {{$stream_item_classes}}is-actionable {{chirpClassnames}}{{/stream_item_classes}} {{$stream_item_content_classes}}js-show-detail {{/stream_item_content_classes}} {{$stream_item_data}} data-key="{{key}}{{id}}" data-account-key="{{#account}}{{getKey}}{{/account}}" {{/stream_item_data}} {{$content}} {{> status/tweet_single }} {{> status/media_large_preview }} {{/content}} {{/stream_item}} {{/tweet}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#isMediaPreviewOff}} {{#hasAnimatedGif}} <div class="media-badge txt-size-variable--12 txt-mute"><i class="icon icon-gif-badge txt-size-variable--15 align-top"></i> {{_i}}GIF{{/i}}</div> {{/hasAnimatedGif}} {{#hasImage}}{{^hasAnimatedGif}} <div class="media-badge txt-size-variable--12 txt-mute"><i class="icon icon-image txt-size-variable--15 align-top"></i> {{#isMediaGridContent}}{{_i}}Images{{/i}}{{/isMediaGridContent}} {{^isMediaGridContent}}{{_i}}Image{{/i}}{{/isMediaGridContent}} </div> {{/hasAnimatedGif}}{{/hasImage}} {{#hasVideo}} <div class="media-badge txt-size-variable--12 txt-mute"><i class="icon icon-play-badge txt-size-variable--15 align-top"></i> {{_i}}Video{{/i}}</div> {{/hasVideo}} {{/isMediaPreviewOff}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{>status/tweet_media_indications}} {{#withMediaPreview}} {{#hasMedia}} {{^isMediaPreviewLarge}} {{^isMediaPreviewOff}} {{#isMediaGridContent}} <div class="js-media media-preview media-grid-container {{^isMediaPreviewCompact}} media-size-medium  margin-vm{{/isMediaPreviewCompact}} {{#isMediaPreviewCompact}} media-size-medium no-radius margin-t--8{{/isMediaPreviewCompact}}" data-key="{{id}}"> {{> status/media_preview}} </div> {{/isMediaGridContent}} {{^isMediaGridContent}} <div class="js-media media-preview {{#showThumbs}}detail-preview{{/showThumbs}} {{#isMediaPreviewCompact}} no-radius{{/isMediaPreviewCompact}} position-rel" data-key="{{id}}"> {{> status/media_preview}} {{#getMedia}} {{^isAnimatedGif}} {{^isVideo}} {{> reverse_image_search }} {{/isVideo}} {{/isAnimatedGif}} {{/getMedia}} </div> {{/isMediaGridContent}} {{/isMediaPreviewOff}} {{/isMediaPreviewLarge}} {{/hasMedia}} {{/withMediaPreview}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-tweet tweet {{#isFavorite}}is-favorite{{/isFavorite}} {{#isRetweeted}}is-retweet{{/isRetweeted}} {{#isInConvo}}is-conversation{{/isInConvo}} {{#isMinimalist}}is-minimalist{{/isMinimalist}} {{#quotedTweet}}is-quote-tweet{{/quotedTweet}} {{#quotedTweetMissing}}is-quote-tweet{{/quotedTweetMissing}} {{#withContentMute}}txt-mute{{/withContentMute}} {{#hasReplies}}js-has-replies{{/hasReplies}}"> {{#isRetweetedStatus}} <div class="tweet-context txt-size-variable--12 txt-mute padding-bs"> <div class="obj-left item-img"> <i class="pull-right icon icon-retweet-filled icon-small-context icon-retweet-color txt-size--16"></i> </div> <div class="nbfc"> {{#user}} <a href="{{getProfileURL}}" rel="user" target="_blank">{{{emojifiedName}}}</a>{{_i}} Retweeted{{/i}} {{/user}} </div> </div> {{/isRetweetedStatus}} <header class="tweet-header js-tweet-header flex flex-row flex-align--baseline"> {{#getMainUser}} {{>status/tweet_single_header}} {{/getMainUser}} {{#getMainTweet}} {{>status/tweet_timestamp}} {{/getMainTweet}} </header> {{#isInConvo}} {{#hasReplies}} <div class="thread"></div> {{/hasReplies}} {{/isInConvo}} <div class="tweet-body js-tweet-body"> {{^isInThread}} {{#getMainTweet}} <div class="nbfc txt-size-variable--12 txt-ellipsis"> {{{ getReplyContext }}} </div> {{/getMainTweet}} {{/isInThread}} <p class="js-tweet-text tweet-text {{#withLinebreaks}}with-linebreaks{{/withLinebreaks}} {{#translation}}tweet-translation-original-text margin-bn{{/translation}}" lang="{{lang}}">{{{htmlText}}}</p> <div class="js-card-container"></div> {{^hasMedia}} {{#quotedTweet}} {{{ renderQuoted }}} {{/quotedTweet}} {{#isInThread}} <div class="margin-b--5"></div> {{/isInThread}} {{/hasMedia}} {{#quotedTweetMissing}} {{>status/quoted_tweet_missing}} {{/quotedTweetMissing}} {{#translation}}{{>status/tweet_translation}}{{/translation}} {{>status/tweet_media_wrapper}} </div> {{^isInConvo}} {{#isInThread}} {{^inDialog}} <p class="color-twitter-blue txt-link txt-ellipsis link-complex-target margin-b--5">{{_i}}Show this thread{{/i}}</p> {{/inDialog}} {{#inDialog}} <p class="txt-mute">{{_i}}Show this thread{{/i}}</p> {{/inDialog}} {{/isInThread}} {{/isInConvo}} {{>status/tweet_single_footer}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<ul class="js-tweet-actions tweet-actions full-width {{#withTweetActionsVisible}}is-visible{{/withTweetActionsVisible}}"> <li class="tweet-action-item pull-left margin-r--10"> <a class="js-reply-action tweet-action position-rel" href="#" rel="reply"> <i class="icon icon-reply txt-center {{#withPrettyEngagements}}pull-left{{/withPrettyEngagements}}"></i> {{#withPrettyEngagements}} <span class="pull-right icon-reply-toggle margin-l--2 margin-t--1 txt-size--12 js-reply-count reply-count">{{#prettyReplyCount}}{{prettyReplyCount}}{{/prettyReplyCount}}</span> {{/withPrettyEngagements}} <span class="is-vishidden">{{_i}}Reply{{/i}}</span> <span class="reply-triangle"></span> </a> </li> {{#getMainUser}} <li class="tweet-action-item pull-left margin-r--10 {{#isProtected}}is-protected-action{{/isProtected}}"> <a class="tweet-action {{#isProtected}}no-pointer-events{{/isProtected}}" href="#" rel="retweet"> <i class="js-icon-retweet icon icon-retweet{{#isRetweeted}}-filled{{/isRetweeted}} icon-retweet-toggle txt-center {{#withPrettyEngagements}}pull-left{{/withPrettyEngagements}}"></i> {{#withPrettyEngagements}} <span class="pull-right icon-retweet-toggle margin-l--3 margin-t--1 txt-size--12 js-retweet-count retweet-count">{{#prettyRetweetCount}}{{prettyRetweetCount}}{{/prettyRetweetCount}}</span> {{/withPrettyEngagements}} <span class="is-vishidden">{{_i}}Retweet{{/i}}</span> </a> </li> {{/getMainUser}} <li class="tweet-action-item pull-left margin-r--10"> <a class="js-show-tip tweet-action position-rel" href="#" rel="favorite" title="{{>text/favorite_action}}"> <i class="js-icon-favorite icon {{^isFavorited}}icon-favorite{{/isFavorited}}{{#isFavorited}}icon-heart-filled{{/isFavorited}} icon-favorite-toggle txt-center {{#withPrettyEngagements}}pull-left{{/withPrettyEngagements}}"></i> {{#withPrettyEngagements}} <span class="pull-right icon-favorite-toggle margin-l--2 margin-t--1 txt-size--12 js-like-count like-count">{{#prettyLikeCount}}{{prettyLikeCount}}{{/prettyLikeCount}}</span> {{/withPrettyEngagements}} <span class="is-vishidden"> {{_i}}Like{{/i}} </span> </a> </li> <li class="tweet-action-item position-rel pull-left margin-r--10"> <a class="tweet-action" href="#" rel="actionsMenu" data-user-id="{{getMainUser.id}}" data-chirp-id="{{id}}" data-account-key="{{account.getKey}}" data-actions-menu-position="{{actionsMenuPosition}}" data-parent-chirp-id="{{chirp.id}}"> <i class="icon icon-more txt-right"></i> <span class="is-vishidden">{{_i}}More options{{/i}}</span> </a> </li> {{#withDragHandle}} <li class="feature-customtimelines tweet-drag-handle tweet-action-item pull-right margin-l--7"> <span class="tweet-action" href="{{getChirpURL}}"> <i class="icon icon-move txt-right txt-right"></i> <span class="is-vishidden">{{_i}}Drag to Collection{{/i}}</span> </span> </li> {{/withDragHandle}} {{#withRemove}} <li class="feature-customtimelines tweet-action-item pull-right margin-l--13"> <a class="js-show-tip tweet-action" href="{{getChirpURL}}" rel="removeFromCustomTimeline" data-tweet-id="{{#getMainTweet}}{{id}}{{/getMainTweet}}" title="{{_i}}Remove from Collection{{/i}}" data-placement="bottom"> <i class="icon icon-close txt-right"></i> </a> </li> {{/withRemove}} </ul>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#withFooter}} <footer class="tweet-footer cf"> {{^decider.in_reply_to_indicator}} {{#getMainTweet}} {{#inReplyToID}} <a class="pull-left margin-v--2 txt-mute txt-size--12 link-complex" href="#" rel="viewDetails"> <span class="link-complex-target"> {{_i}}View Conversation{{/i}} </span> </a> {{/inReplyToID}} {{/getMainTweet}} {{/decider.in_reply_to_indicator}} {{#withTweetActions}} {{> status/tweet_single_actions}} {{/withTweetActions}} </footer> {{/withFooter}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a class="account-link link-complex {{#withInlinedUsername}}inline{{/withInlinedUsername}}{{^withInlinedUsername}}block{{/withInlinedUsername}} flex-auto" href="{{getProfileURL}}" rel="user" target="_blank"> <div class="obj-left item-img tweet-img position-rel"> {{#withAvatar}} <img class="tweet-avatar avatar pin-top-full-width" src="{{profileImageURL}}" alt="{{screenName}}\'s avatar"> {{/withAvatar}} </div> <div class="nbfc {{#withInlinedUsername}}inline{{/withInlinedUsername}}"> <span class="account-inline txt-ellipsis{{#isProtected}} is-protected{{/isProtected}}"> <b class="fullname link-complex-target">{{{emojifiedName}}}</b> {{#isVerified}}<i class="js-show-tip sprite sprite-verified-mini" title="{{_i}}Verified account{{/i}}"></i>{{/isVerified}} <span class="username txt-mute">@{{screenName}}</span> {{#isProtected}}<i class="icon icon-protected txt-mute txt-size--14"></i>{{/isProtected}} </span> </div> </a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#created}} <time class="tweet-timestamp js-timestamp txt-mute flex-shrink--0" datetime="{{toISOString}}" data-time="{{getTime}}"> {{/created}} <a class="txt-size-variable--12 no-wrap" href="{{getChirpURL}}" rel="url" target="_blank">{{createdPretty}}</a> {{#created}} </time> {{/created}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-tweet-translation in-tweet-divider"> <p class="tweet-translation-attribution-text block txt-uppercase padding-vl txt-mute"> {{#localizedLanguageName}}{{_i}}Translated from {{localizedLanguageName}} by {{>text/microsoft_translator_link}}{{/i}}{{/localizedLanguageName}} {{^localizedLanguageName}}{{_i}}Translated by {{>text/microsoft_translator_link}}{{/i}}{{/localizedLanguageName}} </p> <p class="js-tweet-translation-text tweet-translation-text">{{#translation}}{{{htmltext}}}{{/translation}}</p> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<article class="stream-item js-stream-item {{#withDragHandle}} is-draggable {{/withDragHandle}} {{$stream_item_classes}}{{/stream_item_classes}}" {{$stream_item_data}}{{/stream_item_data}} {{#withDragHandle}} data-drag-type="tweet"{{/withDragHandle}} data-tweet-id="{{#getMainTweet}}{{id}}{{/getMainTweet}}"> <div class="js-stream-item-content item-box {{$stream_item_content_classes}}{{/stream_item_content_classes}}"> {{$content}}{{/content}} </div> </article>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="pin-right pin-bottom margin-r--20 margin-b--20 padding-v--6 padding-r--10 padding-l--12 bg-color-twitter-lightest-gray color-twitter-dark-black z-index--1 br-1 bs-1"> {{_i}}A new version of TweetDeck is available!{{/i}} <button class="js-suggest-refresh--refresh Button--primary margin-l--6">{{_i}}Refresh{{/i}}</button> <a href="#" class="js-suggest-refresh--dismiss link-normal-dark margin-l--6"><i class="icon icon-close icon-tb color-twitter-gray"></i></a> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="padding-vxl"> <p class="color-twitter-gray txt-size--13 padding-hxl padding-bxl account-settings-bb"> {{_i}}You\'ve been invited to contribute to these Twitter accounts.{{/i}} <a href="https://support.twitter.com/articles/20171753-using-team-accounts-on-tweetdeck" target="_blank" rel="url noopener noreferrer">{{_i}}Learn more{{/i}}</a>. </p> {{#invitations}} <div class="js-account-settings-invited-row padding-vl padding-hxl bg-color-twitter-white position-rel account-settings-bb" data-account-key="{{accountKey}}" {{#isAdmin}}data-user-is-admin{{/isAdmin}} data-user-id="{{userId}}"> <div class="js-account-settings-summary nbfc flex-auto"> <a href="{{profileURL}}" class="link-complex" rel="user" target="_blank"> {{>account_settings_account_summary}} </a> </div> <div class="flex-row flex margin-t--12"> <button class="js-account-action Button--primary flex-grow--1 margin-r--5" data-action="inviteAccept" data-account-key="{{accountKey}}">Accept</button> <button class="js-account-action Button--danger flex-grow--1 margin-l--5" data-action="inviteCancel" data-account-key="{{accountKey}}">Decline</button> </div> </div> {{/invitations}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div data-testid="gdprConsentModal" class="txt-center padding-v--30 padding-h--50 width--523"> <i class="padding-v--30 icon icon-twitter-bird color-twitter-blue txt-size--30"></i> <h1 class="padding-v--20 color-twitter-black txt-size--22 txt-bold">{{_i}}Updates to the Twitter Terms of Service and Privacy Policy{{/i}}</h1> <p class="padding-t--5 padding-b--20 color-twitter-dark-gray txt-size--14">{{_i}}Twitter is updating its Terms and Privacy Policy. To continue using TweetDeck, you’ll need to visit Twitter’s website and agree to the updated Terms and Privacy Policy.{{/i}}</p> <button class="js-next margin-t--10 margin-b--20 Button Button--primary">Next</button> <p class="padding-v--30 color-twitter-dark-gray txt-size--14">{{_i}}For more information, visit the{{/i}} <a href="https://help.twitter.com">{{_i}}Help Center{{/i}}</a>.</p> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{_i}}There\'s already a TweetDeck account for that email address.{{/i}} <a href="#" data-action="forgotPassword">{{_i}}Want to recover your password?{{/i}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "<b>{{{content}}}</b>"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "<br>"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "</em>"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "</strong>"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "<em>"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "{{#account}} {{^isFavorite}} {{_i}}Like from {{getUsername}}{{/i}} {{/isFavorite}} {{#isFavorite}} {{_i}}Unlike from {{getUsername}}{{/i}} {{/isFavorite}} {{/account}}"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="https://www.twitter.com/{{screenName}}/followers_you_follow" target="_blank">{{_i}}more{{/i}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a class="js-media-flag-nsfw med-flaglink {{#flagged}}is-hidden{{/flagged}}" href="#">{{_i}}Flag media{{/i}}</a> <a class="js-media-flagged-nsfw med-flaglink {{^flagged}}is-hidden{{/flagged}}" href="https://support.twitter.com/articles/20069937" rel="url" target="_blank">{{_i}}Flagged (learn more){{/i}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="{{url}}" class="med-origlink" rel="url noopener noreferrer" target="_blank">{{_i}}View original{{/i}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "&ldquo;<em>{{value}}</em>&rdquo;"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#hashFlagUrl}}<img class="hashflag" draggable="false" src="{{hashFlagUrl}}">{{/hashFlagUrl}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="https://twitter.com/{{#user}}{{screenName}}{{/user}}/lists/{{slug}}" rel="list" data-screen-name="{{#user}}{{screenName}}{{/user}}" data-slug="{{slug}}" target="_blank">{{name}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="https://twitter.com/{{#user}}{{screenName}}{{/user}}/lists/{{slug}}" rel="list" data-screen-name="{{#user}}{{screenName}}{{/user}}" data-slug="{{slug}}" target="_blank">{{fullName}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="http://support.twitter.com/articles/20170388-using-login-verification" rel="url" target="_blank" class="startflow-link">{{_i}}login verification{{/i}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="http://aka.ms/MicrosoftTranslatorAttribution" rel="url noopener noreferrer" target="_blank" class="inline-block align-middle sprite microsoft-logo margin-t--2"></a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "<strong>"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="https://twitter.com/{{#user}}{{screenName}}{{/user}}/{{slug}}" rel="user" data-user-name="{{#user}}{{screenName}}{{/user}}" class="link-complex" target="_blank"><span>@</span><span class="link-complex-target">{{#user}}{{screenName}}{{/user}}</span></a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="{{getProfileURL}}" rel="user" target="_blank">{{name}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "@{{inReplyToScreenName}}"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="https://twitter.com/search?q={{escapedSymbol}}{{searchTerm}}" rel="hashtag" target="_blank" class="link-complex"><span class="hash">{{symbol}}</span><span class="link-complex-target">{{searchTerm}}</span>{{>text/hashflag}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="https://twitter.com/{{screenName}}" rel="user" target="_blank">{{{emojifiedName}}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "<strong> {{#text}} {{text}} {{/text}} {{^text}} {{#name}} {{name}} {{/name}} {{/text}} {{{html}}} </strong>"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a class="account-link {{#withBold}}txt-bold{{/withBold}}" href="{{profileUrl}}" rel="user" target="_blank">{{#unsafe}}{{{name}}}{{/unsafe}}{{^unsafe}}{{{name}}}{{/unsafe}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a href="{{getProfileURL}}" rel="user" class="pretty-link" target="_blank">@{{screenName}}</a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<header class="js-app-header pin-all app-header"> <div class="js-app-header-inner pin-v app-header-inner"> <button class="js-show-drawer js-show-tip Button Button--primary Button--large tweet-button margin-t--4 margin-b--8" title="{{_i}}New Tweet{{/i}}" data-tooltip-position="right" data-drawer="compose"> <i class="Icon icon-compose"></i> <span class="label margin-an" data-test-id="tweet-call-to-action">{{_i}}Tweet{{/i}}</span> </button> \x3c!-- wrap close button as it has different padding --\x3e <div class="attach-compose-buttons"> <button class="js-hide-drawer margin-t--4 margin-b--8 is-hidden Button Button--primary Button--large tweet-button txt-left" data-drawer="compose"> <i class="Icon icon-compose" data-tweet-type="tweet reply"></i> <i class="Icon icon-compose-dm icon-large" data-tweet-type="message"></i> </button> </div> <div class="js-search js-overlay app-search"> <button class="js-header-action js-show-tip app-search-fake padding-al margin-bm" data-action="show-search" title="{{_i}}Search{{/i}}" data-tooltip-position="right"> <i class="icon icon-search"></i> </button> <form class="js-search-form app-search-form full-width"> <label class="is-vishidden">{{_i}}Search{{/i}}</label> {{>search_input}} </form> <div class="js-search-in-popover"></div> </div> <div class="js-column-nav-scroller column-navigator antiscroll-wrap"> <nav id="column-navigator" class="js-column-nav scroll-v antiscroll-inner"></nav> </div> <nav class="app-navigator margin-bm padding-ts"> <a class="js-header-action js-app-add-column link-clean cf app-nav-link padding-h--10 with-nav-border-t" data-action="add-column" data-title="{{_i}}Add column{{/i}}"> <div class="obj-left margin-l--2"> <i class="icon icon-plus icon-medium"></i> </div> <div class="nbfc padding-ts hide-condensed txt-size--16 app-nav-link-text">{{_i}}Add column{{/i}}</div> </a> <a class="js-header-action link-clean cf app-nav-link padding-h--10" data-action="change-sidebar-width" data-title="{{_i}}Expand{{/i}}"> <div class="obj-left margin-l--2"> <i class="icon icon-arrow-l-double icon-medium"></i> <i class="icon icon-arrow-r-double icon-medium"></i> </div> <div class="nbfc padding-ts hide-condensed txt-size--16 app-nav-link-text">{{_i}}Collapse{{/i}}</div> </a> <a class="js-show-drawer js-header-action link-clean cf app-nav-tab"  data-title="{{_i}}Accounts{{/i}}" data-drawer="accountSettings"> <div class="obj-left margin-l--2"> <i class="icon icon-user-switch icon-medium position-rel"> <span class="js-account-count msg-unread-count numbered-badge bg-color-twitter-blue numbered-badge-onnav"></span> </i> </div> <div class="nbfc padding-ts hide-condensed txt-size--16 app-nav-tab-text">{{_i}}Accounts{{/i}}</div> </a> <a class="js-hide-drawer position-rel link-clean cf app-nav-tab bg-color-twitter-lightest-gray is-hidden is-selected"  data-title="{{_i}}Accounts{{/i}}" data-drawer="accountSettings"> <div class="obj-left margin-l--2"> <i class="icon icon-user-switch icon-medium"></i> </div> <div class="nbfc padding-ts hide-condensed txt-size--16 app-nav-tab-text">{{_i}}Accounts{{/i}}</div> </a> <a class="js-header-action js-app-settings link-clean cf app-nav-link padding-h--10" data-action="settings-menu" data-title="{{_i}}Settings{{/i}}"> <div class="obj-left margin-l--2"> <i class="icon icon-settings icon-medium"></i> </div> <div class="nbfc padding-ts hide-condensed txt-size--16 app-nav-link-text">{{_i}}Settings{{/i}}</div> </a> </nav> <div class="js-account-summary"/> {{>topbar/app_title}} {{>topbar/app_title_beta}} </div> </header>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<h1 class="js-logo app-title height--53"> <div class="is-hidden visible-in-contracted-header height--53 full-width flex flex-align--center flex-justify-content--center"> <span class="tweetdeck-logo height--24 width--26 color-transparent txt-size--0">TweetDeck</span> </div> <div class="invisible-in-contracted-header height--53 full-width flex flex-align--center"> <img src="{{#asset}}/web/assets/global/tweetdeck.svg{{/asset}}" class="margin-l--12 height--24" alt="TweetDeck"/> </div> </h1>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<h1 class="js-beta-logo app-title height--53 is-hidden"> <div class="is-hidden visible-in-contracted-header height--53 full-width flex flex-column flex-align--center flex-justify-content--space-between"> <span class="tweetdeck-logo beta height--24 width--26 color-transparent txt-size--0">TweetDeck</span> <div class="full-width bg-color-twitter-blue color-twitter-white txt-size--10 txt-uppercase txt-weight-normal letter-spacing--3 padding-v--2">Beta</div> </div> <div class="invisible-in-contracted-header height--53 full-width flex flex-align--center position-rel nbfc"> <img src="{{#asset}}/web/assets/global/tweetdeck-beta.svg{{/asset}}" class="margin-l--12 height--24" alt="TweetDeck"/> <div class="position-abs width--88 margin-a---10 bg-color-twitter-blue color-twitter-white txt-size--10 txt-uppercase txt-weight-normal letter-spacing--3 txt-line-height--14 padding-v--2 beta-ribbon">Beta</div> </div> </h1>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="message-content padding-hl padding-vm {{bannerClasses}}"> <span class="message-text padding-r--20"> {{{text}}} {{#actions}} <a class="btn {{buttonClass}} margin-l--10" data-action-id="{{actionId}}" {{#isExternalUrl}} href="{{url}}" rel="url" {{/isExternalUrl}}> {{label}} </a> {{/actions}} </span> {{^isUndismissable}} <a href="#" class="js-dismiss dismiss"> <i class="icon icon-close color-twitter-white"></i> </a> {{/isUndismissable}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<a data-user-name="{{screenName}}" href="#" rel="user"> <div class="nav-user-info cf margin-r--6 txt-size--14"> <img class="obj-left tweet-avatar avatar size36 margin-h--6" src="{{profileImageURL}}" width="36" height="36" alt="{{screenName}}\'s avatar"> <div class="nbfc hide-condensed margin-t--2"> <div class="{{#isBadged}}fullname-badged-container{{/isBadged}}"> <span class="fullname txt-ellipsis inline-block txt-size--14 {{#isBadged}}fullname-badged{{/isBadged}} {{#isTranslator}}badge-translator{{/isTranslator}} {{#isVerified}}badge-verified{{/isVerified}} position-rel txt-bold"> {{{emojifiedName}}} </span> </div> <span class="username txt-ellipsis inline-block txt-size--12"> @{{screenName}} {{#isProtected}} <i class="icon icon-protected icon-match-context icon-tt"></i> {{/isProtected}} </span> </div> </div> </a>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<button class="js-try-query try-query Button Button--xsmall is-invisible flex-shrink--0 margin-l--28" data-query="{{query}}"> {{_i}}Try{{/i}} </button>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="{{#loading}}is-loading{{/loading}}"> {{#loading}} <img src="{{#asset}}/web/assets/global/backgrounds/spinner_large_white.gif{{/asset}}" alt="{{_i}}Loading…{{/i}}"> {{/loading}} {{^loading}} <a href="#" class="js-dismiss mdl-dismiss link-normal-dark"> <i class="icon icon-close color-twitter-white"></i> </a> {{/loading}} {{#twitterProfile}} <div class="s-profile prf"> {{#profile}} <div class="prf-header" style="background-image: url({{profileBannerURL}})"> <div class="prf-header-inner-overlay"></div> <div class="width-p--85 margin-a-auto position-rel padding-b--20"> <a class="js-action-url link-clean" href="{{getProfileURL}}" target="_blank"> <span class="prf-img"> <img src="{{biggerProfileImageURL}}" class="avatar size73 avatar-border--2"> </span> <strong class="fullname txt-size--24 hyphenate">{{{emojifiedName}}} {{#isVerified}}<i title="{{_i}}Verified account{{/i}}" class="js-show-tip sprite sprite-verified"></i>{{/isVerified}}{{#isTranslator}}<i title="{{_i}}Translator{{/i}}" class="js-show-tip sprite sprite-translator"></i>{{/isTranslator}}</strong> <p class="username">@{{screenName}}{{#isProtected}}<i class="icon icon-protected"></i>{{/isProtected}}<span class="prf-follow-status">{{_i}}Follows @{{preferredAccount}}{{/i}}</span></p> </a> <p class="prf-bio">{{{bio}}}</p> <p class="location txt-ellipsis"> {{location}}{{#getDisplayURL}}{{#location}}&nbsp;&nbsp;<strong>&middot;</strong>&nbsp;&nbsp;{{/location}}<a href="{{url}}" class="prf-siteurl js-action-url" target="_blank">{{getDisplayURL}}</a>{{/getDisplayURL}} </p> <p class="js-show-tip inline-block margin-t--10 is-default" title="{{prettyTimeDateJoinedDate}}"> {{_i}}Joined{{/i}}&nbsp;{{prettyJoinedDate}} </p> </div> </div> {{/profile}} <div class="prf-actions"> {{> profile_card_stats}} <div class="js-social-proof social-proof-container txt-size--13 cf padding-al is-hidden"></div> <div class="js-profile-columns"> <ul class="lst-profile cf"> {{#displayOrderProfile}} <li class="js-item-launch {{class}}" data-action="open" data-type="{{type}}"> <a href="#"> <i class="icon {{columnIconClass}}"></i> <span class="txt-ellipsis">{{title}}</span> </a> </li> {{/displayOrderProfile}} </ul> </div> </div> </div> {{/twitterProfile}} </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<p class="pull-left">{{_i}}Followed by{{/i}} </p><p class="social-proof-names pull-right">{{{followedByString}}}{{#others}} and {{{others}}}{{/others}}.</p>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#chirp}} <li class="js-typeahead-item js-typeahead-conversation-item is-actionable list-item item-box" data-search-type="conversation" data-search-query="{{title}}" data-conversation-id="{{conversationId}}" data-account-key="{{accountKey}}" data-profile-image-url="{{profile_image_url_https}} "> <div class="account-summary cf"> <div class="obj-left item-img-24"> {{^withMultipleAvatars}} {{#avatars.0}} <img class="pull-left" src="{{profileImageURL}}" width="24" height="24" alt="{{screenName}}\'s avatar"> {{/avatars.0}} {{/withMultipleAvatars}} {{#withMultipleAvatars}} <div class="pull-left media-grid-container multiple-avatar-grid-mini "> <div class="{{avatarsClass}}"> {{#avatars}} <div class="media-image-container media-image-container-mini"> <div class="media-image block position-rel" style="background-image: url({{profileImageURL}});" ></div> </div> {{/avatars}} </div> </div> {{/withMultipleAvatars}} </div> <div class="nbfc"> <div class="list-text link-complex inline-block"> {{#getConversationTitleInformation}} {{#name}} <b class="fullname block txt-ellipsis">{{{name}}}</b> {{/name}} {{^name}} {{#isOneToOne}} {{#participants.0}} <b class="fullname block txt-ellipsis">{{name}}</b> @{{screenName}} {{/participants.0}} {{/isOneToOne}} {{#isThreeway}} <b class="fullname block txt-ellipsis"> {{#participants.0}} {{name}}, {{/participants.0}} {{#participants.1}} {{name}} {{/participants.1}} </b> {{/isThreeway}} {{#isOneToMany}} {{#participants.0}} <b class="fullname block txt-ellipsis">{{name}}</b> + {{numberOfOtherParticipants}} {{/participants.0}} {{/isOneToMany}} {{/name}} {{/getConversationTitleInformation}} </div> </div> </div> </li> {{/chirp}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-typeahead-dropdown margin-t--6 scroll-v {{#styledScrollbar}}scroll-styled-v{{/styledScrollbar}}"> <div class="js-typeahead-recent-search-clear js-typeahead-item recent-search-clear is-actionable color-twitter-blue pull-right margin-r--12 margin-t--6 padding-t--2" data-search-type="recent-search-clear" data-search-query="recent-search-clear"> {{_i}}Clear all{{/i}} </div> <ul class="js-typeahead-recent-search-list is-hidden"></ul> <ul class="js-typeahead-saved-search-list is-hidden"></ul> <ul class="js-typeahead-topic-list is-hidden"></ul> <ul class="js-typeahead-user-list is-hidden"></ul> <ul class="js-typeahead-conversation-list is-hidden list-divider"></ul> <ul class="js-typeahead-lists-list is-hidden list-divider"></ul> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#lists}} <li class="js-typeahead-item js-typeahead-list-item list-item is-actionable item-box" data-search-type="list" data-search-query="{{query}}"> <div class="list-summary cf"> <div class="obj-left item-img-24"> <i class="icon icon-list icon-medium list-icon"></i> </div> <div class="nbfc"> <div class="list-text link-complex inline-block"> <b class="fullname block txt-ellipsis">{{name}}</b> <span class="username block txt-ellipsis txt-mute">@{{screenName}}</span> </div> </div> </div> </li> {{/lists}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#locations}} <li class="js-typeahead-item js-typeahead-location-item is-actionable list-item item-box" data-search-type="location" data-location-name="{{fullName}}" data-location-lat="{{lat}}" data-location-lng="{{lng}}"> {{fullName}} </li> {{/locations}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<h4 class="padding-h--12 padding-v--6 txt-bold color-twitter-darker-gray"> {{_i}}Recent searches{{/i}} </h4> {{#recentSearches}} <li class="js-typeahead-item js-typeahead-recent-search-item list-item padding-v--10 padding-h--12 is-actionable item-box" data-search-type="recent-search" data-search-query="{{query}}"> <div class="nfbc txt-ellipsis width-p--94">{{{name}}}</div> <i class="remove-recent-search-item icon icon-close icon-small pin-right margin-r--12 margin-t---17"></i> </li> {{/recentSearches}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#savedSearches}} <li class="js-typeahead-item js-typeahead-saved-search-item list-item is-actionable item-box" data-search-type="saved-search" data-search-query="{{query}}"> <div class="obj-left item-img-24"> <i class="icon icon-search icon-medium list-icon"></i> </div> <div class="nfbc list-text txt-ellipsis">{{{name}}}</div> </li> {{/savedSearches}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#topics}} <li class="js-typeahead-item js-typeahead-topic-item list-item is-actionable item-box padding-v--8 padding-h--12" data-search-type="topic" data-search-query="{{topic}}"> <div class="nfbc list-text txt-ellipsis">{{{name}}}</div> </li> {{/topics}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{! NB: this template assumes data is in format provided by typeahead, not standard user object}} {{#users}} <li class="js-typeahead-item js-typeahead-user-item is-actionable list-item item-box" data-search-type="user" data-search-query="{{screen_name}}" data-screen-name="{{screen_name}}" data-user-name="{{name}}" data-user-id="{{id}}" data-profile-image-url="{{profile_image_url_https}} "> <div class="account-summary cf"> <div class="obj-left item-img-32"> <img class="js-avatar tweet-avatar avatar size32 pull-right" src="{{profile_image_url_https}}" width="32" height="32" /> </div> <div class="nbfc"> <div class="list-text link-complex inline-block max-width-p--100"> <b class="fullname block txt-ellipsis">{{{emojifiedName}}} {{#verified}}<i class="sprite sprite-verified-mini"></i>{{/verified}} </b> <span class="username block txt-ellipsis txt-mute">@{{screen_name}}</span> </div> </div> </div> </li> {{/users}} <li class="js-typeahead-item js-typeahead-user-item is-actionable list-item item-box" data-search-query="{{query}}" data-search-type="topic" data-search-scope="users"> Search all people for <strong>{{query}}</strong> </li>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '{{#users}} <li class="js-typeahead-item js-typeahead-user-item typeahead-item padding-am cf is-actionable" data-search-type="user" data-search-query="{{screen_name}}" data-screen-name="{{screen_name}}" data-user-name="{{name}}" data-user-id="{{id_str}}" data-user-is-dm-able="{{is_dm_able}}" data-profile-image-url="{{profile_image_url_https}}" data-verified="{{verified}}"> <img src="{{profile_image_url_https}}" class="avatar obj-left size24"> <div class="nbfc txt-ellipsis padding-ts"> <strong class="fullname">{{{emojifiedName}}}</strong> {{#verified}}<i class="js-show-tip sprite sprite-verified-mini txt-bot" title="{{_i}}Verified account{{/i}}"></i>{{/verified}} <span class="username"><span>@</span><span class="js-screenname">{{screen_name}}</span></span> </div> </li> {{/users}}'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="pull-left position-rel"> <button class="js-user-actions-menu btn btn-round" data-user-id="{{profile.id}}" data-menu-position="{{actionsMenuPosition}}"> <i class="Icon icon-more"></i> </button> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-search-input-control search-input-control"> <input class="js-username-input js-submittable-input" type="text" placeholder="{{placeholder}}" value="" > {{#withSelectButton}} <a href="#" class="js-select-button txt-size--14 search-input-perform-search" tabindex="-1"> <i class="icon icon-small {{selectButtonIconClass}}"></i> </a> {{/withSelectButton}} <a href="#" class="js-clear-search txt-size--14 search-input-clear-search" tabindex="-1"> <i class="icon icon-close icon-small"></i> </a> <span class="js-spinner txt-size--14 spinner-small spinner-small-trans search-input-spinner"></span> </div>'
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = "Version {{version}}{{#buildIDShort}}-{{buildIDShort}}{{/buildIDShort}} ({{#wrapperVersion}}{{wrapperVersion}}-{{/wrapperVersion}}{{appEnv}}{{#isTouchDevice}}-touch{{/isTouchDevice}})"
}, function(e, t, i) {
    "use strict";
    i.r(t), t.default = '<div class="js-video-container video-container is-hidden position-rel color-twitter-white"> <video {{#isScheduled}}autoplay="autoplay"{{/isScheduled}} preload="auto" class="br--4" width="{{videoWidth}}" height="{{videoHeight}}" src="{{videoUrl}}"></video> <div class="js-custom-video-controls"></div> </div> <div class="js-processing-video full-width height--125 br--4 bg-color-twitter-deep-black"> <div class="processing-video-spinner"></div> <div class="color-twitter-white padding-t--8">{{_i}}Loading preview{{/i}}</div> </div>'
}, , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    window.TD = {
        storage: {},
        core: {},
        net: {},
        mustaches: "undefined" == typeof TD_mustaches ? {} : TD_mustaches,
        assetsOverlay: "undefined" == typeof TD_assetsOverlay ? {} : TD_assetsOverlay,
        templates: {},
        components: {},
        services: {},
        controller: {
            auth: {}
        },
        vo: {},
        ui: {},
        sync: {},
        cache: {}
    }
}, , , , , , function(e, t, i) {
    "use strict";
    var s = i(1),
        n = i(319);
    e.exports = s.merge({}, n, {})
}, function(e, t, i) {
    "use strict";
    var s = i(1),
        n = i(319);
    e.exports = s.merge({}, n, {
        decider_overlay: {}
    })
}, function(e, t, i) {
    "use strict";
    var s = i(1),
        n = i(319);
    e.exports = s.merge({}, n, {
        debug_level: 0,
        debug_checks: !0,
        scribe_debug_level: 0,
        flight_debug: !1,
        web_root: "https://tweetdeck.localhost.twitter.com",
        api_root: "https://tweetdeck.localhost.twitter.com",
        internal_build: !0,
        decider_overlay: {}
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(47)),
        n = a(i(32)),
        r = a(i(0));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    window.TD = window.TD || {}, window.TD.config = window.TD.config || {}, window.TD.metrics = function() {
        var e = {};

        function t(e, t) {
            return e.concat(t)
        }
        return e.DEBUG = TD.config.debug_level >= 4, e.throttle = 8e3, e.flush = !0, e.restoreFromFlush = !0, e.flushKey = "metrics.realtimeData", e.types = {
            counter: {
                key: "counters",
                empty: 0,
                append: function(e, t) {
                    return e + t
                },
                hasValue: function(e) {
                    return !!e
                },
                defaultValue: 1,
                isValidValue: function(e) {
                    return "number" == typeof e && !isNaN(e) && e > 0
                }
            },
            metric: {
                key: "metrics",
                empty: [],
                append: function(e, t) {
                    return e.concat(t)
                },
                hasValue: function(e) {
                    return !(!e || !e.length)
                },
                defaultValue: [],
                isValidValue: function(e) {
                    return t = e, "[object Array]" === Object.prototype.toString.call(t) && e.length;
                    var t
                }
            }
        }, e.env = function() {
            return TD.util && TD.util.getAppEnv ? TD.util.getAppEnv() : "unknown"
        }, e.namespaces = {
            raw: function() {
                return ""
            },
            by_id: function() {
                return [TD.version, TD.buildIDShort, e.env()].join("-")
            }
        }, e.inflateMetricTriple = function(t) {
            var i = t[0],
                s = t[1],
                r = t[2],
                a = e.makeKey(s).split(":"),
                o = a[0],
                c = a.slice(1);
            return (0, n.default)(e.namespaces).map(function(t) {
                var s = e.namespaces[t](),
                    n = [o, t, s].filter(Boolean),
                    a = e.makeKey.apply(null, n.concat(c));
                return [i, a, r]
            })
        }, e.inflate = function(i) {
            return (0, n.default)(i).map(function(s) {
                return (0, n.default)(i[s]).map(function(e) {
                    return [s, e, i[s][e]]
                }).map(e.inflateMetricTriple).reduce(t, [])
            }).reduce(t, []).reduce(function(e, t) {
                var i = t[0],
                    s = t[1],
                    n = t[2];
                return e[i] = e[i] || {}, e[i][s] = n, e
            }, {})
        }, e.log = function() {
            var t, i = {};

            function n() {
                e.send(e.inflate(i)), i = {}, t = null
            }

            function a() {
                e.throttle ? t || (t = setTimeout(n, e.throttle)) : n()
            }
            try {
                var o = localStorage.getItem(e.flushKey);
                localStorage.removeItem(e.flushKey), o && (i = JSON.parse(o), a())
            } catch (e) {}
            return (0, r.default)(window).on("beforeunload", function() {
                    if (e.flush) try {
                        localStorage.setItem(e.flushKey, (0, s.default)(i))
                    } catch (e) {}
                }), (0, r.default)(window).on("metricsFlush", function() {
                    n()
                }),
                function(t) {
                    t.key = e.makeKey(t.key), t.type = t.type || "counter";
                    var s = e.types[t.type],
                        n = i[s.key] || (i[s.key] = {}),
                        r = void 0 !== t.value ? t.value : s.defaultValue;
                    s.isValidValue(r) && (s.hasValue(n[t.key]) || (n[t.key] = s.empty), n[t.key] = s.append(n[t.key], r), a())
                }
        }(), e.send = function(e) {
            var t = TD.config.api_root + "/metrics",
                i = (0, s.default)(e);
            if ("navigator" in window && "sendBeacon" in window.navigator) navigator.sendBeacon(t, i);
            else {
                var n = new XMLHttpRequest;
                n.open("post", t), n.responseType = "text/plain";
                try {
                    n.send(i)
                } catch (e) {}
            }
        }, e.makeKey = function() {
            var e = [].slice.call(arguments);
            return ["blackbird"].concat(e).join(":").toLowerCase().replace(/^((?:blackbird:){2,})/, "blackbird:")
        }, e
    }(), TD.metrics.error = function() {
        var e = {
            preventCallThrough: !1,
            original: function() {},
            handler: function(t, i, s, n, r) {
                var a = {
                    action: "error",
                    data: {}
                };
                return r ? (a.data.type = r.constructor.name, a.data.message = r.message, a.data.stack = r.stack) : (a.data.type = (t.match(/([a-z]+error)/i) || [])[1], a.data.message = (t.match(/:(.*)$/) || [])[1], a.data.message = (a.message || "").toString().trim()), a.data.file = i, a.data.line = s, a.data.column = n, a.key = TD.metrics.makeKey(a.action, a.data.type), TD.metrics.log(a), !0 === e.preventCallThrough || e.original.apply(null, arguments)
            },
            attach: function() {
                e.attached || (e.attached = !0, e.original = window.onerror || e.original, window.onerror = e.handler)
            }
        };
        return e
    }(), TD.metrics.event = function() {
        var e = {
            handler: function(t, i) {
                e.attached && i && i.key && TD.metrics.log(i)
            },
            attach: function() {
                e.attached || (e.attached = !0, (0, r.default)(window).on("metric", e.handler))
            },
            detatch: function() {
                e.attached && ((0, r.default)(window).off("metric", e.handler), e.attached = !1)
            }
        };
        return e
    }()
}, , , , function(e, t, i) {
    "use strict";
    i(1222), i(1223), i(1224), TD.util = i(19), TD.core.defer = i(154), i(525), TD.assets = i(1542), i(1543), i(527), i(17), TD.util.poller = i(1554), TD.sync.util = i(335), i(532)
}, function(e, t, i) {
    "use strict";
    var s, n, r, a = i(0),
        o = (s = a) && s.__esModule ? s : {
            default: s
        };
    n = o.default, r = {}, n.publish = function(e, t) {
        var i = r[e];
        i && n.each(i, function() {
            this.apply(n, t || [])
        })
    }, n.subscribe = function(e, t) {
        return r[e] || (r[e] = []), r[e].push(t), [e, t]
    }, n.unsubscribe = function(e) {
        if (!(e && e instanceof Array)) throw new Error("unsubscribe(): handle must be an instance of Array.");
        var t = e[0];
        r[t] && n.each(r[t], function(i) {
            this == e[1] && r[t].splice(i, 1)
        })
    }, n.unsubscribeAll = function(e) {
        delete r[e]
    }
}, function(e, t, i) {
    "use strict";
    var s;
    window.TD = window.TD || {}, TD.core = TD.core || {}, TD.core.base64 = (s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", {
        encode: function(e) {
            var t, i, n, r, a, o, c, l = "",
                u = 0;
            for (e = function(e) {
                    e = e.replace(/\r\n/g, "\n");
                    for (var t = "", i = 0; i < e.length; i++) {
                        var s = e.charCodeAt(i);
                        s < 128 ? t += String.fromCharCode(s) : s > 127 && s < 2048 ? (t += String.fromCharCode(s >> 6 | 192), t += String.fromCharCode(63 & s | 128)) : (t += String.fromCharCode(s >> 12 | 224), t += String.fromCharCode(s >> 6 & 63 | 128), t += String.fromCharCode(63 & s | 128))
                    }
                    return t
                }(e); u < e.length;) r = (t = e.charCodeAt(u++)) >> 2, a = (3 & t) << 4 | (i = e.charCodeAt(u++)) >> 4, o = (15 & i) << 2 | (n = e.charCodeAt(u++)) >> 6, c = 63 & n, isNaN(i) ? o = c = 64 : isNaN(n) && (c = 64), l = l + s.charAt(r) + s.charAt(a) + s.charAt(o) + s.charAt(c);
            return l
        },
        decode: function(e) {
            var t, i, n, r, a, o, c = "",
                l = 0;
            for (e = e.replace(/[^A-Za-z0-9\+\/\=]/g, ""); l < e.length;) t = s.indexOf(e.charAt(l++)) << 2 | (r = s.indexOf(e.charAt(l++))) >> 4, i = (15 & r) << 4 | (a = s.indexOf(e.charAt(l++))) >> 2, n = (3 & a) << 6 | (o = s.indexOf(e.charAt(l++))), c += String.fromCharCode(t), 64 != a && (c += String.fromCharCode(i)), 64 != o && (c += String.fromCharCode(n));
            return c = function(e) {
                for (var t = "", i = 0, s = 0, n = 0, r = 0; i < e.length;)(s = e.charCodeAt(i)) < 128 ? (t += String.fromCharCode(s), i++) : s > 191 && s < 224 ? (n = e.charCodeAt(i + 1), t += String.fromCharCode((31 & s) << 6 | 63 & n), i += 2) : (n = e.charCodeAt(i + 1), r = e.charCodeAt(i + 2), t += String.fromCharCode((15 & s) << 12 | (63 & n) << 6 | 63 & r), i += 3);
                return t
            }(c)
        }
    })
}, function(e, t, i) {
    "use strict";
    window.TD = window.TD || {}, TD.core = TD.core || {}, TD.core.sha1 = function(e) {
        function t(e, t) {
            return e << t | e >>> 32 - t
        }

        function i(e) {
            var t, i = "";
            for (t = 7; t >= 0; t--) i += (e >>> 4 * t & 15).toString(16);
            return i
        }
        var s, n, r, a, o, c, l, u, d, h = new Array(80),
            m = 1732584193,
            f = 4023233417,
            p = 2562383102,
            g = 271733878,
            v = 3285377520,
            T = (e = function(e) {
                e = e.replace(/\r\n/g, "\n");
                for (var t = "", i = 0; i < e.length; i++) {
                    var s = e.charCodeAt(i);
                    s < 128 ? t += String.fromCharCode(s) : s > 127 && s < 2048 ? (t += String.fromCharCode(s >> 6 | 192), t += String.fromCharCode(63 & s | 128)) : (t += String.fromCharCode(s >> 12 | 224), t += String.fromCharCode(s >> 6 & 63 | 128), t += String.fromCharCode(63 & s | 128))
                }
                return t
            }(e)).length,
            w = new Array;
        for (n = 0; n < T - 3; n += 4) r = e.charCodeAt(n) << 24 | e.charCodeAt(n + 1) << 16 | e.charCodeAt(n + 2) << 8 | e.charCodeAt(n + 3), w.push(r);
        switch (T % 4) {
            case 0:
                n = 2147483648;
                break;
            case 1:
                n = e.charCodeAt(T - 1) << 24 | 8388608;
                break;
            case 2:
                n = e.charCodeAt(T - 2) << 24 | e.charCodeAt(T - 1) << 16 | 32768;
                break;
            case 3:
                n = e.charCodeAt(T - 3) << 24 | e.charCodeAt(T - 2) << 16 | e.charCodeAt(T - 1) << 8 | 128
        }
        for (w.push(n); w.length % 16 != 14;) w.push(0);
        for (w.push(T >>> 29), w.push(T << 3 & 4294967295), s = 0; s < w.length; s += 16) {
            for (n = 0; n < 16; n++) h[n] = w[s + n];
            for (n = 16; n <= 79; n++) h[n] = t(h[n - 3] ^ h[n - 8] ^ h[n - 14] ^ h[n - 16], 1);
            for (a = m, o = f, c = p, l = g, u = v, n = 0; n <= 19; n++) d = t(a, 5) + (o & c | ~o & l) + u + h[n] + 1518500249 & 4294967295, u = l, l = c, c = t(o, 30), o = a, a = d;
            for (n = 20; n <= 39; n++) d = t(a, 5) + (o ^ c ^ l) + u + h[n] + 1859775393 & 4294967295, u = l, l = c, c = t(o, 30), o = a, a = d;
            for (n = 40; n <= 59; n++) d = t(a, 5) + (o & c | o & l | c & l) + u + h[n] + 2400959708 & 4294967295, u = l, l = c, c = t(o, 30), o = a, a = d;
            for (n = 60; n <= 79; n++) d = t(a, 5) + (o ^ c ^ l) + u + h[n] + 3395469782 & 4294967295, u = l, l = c, c = t(o, 30), o = a, a = d;
            m = m + a & 4294967295, f = f + o & 4294967295, p = p + c & 4294967295, g = g + l & 4294967295, v = v + u & 4294967295
        }
        return (d = i(m) + i(f) + i(p) + i(g) + i(v)).toLowerCase()
    }
}, function(e, t, i) {
    "use strict";
    var s = {};
    e.exports = s, s.getMessage = function(e) {
        if ("undefined" != typeof TD_locale_messages) {
            var t = TD_locale_messages[e];
            return t && t.message ? t.message : void 0
        }
    }
}function(e, t, i) {
    var s = {
        "./en-au": 520,
        "./en-au.js": 520,
        "./en-ca": 521,
        "./en-ca.js": 521,
        "./en-gb": 522,
        "./en-gb.js": 522,
        "./en-ie": 523,
        "./en-ie.js": 523,
        "./en-nz": 524,
        "./en-nz.js": 524
    };

    function n(e) {
        var t = r(e);
        return i(t)
    }

    function r(e) {
        var t = s[e];
        if (!(t + 1)) {
            var i = new Error("Cannot find module '" + e + "'");
            throw i.code = "MODULE_NOT_FOUND", i
        }
        return t
    }
    n.keys = function() {
        return Object.keys(s)
    }, n.resolve = r, e.exports = n, n.id = 1534
}, , , , , , , , function(e, t, i) {
    "use strict";
    var s = {
        td_screenshot: "/web/assets/global/backgrounds/td_screenshot@{{resolution}}.png",
        templates: "/web/templates/{{name}}.html",
        unbundled: "/web/scripts/unbundled/{{name}}.js",
        logos: "/web/assets/logos/{{name}}.png",
        html: "/web/{{name}}.html"
    };
    e.exports = {
        get: function(e, t) {
            var i, n = s[e] ? (i = (i = t) || {}, (s[e] || "").replace(/\{\{([^{}]*?)\}\}/g, function(e, t) {
                var s = i[t];
                return "string" == typeof s || "number" == typeof s ? s : e
            })) : e;
            return (TD.assetsOverlay || {})[n] || n || e
        }
    }
}, function(e, t, i) {
    "use strict";
    TD.constants = {
        keyCodes: {
            enter: 13,
            shift: 16,
            escape: 27,
            tab: 9,
            del: 8,
            spacebar: 32,
            upArrow: 38,
            downArrow: 40,
            leftArrow: 37,
            rightArrow: 39
        },
        charCodes: {
            space: 32,
            questionMark: 63
        },
        regexps: {
            name: /\S+/,
            username: /^[@＠]?([a-zA-Z0-9_]{1,15})$/,
            usernameWithAt: /^[@＠]{1}([a-zA-Z0-9_]{1,15}) /,
            usernameWithSpace: /^[@＠]{1}(\w{1,15})\s*$/,
            email: /^[\w-]+([^@,\s\<\>\(\)]*[\w-]+)?\@[\w-]+(\.[\w-]+)*\.[a-z]{2,}$/i,
            tokenSeparator: /[\s-_]+/
        },
        time: {
            oneDay: 864e5,
            oneHour: 36e5
        },
        TDApi: {
            ERROR_ACCOUNT_DOESNT_EXIST: "Account does not exist.",
            ERROR_BAD_PASSWORD: "BadPassword",
            ERROR_SESSION_EXPIRED: "SessionExpired",
            ERROR_RATE_LIMIT_EXCEEDED: "RateLimitExceeded"
        }
    }
}, , , , , , , , , , , function(e, t, i) {
    "use strict";
    var s = a(i(1)),
        n = a(i(17)),
        r = a(i(182));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.isCacheHit = function(e) {
        return e.chirps.length || e.remainderCursor.interval.empty
    }, t.getRefreshCursor = function(e, i) {
        var s = n.default.reorderableFeedTypes[e.getType()];
        return {
            bounds: {
                lower: s ? void 0 : t.calculateLowerBound(e.getKey(), i, {
                    isGapless: n.default.gaplessFeedTypes[e.getType()]
                })
            },
            interval: t.getRefreshCursorInterval(i, {
                isReorderable: s
            })
        }
    }, t.getRefreshCursorInterval = function(e) {
        var t = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).isReorderable,
            i = void 0 !== t && t ? void 0 : e.find(function(e) {
                return "rest" === e.apiSource
            });
        return new r.default(i ? r.default.excEnd(i) : r.default.negInf, r.default.posInf)
    }, t.getBottomChirp = function(e) {
        return e[e.length - 1]
    }, t.getTopChirp = function(e) {
        return e[0]
    }, t.makeChirpInterval = function(e) {
        return 0 === e.length ? r.default.empty : new r.default(r.default.incEnd(t.getBottomChirp(e)), r.default.incEnd(t.getTopChirp(e)))
    }, t.makeRequestResultInterval = function(e, i) {
        return 0 === e.length ? r.default.empty : new r.default(r.default.incEnd(t.getBottomChirp(e)), i.to)
    }, t.getBoundsForChirp = function(e, i) {
        return {
            lower: t.getLowerBoundForChirp(e, i),
            upper: t.getUpperBoundForChirp(e, i)
        }
    }, t.annotateChirpsWithApiBounds = function(e, t) {
        return t.map(function(t) {
            var i = TD.util.poller.getBoundsForChirp(e.getType(), t);
            return t.setApiBounds(e.getKey(), i)
        })
    }, t.calculateUpperBound = function(e, t) {
        for (var i, s = t.length - 1; s >= 0 && (void 0 === i || null === i);) i = t[s].getApiBounds(e).upper, s -= 1;
        return i
    }, t.getUpperBoundForChirp = function(e, t) {
        var i, s = TD.controller.FeedPoller.CURSORED_ON_TWEET_TIMESTAMP[e],
            n = e === TD.controller.FeedPoller.FEED_TYPES.search,
            r = TD.controller.FeedPoller.CURSORED_FEED_TYPES[e],
            a = TD.controller.FeedPoller.SCHEDULED_FEED_TYPES[e],
            o = e === TD.controller.FeedPoller.FEED_TYPES.dataminr,
            c = e === TD.controller.FeedPoller.FEED_TYPES.direct,
            l = t.id,
            u = TD.decider.get("universal_search_timelines"),
            d = function(e, t, i) {
                return t > e.length - 1 ? e : e.substr(0, t) + i + e.substr(t + 1)
            };
        if (a) l = t.created.getTime() / 1e3;
        else if (n && u) l = u && TD.decider.get("universal_search_timelines_by_id") ? t.id : t.created.getTime() / 1e3;
        else if (s) l = t.minPosition || t.created.getTime(), l -= 1;
        else if (r) l = t.cursor;
        else if (o) l = t.dataminr.created.getTime();
        else if (c) l = t.minEntryId;
        else if ("string" == typeof l)
            for (var h = l.length - 1; h >= 0; h--) {
                if ("0" !== (i = l.charAt(h))) {
                    l = d(l, h, i = String(Number(i) - 1));
                    break
                }
                l = d(l, h, 9)
            } else l--;
        return l
    }, t.calculateLowerBound = function(e, t, i) {
        for (var n, r = (i = s.default.defaults({}, i, {
                isGapless: !1
            })).isGapless ? 0 : 1; r < t.length && void 0 === n;) "rest" === t[r].apiSource && (n = t[r].getApiBounds(e).lower), r += 1;
        return n
    }, t.getLowerBoundForChirp = function(e, t) {
        var i = TD.controller.FeedPoller.CURSORED_ON_TWEET_TIMESTAMP[e],
            s = e === TD.controller.FeedPoller.FEED_TYPES.search,
            n = TD.controller.FeedPoller.CURSORED_FEED_TYPES[e],
            r = TD.controller.FeedPoller.SCHEDULED_FEED_TYPES[e],
            a = e === TD.controller.FeedPoller.FEED_TYPES.dataminr,
            o = e === TD.controller.FeedPoller.FEED_TYPES.direct,
            c = TD.decider.get("universal_search_timelines");
        return r ? t.created.getTime() / 1e3 : s && c ? c && TD.decider.get("universal_search_timelines_by_id") ? t.id : t.created.getTime() / 1e3 : i ? t.maxPosition || t.created.getTime().toString() : n ? t.cursor : a ? t.dataminr.created.getTime() : o ? t.cursor : t.getSinceId()
    }
}, function(e, t, i) {
    "use strict";
    i.r(t);
    var s = i(0);
    /**
     * @license
     * jQuery Tools 1.2.5 Dateinput - <input type="date" /> for humans
     *
     * NO COPYRIGHTS OR LICENSES. DO WHAT YOU LIKE.
     *
     * http://flowplayer.org/tools/form/dateinput/
     *
     * Since: Mar 2010
     * Date:    Wed Sep 22 06:02:10 2010 +0000
     */
    ! function(e) {
        e.tools = e.tools || {
            version: "1.2.5"
        };
        var t, i = [],
            s = [75, 76, 38, 39, 74, 72, 40, 37],
            n = {};

        function r(e, t) {
            return 32 - new Date(e, t, 32).getDate()
        }

        function a(e, t) {
            for (e = "" + e, t = t || 2; e.length < t;) e = "0" + e;
            return e
        }(t = e.tools.dateinput = {
            conf: {
                format: "mm/dd/yy",
                selectors: !1,
                yearRange: [-5, 5],
                lang: "en",
                offset: [0, 0],
                speed: 0,
                firstDay: 0,
                min: void 0,
                max: void 0,
                trigger: !1,
                css: {
                    prefix: "cal",
                    input: "date",
                    root: 0,
                    head: 0,
                    title: 0,
                    prev: 0,
                    next: 0,
                    month: 0,
                    year: 0,
                    days: 0,
                    body: 0,
                    weeks: 0,
                    today: 0,
                    current: 0,
                    week: 0,
                    off: 0,
                    sunday: 0,
                    focus: 0,
                    disabled: 0,
                    trigger: 0
                }
            },
            localize: function(t, i) {
                e.each(i, function(e, t) {
                    i[e] = t.split(",")
                }), n[t] = i
            }
        }).localize("en", {
            months: "January,February,March,April,May,June,July,August,September,October,November,December",
            shortMonths: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec",
            days: "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday",
            shortDays: "S,M,T,W,T,F,S"
        });
        var o = /d{1,4}|m{1,4}|yy(?:yy)?|"[^"]*"|'[^']*'/g,
            c = e("<a/>");

        function l(e, t, i) {
            var s = e.getDate(),
                r = e.getDay(),
                l = e.getMonth(),
                u = e.getFullYear(),
                d = {
                    d: s,
                    dd: a(s),
                    ddd: n[i].shortDays[r],
                    dddd: n[i].days[r],
                    m: l + 1,
                    mm: a(l + 1),
                    mmm: n[i].shortMonths[l],
                    mmmm: n[i].months[l],
                    yy: String(u).slice(2),
                    yyyy: u
                },
                h = t.replace(o, function(e) {
                    return e in d ? d[e] : e.slice(1, e.length - 1)
                });
            return c.html(h).html()
        }

        function u(e) {
            return parseInt(e, 10)
        }

        function d(e, t) {
            return e.getFullYear() === t.getFullYear() && e.getMonth() == t.getMonth() && e.getDate() == t.getDate()
        }

        function h(e) {
            if (e) {
                if (e.constructor == Date) return e;
                if ("string" == typeof e) {
                    var t = e.split("-");
                    if (3 == t.length) return new Date(u(t[0]), u(t[1]) - 1, u(t[2]));
                    if (!/^-?\d+$/.test(e)) return;
                    e = u(e)
                }
                var i = new Date;
                return i.setDate(i.getDate() + e), i
            }
        }
        e.expr[":"].date = function(t) {
            var i = t.getAttribute("type");
            return i && "date" == i || !!e(t).data("dateinput")
        }, e.fn.dateinput = function(a) {
            return this.data("dateinput") ? this : (a = e.extend(!0, {}, t.conf, a), e.each(a.css, function(e, t) {
                t || "prefix" == e || (a.css[e] = (a.css.prefix || "") + (t || e))
            }), this.each(function() {
                var t = new function(t, a) {
                    var o, c, m, f, p, g, v = this,
                        T = new Date,
                        w = a.css,
                        b = n[a.lang],
                        y = e("#" + w.root),
                        C = y.find("#" + w.title),
                        _ = t.attr("data-value") || a.value || t.val(),
                        D = t.attr("min") || a.min,
                        S = t.attr("max") || a.max;
                    if (0 === D && (D = "0"), _ = h(_) || T, D = h(D || 365 * a.yearRange[0]), S = h(S || 365 * a.yearRange[1]), !b) throw "Dateinput: invalid language: " + a.lang;
                    if ("date" == t.attr("type")) {
                        var k = e("<input/>");
                        e.each("class,disabled,id,maxlength,name,readonly,required,size,style,tabindex,title,value".split(","), function(e, i) {
                            k.attr(i, t.attr(i))
                        }), t.replaceWith(k), t = k
                    }
                    t.addClass(w.input);
                    var E = t.add(v);
                    if (!y.length) {
                        if ((y = e("<div><div><div/></div><div><div/><div/></div></div>").hide().css({
                                position: "relative"
                            }).attr("id", w.root)).children().eq(0).attr("id", w.head).end().eq(1).attr("id", w.body).children().eq(0).attr("id", w.days).end().eq(1).attr("id", w.weeks).end().end().end(), C = y.find("#" + w.head).find("div").attr("id", w.title), a.selectors) {
                            var I = e("<select/>").attr("id", w.month),
                                A = e("<select/>").attr("id", w.year);
                            C.html(I.add(A))
                        }
                        for (var M = y.find("#" + w.days), x = 0; x < 7; x++) M.append(e("<span/>").text(b.shortDays[(x + a.firstDay) % 7]));
                        e("#calendar").append(y)
                    }
                    var R = y.find("#" + w.weeks);

                    function F(i, s, n) {
                        _ = i, m = i.getFullYear(), f = i.getMonth(), p = i.getDate(), (n = n || e.Event("api")).type = "change", E.trigger(n, [i]), n.isDefaultPrevented() || (t.val(l(i, s.format, s.lang)), t.data("date", i), v.hide(n))
                    }

                    function O(e) {
                        e.type = "onShow", E.trigger(e)
                    }
                    A = y.find("#" + w.year), I = y.find("#" + w.month), e.extend(v, {
                        show: function(s) {
                            if (!(t.attr("readonly") || t.attr("disabled") || g || ((s = s || e.Event()).type = "onBeforeShow", E.trigger(s), s.isDefaultPrevented()))) {
                                e.each(i, function() {
                                    this.hide()
                                }), g = !0, I.unbind("change").change(function() {
                                    v.setValue(A.val(), e(this).val())
                                }), A.unbind("change").change(function() {
                                    v.setValue(e(this).val(), I.val())
                                }), o = y.find("#" + w.prev).unbind("click").click(function(e) {
                                    return o.hasClass(w.disabled) || v.addMonth(-1), !1
                                }), c = y.find("#" + w.next).unbind("click").click(function(e) {
                                    return c.hasClass(w.disabled) || v.addMonth(), !1
                                }), v.setValue(_);
                                var n = t.offset();
                                return /iPad/i.test(navigator.userAgent) && (n.top -= e(window).scrollTop()), a.speed ? y.show(a.speed, function() {
                                    O(s)
                                }) : (y.show(), O(s)), v
                            }
                        },
                        setValue: function(t, i, s) {
                            var n = u(i) >= -1 ? new Date(u(t), u(i), u(s || 1)) : t || _;
                            if (n < D ? n = D : n > S && (n = S), t = n.getFullYear(), i = n.getMonth(), s = n.getDate(), -1 == i ? (i = 11, t--) : 12 == i && (i = 0, t++), !g) return F(n, a), v;
                            f = i, m = t, p = s;
                            var l, h = new Date(t, i, 1 - a.firstDay).getDay(),
                                y = r(t, i),
                                k = r(t, i - 1);
                            if (a.selectors) {
                                I.empty(), e.each(b.months, function(i, s) {
                                    D < new Date(t, i + 1, -1) && S > new Date(t, i, 0) && I.append(e("<option/>").html(s).attr("value", i))
                                }), A.empty();
                                for (var E = T.getFullYear(), M = E + a.yearRange[0]; M < E + a.yearRange[1]; M++) D <= new Date(M + 1, -1, 1) && S > new Date(M, 0, 0) && A.append(e("<option/>").text(M));
                                I.val(i), A.val(t)
                            } else C.html(b.months[i] + " " + t);
                            R.empty(), o.add(c).removeClass(w.disabled);
                            for (var x, O, L = h ? 0 : -7; L < (h ? 42 : 35); L++) x = e("<a/>"), L % 7 == 0 && (l = e("<div/>").addClass(w.week), R.append(l)), L < h ? (x.addClass(w.off), O = k - h + L + 1, n = new Date(t, i - 1, O)) : L >= h + y ? (x.addClass(w.off), O = L - y - h + 1, n = new Date(t, i + 1, O)) : (O = L - h + 1, n = new Date(t, i, O), d(_, n) ? x.attr("id", w.current).addClass(w.focus) : d(T, n) && x.attr("id", w.today)), D && n < D && x.add(o).addClass(w.disabled), S && n > S && x.add(c).addClass(w.disabled), x.attr("href", "#" + O).text(O).data("date", n), l.append(x);
                            return R.find("a").click(function(t) {
                                var i = e(this);
                                return i.hasClass(w.disabled) || (e("#" + w.current).removeAttr("id"), i.attr("id", w.current), F(i.data("date"), a, t)), !1
                            }), w.sunday && R.find(w.week).each(function() {
                                var t = a.firstDay ? 7 - a.firstDay : 0;
                                e(this).children().slice(t, t + 1).addClass(w.sunday)
                            }), v
                        },
                        setMin: function(e, t) {
                            return D = h(e), t && _ < D && v.setValue(D), v
                        },
                        setMax: function(e, t) {
                            return S = h(e), t && _ > S && v.setValue(S), v
                        },
                        today: function() {
                            return v.setValue(T)
                        },
                        addDay: function(e) {
                            return this.setValue(m, f, p + (e || 1))
                        },
                        addMonth: function(e) {
                            return this.setValue(m, f + (e || 1), p)
                        },
                        addYear: function(e) {
                            return this.setValue(m + (e || 1), f, p)
                        },
                        hide: function(t) {
                            if (g) {
                                if ((t = e.Event()).type = "onHide", E.trigger(t), e(document).unbind("click.d").unbind("keydown.d"), t.isDefaultPrevented()) return;
                                y.hide(), g = !1
                            }
                            return v
                        },
                        getConf: function() {
                            return a
                        },
                        getInput: function() {
                            return t
                        },
                        getCalendar: function() {
                            return y
                        },
                        getValue: function(e) {
                            return e ? l(_, e, a.lang) : _
                        },
                        isOpen: function() {
                            return g
                        }
                    }), e.each(["onBeforeShow", "onShow", "change", "onHide"], function(t, i) {
                        e.isFunction(a[i]) && e(v).bind(i, a[i]), v[i] = function(t) {
                            return t && e(v).bind(i, t), v
                        }
                    }), t.bind("focus click", v.show).keydown(function(t) {
                        var i = t.keyCode;
                        return !g && e(s).index(i) >= 0 ? (v.show(t), t.preventDefault()) : !!(t.shiftKey || t.ctrlKey || t.altKey || 9 == i) || t.preventDefault()
                    }), h(t.val()) && F(_, a)
                }(e(this), a);
                i.push(t);
                var c = t.getInput().data("dateinput", t);
                o = o ? o.add(c) : c
            }), o || this);
            var o
        }
    }(i.n(s).a)
}, function(e, t, i) {
    "use strict";
    i.r(t);
    var s, n = i(0);
    (s = i.n(n).a)(function() {
        var e;
        s.support.transition = (e = function() {
            var e, t = document.createElement("bootstrap"),
                i = {
                    WebkitTransition: "webkitTransitionEnd",
                    MozTransition: "transitionend",
                    OTransition: "oTransitionEnd otransitionend",
                    transition: "transitionend"
                };
            for (e in i)
                if (void 0 !== t.style[e]) return i[e]
        }()) && {
            end: e
        }
    })
}, function(e, t, i) {
    "use strict";
    i.r(t);
    var s = i(0);
    ! function(e) {
        var t = function(e, t) {
            this.init("tooltip", e, t)
        };
        t.prototype = {
            constructor: t,
            init: function(t, i, s) {
                var n, r, a, o, c;
                for (this.type = t, this.$element = e(i), this.options = this.getOptions(s), this.enabled = !0, c = (a = this.options.trigger.split(" ")).length; c--;) "click" == (o = a[c]) ? this.$element.on("click." + this.type, this.options.selector, e.proxy(this.toggle, this)) : "manual" != o && (n = "hover" == o ? "mouseenter" : "focus", r = "hover" == o ? "mouseleave" : "blur", this.$element.on(n + "." + this.type, this.options.selector, e.proxy(this.enter, this)), this.$element.on(r + "." + this.type, this.options.selector, e.proxy(this.leave, this)));
                this.options.selector ? this._options = e.extend({}, this.options, {
                    trigger: "manual",
                    selector: ""
                }) : this.fixTitle()
            },
            getOptions: function(t) {
                return (t = e.extend({}, e.fn[this.type].defaults, t, this.$element.data())).delay && "number" == typeof t.delay && (t.delay = {
                    show: t.delay,
                    hide: t.delay
                }), t
            },
            enter: function(t) {
                var i = e(t.currentTarget)[this.type](this._options).data(this.type);
                if (!i.options.delay || !i.options.delay.show) return i.show();
                clearTimeout(this.timeout), i.hoverState = "in", this.timeout = setTimeout(function() {
                    "in" == i.hoverState && i.show()
                }, i.options.delay.show)
            },
            leave: function(t) {
                var i = e(t.currentTarget)[this.type](this._options).data(this.type);
                if (this.timeout && clearTimeout(this.timeout), !i.options.delay || !i.options.delay.hide) return i.hide();
                i.hoverState = "out", this.timeout = setTimeout(function() {
                    "out" == i.hoverState && i.hide()
                }, i.options.delay.hide)
            },
            show: function() {
                var t, i, s, n, r, a, o = e.Event("show");
                if (this.hasContent() && this.enabled) {
                    if (this.$element.trigger(o), o.isDefaultPrevented()) return;
                    t = this.tip(), this.setContent(), this.options.animation && t.addClass("fade"), t.detach(), this.options.container ? t.appendTo(this.options.container) : t.insertAfter(this.$element), r = this.getPlacement(), t.css({
                        top: "object" == typeof r ? r.top : 0,
                        left: "object" == typeof r ? r.left : 0,
                        display: "block"
                    }), i = this.getPosition(), s = t[0].offsetWidth, n = t[0].offsetHeight, this.elementOffset = this.$element.offset();
                    switch (this.interval && clearTimeout(this.interval), this.interval = setInterval(function() {
                        requestAnimationFrame(function() {
                            var e = this.$element.closest("body").length > 0,
                                t = this.$element.offset(),
                                i = this.elementOffset && (this.elementOffset.top != t.top || this.elementOffset.left != t.left);
                            e && !i || this.hide()
                        }.bind(this))
                    }.bind(this), 500), r) {
                        case "bottom":
                            a = {
                                top: i.top + i.height,
                                left: i.left + i.width / 2 - s / 2
                            };
                            break;
                        case "top":
                            a = {
                                top: i.top - n,
                                left: i.left + i.width / 2 - s / 2
                            };
                            break;
                        case "left":
                            a = {
                                top: i.top + i.height / 2 - n / 2,
                                left: i.left - s
                            };
                            break;
                        case "right":
                            a = {
                                top: i.top + i.height / 2 - n / 2,
                                left: i.left + i.width
                            }
                    }
                    this.applyPlacement(a, r.className || r), this.$element.trigger("shown")
                }
            },
            applyPlacement: function(e, t) {
                var i, s, n, r, a = this.tip(),
                    o = a[0].offsetWidth,
                    c = a[0].offsetHeight;
                a.offset(e).addClass("string" == typeof t ? t : t.placement).addClass("in"), i = a[0].offsetWidth, s = a[0].offsetHeight, "top" == t && s != c && (e.top = e.top + c - s, r = !0), "bottom" == t || "top" == t ? (n = 0, e.left < 0 && (n = -2 * e.left, e.left = 0, a.offset(e), i = a[0].offsetWidth, s = a[0].offsetHeight), this.replaceArrow(n - o + i, i, "left")) : this.replaceArrow(s - c, s, "top"), r && a.offset(e)
            },
            replaceArrow: function(e, t, i) {
                this.arrow().css(i, e ? 50 * (1 - e / t) + "%" : "")
            },
            setContent: function() {
                var e = this.tip(),
                    t = this.getTitle();
                e.find(".tooltip-inner")[this.options.html ? "html" : "text"](t), e.removeClass("fade in top bottom left right")
            },
            hide: function() {
                var t, i = this.tip(),
                    s = e.Event("hide");
                if (this.$element.trigger(s), !s.isDefaultPrevented()) return i.removeClass("in"), !this.options.suppressFadeOut && e.support.transition && this.$tip.hasClass("fade") ? (t = setTimeout(function() {
                    i.off(e.support.transition.end).detach()
                }, 500), i.one(e.support.transition.end, function() {
                    clearTimeout(t), i.detach()
                })) : i.detach(), this.elementOffset = null, clearInterval(this.interval), this.$element.trigger("hidden"), this
            },
            fixTitle: function() {
                var e = this.$element;
                (e.attr("title") || "string" != typeof e.attr("data-original-title")) && e.attr("data-original-title", e.attr("title") || "").attr("title", "")
            },
            hasContent: function() {
                return this.getTitle()
            },
            getPlacement: function() {
                var e = this.$element.attr("data-tooltip-position");
                return e || (e = "function" == typeof this.options.placement ? this.options.placement.call(this, this.$tip[0], this.$element[0]) : this.options.placement), e
            },
            getPosition: function() {
                var t = this.$element[0];
                return e.extend({}, "function" == typeof t.getBoundingClientRect ? t.getBoundingClientRect() : {
                    width: t.offsetWidth,
                    height: t.offsetHeight
                }, this.$element.offset())
            },
            getTitle: function() {
                var e = this.$element,
                    t = this.options;
                return e.attr("data-original-title") || ("function" == typeof t.title ? t.title.call(e[0]) : t.title)
            },
            tip: function() {
                return this.$tip = this.$tip || e(this.options.template)
            },
            arrow: function() {
                return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
            },
            validate: function() {
                this.$element[0].parentNode || (this.hide(), this.$element = null, this.options = null)
            },
            enable: function() {
                this.enabled = !0
            },
            disable: function() {
                this.enabled = !1
            },
            toggleEnabled: function() {
                this.enabled = !this.enabled
            },
            toggle: function(t) {
                var i = t ? e(t.currentTarget)[this.type](this._options).data(this.type) : this;
                i.tip().hasClass("in") ? i.hide() : i.show()
            },
            destroy: function() {
                this.hide().$element.off("." + this.type).removeData(this.type)
            }
        };
        var i = e.fn.tooltip;
        e.fn.tooltip = function(i) {
            return this.each(function() {
                var s = e(this),
                    n = s.data("tooltip"),
                    r = "object" == typeof i && i;
                n || s.data("tooltip", n = new t(this, r)), "string" == typeof i && n[i]()
            })
        }, e.fn.tooltip.Constructor = t, e.fn.tooltip.defaults = {
            animation: !0,
            placement: "top",
            selector: !1,
            template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
            trigger: "hover focus",
            title: "",
            delay: 0,
            html: !1,
            container: !1
        }, e.fn.tooltip.noConflict = function() {
            return e.fn.tooltip = i, this
        }
    }(i.n(s).a)
}, function(e, t, i) {
    "use strict";
    i.r(t);
    var s = i(0),
        n = i.n(s);
    n.a.easing.jswing = n.a.easing.swing, n.a.extend(n.a.easing, {
        def: "easeOutQuad",
        swing: function(e, t, i, s, r) {
            return n.a.easing[n.a.easing.def](e, t, i, s, r)
        },
        easeInQuad: function(e, t, i, s, n) {
            return s * (t /= n) * t + i
        },
        easeOutQuad: function(e, t, i, s, n) {
            return -s * (t /= n) * (t - 2) + i
        },
        easeInOutQuad: function(e, t, i, s, n) {
            return (t /= n / 2) < 1 ? s / 2 * t * t + i : -s / 2 * (--t * (t - 2) - 1) + i
        },
        easeInCubic: function(e, t, i, s, n) {
            return s * (t /= n) * t * t + i
        },
        easeOutCubic: function(e, t, i, s, n) {
            return s * ((t = t / n - 1) * t * t + 1) + i
        },
        easeInOutCubic: function(e, t, i, s, n) {
            return (t /= n / 2) < 1 ? s / 2 * t * t * t + i : s / 2 * ((t -= 2) * t * t + 2) + i
        },
        easeInQuart: function(e, t, i, s, n) {
            return s * (t /= n) * t * t * t + i
        },
        easeOutQuart: function(e, t, i, s, n) {
            return -s * ((t = t / n - 1) * t * t * t - 1) + i
        },
        easeInOutQuart: function(e, t, i, s, n) {
            return (t /= n / 2) < 1 ? s / 2 * t * t * t * t + i : -s / 2 * ((t -= 2) * t * t * t - 2) + i
        },
        easeInQuint: function(e, t, i, s, n) {
            return s * (t /= n) * t * t * t * t + i
        },
        easeOutQuint: function(e, t, i, s, n) {
            return s * ((t = t / n - 1) * t * t * t * t + 1) + i
        },
        easeInOutQuint: function(e, t, i, s, n) {
            return (t /= n / 2) < 1 ? s / 2 * t * t * t * t * t + i : s / 2 * ((t -= 2) * t * t * t * t + 2) + i
        },
        easeInSine: function(e, t, i, s, n) {
            return -s * Math.cos(t / n * (Math.PI / 2)) + s + i
        },
        easeOutSine: function(e, t, i, s, n) {
            return s * Math.sin(t / n * (Math.PI / 2)) + i
        },
        easeInOutSine: function(e, t, i, s, n) {
            return -s / 2 * (Math.cos(Math.PI * t / n) - 1) + i
        },
        easeInExpo: function(e, t, i, s, n) {
            return 0 == t ? i : s * Math.pow(2, 10 * (t / n - 1)) + i
        },
        easeOutExpo: function(e, t, i, s, n) {
            return t == n ? i + s : s * (1 - Math.pow(2, -10 * t / n)) + i
        },
        easeInOutExpo: function(e, t, i, s, n) {
            return 0 == t ? i : t == n ? i + s : (t /= n / 2) < 1 ? s / 2 * Math.pow(2, 10 * (t - 1)) + i : s / 2 * (2 - Math.pow(2, -10 * --t)) + i
        },
        easeInCirc: function(e, t, i, s, n) {
            return -s * (Math.sqrt(1 - (t /= n) * t) - 1) + i
        },
        easeOutCirc: function(e, t, i, s, n) {
            return s * Math.sqrt(1 - (t = t / n - 1) * t) + i
        },
        easeInOutCirc: function(e, t, i, s, n) {
            return (t /= n / 2) < 1 ? -s / 2 * (Math.sqrt(1 - t * t) - 1) + i : s / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + i
        },
        easeInElastic: function(e, t, i, s, n) {
            var r = 1.70158,
                a = 0,
                o = s;
            if (0 == t) return i;
            if (1 == (t /= n)) return i + s;
            if (a || (a = .3 * n), o < Math.abs(s)) {
                o = s;
                r = a / 4
            } else r = a / (2 * Math.PI) * Math.asin(s / o);
            return -o * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * n - r) * (2 * Math.PI) / a) + i
        },
        easeOutElastic: function(e, t, i, s, n) {
            var r = 1.70158,
                a = 0,
                o = s;
            if (0 == t) return i;
            if (1 == (t /= n)) return i + s;
            if (a || (a = .3 * n), o < Math.abs(s)) {
                o = s;
                r = a / 4
            } else r = a / (2 * Math.PI) * Math.asin(s / o);
            return o * Math.pow(2, -10 * t) * Math.sin((t * n - r) * (2 * Math.PI) / a) + s + i
        },
        easeInOutElastic: function(e, t, i, s, n) {
            var r = 1.70158,
                a = 0,
                o = s;
            if (0 == t) return i;
            if (2 == (t /= n / 2)) return i + s;
            if (a || (a = n * (.3 * 1.5)), o < Math.abs(s)) {
                o = s;
                r = a / 4
            } else r = a / (2 * Math.PI) * Math.asin(s / o);
            return t < 1 ? o * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * n - r) * (2 * Math.PI) / a) * -.5 + i : o * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * n - r) * (2 * Math.PI) / a) * .5 + s + i
        },
        easeInBack: function(e, t, i, s, n, r) {
            return void 0 == r && (r = 1.70158), s * (t /= n) * t * ((r + 1) * t - r) + i
        },
        easeOutBack: function(e, t, i, s, n, r) {
            return void 0 == r && (r = 1.70158), s * ((t = t / n - 1) * t * ((r + 1) * t + r) + 1) + i
        },
        easeInOutBack: function(e, t, i, s, n, r) {
            return void 0 == r && (r = 1.70158), (t /= n / 2) < 1 ? s / 2 * (t * t * ((1 + (r *= 1.525)) * t - r)) + i : s / 2 * ((t -= 2) * t * ((1 + (r *= 1.525)) * t + r) + 2) + i
        },
        easeInBounce: function(e, t, i, s, r) {
            return s - n.a.easing.easeOutBounce(e, r - t, 0, s, r) + i
        },
        easeOutBounce: function(e, t, i, s, n) {
            return (t /= n) < 1 / 2.75 ? s * (7.5625 * t * t) + i : t < 2 / 2.75 ? s * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + i : t < 2.5 / 2.75 ? s * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + i : s * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + i
        },
        easeInOutBounce: function(e, t, i, s, r) {
            return t < r / 2 ? .5 * n.a.easing.easeInBounce(e, 2 * t, 0, s, r) + i : .5 * n.a.easing.easeOutBounce(e, 2 * t - r, 0, s, r) + .5 * s + i
        }
    })
}, function(e, t, i) {
    "use strict";
    i.r(t);
    var s, n = i(0);
    (s = i.n(n).a).fn.draggable = function(e) {
        var t = {
            translateY: !0,
            translateX: !0,
            boundary: "body"
        };
        return s(this).each(function() {
            var i, n, r, a, o = s(this),
                c = !1;

            function l() {
                return n[0].scrollHeight
            }

            function u() {
                return n[0].scrollWidth
            }

            function d(e, t, i) {
                var s, r, a, c, d, h, m, f, p, g, v, T;
                "x" === i ? (t = t.x, a = o.outerWidth(), s = o.offset().left, c = n.offset().left, d = n.outerWidth(), m = e.pageX < s, f = e.pageX > s + a, v = "left", T = u()) : (t = t.y, a = o.outerHeight(), s = o.offset().top, c = n.offset().top, d = n.outerHeight(), m = e.pageY < s, f = e.pageY > s + a, v = "top", T = l()), p = t > 0, g = t < 0, r = parseInt(o.css(v), 10), m && p || f && g || s < c && g || s + a > c + d && p || (h = g ? r + t < 0 ? 0 : r + t : r + a + t > T ? T - a - 1 : r + t, o.css(v, h))
            }

            function h(e) {
                var t = {
                        y: e.pageY - r,
                        x: e.pageX - a
                    },
                    s = !1;
                r = e.pageY, a = e.pageX, e.preventDefault(), i.translateY && (d(e, t, "y"), s = !0), i.translateX && (d(e, t, "x"), s = !0), s && o.trigger("drag.draggable", [t, {
                    y: e.pageY,
                    x: e.pageX
                }])
            }

            function m() {
                s(document).unbind("mousemove", f).unbind("mousemove", h).unbind("mouseup", m), c && o.trigger("drop.draggable").removeClass("draggable-dragging"), c = !1
            }

            function f(e) {
                c = !0, s(document).unbind("mousemove", f).bind("mousemove", h), r = e.pageY, a = e.pageX, n && 0 !== n.length || (n = "function" == typeof i.boundary ? i.boundary() : s(i.boundary)), l(), u(), o.trigger("start.draggable", [e.offsetY, e.offsetX]).addClass("draggable-dragging")
            }

            function p(e) {
                e.preventDefault(), s(document).bind("mousemove", f).bind("mouseup", m)
            }
            void 0 === (i = o.data("draggable") ? s.extend({}, o.data("draggable").settings, e) : s.extend({}, t, e)).handle && (i.handle = o), "string" == typeof i.handle ? o.off("mousedown", i.handle, p).on("mousedown", i.handle, p) : i.handle.unbind("mousedown", p).bind("mousedown", p), o.data("draggable", {
                settings: i
            })
        }), this
    }
}, function(e, t, i) {
    "use strict";
    i.r(t);
    var s, n = i(1),
        r = i.n(n),
        a = i(0);
    (s = i.n(a).a).fn.dragdroplist = function(e) {
        var t = {
            orientation: "vertical",
            tagName: "li",
            selector: ".draggable",
            contentSelector: "> *",
            scroll_speed: 8
        };
        return s(this).each(function() {
            var i, n, a = function(e) {
                e.draggable({
                    translateX: "horizontal" === n.orientation,
                    translateY: "vertical" === n.orientation,
                    handle: n.handle ? n.handle : n.tagName,
                    boundary: n.$boundary
                })
            };
            s(this).data("dragdroplist") || ((n = s.extend({}, t, e)).$boundary = n.$boundary || s(this), s(this).data("dragdroplist", {
                settings: n
            }), i = new function(e) {
                var t, i, n, a, o, c, l = e.$boundary,
                    u = "up",
                    d = "down",
                    h = "left",
                    m = "right",
                    f = 30;

                function p() {
                    var e = s(this).position().top + l.scrollTop(),
                        t = s(this).position().left + l.scrollLeft(),
                        n = s(this).innerWidth();
                    i.top.unshift(e), i.left.unshift(t), s(this).css({
                        position: "absolute",
                        top: e,
                        left: t,
                        width: n
                    })
                }

                function g(s, n) {
                    var r, a, o = t.data("draggable-index"),
                        c = s.data("draggable-index"),
                        l = s.outerHeight() - t.outerHeight(),
                        f = s.outerWidth() - t.outerWidth(),
                        p = parseInt(t.css("margin-left"), 10),
                        g = parseInt(t.css("margin-top"), 10),
                        v = parseInt(s.css("margin-right"), 10),
                        T = parseInt(s.css("margin-bottom"), 10);
                    switch (n) {
                        case u:
                            r = i.top[o] - l;
                            break;
                        case d:
                            r = i.top[o], i.top[c] = r + s.outerHeight() + T + g;
                            break;
                        case h:
                            a = i.left[o] - f;
                            break;
                        case m:
                            a = i.left[o], i.left[c] = a + s.outerWidth() + v + p
                    }
                    "vertical" === e.orientation ? s.stop().animate({
                        top: r
                    }, "fast") : s.stop().animate({
                        left: a
                    }, "fast"), t.data("draggable-index", c), s.data("draggable-index", o)
                }

                function v(i) {
                    var s, n, r, a, o, c = t.position().top,
                        l = t.outerHeight(),
                        f = t.position().left,
                        p = t.outerWidth();
                    if ((s = i === u || i === h ? t.prev(e.selector) : t.next(e.selector)).length) switch (n = s.position().top, r = s.outerHeight(), a = s.position().left, o = s.outerWidth(), i) {
                        case u:
                            c < n + r / 2 && (t.insertBefore(s), g(s, i));
                            break;
                        case d:
                            c + l > n + r / 2 && (t.insertAfter(s), g(s, i));
                            break;
                        case h:
                            f < a + o / 2 && (t.insertBefore(s), g(s, i));
                            break;
                        case m:
                            f + p > a + o / 2 && (t.insertAfter(s), g(s, i))
                    }
                }

                function T(i) {
                    var s = (new Date).getTime() - a,
                        n = l.scrollTop(),
                        r = parseInt(t.css("top"), 10),
                        u = r + t.outerHeight(),
                        h = l.scrollLeft(),
                        f = parseInt(t.css("left"), 10),
                        p = f + t.outerWidth(),
                        g = 1 + s / 1e3,
                        T = Math.min(g * e.scroll_speed, 3 * e.scroll_speed);
                    T = i === d || i === m ? T : -T, "vertical" === e.orientation ? n + T < 0 ? b() : n + T > o - l.innerHeight() ? b() : (l.scrollTop(l.scrollTop() + T), r + T > 0 && u + T < o && t.css({
                        top: r + T
                    }), v(i)) : h + T < 0 ? b() : h + T > c - l.innerWidth() ? b() : (l.scrollLeft(l.scrollLeft() + T), f + T > 0 && p + T < c && t.css({
                        left: f + T
                    }), v(i))
                }

                function w(e) {
                    a = (new Date).getTime(), b(), n = setInterval(r.a.bind(T, this, e), f)
                }

                function b() {
                    clearInterval(n), n = null
                }

                function y() {
                    s(this).find(".placeholder").remove(), l.css("height", "").find(e.selector).attr("style", ""), t.trigger("dropped.dragdroplist")
                }
                return {
                    handleDragStart: function(n) {
                        var r, a;
                        i = {
                            top: [],
                            left: []
                        }, s.fn.reverse = [].reverse, r = 0, l.find(e.contentSelector).each(function() {
                            r += s(this).outerHeight()
                        }), o = r, a = 0, l.find(e.contentSelector).each(function() {
                            a += s(this).outerWidth()
                        }), c = a, s(this).append(s("<" + e.tagName + "/>", {
                            class: "placeholder",
                            height: s(this).height(),
                            width: s(this).width()
                        })), l.css("z-index", 0).find(e.selector).each(function(e) {
                            s(this).data("draggable-index", e)
                        }).reverse().each(p), (t = s(n.target)).css({
                            "z-index": 10
                        })
                    },
                    handleDrop: function() {
                        i && (b(), "vertical" === e.orientation ? t.animate({
                            top: i.top[t.data("draggable-index")]
                        }, "fast", y.bind(this)) : t.animate({
                            left: i.left[t.data("draggable-index")]
                        }, "fast", y.bind(this)), t.trigger("drop.dragdroplist"))
                    },
                    handleDrag: function(i, s, r) {
                        if (t) {
                            var a, o, c, f = parseInt(t.css("top"), 10),
                                p = f + t.outerHeight(),
                                g = parseInt(t.css("left"), 10),
                                T = g + t.outerWidth(),
                                y = l.scrollTop() + l.innerHeight(),
                                C = l.scrollLeft() + l.innerWidth();
                            if (s)
                                if ("vertical" === e.orientation) {
                                    for (a = s.y < 0 ? u : d, o = s.y; o < 0;) v(a), o += t.outerHeight();
                                    for (o = s.y; o > 0;) v(a), o -= t.outerHeight()
                                } else {
                                    for (a = s.x < 0 ? h : m, c = s.x; c < 0;) v(a), c += t.outerWidth();
                                    for (c = s.x; c > 0;) v(a), c -= t.outerWidth()
                                } r ? (r.y > l.offset().top || r.y < l.offset().top + l.outerHeight()) && b() : b(), n || ("vertical" === e.orientation ? p > y ? w(d) : f < l.scrollTop() ? w(u) : b() : T > C ? w(m) : g < l.scrollLeft() ? w(h) : b())
                        }
                    }
                }
            }(n), s(this).find(n.tagName).each(function() {
                a(s(this))
            }), s(this).bind("start.draggable", i.handleDragStart).bind("drop.draggable", i.handleDrop).bind("drag.draggable", i.handleDrag)), s(this).on("itemadded.dragdroplist", function(e) {
                a(s(e.target))
            })
        }), s(this)
    }
}, function(e, t, i) {
    "use strict";
    i.r(t);
    var s = i(0);
    ! function(e) {
        function t(t, i) {
            this.el = e(t), this.options = i || {}, this.x = !1 !== this.options.x || this.options.forceHorizontal, this.y = !1 !== this.options.y || this.options.forceVertical, this.autoHide = !1 !== this.options.autoHide, this.padding = void 0 == this.options.padding ? 2 : this.options.padding, this.position = this.options.position, this.showOnMouseOver = !1 !== this.options.showOnMouseOver, this.inner = this.el.find(".antiscroll-inner"), this.inner.css({
                right: this.y ? -r() + "px" : 0,
                bottom: this.x ? -r() + "px" : 0
            }), this.refresh()
        }

        function i(t) {
            this.pane = t, this.pane.el.append(this.el), this.innerEl = this.pane.inner.get(0), this.dragging = !1, this.enter = !1, this.shown = !1, this.pane.el.mouseenter(e.proxy(this, "mouseenter")), this.pane.el.mouseleave(e.proxy(this, "mouseleave")), this.el.mousedown(e.proxy(this, "mousedown")), this.innerPaneScrollListener = e.proxy(this, "scroll"), this.pane.inner.scroll(this.innerPaneScrollListener), this.innerPaneMouseWheelListener = e.proxy(this, "mousewheel"), this.pane.inner.bind("mousewheel", this.innerPaneMouseWheelListener);
            var i = this.pane.options.initialDisplay;
            !1 !== i && (this.show(), this.pane.autoHide && (this.hiding = setTimeout(e.proxy(this, "hide"), parseInt(i, 10) || 3e3)))
        }

        function s(e, t) {
            function i() {}
            i.prototype = t.prototype, e.prototype = new i
        }
        var n;

        function r() {
            if (void 0 === n) {
                var t = e('<div class="antiscroll-inner" style="width:50px;height:50px;overflow-y:scroll;position:absolute;top:-200px;left:-200px;"><div style="height:100px;width:100%"></div>');
                e("body").append(t);
                var i = e(t).innerWidth(),
                    s = e("div", t).innerWidth();
                e(t).remove(), n = i - s
            }
            return n
        }
        e.fn.antiscroll = function(t) {
            return this.each(function() {
                e(this).data("antiscroll") && e(this).data("antiscroll").destroy(), e(this).data("antiscroll", new e.Antiscroll(this, t))
            })
        }, e.Antiscroll = t, t.prototype.refresh = function() {
            var e = this.inner.get(0).scrollWidth > this.el.width() + (this.y ? r() : 0),
                t = this.inner.get(0).scrollHeight > this.el.height() + (this.x ? r() : 0);
            this.x && (!this.horizontal && e ? this.horizontal = new i.Horizontal(this) : this.horizontal && !e ? (this.horizontal.destroy(), this.horizontal = null) : this.horizontal && this.horizontal.update()), this.y && (!this.vertical && t ? this.vertical = new i.Vertical(this) : this.vertical && !t ? (this.vertical.destroy(), this.vertical = null) : this.vertical && this.vertical.update())
        }, t.prototype.destroy = function() {
            return this.horizontal && (this.horizontal.destroy(), this.horizontal = null), this.vertical && (this.vertical.destroy(), this.vertical = null), this
        }, t.prototype.rebuild = function() {
            return this.destroy(), this.inner.attr("style", ""), t.call(this, this.el, this.options), this
        }, i.prototype.destroy = function() {
            return this.el.remove(), this.pane.inner.unbind("scroll", this.innerPaneScrollListener), this.pane.inner.unbind("mousewheel", this.innerPaneMouseWheelListener), this
        }, i.prototype.mouseenter = function() {
            this.enter = !0, this.pane.showOnMouseOver && this.show()
        }, i.prototype.mouseleave = function() {
            this.enter = !1, this.dragging || this.pane.autoHide && this.hide()
        }, i.prototype.scroll = function() {
            this.shown || (this.show(), !this.dragging && this.pane.autoHide && (this.hiding = setTimeout(e.proxy(this, "hide"), 1e3))), this.update()
        }, i.prototype.mousedown = function(t) {
            t.preventDefault(), this.dragging = !0, this.startPageY = t.pageY - parseInt(this.el.css("top"), 10), this.startPageX = t.pageX - parseInt(this.el.css("left"), 10), this.el[0].ownerDocument.onselectstart = function() {
                return !1
            };
            this.pane;
            var i = e.proxy(this, "mousemove"),
                s = this;
            e(this.el[0].ownerDocument).mousemove(i).mouseup(function() {
                s.dragging = !1, this.onselectstart = null, e(this).unbind("mousemove", i), s.enter || s.hide()
            })
        }, i.prototype.show = function(e) {
            this.hiding && (clearTimeout(this.hiding), this.hiding = null), !this.shown && this.update() && (this.el.addClass("antiscroll-scrollbar-shown"), this.shown = !0)
        }, i.prototype.hide = function() {
            !1 !== this.pane.autoHide && this.shown && (this.el.removeClass("antiscroll-scrollbar-shown"), this.shown = !1)
        }, i.Horizontal = function(t) {
            var s = document;
            t.el.length > 0 && (s = t.el[0].ownerDocument), this.el = e('<div class="antiscroll-scrollbar antiscroll-scrollbar-horizontal">', s), i.call(this, t)
        }, s(i.Horizontal, i), i.Horizontal.prototype.update = function() {
            var e = this.pane.el.width(),
                t = e - 2 * this.pane.padding,
                i = this.pane.inner.get(0);
            return this.el.css("width", t * e / i.scrollWidth).css("left", t * i.scrollLeft / i.scrollWidth), e < i.scrollWidth
        }, i.Horizontal.prototype.mousemove = function(e) {
            var t = this.pane.el.width() - 2 * this.pane.padding,
                i = e.pageX - this.startPageX,
                s = this.el.width(),
                n = this.pane.inner.get(0),
                r = Math.min(Math.max(i, 0), t - s);
            n.scrollLeft = (n.scrollWidth - this.pane.el.width()) * r / (t - s)
        }, i.Horizontal.prototype.mousewheel = function(e, t, i, s) {
            if (i < 0 && 0 == this.pane.inner.get(0).scrollLeft || i > 0 && this.innerEl.scrollLeft + Math.ceil(this.pane.el.width()) == this.innerEl.scrollWidth) return e.preventDefault(), !1
        }, i.Vertical = function(t) {
            var s = document;
            t.el.length > 0 && (s = t.el[0].ownerDocument), this.el = e('<div class="antiscroll-scrollbar antiscroll-scrollbar-vertical">', s), this.el.addClass("left" === t.position ? "antiscroll-scrollbar-position-left" : "antiscroll-scrollbar-position-right"), i.call(this, t)
        }, s(i.Vertical, i), i.Vertical.prototype.update = function() {
            var e = this.pane.el.height(),
                t = e - 2 * this.pane.padding,
                i = this.innerEl,
                s = t * e / i.scrollHeight;
            s = s < 20 ? 20 : s;
            var n = t * i.scrollTop / i.scrollHeight;
            n + s > t && (n = n - (n + s - t) - 3);
            return this.el.css("height", s).css("top", n), e < i.scrollHeight
        }, i.Vertical.prototype.mousemove = function(e) {
            var t = this.pane.el.height(),
                i = t - 2 * this.pane.padding,
                s = e.pageY - this.startPageY,
                n = this.el.height(),
                r = this.innerEl,
                a = Math.min(Math.max(s, 0), i - n);
            r.scrollTop = (r.scrollHeight - t) * a / (i - n)
        }, i.Vertical.prototype.mousewheel = function(e, t, i, s) {
            if (s > 0 && 0 == this.innerEl.scrollTop || s < 0 && this.innerEl.scrollTop + Math.ceil(this.pane.el.height()) == this.innerEl.scrollHeight) return e.preventDefault(), !1
        }
    }(i.n(s).a)
}, function(e, t, i) {
    "use strict";
    var s, n, r = i(1),
        a = (s = r) && s.__esModule ? s : {
            default: s
        };
    TD.services.bitly = ((n = {}).shorten = function(e) {
        var t, i = e;
        return a.default.startsWith(e, "http://") || a.default.startsWith(e, "https://") || (i = "http://" + e), (t = function(e, t) {
            var i = "https://api-ssl.bitly.com/v3/" + e;
            t.login = "tweetdeckapi", t.apiKey = "R_b8032856b71a14fabfe64f6845689ddf", t.format = "json";
            var s = n.getAccount();
            return s && (t.x_login = s.login, t.x_apiKey = s.apiKey), TD.net.ajax.jsonp(i, t)
        }("shorten", {
            longUrl: i
        })).addCallback(function(t) {
            var i = t.data;
            if (!i || !i.data || !i.data.url) throw new Error("Bit.ly shortening failed");
            return i.data && (i.data.long_url = e), i.data
        }), t
    }, n.shortenTextLinks = function(e) {
        var t = twttrTxt.extractUrls(e).map(function(e) {
                return TD.util.isLinkToTwitterItem(e) ? TD.core.defer.succeed(e) : TD.services.bitly.shorten(e)
            }),
            i = new TD.core.defer.DeferredList(t);
        return i.addCallback(function(t) {
            return t.forEach(function(t) {
                var i = t[0],
                    s = t[1];
                i && (e = e.replace(s.long_url, s.url))
            }), e
        }), i
    }, n.getAccount = function() {
        var e = TD.settings.getBitlyAccount();
        return e || a.default.first(n.getAccountsFromAccountController())
    }, n.updateAccount = function(e) {
        return TD.util.metric("settings:services:bitly:update"), TD.settings.setBitlyAccount(e)
    }, n.getAccountsFromAccountController = function() {
        return TD.storage.accountController.getAccountsForService("bitly").map(function(e) {
            return {
                login: e.getUserID(),
                apiKey: e.getOAuthToken(),
                accountKey: e.getKey()
            }
        })
    }, n)
}, , function(e, t, i) {
    "use strict";
    var s = o(i(1)),
        n = o(i(0)),
        r = i(233),
        a = o(i(19));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.Autocomplete = TD.components.Base.extend(function(e, t) {
        var i = {
            limit: 5,
            dmMode: !1,
            position: "below",
            repositionInViewport: !1
        };
        this.options = s.default.extend(i, t), this.$input = e, this.isCompletionsOpen = !1, this.userIsInteracting = !1, this.dropdownId = s.default.uniqueId("autocomplete"), this.$node = n.default.createElement("ul").addClass("lst lst-modal typeahead").insertAfter(this.$input), this.$selectedItem = null, this._registerEvents(), this.usernameRegex = i.dmMode ? this.constructor.dmUsername : this.constructor.username, (0, n.default)(document).on("dataTypeaheadSuggestions", this.updateDropdown.bind(this))
    }).statics({
        username: /^[+\/\.<>()|\\=]?[@＠]([a-zA-Z0-9_]{1,20})$/,
        dmUsername: /(.*)/,
        hashtag: /^[#＃]([a-zA-Z0-9_]+)/,
        SELECT: "td-autocomplete-select",
        spaceBoundary: /\s|$/,
        wordEnd: /[^+\/.<>()|\\=\s]+$/
    }).methods({
        _registerEvents: function() {
            var e = this;
            this.$input.bind("keydown", s.default.bind(this.keypress, this)), this.$input.bind("keyup click", s.default.bind(this.keyup, this)), this.blurHandler = function() {
                s.default.delay(function() {
                    e.hide()
                }, 500)
            }, this.$input.bind("blur", this.blurHandler), this.$input.bind("mouseup", s.default.bind(function(e) {
                setTimeout(this.getCaret.bind(this), 0)
            }, this)).bind("focus", s.default.bind(this.getCaret, this)), this.$node.delegate("li", "mouseenter", function(t) {
                e.$node.find("li.s-selected").removeClass("s-selected"), (0, n.default)(this).addClass("s-selected")
            }).delegate("li", "click", s.default.bind(function(t) {
                e.$selectedItem = (0, n.default)(t.target).closest("li").addClass("s-selected"), e.$selectedItem.siblings(".s-selected").removeClass("s-selected"), this.$input.focus(), this.select()
            }, this))
        },
        _unregisterEvents: function() {
            this.$input.unbind("keydown"), this.$input.unbind("keyup click keydown"), this.$input.unbind("bind", this.blurHandler)
        },
        keyup: function(e) {
            if (e.keyCode) {
                e.stopPropagation();
                var t = "",
                    i = this.getCurrentText(),
                    s = this.getCaret(),
                    n = !1;
                if (this.options.dmMode ? t = i : (t = this.getCurrentWord(s), "@" === i.charAt(s) && (t = "")), t.match(this.usernameRegex) ? (t = RegExp.$1, this.autocompleteType = "username", n = !0) : t.match(this.constructor.hashtag) && (t = RegExp.$1, this.autocompleteType = "hashtag", n = !0), t.length && n) switch (e.keyCode) {
                    case TD.constants.keyCodes.escape:
                        this.hide(), e.stopPropagation();
                        break;
                    case TD.constants.keyCodes.shift:
                    case TD.constants.keyCodes.upArrow:
                    case TD.constants.keyCodes.downArrow:
                        break;
                    default:
                        "hashtag" === this.autocompleteType ? this.lookUpHashtag(t) : this.lookUpUser(t)
                } else this.hide()
            }
        },
        keypress: function(e) {
            var t;
            switch (e.keyCode) {
                case TD.constants.keyCodes.tab:
                case TD.constants.keyCodes.enter:
                    t = this.$selectedItem && this.isCompletionsOpen, !e.shiftKey && t && (this.select(), e.preventDefault(), e.stopPropagation());
                    break;
                case TD.constants.keyCodes.escape:
                    this.isCompletionsOpen && (e.preventDefault(), e.stopPropagation());
                    break;
                case TD.constants.keyCodes.upArrow:
                    this.isCompletionsOpen && !e.shiftKey && (this.moveSelection("prev"), e.preventDefault(), e.stopPropagation());
                    break;
                case TD.constants.keyCodes.downArrow:
                    this.isCompletionsOpen && !e.shiftKey && (this.moveSelection("next"), e.preventDefault(), e.stopPropagation());
                    break;
                default:
                    this.$selectedItem = null, this.userIsInteracting = !1
            }
        },
        sanitize: function(e) {
            return e.replace(/ /g, "")
        },
        moveSelection: function(e) {
            this.userIsInteracting = !0;
            var t = "next" === e ? "li:first" : "li:last",
                i = this.$selectedItem || this.$node.find("li.s-selected");
            i.length ? (i = i.removeClass("s-selected"), (i = "next" === e ? i.nextAll("li:first") : i.prevAll("li:first")).length ? this.$selectedItem = i.addClass("s-selected") : this.$selectedItem = this.$node.find(t).addClass("s-selected")) : this.$selectedItem = this.$node.find(t).addClass("s-selected")
        },
        select: function() {
            var e, t, i;
            this.$selectedItem && ("username" === this.autocompleteType ? (e = this.$selectedItem.find(".js-screenname").text(), this.options.dmMode || (e = "@" + e), t = this.$selectedItem.find("img").attr("src"), i = this.$selectedItem.attr("data-id")) : e = this.$selectedItem.find(".js-hashtag").text(), this.set(e, t, i))
        },
        set: function(e, t, i) {
            var s = this.replaceCurrentWord(e);
            this.$input.val(s.value), this.setCaretPosition(s.cursor), this.$input.change(), this.$node.trigger(this.constructor.SELECT, [{
                screenName: e,
                avatar: t,
                id: i
            }]), this.hide()
        },
        show: function() {
            this.$node.show(), this.isCompletionsOpen = !0
        },
        hide: function() {
            this.$node.hide(), this.isCompletionsOpen = !1, this.userIsInteracting = !1, this.$node.trigger("dataTypeaheadQueryReset")
        },
        lookUpHashtag: function(e) {
            var t = {
                datasources: ["topics"],
                query: "#" + (e = this.sanitize(e)),
                onlyLocalData: !0,
                dropdownId: this.dropdownId,
                type: "compose",
                limits: {
                    topics: 5
                }
            };
            TD.decider.get("autocomplete_remote_sources") && (t.onlyLocalData = !1), this.$node.trigger("uiNeedsTypeaheadSuggestions", t)
        },
        lookUpUser: function(e) {
            var t = {
                datasources: ["users"],
                query: e,
                onlyLocalData: !0,
                dropdownId: this.dropdownId,
                type: "compose",
                limits: {
                    users: 5
                }
            };
            TD.decider.get("autocomplete_remote_sources") && (t.onlyLocalData = !1), this.$node.trigger("uiNeedsTypeaheadSuggestions", t)
        },
        updateDropdown: function(e, t) {
            if (!this.userIsInteracting && t.dropdownId === this.dropdownId) {
                var i, s = [];
                "hashtag" === this.autocompleteType && t.suggestions.topics ? (s = t.suggestions.topics.slice(0, this.options.limit).map(function(e) {
                    return {
                        value: e.topic,
                        hashFlagUrl: TD.decider.get("hashflags") ? r.hashflags.get(e.topic) : null
                    }
                }, this), i = TD.ui.template.render("compose/autocomplete_hashtag", {
                    results: s
                })) : "username" === this.autocompleteType && t.suggestions.users && (s = t.suggestions.users.slice(0, this.options.limit).map(function(e) {
                    return {
                        id: e.id,
                        screenName: e.screen_name,
                        name: e.name,
                        emojifiedName: a.default.cleanWithEmoji(e.name),
                        isVerified: e.verified,
                        pic: TD.util.transformTwitterAvatar(e.profile_image_url_https, "mini")
                    }
                }, this), i = TD.ui.template.render("compose/autocomplete_twitter_user", {
                    results: s
                })), this.$node.html(i), s.length ? (this.isCompletionsOpen || this.show(), this.moveSelection("next"), this.reposition()) : this.isCompletionsOpen && this.hide()
            }
        },
        reposition: function() {
            if (this.setPosition(this.options.position), this.options.repositionInViewport) {
                var e = (0, n.default)(window),
                    t = this.$node.offset().top - e.scrollTop(),
                    i = t < 0,
                    s = t + this.$node.outerHeight() > e.height();
                "above" === this.options.position && i ? this.setPosition("below") : "below" === this.options.position && s && this.setPosition("above")
            }
        },
        setPosition: function(e) {
            this.$node.css({
                bottom: "above" === e ? this.$input.outerHeight() : ""
            })
        },
        getCurrentText: function() {
            return this.$input.val()
        },
        setCaretPosition: function(e) {
            var t = this.$input[0];
            if (t.setSelectionRange) t.focus(), t.setSelectionRange(e, e);
            else if (t.createTextRange) {
                var i = t.createTextRange();
                i.collapse(!0), i.moveEnd("character", e), i.moveStart("character", e), i.select()
            }
            this.lastCaret = e
        },
        getCaret: function() {
            var e = this.$input[0],
                t = 0;
            if (document.selection) {
                try {
                    e.focus()
                } catch (e) {}
                var i = document.selection.createRange();
                if (null == i) return this.lastCaret = 0, 0;
                var s = e.createTextRange(),
                    n = s.duplicate();
                s.moveToBookmark(i.getBookmark()), n.setEndPoint("EndToStart", s), t = n.text.length
            } else(e.selectionStart || "0" == e.selectionStart) && (t = e.selectionStart);
            return this.lastCaret = t, t
        },
        insertOrReplaceSelection: function(e, t) {
            var i = this.$input[0],
                s = this.getCaret(),
                n = s + e.length;
            if (document.selection)
                if (i.focus(), document.selection.createRange().text = e, t) {
                    var r = i.createTextRange();
                    r.collapse(!0), r.moveEnd("character", n), r.moveStart("character", s), r.select()
                } else this.setCaretPosition(n);
            else if (i.selectionStart || "0" == i.selectionStart) {
                var a = i.selectionStart,
                    o = i.selectionEnd,
                    c = i.scrollTop;
                i.value = i.value.substring(0, a) + e + i.value.substring(o, i.value.length), i.focus(), i.selectionStart = t ? s : n, i.selectionEnd = n, i.scrollTop = c
            } else i.value += e, this.setCaretPosition(n), i.focus();
            this.lastCaret = n, this.$input.change()
        },
        getCurrentWord: function(e) {
            var t = this.getCurrentText(),
                i = t.slice(0, e),
                s = t.slice(e, t.length),
                n = t.charAt(e - 1);
            if (!n || " " === n) return "";
            this.leftBoundary = i.search(this.constructor.wordEnd);
            var r = i.slice(this.leftBoundary, i.length),
                a = s.slice(0, s.search(this.constructor.spaceBoundary)),
                o = r.concat(a);
            return this.rightBoundary = this.leftBoundary + o.length, o
        },
        replaceCurrentWord: function(e) {
            var t = this.getCurrentText().split("");
            this.oldValueArray = t;
            var i = t.slice(0, this.leftBoundary),
                s = t.slice(this.rightBoundary, t.length);
            (s.length < 1 || !s[0].match(/\s/)) && (e += " ");
            var n = (i.join("") + e).length + 1;
            return {
                value: i.join("") + e + s.join(""),
                cursor: n
            }
        },
        destroy: function() {
            this._unregisterEvents(), this.$node.remove()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.Dataminr = TD.components.Base.extend(function() {
        this.$node = (0, n.default)(TD.ui.template.render("open_column_list_multi_group")), this.items = [], this.menuComponents = [], this._boundHandleWatchlists = this._handleWatchlists.bind(this), (0, n.default)(document).on("dataDataminrWatchlists", this._boundHandleWatchlists), (0, n.default)(document).trigger("uiNeedsDataminrWatchlists")
    }).statics({}).methods({
        _handleWatchlists: function(e, t) {
            t.watchlists && 0 !== t.watchlists.length && (this.menuComponents.forEach(function(e) {
                e.destroy()
            }), this.$node.empty(), t.watchlists.forEach(function(e) {
                var t = (0, n.default)(TD.ui.template.render("open_column_list_group", {
                        title: e.name
                    })),
                    i = t.filter(".js-list-container");
                e.value.forEach(function(e) {
                    var t = new TD.components.MenuItem;
                    t.dataminr(e), this.menuComponents.push(t), i.append(t.$node)
                }, this), this.$node.append(t)
            }, this), this.menuComponents.length > 0 && s.default.defer(function() {
                this.menuComponents[0].select()
            }.bind(this)))
        },
        destroy: function() {
            (0, n.default)(document).off("dataDataminrWatchlists", this._boundHandleWatchlists), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.RepliesTo = TD.components.Base.extend(function(e, t, i) {
        this.chirp = e.getMainTweet(), this.mainTweet = this.chirp.getMainTweet(), this.repliesTo = [], this.mediaPreviewSize = t, this.wantsDragHandle = i, this.refreshPeriod = 60, this._boundHandleConversation = this._handleConversation.bind(this), this.subscriptions = {}, this.subscriptions[this.mainTweet.id] = n.default.subscribe("/tweets/conversation/" + this.mainTweet.id, this._boundHandleConversation), this.client = TD.controller.clients.getClient(this.chirp.account.getKey()), this.pollTaskId = TD.controller.scheduler.schedulePeriodicTask(this.refreshPeriod, function() {
            this.client.getConversation(this.mainTweet.id)
        }.bind(this), !0), this.$node.html(TD.ui.template.render("status/tweet_detail_repliesto"))
    }).methods({
        _handleConversation: function(e) {
            var t, i, s = {};
            this.repliesTo.forEach(function(e) {
                s[e.id] = !0
            }), t = e.descendants.filter(function(e) {
                return !s[e.id]
            }), this.repliesTo = this.repliesTo.concat(t), t.forEach(function(e) {
                this.subscriptions[e.id] || (this.subscriptions[e.id] = n.default.subscribe("/tweets/conversation/" + e.id, this._boundHandleConversation))
            }.bind(this)), i = t.map(function(e) {
                return e.showMore ? TD.ui.template.render("status/conversation_show_more", e) : e.render({
                    mediaPreviewSize: this.mediaPreviewSize,
                    isInConvo: !0,
                    hasReplies: e.hasReplies(),
                    isGifActive: !0,
                    withDragHandle: this.wantsDragHandle && !e.user.isProtected
                })
            }.bind(this)).join(""), this.$find(".js-replies-to").append(i), this.$find(".js-has-replies").closest(".js-stream-item").css({
                "border-bottom": "none"
            }), this.$find(".js-conversation-show-more").click(function(e) {
                var t = (0, n.default)(e.currentTarget).prevAll(".stream-item:first");
                (0, n.default)(t).find(".js-show-detail").trigger("click")
            })
        },
        findChirp: function(e) {
            var t = null;
            return this.chirp.id === e ? t = this.chirp : this.mainTweet.id === e ? t = this.mainTweet : this.repliesTo && (t = s.default.detect(this.repliesTo, function(t) {
                return t.id === e
            })), t
        },
        destroy: function() {
            for (var e in this.subscriptions) n.default.unsubscribe(this.subscriptions[e]);
            TD.controller.scheduler.removePeriodicTask(this.pollTaskId), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.InReplyTo = TD.components.Base.extend(function(e, t, i, r) {
        var a = this;
        this.chirp = e, this.mainTweet = this.chirp.getMainTweet(), this.$container = t, this.$detailContentContainer = this.$container.find(".js-detail-container"), this.$detailContent = this.$detailContentContainer.find(".js-detail-content"), this.mediaPreviewSize = i, this.wantsDragHandle = r, this.mainTweet.inReplyToID && (this.$node.html(TD.ui.template.render("status/tweet_detail_inreplyto")), this.$repliesContainer = this.$find(".js-replies-before"), this.$repliesText = this.$find(".in-reply-to").hide(), this.replies = null, s.default.defer(function() {
            a.bubbleEvent(TD.components.InReplyTo.BEGIN)
        }), this.subscription = n.default.subscribe("/tweets/conversation/" + this.mainTweet.id, s.default.bind(this._handleRelatedResults, this)), this.client = TD.controller.clients.getClient(this.chirp.account.getKey()), this.client.getConversation(this.mainTweet.id))
    }).statics({
        BEGIN: "td-load-convo",
        END: "td-load-finish",
        INREPLYTO_PADDING: 20
    }).methods({
        _handleRelatedResults: function(e) {
            this.replies && this.replies.length > 0 || (this.replies = e.ancestors, s.default.isEmpty(this.replies) ? this._getTweet() : this._showReplies())
        },
        _getTweet: function() {
            var e = this;
            this.client.show(this.mainTweet.inReplyToID, function(t) {
                e.replies = e.replies || [], e.replies.push(t), e._showReplies()
            }, function() {
                e.bubbleEvent(TD.components.InReplyTo.END)
            })
        },
        _showReplies: function() {
            s.default.defer(s.default.bind(this._showRepliesInternal, this))
        },
        _showRepliesInternal: function() {
            var e, t, i, r, a, o;
            if (this.bubbleEvent(TD.components.InReplyTo.END), !s.default.isEmpty(this.replies)) {
                t = this.mainTweet.id, this.replies = s.default.filter(this.replies, function(e) {
                    return e.id !== t
                }), i = s.default.map(this.replies, function(e) {
                    return e.topCursor ? TD.ui.template.render("status/conversation_cursor_top") : e.render({
                        mediaPreviewSize: this.mediaPreviewSize,
                        isInConvo: !0,
                        hasReplies: e.hasReplies(),
                        isGifActive: !0,
                        withDragHandle: !this.isInOwnCustomTimeline && !e.user.isProtected
                    })
                }.bind(this)).join(""), r = this.$detailContentContainer.outerHeight(), a = this.$detailContent.outerHeight(), this.$repliesContainer.html(i), e = this.$node.outerHeight(), a < r && this.$detailContent.css("padding-bottom", r - a), o = this.replies.length <= 1 ? 0 : e - (this.$repliesContainer.children().last().outerHeight() + TD.components.InReplyTo.INREPLYTO_PADDING), this.$detailContentContainer.scrollTop(e), this.$detailContentContainer.animate({
                    scrollTop: o
                }, {
                    duration: "fast"
                });
                var c = {
                        "border-bottom": "none"
                    },
                    l = this.$find(".js-cursor-top");
                this.$find(".js-has-replies").closest(".js-stream-item").css(c), l.css(c), l.click(function(e) {
                    var t = (0, n.default)(e.currentTarget).nextAll(".stream-item:first");
                    (0, n.default)(t).find(".js-show-detail").trigger("click")
                })
            }
        },
        findChirp: function(e) {
            var t = null;
            return this.chirp.id === e ? t = this.chirp : this.mainTweet.id === e ? t = this.mainTweet : this.replies && (t = s.default.detect(this.replies, function(t) {
                return t.id === e
            })), t
        },
        destroy: function() {
            this.subscription && n.default.unsubscribe(this.subscription), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.BaseModal = TD.components.Base.extend(function(e) {
        void 0 !== e && (this.title = e.title), this.$node = this._render(), (0, n.default)(document).trigger("uiCloseModal"), this.$title = this.$find(".js-header-title"), this.$closeButton = this.$find(".js-dismiss"), this.$menuContainer = this.$find(".js-mdl-content"), this.$footer = this.$find("footer");
        var t = s.default.bind(this.destroy, this);
        this.$node.bind(TD.components.BaseModal.CLOSE_EVENT, t), this.$node.on("click", ".js-dismiss", this.destroy.bind(this)), this.boundCloseModal = this._handleCloseModal.bind(this), (0, n.default)(document).on("uiCloseModal", this.boundCloseModal);
        var i = s.default.bind(this.handleDragStart, this),
            r = s.default.bind(this.getDragDropBoundary, this);
        this.$node.draggable({
            boundary: r,
            handle: this.$find(".js-drag-handle")
        }), this.$node.on("start.draggable", i), (0, n.default)("div.ovl.scroll-v").on("click", function(e) {
            this === e.target && t()
        }), TD.util.isTouchDevice() && window.navigator.standalone && ((0, n.default)("div.ovl.scroll-v").on("touchmove", function(e) {
            e.preventDefault()
        }), (0, n.default)("div.ovl.scroll-v").on("touchmove", ".scroll-v", function(e) {
            e.stopPropagation()
        })), this.hasFocus = !1, this.focusId = s.default.uniqueId("focus"), this._boundHandleFocus = this.handleFocus.bind(this), (0, n.default)(document).on("uiFocus", this._boundHandleFocus), (0, n.default)(document).trigger("uiFocusRequest", {
            id: this.focusId
        })
    }).statics({
        CLOSE_EVENT: "td-close"
    }).methods({
        _render: function() {
            return (0, n.default)(TD.ui.template.render("large_modal", {
                title: this.title,
                withHeaderDivider: !0
            }))
        },
        handleFocus: function(e, t) {
            t.id === this.focusId ? this.hasFocus = !0 : this.hasFocus = !1
        },
        getDragDropBoundary: function() {
            return this.$node.parent()
        },
        handleDragStart: function() {
            this.$node.css({
                position: "absolute",
                top: this.$node.offset().top,
                left: this.$node.offset().left
            }), this.$node.parent("#open-modal").addClass("is-dragging")
        },
        setAndShowContainer: function(e, t) {
            "boolean" != typeof t && (t = !0), t && e.empty(), e.append(this.$node).show(), this._checkIfTouchModal(e)
        },
        show: function() {
            this.supr()
        },
        _checkIfTouchModal: function(e) {
            var t = (0, n.default)("#open-modal");
            TD.util.isTouchDevice() && TD.decider.get("touchdeck_modals_v2") ? (e.addClass("is-touch-modal"), t.addClass("is-touch-modal")) : (e.removeClass("is-touch-modal"), t.removeClass("is-touch-modal"))
        },
        _handleCloseModal: function() {
            this.destroy()
        },
        destroy: function() {
            this.$node.parent("#open-modal").removeClass("is-dragging"), (0, n.default)(document).off("uiFocus", this._boundHandleFocus), (0, n.default)(document).off("uiCloseModal", this.boundCloseModal), (0, n.default)(document).trigger("uiFocusRelease", {
                id: this.focusId
            }), this.$node.find("video, video source").attr("src", ""), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.components.NewFeaturesSplash = TD.components.BaseModal.extend(function() {
        this.$node.addClass("release-notes-modal"), this.$menuContainer.append(TD.ui.template.render("splash/whats_new")), this.$find(".js-mdl-content").removeClass("horizontal-flow-container"), this.bind(), this.setAndShowContainer((0, r.default)("#splash-modal")), TD.components.NewFeaturesSplash.updateSeenVersion()
    }).statics({
        FOR_VERSION: "3.5",
        shouldShow: function() {
            var e = TD.components.NewFeaturesSplash.FOR_VERSION,
                t = TD.settings.getPreviousSplashVersion();
            return 1 === TD.util.versionComparator(e, t) && (-1 !== TD.util.versionComparator(TD.version, e) && ((0, r.default)(document).trigger("metric", {
                key: "login:featuresplash"
            }), !0))
        },
        updateSeenVersion: function() {
            TD.settings.setPreviousSplashVersion(TD.version)
        }
    }).methods({
        destroy: function() {
            this.supr(), (0, r.default)("#splash-modal").hide()
        },
        bind: function() {
            this.$find(".js-done").click(this.destroy.bind(this)), this.$find("[data-action]").click(this._handleActionClick.bind(this))
        },
        _handleActionClick: function(e) {
            switch (e.preventDefault(), e.target.dataset.action) {
                case "signOut":
                    TD.storage.store.setCurrentAuthType("tweetdeck"), TD.controller.init.signOut();
                    break;
                case "openSettings":
                    (0, r.default)(document).trigger("uiShowAccountSettings")
            }
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(1)),
        r = a(i(0));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.OpenColumn = TD.components.BaseModal.extend(function() {
        var e = this;
        this.$footer.append((0, r.default)(TD.ui.template.render("open_column_footer"))), this.$backButton = this.$find(".js-back"), this.$addButton = this.$find(".js-add-column"), this.history = [], this.menu = null, this.$backButton.bind("click", function(t) {
            t.stopPropagation(), e._previous()
        }), this.$node.on(TD.components.TemporaryColumn.DELETED_EVENT, this._reload.bind(this))
    }).statics({
        GO_URL_REGEX: /^(add|profile)$/,
        GO_EVENT: "/go",
        instance: null
    }).methods({
        canGo: function(e, t) {
            return TD.components.OpenColumn.GO_URL_REGEX.test(e)
        },
        go: function(e, t, i, s) {
            TD.components.OpenColumn.instance = this, s && (this.history = [s]), this.history.push([e, n.default.clone(t), i]);
            var r, a = t.shift();
            if (this.menu && this.menu.canGo && this.menu.canGo(e, t)) return this.history.pop(), this.history[this.history.length - 1] = fullUrl, void this.menu.go(a, t, i);
            var o = !1;
            if ("add" === e) switch (a) {
                case "home":
                    r = new TD.components.OpenColumnHome, o = !0;
                    break;
                case "lists":
                case "customtimelines":
                    r = new TD.components.OpenCustomTimelines(a);
                    break;
                case "dataminr":
                    r = new TD.components.OpenDataminr;
                    break;
                case "livevideo":
                    r = new TD.components.OpenLiveVideo;
                    break;
                default:
                    TD.controller.columnManager.TWITTER_GENERIC[a] && (r = new TD.components.OpenTwitterGeneric(a))
            }
            this._show(a, r, o, !1, !1), r.go && r.go(a, t, i)
        },
        _show: function(e, t, i, n, r) {
            this.menu && this.menu.destroy(), this.menu = t, this.$menuContainer.append(t.$node), i || this.menu.setup(this.$addButton), this.$node.toggleClass("s-nonav s-minimal s-fluid width--523", i), this.$node.toggleClass("s-narrow", n), this.$backButton.toggle(this.history.length > 1).toggleClass("hide", 0 === this.history.length), "home" === e ? this.$title.text((0, s.default)("Choose a column type to add")) : "profile" === e ? this.$title.text((0, s.default)("Account profile")) : this.$title.text(TD.controller.columnManager.MODAL_TITLE[e] || "")
        },
        _previous: function() {
            this.history.pop();
            var e = this.history.pop();
            e instanceof Array ? this.go.apply(this, e) : (this.destroy(), (0, r.default)(e.target).trigger(e.type, [e.data]))
        },
        _reload: function() {
            var e = this.history.pop();
            e instanceof Array && this.go.apply(this, e)
        },
        destroy: function() {
            this.menu && this.menu.destroy(), n.default.each(this.eventSubscriptions, function(e) {
                r.default.unsubscribe(e)
            }), this.$backButton.unbind(), (0, r.default)("#open-modal").hide(), TD.components.OpenColumn.instance = null, this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(0)),
        n = a(i(1)),
        r = i(36);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.OpenColumnHome = TD.components.Base.extend(function() {
        var e = this,
            t = this,
            i = !1,
            a = !1;
        this.premiumAnalytics$ = r.premiumAnalytics$.subscribe(function(e) {
            i = e
        }), this.tweetdeckBeta$ = r.tweetdeckBeta$.subscribe(function(e) {
            a = e
        }), this.singletonTypes = {};
        var o = {},
            c = {};
        c[TD.controller.columnManager.DATAMINR] = !0, c[TD.controller.columnManager.LIVEVIDEO] = !0, c[TD.controller.columnManager.EVENT] = !0, TD.controller.columnManager.DISPLAY_ORDER_SINGLETONS.forEach(function(e) {
            t.singletonTypes[e.type] = !0, o[e.type] = !n.default.isEmpty(TD.storage.columnController.getColumnsByType(e.type)), c[e.type] = !1
        }), this.$node = (0, s.default)(TD.ui.template.render("open_column_home", {
            options: TD.controller.columnManager.DISPLAY_ORDER,
            isDisabled: function() {
                return o[this.type]
            },
            isHidden: function() {
                return c[this.type]
            }
        })), this.$launchers = this.$find(".js-item-launch"), this.$launchers.bind("click", function(e) {
            var n = (0, s.default)(e.currentTarget),
                r = n.data("type"),
                o = t.singletonTypes[r],
                c = "trends" === r;
            c && TD.settings.setShowTrendingColumnNewPill(!1);
            var l, u = c || i && "analytics" === r || a && "whatshappening" === r;
            n.hasClass("is-disabled") || (o || u ? (l = TD.controller.columnManager.makeColumnFor({
                type: r,
                service: "tweetdeck"
            }), TD.controller.columnManager.addColumnToUI(l), t.bubbleEvent(TD.components.BaseModal.CLOSE_EVENT)) : t.publishEvent(TD.components.OpenColumn.GO_EVENT, TD.components.OpenColumnHome.URL_BASE + "/" + r))
        }), this._boundHandleDataminrAuthenticated = this._handleDataminrAuthenticated.bind(this), (0, s.default)(document).on("dataDataminrAuthenticated", this._boundHandleDataminrAuthenticated), (0, s.default)(document).trigger("uiNeedsDataminrAuth"), this.liveVideo$ = (0, r.getStreamForLiveVideo)().distinctUntilChanged().subscribe(function(t) {
            e.$find('.js-item-launch[data-type="livevideo"]').toggleClass("is-hidden", !t)
        }), this.$find('.js-item-launch[data-type="analytics"]').toggleClass("is-hidden", !i), this.$find('.js-item-launch[data-type="whatshappening"]').toggleClass("is-hidden", !a)
    }).statics({
        URL_BASE: "/add",
        DATAMINR_ADD_SELECTOR: '.js-item-launch[data-type="dataminr"]'
    }).methods({
        _handleDataminrAuthenticated: function() {
            this.$find(TD.components.OpenColumnHome.DATAMINR_ADD_SELECTOR).removeClass("is-hidden")
        },
        destroy: function() {
            (0, s.default)(document).off("dataDataminrAuthenticated", this._boundHandleDataminrAuthenticated), this.liveVideo$ && this.liveVideo$.unsubscribe(), this.premiumAnalytics$ && this.premiumAnalytics$.unsubscribe(), this.tweetdeckBeta$ && this.tweetdeckBeta$.unsubscribe(), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.SplitMenu = TD.components.Base.extend(function() {
        var e = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).hasAddMultipleUsersButton;
        this.$node = (0, n.default)(TD.ui.template.render("open_split_menu", {
            hasAddMultipleUsersButton: e
        })), this.menuItems = [], this.rightPillarComponent = null, this.pinnedMenuComponent = null, this.$leftPinnedContainer = this.$find(".js-left-pinned"), this.$leftPinnedBottomContainer = this.$find(".js-left-pinned-bottom"), this.$leftPillarContainer = this.$find(".js-left-column"), this.$rightPillarContainer = this.$find(".js-right-column")
    }).methods({
        appendMenuItem: function(e) {
            this.menuItems.push(e), this.$leftPillarContainer.append(e.$node)
        },
        removeMenuItem: function(e) {
            e.destroy(), this.pinnedMenuComponent === e && (this.pinnedMenuComponent = null, this.$leftPillarContainer.removeClass("s-with-pinned")), this.menuItems = s.default.without(this.menuItems, e)
        },
        appendPinnedMenuItem: function(e) {
            var t = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).bottom;
            if (this.pinnedMenuComponent = e, this.menuItems.push(e), t) return this.$leftPillarContainer.addClass("s-with-pinned-bottom"), void this.$leftPinnedBottomContainer.html(e.$node);
            this.$leftPillarContainer.addClass("s-with-pinned"), this.$leftPinnedContainer.html(e.$node)
        },
        appendMenuItemElement: function(e) {
            this.$leftPillarContainer.append(e)
        },
        setRightPillar: function(e) {
            this.rightPillarComponent && this.rightPillarComponent.destroy(), this.rightPillarComponent = e, this.$rightPillarContainer.html(e.$node)
        },
        destroy: function() {
            s.default.each(this.menuItems, function(e) {
                e.destroy()
            }), this.rightPillarComponent && this.rightPillarComponent.destroy(), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.components.OpenSplitMenu = TD.components.SplitMenu.extend(function() {
        this.$addButton = null
    }).methods({
        setup: function(e) {
            this.$addButton = e, this.$addButton.hide(), this.$addButton.click(r.default.bind(this._handleAddClick, this))
        },
        setChirpPillar: function(e) {
            this.setRightPillar(e);
            var t = this;
            e instanceof TD.components.TemporaryColumn && r.default.defer(function() {
                e.populate(), t.$addButton.show(), t.$addButton.prop("disabled", !1)
            })
        },
        _handleAddClick: function(e) {
            this.$addButton.prop("disabled") || this.makeChirpColumnPermanent()
        },
        makeChirpColumnPermanent: function() {
            this.rightPillarComponent && (this.rightPillarComponent.makePermanent(), this.$addButton.prop("disabled", !0))
        },
        destroy: function() {
            this.$addButton.unbind("click"), this.$addButton.hide(), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.components.OpenTwitterGeneric = TD.components.OpenSplitMenu.extend(function(e) {
        if (this.type = e, this.showUserSearch = !TD.controller.columnManager.SELF_ACCOUNTS_ONLY[e], this.userSearch = null, this.helpText = TD.controller.columnManager.HELP_TEXT[e], this.placeHolder = new TD.components.OpenColumnPlaceholder(this.helpText), this.setChirpPillar(this.placeHolder), this.showUserSearch) {
            this.userSearch = new TD.components.TwitterUserSearch, this.appendPinnedMenuItem(this.userSearch);
            var t = this.userSearch.detachResultsContainer();
            this.appendMenuItemElement(t)
        }
        this.profileAccount = new TD.components.ProfileAccount, this.profileAccount.$node.hide(), this.appendMenuItem(this.profileAccount), this.selfAccounts = new TD.components.SelfAccounts("twitter"), this.appendMenuItem(this.selfAccounts), this.$node.bind(TD.components.MenuItemBase.BUBBLE_SELECT_EVENT, r.default.bind(this._handleSelect, this))
    }).methods({
        go: function(e, t, i) {
            i.screenName ? (this.profileAccount.setUser(i.screenName), this.profileAccount.$node.show(), this.profileAccount.select()) : this.selfAccounts.selectDefault()
        },
        _handleSelect: function(e, t) {
            var i;
            if (t.target.account)(i = new TD.components.TemporaryColumn).genericTwitter(this.type, t.target.account, void 0);
            else if (t.target.twitterUser) {
                i = new TD.components.TemporaryColumn;
                var s = this.userSearch.client.oauth.account;
                i.genericTwitter(this.type, s, t.target.twitterUser)
            }
            i && (this.setChirpPillar(i), e.stopPropagation())
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(1)),
        r = o(i(1576)),
        a = o(i(1747));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.OpenCustomTimelines = TD.components.OpenSplitMenu.extend(function(e) {
        switch (this.mode = e, this.screenName = null, this.listsComponent = null, this.newCustomTimelineButton = null, this.mode) {
            case "lists":
                this.helpText = TD.controller.columnManager.HELP_TEXT[TD.controller.columnManager.LISTS];
                break;
            case "customtimelines":
                this.helpText = TD.controller.columnManager.HELP_TEXT[TD.controller.columnManager.CUSTOMTIMELINES]
        }
        this.placeHolder = new TD.components.OpenColumnPlaceholder(this.helpText), this.removePlaceholder = new TD.components.OpenColumnPlaceholder(""), this.setChirpPillar(this.placeHolder), this.$node.bind(TD.components.MenuItemBase.BUBBLE_SELECT_EVENT, n.default.bind(this._handleListSelect, this)), this.$node.bind(TD.components.CustomTimelines.LOADED, n.default.bind(this._handleListsLoaded, this))
    }).methods({
        go: function(e, t, i) {
            if (i.screenName) this.screenName = i.screenName, this.listsComponent = new TD.components.CustomTimelines(this.screenName, i.slug, this.mode), this.appendMenuItem(this.listsComponent);
            else {
                this.listsComponent = new TD.components.CustomTimelines(null, null, this.mode), this.appendMenuItem(this.listsComponent), this.newCustomTimelineButton = new a.default(r.default, {
                    mode: this.mode
                });
                var s = 0 !== this.listsComponent.items.length;
                s || this.$leftPillarContainer.remove(), this.appendPinnedMenuItem(this.newCustomTimelineButton, {
                    bottom: s
                })
            }
        },
        _handleListsLoaded: function(e, t) {
            if (t.target === this.listsComponent && 0 === t.data) {
                var i;
                switch (this.removeMenuItem(this.listsComponent), this.mode) {
                    case "lists":
                        i = this.screenName ? (0, s.default)("This user has no public Lists") : (0, s.default)("You are not subscribed to any Lists");
                        break;
                    case "customtimelines":
                        i = this.screenName ? (0, s.default)("This user has no Collections") : (0, s.default)("You do not have any Collections")
                }
                this.listsComponent = new TD.components.OpenColumnPlaceholder(i), this.setChirpPillar(this.removePlaceholder), this.appendMenuItem(this.listsComponent)
            }
        },
        _handleListSelect: function(e, t) {
            var i = t.target.list,
                s = new TD.components.TemporaryColumn;
            switch (this.mode) {
                case "lists":
                    s.list(i);
                    break;
                case "customtimelines":
                    s.customTimeline(i)
            }
            this.setChirpPillar(s), e.stopPropagation()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(0)),
        r = o(i(8)),
        a = o(i(12));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = a.default.mixin(function() {
        this.attributes({
            mode: null,
            buttonTemplate: "new_custom_timeline_button"
        }), this.componentDidInitialize = function() {
            this.on("click", this.handleNewCustomTimelineClick)
        }, this.scribeNewListClick = function() {
            TD.controller.stats.newListClick()
        }, this.scribeNewCustomtimelineClick = function() {
            TD.controller.stats.newCustomtimelineClick()
        }, this.handleNewCustomTimelineClick = function() {
            switch (this.trigger(TD.components.BaseModal.CLOSE_EVENT), this.attr.mode) {
                case "lists":
                    (0, n.default)(document).trigger("uiShowEditListMembers"), this.scribeNewListClick();
                    break;
                case "customtimelines":
                    (0, n.default)(document).trigger("uiShowEditCustomTimeline"), this.scribeNewCustomtimelineClick()
            }
        }, this.getButtonText = function(e) {
            switch (e) {
                case "lists":
                    return (0, s.default)("Create List");
                case "customtimelines":
                    return (0, s.default)("Create Collection");
                default:
                    return ""
            }
        }, this.render = function() {
            var e = r.default.render(this.attr.buttonTemplate, {
                buttonText: this.getButtonText(this.attr.mode)
            });
            this.$node.html(e)
        }
    })
}, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(53);
    t.default = TD.components.Base.extend(function(e, t) {
        var i = (0, a.attach)(e, this.$node, t).teardownEvent;
        this.teardownEvent = i
    }).methods({
        destroy: function() {
            (0, r.default)(document).trigger(this.teardownEvent), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.OpenDataminr = TD.components.OpenSplitMenu.extend(function() {
        this.helpText = TD.controller.columnManager.HELP_TEXT[TD.controller.columnManager.DATAMINR], this.placeHolder = new TD.components.OpenColumnPlaceholder(this.helpText), this.setChirpPillar(this.placeHolder), this._boundHandleWatchlistSelect = this._handleWatchlistSelect.bind(this), this._boundHandleWatchlists = this._handleWatchlists.bind(this), this.$node.bind(TD.components.MenuItemBase.BUBBLE_SELECT_EVENT, this._boundHandleWatchlistSelect), (0, n.default)(document).bind("dataDataminrWatchlists", this._boundHandleWatchlists)
    }).methods({
        go: function(e, t, i) {
            this.watchlistsComponent && this.watchlistsComponent.destroy(), this.watchlistsComponent = new TD.components.Dataminr, this.appendMenuItem(this.watchlistsComponent)
        },
        _handleWatchlists: function(e, t) {
            if (!t.watchlists || !t.watchlists.length) {
                this.removeMenuItem(this.watchlistsComponent);
                var i = (0, s.default)("You are not subscribed to any watchlists");
                this.watchlistsComponent = new TD.components.OpenColumnPlaceholder(i), this.setChirpPillar(this.removePlaceholder), this.appendMenuItem(this.watchlistsComponent)
            }
        },
        _handleWatchlistSelect: function(e, t) {
            var i = new TD.components.TemporaryColumn,
                s = TD.storage.store.getTwitterLoginAccount();
            i.dataminr(t.target.watchlist, s.getKey()), this.setChirpPillar(i)
        },
        destroy: function() {
            this.$node.off(TD.components.MenuItemBase.BUBBLE_SELECT_EVENT, this._boundHandleWatchlistSelect), (0, n.default)(document).off("dataDataminrWatchlists", this._boundHandleWatchlists), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.components.OpenLiveVideo = TD.components.OpenSplitMenu.extend(function() {
        this.liveVideos = new TD.components.LiveVideos, this.appendMenuItem(this.liveVideos), this.helpText = TD.controller.columnManager.HELP_TEXT[TD.controller.columnManager.LIVEVIDEO], this.placeHolder = new TD.components.OpenColumnPlaceholder(this.helpText), this.setChirpPillar(this.placeHolder), this.$node.bind(TD.components.MenuItemBase.BUBBLE_SELECT_EVENT, r.default.bind(this._handleLiveVideoSelect, this))
    }).methods({
        _handleLiveVideoSelect: function(e, t) {
            var i = new TD.components.TemporaryColumn;
            i.liveVideo("livevideo", t.target.metadata), this.setChirpPillar(i), e.stopPropagation()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(32)),
        n = a(i(0)),
        r = i(38);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.LiveVideos = TD.components.Base.extend(function() {
        this.$node = (0, n.default)(TD.ui.template.render("list_module_livevideos")), this.$liveVideosList = this.$find(".js-live-videos-list"), (0, r.getTwitterClient)().getLiveEvents().addCallbackWith(this, function(e) {
            var t = this;
            (0, s.default)(e.data).forEach(function(i) {
                var s = e.data[i];
                (function(e) {
                    var t = {
                            id: e.id_str,
                            title: e.title,
                            timelines: e.timelines,
                            hasMultipleTimelines: e.timelines.length > 1,
                            aspectRatio: e.media.video_info.aspect_ratio
                        },
                        i = (new TD.components.MenuItem).liveVideo(t);
                    this.$liveVideosList.append(i.$node)
                }).call(t, s)
            })
        })
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.components.OpenColumnPlaceholder = TD.components.Base.extend(function(e) {
        this.helperText = e, this.$node = (0, r.default)(TD.ui.template.render("open_column_temp_help", {
            helpText: e
        }))
    })
}, function(e, t, i) {
    "use strict";
    var s = c(i(3)),
        n = c(i(1)),
        r = c(i(0)),
        a = c(i(19)),
        o = i(23);

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.ListMembers = TD.components.BaseModal.extend(function(e, t) {
        var i = this;
        this.theList = e, this.membersIndex = {}, this.changed = !1, this.client = TD.controller.clients.getClient(e.account.getKey()), this.feedKey = TD.storage.Feed.generateKeyFor(this.theList.account.getKey(), "list", {
            listId: this.theList.id,
            ownerId: this.theList.user.id
        }), this.splitMenu = new TD.components.SplitMenu({
            hasAddMultipleUsersButton: !0
        }), this.userSearch = new TD.components.TwitterUserSearch(e.user.account, 10, TD.components.ListMember), this.suggestedUsers = new TD.components.SuggestedUsers(e.user.account, 10, TD.components.ListMember, e.name), this.loadingPane = new TD.components.OpenColumnPlaceholder((0, s.default)("Loading List members…")), this.memberList = new TD.components.ListMemberList, this.$title.html((0, s.default)("{{{1}}} by {{2}}", {
            1: a.default.cleanWithEmoji(e.name),
            2: e.user.screenName
        })), this.$menuContainer.append(this.splitMenu.$node), this.$footer.append((0, r.default)(TD.ui.template.render("lists/edit_members_footer"))), this.splitMenu.appendPinnedMenuItem(this.userSearch), this.splitMenu.appendMenuItemElement(this.userSearch.detachResultsContainer()), this.splitMenu.appendMenuItem(this.suggestedUsers), this.splitMenu.setRightPillar(this.loadingPane), this.setAndShowContainer((0, r.default)("#lists-modal")), this.userSearch.searchInput.$inputBox.focus(), this.$memberCount = this.memberList.$find(".js-member-count"), this.$editButton = this.$find(".js-edit"), this.$addMultipleButton = this.$find(".js-add-multiple"), this.$deleteButton = this.$find(".js-delete"), this.$doneButton = this.$find(".js-done"), this.$addColumnOption = this.$find(".js-add-column-option"), this.$addColumnCheckbox = this.$addColumnOption.find(".js-add-column-checkbox"), this.$exportButton = this.memberList.$find(".js-action-header-export-button"), this.$exportButton.click(n.default.bind(this._exportList, this)), 0 === TD.storage.columnController.getColumnsContainingFeed(this.feedKey).length && (this.$addColumnCheckbox.prop("checked", !0), this.$addColumnOption.removeClass("is-hidden")), this.$editButton.click(n.default.bind(this._editDetails, this)), this.$addMultipleButton.click(n.default.bind(this._addMultipleUsers, this)), this.$deleteButton.click(n.default.bind(this._deleteList, this)), this.$doneButton.click(n.default.bind(this._handleDone, this)), this.$node.bind(TD.components.ListMember.ADD_REMOVE_EVENT, n.default.bind(this._addRemoveMember, this)), this.$node.bind(TD.components.TwitterUserSearch.SEARCH_COMPLETE, function(e, t) {
            var s = t.target;
            i._checkResultsState(s), i.splitMenu.$leftPillarContainer.scrollTop(0)
        }), this._updateMemberCountAndExportButton(), this._importMembers(t).addCallback(function() {
            i.suggestedUsers.render(), i._checkResultsState(i.userSearch), i._checkResultsState(i.suggestedUsers)
        })
    }).methods({
        _addMembers: function(e) {
            var t;
            if (n.default.isEmpty(e)) t = TD.core.defer.succeed();
            else {
                t = new TD.core.defer.Deferred;
                var i = n.default.pluck(e, "screenName");
                this.client.addUsersToList(this.theList.id, i, n.default.bind(t.callback, t), n.default.bind(t.errback, t))
            }
            return t
        },
        _importMembers: function(e) {
            var t = this,
                i = this._addMembers(e);
            return i.addCallbackWith(this, this._loadAllMembers), i.addCallback(function() {
                return t._updateMemberCountAndExportButton()
            }), i.addCallback(function() {
                e && (0, o.showNotification)({
                    message: (0, s.default)("Users added successfully")
                })
            }), i.addErrback(function(e) {
                (0, o.showErrorNotification)({
                    message: (0, s.default)("Oops, something wen't wrong")
                })
            }), i
        },
        _loadAllMembers: function() {
            var e, t = this;
            return (e = this._fetchMemberPage(-1)).addCallback(function(e) {
                t.theList.memberCount = e.users.length, t._displayMembers(e.users, !1)
            }), e
        },
        _fetchMemberPage: function(e) {
            var t = new TD.core.defer.Deferred,
                i = {
                    id: this.theList.id,
                    cursor: e,
                    count: 5e3
                };
            return this.client.getListMembers(i, n.default.bind(t.callback, t), n.default.bind(t.errback, t)), t
        },
        _displayMembers: function(e, t) {
            var i = this;
            t && e.reverse(), n.default.each(e, function(e) {
                if (!i.membersIndex[e.id]) {
                    var s = new TD.components.ListMember(e);
                    i.membersIndex[s.user.id] = s, t ? i.memberList.prepend(s) : i.memberList.append(s)
                }
            }), this.loadingPane && (this.loadingPane.destroy(), this.loadingPane = null, this.splitMenu.setRightPillar(this.memberList))
        },
        _updateMemberCountAndExportButton: function() {
            var e = this.theList.isOwnList() && this.theList.memberCount > 0;
            this.$memberCount.text(this.theList.memberCount), this.$exportButton.toggleClass("is-hidden", !e)
        },
        _editDetails: function() {
            this.$node.trigger("uiShowEditListDetails", {
                list: this.theList
            }), this.destroy()
        },
        _addMultipleUsers: function() {
            (0, r.default)(document).trigger("uiShowImportListModal", {
                list: this.theList
            })
        },
        _exportList: function() {
            var e = n.default.pluck(this.membersIndex, "user.screenName").map(function(e) {
                return "@" + e
            }).join("\n");
            (0, r.default)(document).trigger("uiShowExportListModal", {
                list: this.theList,
                members: e
            })
        },
        _deleteList: function() {
            var e = this,
                t = n.default.uniqueId(),
                i = {
                    id: t,
                    title: (0, s.default)("Deleting List!"),
                    message: (0, s.default)("Are you sure you want to delete this List?"),
                    okLabel: (0, s.default)("Delete"),
                    cancelLabel: (0, s.default)("Cancel")
                };
            (0, r.default)(document).on("uiConfirmationAction", function i(s, n) {
                n.id === t && ((0, r.default)(document).off("uiConfirmationAction", i), n.result && e.client.destroyList(e.theList.id, function() {
                    e.theList = null, e.destroy()
                }))
            }).trigger("uiShowConfirmationDialog", i)
        },
        _addRemoveMember: function(e, t) {
            e.stopPropagation();
            var i = t.target;
            this.membersIndex[i.user.id] ? this.removeMember(i.user) : this.addMember(i.user)
        },
        addMember: function(e) {
            var t = this;
            this._changeUserState(e.id, TD.components.ListMember.STATE_WORKING), this.client.addUserToList(this.theList.id, e.screenName, function(i) {
                t._displayMembers([e], !0), t.theList.memberCount++, t._updateMemberCountAndExportButton(), t._changeUserState(e.id, TD.components.ListMember.STATE_MEMBER), t.changed = !0
            }, function(i) {
                t._changeUserState(e.id, TD.components.ListMember.STATE_NON_MEMBER);
                var n = (0, s.default)("Problem adding {{userName}} to the List {{listName}}. Please try again", {
                    userName: e.name,
                    listName: t.theList.name
                });
                (0, o.showErrorNotification)({
                    message: n
                })
            })
        },
        removeMember: function(e) {
            var t = this;
            this._changeUserState(e.id, TD.components.ListMember.STATE_WORKING), this.client.removeUserFromList(this.theList.id, e.screenName, function(i) {
                t.membersIndex[e.id].destroy(), delete t.membersIndex[e.id], t.theList.memberCount--, t._updateMemberCountAndExportButton(), t._changeUserState(e.id, TD.components.ListMember.STATE_NON_MEMBER), t.changed = !0
            }, function(i) {
                t._changeUserState(e.id, TD.components.ListMember.STATE_MEMBER);
                var n = (0, s.default)("Problem removing {{userName}} from the List {{listName}}. Please try again", {
                    userName: e.name,
                    listName: t.theList.name
                });
                (0, o.showErrorNotification)({
                    message: n
                })
            })
        },
        _changeUserState: function(e, t) {
            this.membersIndex[e] && this.membersIndex[e].setState(t), t === TD.components.ListMember.STATE_MEMBER && (t = TD.components.ListMember.STATE_MEMBER_CHECKED);
            var i = this.userSearch.items.concat(this.suggestedUsers.items);
            n.default.each(i, function(i) {
                i.user.id === e && i.setState(t)
            })
        },
        _checkResultsState: function(e) {
            var t = this,
                i = e === this.suggestedUsers;
            n.default.each(e.items, function(e) {
                t.membersIndex[e.user.id] ? (e.setState(TD.components.ListMember.STATE_MEMBER_CHECKED), i && e.hide()) : (e.setState(TD.components.ListMember.STATE_NON_MEMBER), i && e.show())
            })
        },
        _handleDone: function() {
            if (this.$addColumnCheckbox.prop("checked")) {
                var e = new TD.components.TemporaryColumn;
                e.list(this.theList), e.makePermanent()
            }
            this.destroy()
        },
        destroy: function() {
            if (this.changed && this.theList) {
                TD.cache.lists.add(this.theList);
                var e = TD.controller.feedManager.getPoller(this.feedKey);
                e && e.refresh({
                    reset: !0
                })
            }(0, r.default)("#lists-modal").hide(), this.splitMenu.destroy(), this.userSearch.destroy(), this.suggestedUsers.destroy(), this.memberList.destroy(), this.loadingPane && this.loadingPane.destroy(), n.default.each(this.membersIndex, function(e, t) {
                e.destroy()
            }), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.ListMember = TD.components.Base.extend(function(e) {
        this.user = e, this.state = null;
        var t = {
            fullname: e.name || e.screenName,
            username: e.screenName,
            profileImageURL: e.profileImageURL,
            description: e.description,
            isProtected: e.isProtected,
            isVerified: e.isVerified
        };
        this.$node = (0, n.default)(TD.ui.template.render("lists/member", t)), this.$addRemoveButton = this.$find(".js-add-remove"), this.$addRemoveButton.click(s.default.bind(this._handleAddRemoveClick, this)), this.setMember()
    }).statics({
        ADD_REMOVE_EVENT: "td-add-remove",
        STATE_MEMBER: "member",
        STATE_MEMBER_CHECKED: "member-checked",
        STATE_NON_MEMBER: "non-member",
        STATE_WORKING: "working"
    }).methods({
        _handleAddRemoveClick: function() {
            this.bubbleEvent(TD.components.ListMember.ADD_REMOVE_EVENT)
        },
        setState: function(e) {
            switch (e) {
                case TD.components.ListMember.STATE_MEMBER:
                    this.setMember();
                    break;
                case TD.components.ListMember.STATE_MEMBER_CHECKED:
                    this.setMemberChecked();
                    break;
                case TD.components.ListMember.STATE_NON_MEMBER:
                    this.setNonMember();
                    break;
                case TD.components.ListMember.STATE_WORKING:
                    this.setWorking()
            }
        },
        setMember: function() {
            this.state = TD.components.ListMember.STATE_MEMBER, this.$addRemoveButton.removeClass("s-nonmember s-working s-checked").addClass("s-member"), this.$addRemoveButton.prop("disabled", !1)
        },
        setMemberChecked: function() {
            this.state = TD.components.ListMember.STATE_MEMBER_CHECKED, this.$addRemoveButton.removeClass("s-nonmember s-member s-working").addClass("s-checked"), this.$addRemoveButton.prop("disabled", !1)
        },
        setNonMember: function() {
            this.state = TD.components.ListMember.STATE_NON_MEMBER, this.$addRemoveButton.removeClass("s-member s-checked s-working").addClass("s-nonmember"), this.$addRemoveButton.prop("disabled", !1)
        },
        setWorking: function() {
            this.state = TD.components.ListMember.STATE_WORKING, this.$addRemoveButton.removeClass("s-member s-nonmember s-checked").addClass("s-working"), this.$addRemoveButton.prop("disabled", !0)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.components.ListMemberList = TD.components.Base.extend(function() {
        this.$node = (0, r.default)(TD.ui.template.render("lists/member_list")), this.$list = this.$find(".js-member-list")
    }).methods({
        append: function(e) {
            this.$list.append(e.$node)
        },
        prepend: function(e) {
            this.$list.prepend(e.$node)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = c(i(3)),
        n = c(i(1)),
        r = c(i(0)),
        a = i(188),
        o = i(38);

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.CustomTimelines = TD.components.Base.extend(function(e, t, i) {
        var a = this;
        this.mode = i;
        var c, l, u = this,
            d = {},
            h = TD.storage.clientController.client.getDefaultAccount();
        switch (this.owners = d, this.screenName = e, e ? c = "lists" === this.mode ? (0, s.default)("@{{screenName}}'s Lists", this) : (0, s.default)("@{{screenName}}'s Collections", this) : "lists" === this.mode ? c = (0, s.default)("Your Lists") : "customtimelines" === this.mode && (c = (0, s.default)("Your Collections")), this.mode) {
            case "lists":
                l = [{
                    title: c,
                    className: "js-my-custom-timelines",
                    isFilterable: !0,
                    itemType: (0, s.default)("lists")
                }, {
                    title: (0, s.default)("Subscribed to"),
                    className: "js-others-custom-timelines",
                    isHidden: !0,
                    itemType: (0, s.default)("lists")
                }];
                break;
            case "customtimelines":
                l = [{
                    title: c,
                    className: "js-my-custom-timelines",
                    isFilterable: !0,
                    itemType: (0, s.default)("collections")
                }]
        }
        if (this.$node = (0, r.default)(TD.ui.template.render("open_column_list_multi_group", {
                groups: l
            })), this.$searchFilterInput = this.$find(".js-search-filter"), this.$myTimelines = this.$find("ul.js-my-custom-timelines"), this.$otherTimelines = this.$find("ul.js-others-custom-timelines"), this.$noMatch = this.$find(".js-no-match").first(), this.items = [], this.menuComponents = [], this.slug = t, this.$searchFilterInput.on("keyup keydown keypress paste", function() {
                return a._handleFilterChange()
            }), this.listComparator = function(e, t) {
                var i, s = TD.components.CustomTimelines;
                return d[e.user.id] && !d[t.user.id] ? -1 : !d[e.user.id] && d[t.user.id] ? 1 : d[e.user.id] && d[t.user.id] ? (i = e.account.getKey() === h) === (t.account.getKey() === h) ? s.ownerNameComparator(e, t) || s.nameComparator(e, t) : i ? -1 : 1 : s.nameComparator(e, t) || s.ownerNameComparator(e, t)
            }, this.collectionsComparator = function(e, t) {
                var i = e.name.toLowerCase(),
                    s = t.name.toLowerCase();
                return i < s ? -1 : i > s ? 1 : 0
            }, e) {
            TD.cache.twitterUsers.getByScreenName(e).addCallback(function(t) {
                d[t.id] = !0;
                var i = (0, o.getClientByScreenName)(e);
                switch (u.mode) {
                    case "lists":
                        i ? (u._handleLists(TD.cache.lists.getListsFor(i.oauth.account.getKey())), u.bubbleEvent(TD.components.CustomTimelines.LOADED, u.items.length)) : (i = (0, o.getTwitterClient)()).getLists(e, function(e) {
                            u._handleLists(e), u.bubbleEvent(TD.components.CustomTimelines.LOADED, u.items.length)
                        });
                        break;
                    case "customtimelines":
                        (i = i || (0, o.getTwitterClient)()).getCustomTimelines(t.id, null, function(e) {
                            u._handleLists(e), u.bubbleEvent(TD.components.CustomTimelines.LOADED, u.items.length)
                        })
                }
            })
        } else {
            var m = TD.controller.clients.getClientsByService("twitter");
            n.default.each(m, function(e) {
                d[e.oauth.account.getUserID()] = !0
            }), n.default.each(m, function(e) {
                "lists" === u.mode ? u._handleLists(TD.cache.lists.getListsFor(e.oauth.account.getKey())) : "customtimelines" === u.mode && u._handleLists(e.customTimelines)
            }), this.bubbleEvent(TD.components.CustomTimelines.LOADED, u.items.length)
        }
    }).statics({
        LOADED: "td-custom-timelines-loaded",
        nameComparator: function(e, t) {
            var i = e.name.toLowerCase(),
                s = t.name.toLowerCase();
            return (i > s) - (i < s)
        },
        ownerNameComparator: function(e, t) {
            var i = e.user.name.toLowerCase(),
                s = t.user.name.toLowerCase();
            return (i > s) - (i < s)
        }
    }).methods({
        _handleLists: function(e) {
            if (n.default.isArray(e) && 0 !== e.length) {
                this.items = this.items.concat(e), "lists" === this.mode ? this.items.sort(this.listComparator) : this.items.sort(this.collectionsComparator);
                var t = {};
                this.items = n.default.select(this.items, function(e) {
                    var i = !t[e.id];
                    return t[e.id] = !0, i
                }), this._renderLists(this.items, {
                    isSearch: !1
                })
            }
        },
        _handleFilterChange: (0, a.makeDOMMutator)(function() {
            var e = this.$searchFilterInput.val().toLowerCase(),
                t = this.items.filter(function(t) {
                    return (t.name + " " + t.description).toLowerCase().includes(e)
                });
            this._renderLists(t, {
                isSearch: !0
            })
        }),
        _renderLists: function(e) {
            var t = this,
                i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            n.default.each(this.menuComponents, function(e) {
                e.destroy()
            });
            var s, r = this.$find(".js-title").not(".is-hidden"),
                a = this.$find(".is-search-hidden");
            !e.length && i.isSearch ? (r.addClass("is-hidden is-search-hidden"), this.$noMatch.removeClass("is-hidden")) : (a.removeClass("is-hidden"), this.$noMatch.addClass("is-hidden")), this.menuComponents = n.default.map(e, function(e) {
                var i = new TD.components.MenuItem;
                switch (t.mode) {
                    case "lists":
                        i.list(e), t.owners[e.user.id] ? (t.$myTimelines.append(i.$node), t.slug && e.slug.toLowerCase() === t.slug.toLowerCase() && e.user.screenName.toLowerCase() === t.screenName.toLowerCase() && (s = i)) : (t.$find(".js-title").removeClass("is-hidden"), t.$otherTimelines.append(i.$node));
                        break;
                    case "customtimelines":
                        i.customTimeline(e), t.$myTimelines.append(i.$node);
                        var n = e.id.replace("custom-", "");
                        t.slug && n.toLowerCase() === t.slug.toLowerCase() && (s = i)
                }
                return i
            }), !s && this.screenName && this.menuComponents.length > 0 && (s = this.menuComponents[0]), s && n.default.defer(function() {
                s.select()
            })
        }
    })
}, , , , , , , function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(1)),
        r = a(i(0));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.SearchInput = TD.components.Base.extend(function(e) {
        var t = this;
        n.default.isString(e) ? this.promptText = e : this.promptText = (0, s.default)("Enter a #hashtag or keyword"), this.$node = (0, r.default)(TD.ui.template.render("add_column_search_input", {
            searchInputClassName: "js-add-column-search-input",
            searchInputPlaceholder: this.promptText
        })), this.$inputBox = this.$find(".js-add-column-search-input"), this.$searchButton = this.$find(".js-perform-search"), this.$spinner = this.$find(".js-spinner"), this.$clearButton = this.$find(".js-clear-search"), this.$node.submit(function(e) {
            t._search(), e.preventDefault()
        }), this.$clearButton.click(function(e) {
            t._clear(), e.preventDefault()
        }), this.$searchButton.click(function(e) {
            t._search(), e.preventDefault()
        }), this.boundCancelSearch = this.cancelSearch.bind(this), this.$inputBox.on("uiInputBlur", this.boundCancelSearch)
    }).methods({
        cancelSearch: function() {
            this.$inputBox.val("").blur()
        },
        _search: function() {
            var e = r.default.trim(this.$inputBox.val());
            "" === e ? this._clear() : this.prevSearchTerm !== e && (this.prevSearchTerm = e, this.bubbleEvent("td-search", this.$inputBox.val()))
        },
        _clear: function() {
            this.$inputBox.val(""), this.prevSearchTerm = "", this.$inputBox.focus(), this.bubbleEvent("td-search-clear"), this.$clearButton.hide(), this.$searchButton.show()
        },
        showActivity: function() {
            this.$searchButton.hide(), this.$clearButton.hide(), this.$spinner.show()
        },
        hideActivity: function() {
            var e = "" !== this.$inputBox.val();
            this.$clearButton.toggle(e), this.$searchButton.toggle(!e), this.$spinner.hide()
        },
        destroy: function() {
            (0, r.default)(document).off("uiSearchBlur", this.boundCancelSearch), this.$inputBox.unbind(), this.$node.remove()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.MenuItemBase = TD.components.Base.extend(function() {
        this.eventSubscriptions = [], this.selected = !1, this.eventSubscriptions.push(n.default.subscribe(TD.components.MenuItemBase.GLOBAL_SELECT_EVENT, s.default.bind(this._handleSelectionEvent, this))), s.default.defer(s.default.bind(this._addClickHandler, this))
    }).statics({
        GLOBAL_SELECT_EVENT: "/menuitem/select",
        BUBBLE_SELECT_EVENT: "td-menuitem-select",
        deselectAll: function() {
            TD.storage.notification.notify(this.GLOBAL_SELECT_EVENT, {
                target: null
            })
        }
    }).methods({
        _handleSelectionEvent: function(e) {
            this.selected = e.target === this, this.$node.toggleClass("selected", this.selected)
        },
        _addClickHandler: function() {
            var e = this;
            this.$node.bind("click", function(t) {
                e.selected || e.select()
            })
        },
        select: function() {
            this.publishEvent(TD.components.MenuItemBase.GLOBAL_SELECT_EVENT, null), this.bubbleEvent(TD.components.MenuItemBase.BUBBLE_SELECT_EVENT)
        },
        deselect: function() {
            this.selected = !1, this.$node.removeClass("selected")
        },
        destroy: function() {
            s.default.each(this.eventSubscriptions, function(e) {
                n.default.unsubscribe(e)
            }), this.$node.remove()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(0)),
        r = a(i(19));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.MenuItem = TD.components.MenuItemBase.extend(function() {
        this.type = null
    }).statics({
        BASIC: "basic",
        SUBTITLE: "subtitle",
        PERSON: "person",
        LIST: "list"
    }).methods({
        basic: function(e) {
            return this.type = TD.components.MenuItem.BASIC, this.title = e, this.$node = (0, n.default)(TD.ui.template.render("list_module_list_item", {
                title: this.title
            })), this
        },
        subtitle: function(e, t) {
            this.type = TD.components.MenuItem.SUBTITLE, this.title = e, this.subtitle = t;
            var i = {
                title: e,
                subtitle: t
            };
            return this.$node = (0, n.default)(TD.ui.template.render("list_module_subtitle_item", i)), this
        },
        selfAccount: function(e) {
            this.type = TD.components.MenuItem.PERSON, this.account = e;
            var t = {
                fullname: e.getName() || e.getUsername(),
                emojifiedName: r.default.cleanWithEmoji(e.getName()),
                username: e.getUsername(),
                profileImageURL: e.getProfileImageURL()
            };
            return this.$node = (0, n.default)(TD.ui.template.render("list_module_account_item", t)), this
        },
        twitterUser: function(e) {
            this.type = TD.components.MenuItem.PERSON, this.twitterUser = e;
            var t = {
                fullname: e.name || e.screenName,
                emojifiedName: e.emojifiedName,
                username: e.screenName,
                profileImageURL: e.profileImageURL
            };
            return this.$node = (0, n.default)(TD.ui.template.render("list_module_account_item", t)), this
        },
        list: function(e) {
            this.type = TD.components.MenuItem.LIST, this.list = e;
            var t = {
                title: r.default.cleanWithEmoji(e.name),
                by: (0, s.default)("by {{1}}", {
                    1: e.user.name
                }),
                description: r.default.cleanWithEmoji(e.description),
                subtitle: (0, s.default)("{{1}} members", {
                    1: e.memberCount
                }),
                miniProfileURL: e.user.miniProfileImageURL(),
                isPrivate: e.isPrivate
            };
            return this.$node = (0, n.default)(TD.ui.template.render("list_module_twitter_list_item", t)), this
        },
        customTimeline: function(e) {
            this.type = TD.components.MenuItem.LIST, this.list = e;
            var t = {
                title: r.default.cleanWithEmoji(e.name),
                description: r.default.cleanWithEmoji(e.description)
            };
            return this.$node = (0, n.default)(TD.ui.template.render("list_module_twitter_customtimeline_item", t)), this
        },
        dataminr: function(e) {
            return this.type = TD.components.MenuItem.DATAMINR, this.watchlist = e, this.$node = (0, n.default)(TD.ui.template.render("list_module_dataminr_watchlist", e)), this
        },
        liveVideo: function(e) {
            return this.type = TD.components.MenuItem.BASIC, this.metadata = e, this.$node = (0, n.default)(TD.ui.template.render("list_module_list_item", {
                title: e.title
            })), this
        },
        event: function(e) {
            return this.type = TD.components.MenuItem.BASIC, this.metadata = e, this.$node = (0, n.default)(TD.ui.template.render("list_module_list_item", {
                title: e.title
            })), this
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(1)),
        r = a(i(0));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.SelfAccounts = TD.components.Base.extend(function(e) {
        var t = TD.storage.accountController.getPostingAccounts();
        this.titleText = (0, s.default)("Your Accounts"), this.service = e, this.items = [], this.$node = (0, r.default)(TD.ui.template.render("open_column_list_with_header", {
            title: this.titleText
        })), this.$list = this.$find(".js-list-container");
        for (var i = 0; i < t.length; i++) {
            var n = t[i].getType();
            if (!this.service || n === this.service) {
                var a = (new TD.components.MenuItem).selfAccount(t[i]);
                this.items.push(a), this.$list.append(a.$node)
            }
        }
    }).methods({
        selectDefault: function() {
            for (var e, t = TD.storage.accountController.getDefault().getKey(), i = 0; i < this.items.length; i++)
                if (t === (e = this.items[i]).account.getKey()) {
                    e.select();
                    break
                }
        },
        destroy: function() {
            n.default.each(this.items, function(e) {
                e.destroy()
            }), this.$node.remove()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.ProfileAccount = TD.components.Base.extend(function() {
        this.titleText = (0, s.default)("Profile Account"), this.screenName = null, this.twitterUser = null, this.$node = (0, n.default)(TD.ui.template.render("open_column_list_with_header", {
            title: this.titleText
        })), this.$list = this.$find(".js-list-container"), this.menuItem = null
    }).methods({
        setUser: function(e) {
            this.screenName = e, TD.cache.twitterUsers.getByScreenName(this.screenName).addCallbackWith(this, this._renderUser)
        },
        _renderUser: function(e) {
            this.twitterUser = e, this.menuItem = (new TD.components.MenuItem).twitterUser(e), this.$list.append(this.menuItem.$node)
        },
        select: function() {
            this.menuItem.select()
        },
        destroy: function() {
            this.menuItem && this.menuItem.destroy(), this.$node.remove()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(1)),
        r = a(i(0));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.TwitterUserSearch = TD.components.Base.extend(function(e, t, i) {
        e || (e = TD.storage.accountController.getPreferredAccount("twitter")), e && (this.ListItemComponent = i, this.client = TD.controller.clients.getClient(e.getKey()), this.maxResults = t || TD.components.TwitterUserSearch.MAX_RESULTS, this.searchInput = new TD.components.SearchInput((0, s.default)("Enter a @name or full name")), this.items = [], this.resultsTitle = (0, s.default)("Search results"), this.$searchResults = (0, r.default)(TD.ui.template.render("open_column_list_with_header", {
            title: this.resultsTitle
        })), this.$searchResults.hide(), this.$node = (0, r.default)(this.searchInput.$node), this.$node.append(this.$searchResults), this.$node.bind("td-search", n.default.bind(this._handleSearchSubmit, this)), this.$node.bind("td-search-clear", n.default.bind(this._handleSearchClear, this)), this.$searchResultsList = this.$find(".js-list-container"))
    }).statics({
        SEARCH_COMPLETE: "td-search-complete",
        MAX_RESULTS: 4
    }).methods({
        _handleSearchSubmit: function(e, t) {
            this.searchInput.showActivity();
            var i = t.data;
            this._search(i), e.stopPropagation()
        },
        _search: function(e) {
            e && this.client.userSearch(e, n.default.bind(this._handleUsers, this))
        },
        _handleSearchClear: function(e) {
            n.default.each(this.items, function(e) {
                e.destroy()
            }), this.$searchResults.hide()
        },
        _handleUsers: function(e) {
            var t, i, s;
            for (this.searchInput.hideActivity(), e = n.default.take(e, this.maxResults), this.items = [], this.$searchResultsList.empty(), t = 0, i = e.length; t < i; t++) s = this.ListItemComponent ? new this.ListItemComponent(e[t]) : (new TD.components.MenuItem).twitterUser(e[t]), this.items.push(s), this.$searchResultsList.append(s.$node);
            this.$searchResults.show(), this.bubbleEvent(TD.components.TwitterUserSearch.SEARCH_COMPLETE)
        },
        detachResultsContainer: function() {
            return this.$searchResults.detach()
        },
        destroy: function() {
            n.default.each(this.items, function(e) {
                e.destroy()
            }), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.SuggestedUsers = TD.components.TwitterUserSearch.extend(function(e, t, i, r) {
        this.searchTerm = r, this._ready = !1, this._userData = null, this.resultsTitle = (0, s.default)("Suggested"), (0, n.default)(".js-title", this.$searchResults).text(this.resultsTitle), this.$node = this.$searchResults, this.searchInput.$node.detach(), this._search(r)
    }).methods({
        _handleUsers: function(e) {
            this._ready ? e && e.length > 0 && (this.supr(e), this._userData = null) : this._userData = e
        },
        render: function() {
            this._ready || (this._ready = !0, this._handleUsers(this._userData))
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(1)),
        r = o(i(0)),
        a = o(i(17));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.TemporaryColumn = TD.components.Base.extend(function() {
        this.type = void 0, this.service = void 0, this.accountKey = void 0, this.metaString = void 0, this.column = null, this.destroyCallbacks = []
    }).statics({
        DELETED_EVENT: "td-column-deleted"
    }).methods({
        _init: function(e) {
            var t = TD.controller.columnManager.makeColumnFor(e);
            this.renderColumn(t)
        },
        renderColumn: function(e) {
            this.column = e, e.visible = !0, e.temporary = !0, TD.controller.columnManager.add(this.column), this.$node = TD.ui.columns.renderColumn(this.column, {
                detached: !0
            }), TD.util.isTouchDevice() && TD.decider.get("touchdeck_tweet_controls_v3") && this.$node.find(".js-chirp-container").addClass("is-touch-tweet-container")
        },
        populate: function() {
            TD.ui.columns.setupColumnScrollListeners(this.column), TD.controller.feedScheduler.addColumn(this.column, !1)
        },
        makePermanent: function() {
            var e = this.column.clone();
            TD.controller.columnManager.addColumnToUI(e)
        },
        home: function(e) {
            this._init({
                type: "home",
                service: "tweetdeck"
            })
        },
        me: function() {
            this._init({
                type: "me",
                service: "tweetdeck"
            })
        },
        inbox: function() {
            this._init({
                type: "privateMe",
                service: "tweetdeck"
            })
        },
        scheduled: function() {
            this._init({
                type: "scheduled",
                service: "tweetdeck"
            })
        },
        genericTwitter: function(e, t, i) {
            var s, n, r = t.getKey(),
                a = i ? i.id : void 0;
            i ? (s = TD.controller.columnManager.NON_SELF_FEED_TYPE[e] || e, e === TD.controller.columnManager.MENTIONS && (a = "+@" + i.screenName), TD.cache.names.addScreenName(i.id, i.screenName)) : (e === TD.controller.columnManager.MENTIONS && (n = new TD.vo.SearchFilter).action.fromJSONObject({
                showMentions: !0
            }), e === TD.controller.columnManager.FOLLOWERS && (n = new TD.vo.SearchFilter).action.fromJSONObject({
                showFollowers: !0
            }), s = TD.controller.columnManager.SELF_FEED_TYPE[e] || e), this._init({
                type: s,
                service: "twitter",
                accountKey: r,
                metaString: a,
                searchFilter: n
            })
        },
        liveVideo: function(e, t, i) {
            i || (i = TD.storage.accountController.getPreferredAccount("twitter").getKey());
            this._init({
                type: e,
                service: "twitter",
                accountKey: i,
                metadata: t
            })
        },
        event: function(e, t, i) {
            i || (i = TD.storage.accountController.getPreferredAccount("twitter").getKey());
            this._init({
                type: e,
                service: "twitter",
                accountKey: i,
                metadata: t
            })
        },
        search: function(e, t) {
            t || (t = TD.storage.accountController.getPreferredAccount("twitter").getKey());
            this._init({
                type: "search",
                service: "twitter",
                accountKey: t,
                metaString: e
            })
        },
        list: function(e) {
            var t = this,
                i = e.user.account.getKey(),
                n = e.user.id + "/" + e.id;

            function a() {
                if (e.isOwnList()) {
                    var i = t.$find(".js-action-header-button");
                    i.text((0, s.default)("Edit")), i.removeClass("is-hidden"), i.click(function() {
                        t.bubbleEvent(TD.components.BaseModal.CLOSE_EVENT), new TD.components.ListMembers(e)
                    })
                }
            }
            TD.cache.names.addScreenName(e.user.id, e.user.screenName), TD.cache.names.addListName(e.id, e.name), this._init({
                type: "list",
                service: "twitter",
                accountKey: i,
                metaString: n
            }), a();
            var o = (0, r.default)(document),
                c = function(e, i) {
                    t.column.model.privateState.key === i.columnKey && a()
                };
            o.on("uiColumnTitleRefreshed", c), this.destroyCallbacks.push(o.off.bind(o, "uiColumnTitleRefreshed", c))
        },
        customTimeline: function(e) {
            var t = this,
                i = e.account.getKey(),
                o = e.user.id + "/" + e.id;
            TD.cache.names.addCustomTimelineName(e.id, e.name), TD.cache.names.addScreenName(e.user.id, e.user.screenName), this._init({
                type: a.default.feedTypes.CUSTOMTIMELINE,
                service: "twitter",
                accountKey: i,
                metaString: o
            }), u();
            var c = (0, r.default)(document),
                l = function(e, i) {
                    t.column.model.privateState.key === i.columnKey && u()
                };

            function u() {
                if (e.isOwnCustomTimeline()) {
                    var i = t.$find(".js-action-header-button");
                    i.text((0, s.default)("Delete")), i.removeClass("is-hidden"), i.addClass("Button--danger"), i.click(function() {
                        var e = n.default.uniqueId(),
                            i = {
                                id: e,
                                title: (0, s.default)("Delete"),
                                message: (0, s.default)("Are you sure you want to delete this Collection?"),
                                okLabel: (0, s.default)("Delete"),
                                cancelLabel: (0, s.default)("Cancel")
                            },
                            a = function(i, s) {
                                s.id === e && ((0, r.default)(document).off("uiConfirmationAction"), s.result && t.column.deleteCustomTimeline(function() {
                                    n.default.defer(function() {
                                        t.bubbleEvent(TD.components.TemporaryColumn.DELETED_EVENT)
                                    })
                                }))
                            };
                        c.on("uiConfirmationAction", a), t.destroyCallbacks.push(c.off.bind(c, "uiConfirmationAction", a)), t.$node.trigger("uiShowConfirmationDialog", i)
                    })
                }
            }(0, r.default)(document).on("uiColumnTitleRefreshed", l), this.destroyCallbacks.push(c.off.bind(c, "uiColumnTitleRefreshed", l))
        },
        dataminr: function(e, t) {
            this._init({
                type: "dataminr",
                service: "twitter",
                accountKey: t,
                metadata: {
                    watchlist: e
                }
            })
        },
        destroy: function() {
            this.column && this.column.temporary && TD.controller.columnManager.removeFromAppLayer(this.column.model.getKey()), this.destroyCallbacks.forEach(function(e) {
                e.call(this)
            }.bind(this)), this.$node.remove()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(1)),
        r = a(i(0));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.ScheduledDatePicker = TD.components.Base.extend(function(e, t) {
        var i = this;
        t = n.default.defaults(t || {}, {
            startDate: null,
            hidden: !1
        }), this.$node = (0, r.default)(TD.ui.template.render("compose/schedule")), this.$node.toggle(!t.hidden), e.append(this.$node), this.$minutes = (0, r.default)("#scheduled-minute"), this.$hours = (0, r.default)("#scheduled-hour"), this.$datepicker = (0, r.default)("#datepicker"), this.$nextMonth = (0, r.default)("#next-month"), this.$prevMonth = (0, r.default)("#prev-month"), this.$removeDate = (0, r.default)(".js-remove", this.$node), this.$amToggle = (0, r.default)("#amPm"), this.$hours.bind("change", function() {
            i._refreshDate(), i.publishDateChanged()
        }), this.$minutes.bind("change", function() {
            var e = (0, r.default)(this);
            e.val(("00" + e.val()).slice(-2)), i._refreshDate(), i.publishDateChanged()
        }), this.$datepicker = this.$datepicker.dateinput({
            onHide: function() {
                return !1
            },
            change: function() {
                i._refreshDate(), i.publishDateChanged()
            },
            min: -1
        }), i.datePickerData = this.$datepicker.data("dateinput").show(), this.$nextMonth.bind("click", function(e) {
            i.datePickerData.addMonth(1)
        }), this.$prevMonth.bind("click", function(e) {
            i.datePickerData.addMonth(-1)
        }), this.$removeDate.bind("click", function(e) {
            i.publishRemoval()
        }), this.$amToggle.bind("click", function(e) {
            var t = i.$amToggle.data("value");
            i._setAmPm(!t), i.publishDateChanged()
        }), i.setDate(t.startDate)
    }).methods({
        _refreshDate: function() {
            var e = this.$hours.val(),
                t = Number(e) % 12,
                i = Number(this.$minutes.val());
            if (!n.default.isNaN(t) && !n.default.isNaN(i)) {
                var s = new Date(this.datePickerData.getValue().getTime());
                this.$amToggle.data("value") ? s.setHours(t + 12) : s.setHours(t), s.setMinutes(i), this.date = s, e > 12 ? (this.$hours.val(t), this._setAmPm(!0)) : "0" === e && (this.$hours.val(12), this._setAmPm(!1))
            }
        },
        _setAmPm: function(e) {
            e ? (this.$amToggle.text((0, s.default)("PM")), this.$amToggle.data("value", !0)) : (this.$amToggle.text((0, s.default)("AM")), this.$amToggle.data("value", !1)), this._refreshDate()
        },
        setDate: function(e) {
            if (e) {
                var t = e.getHours() % 12 || 12,
                    i = e.getHours() > 11,
                    s = e.getMinutes();
                this._setAmPm(i), this.datePickerData.setValue(e.getFullYear(), e.getMonth(), e.getDate()), this.$hours.val(t), this.$minutes.val(("00" + s).slice(-2))
            }
            this.date = e, this.publishDateChanged()
        },
        getDate: function() {
            return this.date
        },
        publishDateChanged: function(e) {
            r.default.publish("/change/date", [void 0 !== e ? e : this.getDate()])
        },
        publishRemoval: function() {
            this.date = null, this.publishDateChanged(null), r.default.publish("/removed/date")
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.components.DetailView = TD.components.Base.extend(function(e, t) {
        this.initialised = !1, this.column = e, this.$column = t, this.$detailContainer = (0, r.default)(".js-column-detail", this.$column), this.$columnsContainer = (0, r.default)("#container"), this.$column.trigger("uiDetailViewOpening", {
            column: this.column
        }), this.$column.on("click", ".js-column-back", this._handleHeaderClick.bind(this)), this._render(), this.$detailContainer.html(this.$node), this.column.temporary || this.$node.trigger("uiCloseModal"), this.$holder = (0, r.default)(".js-detail-container", this.$column), this.$header = (0, r.default)(".js-column-header", this.$column), TD.ui.columns.refreshTitle(this.column)
    }).methods({
        _render: function() {
            throw new Error("DetailView._render not implemented")
        },
        _handleHeaderClick: function(e) {
            this.destroy()
        },
        changed: function(e) {
            e && e.id === this.chirp.id && (this.chirp = e)
        },
        deleted: function(e) {
            e.id === this.chirp.id && this.destroy()
        },
        destroy: function(e) {
            var t = this.supr.bind(this);
            this.$detailContainer.trigger("uiDetailViewClosing"), this.$column.off("click", ".js-column-back"), this.$column.trigger("uiDetailViewClosed", {
                column: this.column
            }), this.$column.one("transitionend", function() {
                e && e(), t()
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = g(i(3)),
        n = g(i(0)),
        r = g(i(6)),
        a = function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(341)),
        o = g(i(158)),
        c = g(i(17)),
        l = i(23),
        u = g(i(1)),
        d = i(53),
        h = i(138),
        m = g(i(586)),
        f = g(i(1776)),
        p = i(19);

    function g(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.TweetDetailView = TD.components.DetailView.extend(function(e, t) {}).statics({
        CARD_CONTAINER: ".js-cards-container",
        MEDIA_CONTAINER: ".js-tweet-media",
        TWEET_STAT: ".js-tweet-stat",
        RENDER_OPTIONS: {
            headerClass: "js-detail-header",
            headerAction: "resetToTopColumn",
            headerLinkClass: "js-column-back"
        }
    }).methods({
        _render: function(e) {
            var t = n.default.extend({}, TD.components.TweetDetailView.RENDER_OPTIONS, e);
            this.$node = (0, n.default)(TD.ui.template.render("status/tweet_detail_wrapper", t))
        },
        showChirp: function(e, t) {
            var i = this;
            this.chirp = e, this.mainChirp = e.getMainTweet ? e.getMainTweet() : e, this.parentChirp = t, this._renderChirp(), this._subscription || (this._subscription = n.default.subscribe("/tweets/conversation/" + this.mainChirp.id, function(e) {
                e.root && (i.chirp = i.mainChirp = i.refetchedChirp = e.root, i._renderChirp(), i.showTweetStats(i.chirp), i.attachTranslateCTA(), i._showCardsForChirp(i.refetchedChirp), i._showQuotedTweet(i.refetchedChirp), n.default.unsubscribe(i._subscription))
            })), (0, p.metric)("ui:detail:render")
        },
        _showCardsForChirp: function(e) {
            if (e.hasMedia()) this.showMedia(e);
            else if (e.hasCard() && !e.isQuoteStatus) {
                if (this.column.temporary && !(0, h.hasPoll)(e.card)) return;
                var t = this.$tweetDetail.find(".js-card-container"),
                    i = e.possiblySensitive && !TD.settings.getDisplaySensitiveMedia(),
                    s = !!t.parents(".is-inverted-dark").length;
                a.render(r.default.createElement(m.default, {
                    card: e.card,
                    cardContext: {
                        tweetId: e.id,
                        tweetPermalink: e.getChirpURL(),
                        tweetUserId: e.getMainUser().id
                    },
                    legacyCardParams: {
                        id: e.getMainTweet ? e.getMainTweet().id : e.id,
                        isContributorAccount: e.account.isContributor(),
                        accountUserId: e.account.getUserID(),
                        isPossiblySensitive: i,
                        isInvertedDark: s
                    },
                    context: "detail",
                    scribeNamespace: {
                        page: "main",
                        section: "detail"
                    }
                }), t[0])
            }
        },
        _showQuotedTweet: function(e) {
            if (e.isQuoteStatus) {
                var t = this.$find(".js-attachment-tweet");
                e.quotedTweetMissing ? t.replaceWith(TD.ui.template.render("status/quoted_tweet_missing")) : t.replaceWith(e.quotedTweet.renderQuotedTweet({
                    mediaPreviewSize: TD.vo.Column.MEDIA_PREVIEW_SIZE_MEDIUM
                }))
            }
        },
        showMedia: function(e) {
            if (e.hasMedia()) {
                var t = this.$find(TD.components.TweetDetailView.MEDIA_CONTAINER);
                if (!e.hasVideo() || t.hasClass("is-hidden")) {
                    var i = TD.settings.getDisplaySensitiveMedia(),
                        s = e.possiblySensitive && !i;
                    e.getMedia().forEach(function(e) {
                        e.isPossiblySensitive = s
                    });
                    var r = TD.ui.template.render("status/tweet_detail_media", n.default.extend({}, e, {
                        isPossiblySensitive: s
                    }));
                    t.removeClass("is-hidden").html(r)
                }
            }
        },
        _chirpRetrievalError: function() {},
        _renderChirp: function() {
            var e = c.default.isOwnCustomTimeline(this.column),
                t = !this.column.temporary && !e;
            this.$tweetDetail = (0, n.default)(TD.ui.template.render("status/tweet_detail", {
                withDragHandle: t && !this.chirp.getMainUser().isProtected,
                withRemove: e,
                renderQuoted: function() {
                    return this.renderQuotedTweet({
                        mediaPreviewSize: TD.vo.Column.MEDIA_PREVIEW_SIZE_MEDIUM,
                        isGifActive: !0,
                        withAutoplay: TD.settings.getAutoPlayGifs()
                    })
                },
                chirp: this.chirp,
                isFavorited: this.chirp.isFavorite,
                isRetweeted: this.chirp.isRetweet
            })), this.$tweetDetail.find(".tweet-location-search").on("click", function(e) {
                return (0, n.default)(document).trigger("uiPerformSearch", {
                    query: 'near:"' + this.chirp.getLocationFullName() + '"'
                }), !1
            });
            var i = this.$tweetDetail.find(".js-detail-view-inline-text");
            this.chirp.isOwnChirp() && this.chirp.isInThread() ? this.chirp.lastInSelfThread() ? i.html((0, s.default)("Add another Tweet")) : this.$tweetDetail.find(".js-detail-view-inline").hide() : i.html("Reply to " + this.chirp.getReplyUsers().map(function(e) {
                return o.default.atMentionify(e.screenName)
            }).join(" ")), this.$find(".js-tweet-detail").html(this.$tweetDetail);
            var r = this.column.getMediaPreviewSize();
            r !== TD.vo.Column.MEDIA_PREVIEW_OFF && (r = TD.vo.Column.MEDIA_PREVIEW_SIZE_SMALL), this.replies && this.repliesTo || (this.replies = new TD.components.InReplyTo(this.chirp, this.$detailContainer, r, t), this.repliesTo = new TD.components.RepliesTo(this.chirp, r, t), this.$find(".js-inreplyto").replaceWith(this.replies.$node), this.$find(".js-tweet-replies").append(this.repliesTo.$node), this._boundShowSocialProof = this.showSocialProof.bind(this), this.$column.on("click", TD.components.TweetDetailView.TWEET_STAT, this._boundShowSocialProof), this.initialised = !0, this.$tweetDetail.trigger("uiDetailViewActive", {
                $chirp: this.$tweetDetail,
                chirp: this.chirp,
                parentChirp: this.parentChirp
            }), TD.controller.stats.tweetImpression(this.chirp.getScribeItemData()), this.mainChirp.isOwnChirp() && TD.controller.stats.ownTweetDetailImpression(this.mainChirp.getScribeItemData()))
        },
        attachTranslateCTA: function() {
            var e = this;
            this.$tweetDetail.find(".js-translate-call-to-action").on("click", function() {
                e.chirp.translate()
            })
        },
        showTweetStats: function(e) {
            if (e instanceof TD.services.TwitterStatus && !(e instanceof TD.services.TwitterConversationMessageEvent)) {
                var t = e.getMainTweet();
                this.tweetStats = (0, d.attach)(f.default, this.$find(".js-tweet-stats"), {
                    tweetId: t.id,
                    userId: t.user.id,
                    initialLikeCount: t.likeCount,
                    initialReplyCount: t.replyCount,
                    initialRetweetCount: t.retweetCount,
                    userScreenName: t.user.screenName,
                    isOwnChirp: t.isOwnChirp(),
                    accountKey: t.account.getKey()
                })
            }
        },
        showSocialProof: function(e) {
            var t = this,
                i = (0, n.default)(e.target).closest(TD.components.TweetDetailView.TWEET_STAT).attr("data-type"),
                r = this.chirp.getMainTweet ? this.chirp.getMainTweet() : this.chirp;
            TD.controller.clients.getClient(r.account.getKey()).getTweetSummary(r.id, function(e) {
                t.$column.trigger("uiShowSocialProof", {
                    type: i,
                    tweetSummary: e,
                    $chirp: t.$tweetDetail,
                    chirp: t.chirp,
                    parentChirp: t.parentChirp
                })
            }, function(e) {
                (0, l.showErrorNotification)({
                    message: (0, s.default)("Could not fetch users")
                })
            })
        },
        destroy: function() {
            this._subscription && n.default.unsubscribe(this._subscription), this.repliesTo && this.repliesTo.destroy(), this.$column.off("click", this._boundShowSocialProof);
            var e = function() {
                if (this.initialised) {
                    this.replies.destroy(), this.repliesTo.destroy(), this.tweetStats && (0, n.default)(document).trigger(this.tweetStats.teardownEvent);
                    var e = this.$tweetDetail.find(".js-card-container");
                    a.unmountComponentAtNode(e[0])
                }
            }.bind(this);
            this.supr(e)
        },
        findChirp: function(e) {
            return this.initialised ? u.default.get(this.refetchedChirp, "id") === e ? this.refetchedChirp : this.replies.findChirp(e) || this.repliesTo.findChirp(e) : void 0
        },
        getMostInteresting$Chirp: function() {
            return this.$tweetDetail
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = f(i(7)),
        n = f(i(0)),
        r = f(i(1)),
        a = f(i(1774)),
        o = f(i(69)),
        c = i(19),
        l = f(c),
        u = i(138),
        d = i(12),
        h = f(d),
        m = f(i(20));

    function f(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = h.default.mixin(function() {
        this.attributes({
            cardName: null,
            isInvertedDark: null,
            isPossiblySensitive: null,
            isContributorAccount: null,
            accountUserId: null,
            id: null,
            context: null,
            scribeNamespace: {}
        }), this.initialState({
            xdmCard: null,
            xdmCardHeight: 0
        }), this.componentDidInitialize = function() {
            var e = this,
                t = this.attr,
                i = t.cardName,
                s = t.context;
            this.$node.attr("data-testid", "legacyCard"), this.after("render", function() {
                var t = e.$node[0].scrollHeight;
                e.trigger("uiCardDidResize", {
                    height: t
                })
            }), this.checkCard(), (0, c.metric)("card:render:" + s + ":" + i)
        }, this.getCardUrl = function() {
            var e = "dark" !== TD.settings.getTheme() || this.attr.isInvertedDark ? "light" : "dark",
                t = {
                    bearer_token: TD.config.bearer_token,
                    client: "tweetdeck",
                    forward: !0,
                    theme: "tweetdeck-" + e,
                    font_size: TD.settings.getFontSizePixels(TD.settings.getFontSize())
                };
            this.attr.isPossiblySensitive && (t.possibly_sensitive = !0), this.attr.isContributorAccount && (t.act_as_user_id = this.attr.accountUserId), (0, u.isStaticCard)(this.props.card) && (t.static_view = !0);
            var i = this.attr.id,
                s = (0, o.default)("https://twitter.com/i/cards/tfw/v1/" + i).search(t);
            return s.toString()
        }, this.checkCard = function() {
            var e = !!this.state.xdmCard;
            e || this.mergeState({
                xdmCard: this.makeCard(this.getCardUrl(), this.$node[0], {
                    resizeCard: this.onResizeCard.bind(this),
                    scribe: this.onScribe.bind(this),
                    openLinkNoScribe: this.onOpenLink.bind(this)
                })
            })
        }, this.render = function() {
            this.setFrameHeight()
        }, this.setFrameHeight = function() {
            var e = r.default.get(this.state, "xdmCard.iframe");
            e && (0, n.default)(e).height(this.state.xdmCardHeight)
        }, this.onResizeCard = function(e) {
            var t = e.height;
            this.state.xdmCardHeight !== t && this.mergeState({
                xdmCardHeight: t
            })
        }, this.onScribe = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                t = r.default.get(e, "customScribe.element", ""),
                i = r.default.get(e, "customScribe.action", ""),
                n = r.default.get(e, "customScribe.itemData", {}),
                a = r.default.get(e, "scribeData", {});
            this.trigger("scribeEvent", {
                terms: (0, s.default)({}, this.attr.scribeNamespace, {
                    element: t,
                    action: i
                }),
                data: {
                    items: [(0, s.default)({}, n, a)]
                }
            })
        }, this.onOpenLink = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            l.default.isMacApp() && l.default.openURL(e.url)
        }, this.makeCard = function(e, t) {
            var i = this,
                n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
            return new a.default.Rpc({
                remote: e,
                container: t,
                props: {
                    height: "0",
                    style: {
                        display: "block"
                    }
                }
            }, {
                local: (0, s.default)({}, n, {
                    localMethodNames: function() {
                        return i.getMethodNames(n)
                    }
                }),
                remote: {
                    localMethodNames: {},
                    callVideoPlayerMethod: {},
                    transmitEvent: {}
                }
            })
        }, this.getMethodNames = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return r.default.mapValues(e, r.default.isFunction)
        }, this.before("teardown", function() {
            this.trigger("uiCardDidResize", {
                height: void 0
            }), this.state.xdmCard && this.state.xdmCard.destroy()
        })
    }, m.default), e.exports.LegacyCardReact = (0, d.uiBaseToReact)(e.exports, {
        displayName: "LegacyCard"
    })
}, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = a(i(7)),
        n = a(i(63));
    t.default = function(e) {
        var t = e.screenName,
            i = (0, n.default)(e, ["screenName"]);
        return r.default.createElement("a", (0, s.default)({
            href: "https://twitter.com/" + t,
            rel: "user",
            target: "_blank"
        }, i))
    };
    var r = a(i(6));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = m(i(3)),
        n = m(i(1)),
        r = m(i(95)),
        a = m(i(29)),
        o = i(36),
        c = m(i(19)),
        l = m(i(1777)),
        u = m(i(12)),
        d = m(i(20)),
        h = i(353);

    function m(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = u.default.mixin(function() {
        this.attributes({
            tweetId: null,
            userId: null,
            userScreenName: null,
            accountKey: null,
            isOwnChirp: !1,
            initialLikeCount: null,
            initialReplyCount: null,
            initialRetweetCount: null,
            analyticsLinkSelector: ".js-open-analytics"
        }), this.initialState({
            like_count: function() {
                return this.attr.initialLikeCount
            },
            reply_count: function() {
                return this.attr.initialReplyCount
            },
            retweet_count: function() {
                return this.attr.initialRetweetCount
            }
        }), this.componentDidInitialize = function() {
            var e = this,
                t = this.getAnalyticsUpsell();
            this.initialRender(t), this.connectLivePipeline(), this.on("click", {
                analyticsLinkSelector: function() {
                    return e.scribeAnalytics(t, "click", e.attr.userId)
                }
            }), this.scribeAnalytics(t, "impression", this.attr.userId)
        }, this.connectLivePipeline = function() {
            var e = this,
                t = TD.storage.accountController.get(this.attr.accountKey),
                i = (0, h.getAccountPipeline)(t),
                s = o.livePipelineEnabled$.switchMap(function(t) {
                    return (0, r.default)(t, function() {
                        return i.subscribeToTweetEngagement(e.attr.tweetId)
                    }, function() {
                        return a.default.Observable.empty()
                    })
                }).map(function(e) {
                    return n.default.get(e, "payload.tweet_engagement")
                }).filter(Boolean);
            this.observe(s).subscribe(function(t) {
                return e.mergeState(t)
            })
        }, this.initialRender = function(e) {
            var t = {
                    analytics: e,
                    stats: [{
                        type: "repliers",
                        label: "",
                        noLink: !0
                    }, {
                        type: "retweeters",
                        label: ""
                    }, {
                        type: "favoriters",
                        label: ""
                    }]
                },
                i = TD.ui.template.render("status/tweet_detail_socialstats", t);
            this.$node.html(i), this.attachTicker("reply_count", this.$node.find('[data-type="repliers"] .js-value')), this.attachTicker("retweet_count", this.$node.find('[data-type="retweeters"] .js-value')), this.attachTicker("like_count", this.$node.find('[data-type="favoriters"] .js-value'))
        }, this.attachTicker = function(e, t) {
            var i = this,
                s = this.connect(l.default, {
                    mapStateToProps: function(t) {
                        return {
                            value: i.mapCountToTickerValue(t[e])
                        }
                    }
                });
            this.attachChild(s, t)
        }, this.mapCountToTickerValue = function(e) {
            return e && "0" !== e ? TD.util.prettyNumber(e, {
                noNegativeNumbers: !0
            }) : void 0
        }, this.render = function() {
            var e = this.$node.find('[data-type="repliers"]'),
                t = n.default.isUndefined(this.mapCountToTickerValue(this.state.reply_count));
            e.toggleClass("is-hidden", t), e.find(".js-label").text(TD.util.pluralise((0, s.default)("Reply"), (0, s.default)("Replies"), this.state.reply_count));
            var i = this.$node.find('[data-type="retweeters"]'),
                r = n.default.isUndefined(this.mapCountToTickerValue(this.state.retweet_count));
            i.toggleClass("is-hidden", r), i.find(".js-label").text(TD.util.pluralise((0, s.default)("Retweet"), (0, s.default)("Retweets"), this.state.retweet_count));
            var a = this.$node.find('[data-type="favoriters"]'),
                o = n.default.isUndefined(this.mapCountToTickerValue(this.state.like_count));
            a.toggleClass("is-hidden", o), a.find(".js-label").text(TD.util.pluralise((0, s.default)("Like"), (0, s.default)("Likes"), this.state.like_count));
            var c = t && r && o;
            this.$node.find(".js-stats-list").toggleClass("is-hidden", c)
        }, this.getAnalyticsUpsell = function() {
            if (!this.attr.isOwnChirp) return null;
            var e = c.default.getTwitterCookieUserId();
            return e === this.attr.userId ? {
                type: "tweet",
                text: (0, s.default)("View Tweet Activity"),
                url: "https://analytics.twitter.com/user/" + this.attr.userScreenName + "/tweet/" + this.attr.tweetId
            } : {
                type: "generic",
                text: (0, s.default)("Open Twitter Analytics"),
                url: "http://analytics.twitter.com"
            }
        }, this.scribeAnalytics = function(e, t, i) {
            if (e && e.type) {
                var s = "generic" === e.type ? "general_analytics_button" : "tweet_analytics_button";
                TD.controller.stats.checkNamespace(t, ["impression", "click"]), TD.controller.stats.generic({
                    page: "main",
                    section: "detail",
                    element: s,
                    action: t
                }, {
                    user_id: i
                })
            }
        }
    }, d.default)
}, function(e, t, i) {
    "use strict";
    var s = d(i(43)),
        n = d(i(0)),
        r = d(i(1)),
        a = d(i(95)),
        o = d(i(29)),
        c = i(189),
        l = d(i(8)),
        u = d(i(12));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var h = o.default.Observable.of(0, o.default.Scheduler.animationFrame).repeat();
    e.exports = u.default.mixin(function() {
        this.attributes({
            tickerInner: ".js-ticker-inner",
            tickerValues: ".js-ticker-value",
            animateClass: "ticker-animate",
            transitionTimeout: 1e3
        }), this.initialState({
            animating: !1
        }), this.componentDidInitialize = function() {
            this.after("render", this.animate)
        }, this.shouldComponentUpdate = function(e, t) {
            if (t.animating) return !1;
            var i = this.getCurrentValues(),
                s = this.getNextValues(e, i);
            return r.default.last(i) !== r.default.last(s)
        }, this.render = function() {
            var e = {
                    values: this.getNextValues().map(function(e) {
                        return {
                            value: e
                        }
                    })
                },
                t = l.default.render("number_ticker", e);
            this.$node.html(t)
        }, this.animate = function() {
            var e = this;
            if (!this.state.animating) {
                this.mergeState({
                    animating: !0
                });
                var t = (0, a.default)(this.needsAnimation(), function() {
                    return e.doCSSTransition()
                }, function() {
                    return e.waitForFrames(1)
                });
                t.subscribe(function() {
                    return e.mergeState({
                        animating: !1
                    })
                })
            }
        }, this.needsAnimation = function() {
            var e = this.getCurrentValues();
            return r.default.first(e) !== r.default.last(e)
        }, this.getNextValues = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.props,
                t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.getCurrentValues();
            return [].concat((0, s.default)(t), [e.value]).filter(function(e) {
                return !r.default.isUndefined(e) && !r.default.isNull(e)
            }).slice(-2).map(String)
        }, this.getCurrentValues = function() {
            return this.select("tickerValues").toArray().map(function(e) {
                return (0, n.default)(e).text()
            })
        }, this.doCSSTransition = function() {
            var e = this,
                t = this.select("tickerInner"),
                i = o.default.Observable.merge(o.default.Observable.fromEvent(t, c.TRANSITION_END), o.default.Observable.timer(this.attr.transitionTimeout)).take(1);
            return this.waitForFrames(2).do(function() {
                return t.addClass(e.attr.animateClass)
            }).exhaustMap(function() {
                return i
            }).exhaustMap(function() {
                return e.waitForFrames(1)
            }).take(1)
        }, this.waitForFrames = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
            return h.skip(e - 1).take(1)
        }
    })
}, , , , function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.components.ConversationDetailView = TD.components.DetailView.extend(function(e, t) {
        (0, r.default)(document).trigger("metric", {
            key: "dm:ui:conversation:view"
        }), (0, r.default)(document).trigger("scribeEvent", {
            terms: {
                page: "main",
                component: "conversations",
                section: "detail",
                action: "impression"
            }
        }), this.$column = t, this.boundHandleUiColumnTitleRefreshed = this.handleUiColumnTitleRefreshed.bind(this), this.$column.on("uiColumnTitleRefreshed", this.boundHandleUiColumnTitleRefreshed), this.boundHandleUiConversationChanged = this.handleUiConversationChanged.bind(this), (0, r.default)(document).on("uiConversationChanged", this.boundHandleUiConversationChanged)
    }).methods({
        _render: function() {
            this.$node = (0, r.default)(TD.ui.template.render("status/message_wrapper", {
                headerClass: "js-detail-header",
                headerAction: "resetToTopColumn",
                headerLinkClass: "js-column-back"
            }))
        },
        _renderChirp: function() {
            var e = this.chirp.renderThread();
            this.$find(".js-message-detail").html(e), this.initialised = !0, this.chirp.markAsRead(), this.$node.trigger("uiDetailViewActive", {
                $chirp: this.getMostInteresting$Chirp(),
                chirp: this.chirp,
                parentChirp: this.parentChirp
            });
            var t = this.chirp.isOneToOne() ? "dm:ui:conversation:view:one-to-one" : "dm:ui:conversation:view:group-dm";
            (0, r.default)(document).trigger("metric", {
                key: t
            })
        },
        showChirp: function(e, t) {
            this.chirp = e, this.parentChirp = t, this.replyBar = new TD.components.ReplyBar(this.chirp), this.$find(".js-message-box").replaceWith(this.replyBar.$node), this._renderChirp(), TD.ui.columns.refreshTitle(this.column, this.chirp), this.$column.trigger("uiColumnTitleRefreshed", {
                columnKey: this.column.model.getKey()
            });
            var i = this.chirp.updateConversation();
            return i.addCallback(function(e) {
                if (e.length) return e[0]
            }), i.addCallback(this.changed.bind(this)), i
        },
        handleUiConversationChanged: function(e, t) {
            this.changed(t.chirp)
        },
        changed: function(e) {
            if (this.initialised && e && e.id === this.chirp.id) {
                var t = e.renderThread();
                this.$find(".js-message-detail").html(t), TD.ui.columns.refreshTitle(this.column, this.chirp)
            }
        },
        findChirp: function(e) {
            return this.initialised ? this.chirp.messageIndex[e] : void 0
        },
        getMostInteresting$Chirp: function() {
            return this.$find(".js-message-detail .js-stream-item").first()
        },
        handleUiColumnTitleRefreshed: function(e, t) {
            if (this.$column.find(".js-tooltip-target").tooltip("destroy"), t.columnKey && this.chirp.participants.length > 1) {
                var i = TD.ui.template.render("participants_tooltip", {
                    title: TD.util.transform(this.chirp.name || ""),
                    participants: this.chirp.participants
                });
                this.$column.find(".js-tooltip-target").tooltip({
                    container: this.$column.find(".js-detail-header"),
                    placement: function(e) {
                        var t = this.$column.find(".js-detail-header");
                        return {
                            top: t.position().top + t.height(),
                            left: Math.round((t.width() - (0, r.default)(e).width()) / 2),
                            placement: "bottom"
                        }
                    }.bind(this),
                    html: !0,
                    title: i,
                    delay: {
                        show: 500,
                        hide: 100
                    }
                })
            }
        },
        destroy: function() {
            var e = function() {
                this.initialised && (this.replyBar.destroy(), this.chirp.markAsRead())
            }.bind(this);
            this.$column.off("uiColumnTitleRefreshed", this.boundHandleUiColumnTitleRefreshed), (0, r.default)(document).off("uiConversationChanged", this.boundHandleUiConversationChanged), this.supr(e)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.components.DataminrDetailView = TD.components.TweetDetailView.extend(function(e, t) {}).statics({
        HEADER_CONTAINER: ".js-dataminr-header",
        FOOTER_CONTAINER: ".js-dataminr-footer",
        SOURCE_PROFILE_CONTAINER: ".js-source-profile",
        SKIP_TO_REPLIES: ".js-skip-to-replies",
        REPLIES_HEADER: ".js-replies-header",
        FOLLOW_FROM_SELECTOR: ".js-action-follow",
        FOLLOW_STATE_SELECTOR: ".prf-follow-status",
        CLOSE_EVENT: "uiDataminrDetailViewClosed"
    }).methods({
        _render: function() {
            return this.supr({
                withDataminr: !0
            })
        },
        showChirp: function(e, t) {
            this._dataminrConversationSubscription = r.default.subscribe("/tweets/conversation/" + e.id, this._handleDataminrConversation.bind(this)), this.supr(e, t), this.addDataminrComponents(e)
        },
        addDataminrComponents: function(e) {
            e.dataminr && (this._showDataminrHeader(e.dataminr), this._showDataminrFooter(e.dataminr), this._showDataminrSourceProfile(e.user, e.account))
        },
        _showDataminrFooter: function(e) {
            var t = TD.ui.template.render("status/dataminr_footer", e);
            this.$find(TD.components.DataminrDetailView.FOOTER_CONTAINER).html(t)
        },
        _showDataminrHeader: function(e) {
            var t = TD.ui.template.render("status/dataminr_header", e);
            this.$find(TD.components.DataminrDetailView.HEADER_CONTAINER).html(t)
        },
        _showDataminrSourceProfile: function(e, t) {
            var s = TD.ui.template.render("profile/profile_full", e);
            this.$find(TD.components.DataminrDetailView.SOURCE_PROFILE_CONTAINER).html(s);
            var n = i(589),
                r = i(590),
                a = {
                    account: t,
                    twitterUser: e,
                    closeEvent: TD.components.DataminrDetailView.CLOSE_EVENT
                };
            r.attachTo(this.$find(TD.components.DataminrDetailView.FOLLOW_FROM_SELECTOR), a), n.attachTo(this.$find(TD.components.DataminrDetailView.FOLLOW_STATE_SELECTOR), a)
        },
        _handleDataminrConversation: function(e) {
            e.descendants && e.descendants.length > 0 && (this.$find(TD.components.DataminrDetailView.SKIP_TO_REPLIES).removeClass("is-hidden"), this.$find(TD.components.DataminrDetailView.REPLIES_HEADER).removeClass("is-hidden"))
        },
        destroy: function() {
            this.$find(TD.components.DataminrDetailView.FOLLOW_STATE_SELECTOR).trigger(TD.components.DataminrDetailView.CLOSE_EVENT), r.default.unsubscribe(this._dataminrConversationSubscription), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(1)),
        r = o(i(0)),
        a = i(23);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.ReplyBar = TD.components.Base.extend(function(e) {
        e && e.postComment && (this._boundHandleGlobalKeydown = this._handleGlobalKeydown.bind(this), this._boundSend = this.send.bind(this), this._boundPopInlineToDocked = this.popInlineToDocked.bind(this), this._boundAddImage = this.addImage.bind(this), this._boundHandleDataTweetSent = this._handleDataTweetSent.bind(this), this._boundHandleDataTweetError = this._handleDataTweetError.bind(this), this.$node = (0, r.default)(TD.ui.template.render("status/tweet_detail_replybar", {
            from: e.account.getUsername(),
            avatarURL: e.account.getProfileImageURL()
        })), this.chirp = e, this.$inputBox = this.$find(".js-reply-tweetbox"), this.$charCount = this.$find(".js-reply-charcount"), this.$sendButton = this.$find(".js-send"), this.$popoutButton = this.$find(".js-reply-popout"), this.$addImageButton = this.$find(".js-reply-add-image"), this.$sendButton.bind("click", this._boundSend), this.$popoutButton.bind("click", this._boundPopInlineToDocked), this.$addImageButton.bind("click", this._boundAddImage), (0, r.default)(document).on("dataTweetSent", this._boundHandleDataTweetSent), (0, r.default)(document).on("dataTweetError", this._boundHandleDataTweetError), (0, r.default)(document).on("dataDmSent", this._boundHandleDataTweetSent), (0, r.default)(document).on("dataDmError", this._boundHandleDataTweetError), this._reset(), this._updateCharCount())
    }).statics({
        ACTIVITY_EVENTS: "click change focus blur input keydown keypress keyup mousedown mouseup paste",
        RESET_EVENT: "td-reset",
        REPLYING_EVENT: "td-replying",
        OVER_CHAR_COUNT_CLASS: "over-char-count"
    }).methods({
        _triggerMetric: function(e) {
            (0, r.default)(document).trigger("metric", {
                key: "dm:ui:conversation:reply:" + e
            })
        },
        _updateCharCount: function() {
            (0, r.default)(document).one("dataHelpConfiguration", function(e, t) {
                var i = twttrTxt.getTweetLength(this.$inputBox.val(), t),
                    s = t.dm_text_character_limit || 140;
                s > 140 && this.$inputBox.toggleClass("rpl-textarea--expanded", i > 140);
                var n = s - i,
                    r = n >= 0 && i > 0;
                this.$sendButton.prop("disabled", !r), this.$charCount.toggleClass(TD.components.ReplyBar.OVER_CHAR_COUNT_CLASS, n < 0);
                var a = s > 140 && n >= 0;
                this.$charCount.toggle(!a), this.$charCount.val(n)
            }.bind(this)), (0, r.default)(document).trigger("uiNeedsHelpConfiguration")
        },
        _reset: function(e) {
            e = r.default.extend({}, {
                keepFocus: !1
            }, e);
            var t = "";
            if (this.chirp instanceof TD.services.TwitterStatus) {
                var i = this.chirp.getMainTweet();
                t = (0, s.default)("Reply to @{{1}}", {
                    1: i.user.screenName
                })
            } else this.chirp instanceof TD.services.TwitterConversation && (t = (0, s.default)("Reply from @{{1}}", {
                1: this.chirp.account.getUsername()
            }));
            this.$node.removeClass("s-replying"), this.$inputBox.blur().prop("disabled", !1), this.$sendButton.prop("disabled", !1), this.$inputBox.bind(TD.components.ReplyBar.ACTIVITY_EVENTS, n.default.bind(this._handleActivity, this)), this.bubbleEvent(TD.components.ReplyBar.RESET_EVENT, null), (0, r.default)(window).unbind("keydown", this._boundHandleGlobalKeydown), this.$inputBox.val(""), e.keepFocus ? this.$inputBox.focus() : this.$inputBox.attr("placeholder", t)
        },
        _handleActivity: function(e) {
            var t = this;
            this.$inputBox.unbind(), t.bubbleEvent(TD.components.ReplyBar.REPLYING_EVENT, null), this.$node.addClass("s-replying"), this._triggerMetric("active");
            var i = "",
                s = [];
            s.length > 0 && (i = s.join(" ") + " "), this.$inputBox.val(i), this._updateCharCount();
            var r = i.length,
                a = i.length;
            s.length > 0 && (r = s[0].length + 1), this.$inputBox.bind("keydown", n.default.bind(this._handleKeydown, this)), this.$inputBox.bind("input propertychange change", n.default.bind(this._updateCharCount, this)), n.default.defer(function() {
                t.$inputBox[0].setSelectionRange(r, a)
            })
        },
        _handleGlobalKeydown: function(e) {
            e.which === TD.constants.keyCodes.escape && this._reset()
        },
        _handleKeydown: function(e) {
            switch (e.charCode || e.keyCode) {
                case 10:
                case 13:
                    (e.ctrlKey || e.metaKey) && (e.preventDefault(), this.send());
                    break;
                case TD.constants.keyCodes.escape:
                    this.$inputBox.blur(), (0, r.default)(window).bind("keydown", this._boundHandleGlobalKeydown)
            }
        },
        popInlineToDocked: function() {
            var e = {
                type: "message",
                text: this.$inputBox.val(),
                from: [TD.storage.Account.generateKeyFor("twitter", this.chirp.account.getUserID())]
            };
            this.chirp.chirpType === TD.services.ChirpBase.MESSAGE_THREAD ? e.conversationId = this.chirp.conversationId : e.messageRecipients = [{
                screenName: this.chirp.getMainUser().screenName
            }], this._triggerMetric("popout"), (0, r.default)(document).trigger("uiComposeTweet", e), this._reset()
        },
        addImage: function() {
            this._triggerMetric("image:add"), this._boundPopInlineToDocked(), (0, r.default)(document).trigger("uiComposeAddImageClick", {
                type: "message"
            })
        },
        send: function() {
            var e, t = this.$inputBox.val();
            this.$sendButton.prop("disabled") || t && (this.$sendButton.prop("disabled", !0), this.$inputBox.prop("disabled", !0), this.$inputBox.blur(), this.currentRequestId = n.default.uniqueId("sendTweet"), this._triggerMetric("send"), "uiSendDm", (e = {
                type: "message",
                text: t,
                from: [this.chirp.account.getKey()],
                accountKey: this.chirp.account.getKey(),
                requestId: this.currentRequestId,
                messageType: this.chirp.type
            }).conversationId = this.chirp.conversationId, e.isReplyBar = !0, (0, r.default)(document).trigger("uiSendDm", e))
        },
        _handleDataTweetSent: function(e, t) {
            this.currentRequestId && t.request.requestId === this.currentRequestId && this._reset({
                keepFocus: !0
            })
        },
        _handleDataTweetError: function(e, t) {
            this.currentRequestId && t.request.requestId === this.currentRequestId && ((0, a.showErrorNotification)({
                message: t.response.errors[0].message
            }), this.$sendButton.prop("disabled", !1), this.$inputBox.prop("disabled", !1), this.$inputBox.focus())
        },
        destroy: function() {
            (0, r.default)(document).off("dataTweetSent", this._boundHandleDataTweetSent), (0, r.default)(document).off("dataTweetError", this._boundHandleDataTweetError), (0, r.default)(document).off("dataDmSent", this._boundHandleDataTweetSent), (0, r.default)(document).off("dataDmError", this._boundHandleDataTweetError)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = u(i(119)),
        n = u(i(3)),
        r = u(i(1)),
        a = u(i(0)),
        o = i(23),
        c = u(i(591)),
        l = i(53);

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.MediaGallery = TD.components.BaseModal.extend(function(e, t, i, s) {
        var n = this,
            r = this;
        this.chirp = e, this.column = s, this.clickedLink = t, this.clickedMediaEntityId = i, this.$node = (0, a.default)(TD.ui.template.render("media/media_gallery")), this.$node.on("click", ".js-other-replies-link", function() {
            n.column.ui._$chirpContainer.trigger("mediaGalleryRequestTwitterUsersForReplyModal", {
                userMentions: n.chirp.entities.user_mentions
            })
        }), this.$closeButton = this.$find(".js-dismiss"), this.$prevButton = this.$find(".js-media-gallery-prev"), this.$nextButton = this.$find(".js-media-gallery-next"), this.$embed = this.$find(".js-mediaembed"), this.$tweet = this.$find(".med-tweet"), this.$mainframe = this.$find(".js-embeditem"), this._sizeMedia = this._sizeMedia.bind(this), this.sizeMediaInterval = setInterval(this._sizeMedia, 300), this.$closeButton.bind("click", function() {
            r.destroy()
        }), this.$prevButton.bind("click", function() {
            r._prev()
        }), this.$nextButton.bind("click", function() {
            r._next()
        }), this._loadTweet(), this.setAndShowContainer((0, a.default)("#open-modal"), !1), TD.util.isTouchDevice() && TD.decider.get("touchdeck_tweet_controls_v3") && this.$node.find(".js-med-tweet").addClass("is-touch-tweet-container"), e.hasMedia() ? (this.media = e.getMedia(), this._setupEmbeds(), e.scribeMediaImpression()) : (TD.util.openURL(t), this.destroy()), this.media.length > 1 && (this.$node.focus(), this.prevOrNext = this._prevOrNext.bind(this), this.$node.on("uiKeyLeft", this.prevOrNext), this.$node.on("uiKeyRight", this.prevOrNext))
    }).statics({
        MEDIA_FLAG_NSFW: ".js-media-flag-nsfw",
        MEDIA_FLAGGED_NSFW: ".js-media-flagged-nsfw",
        HIDDEN_CLASS: "is-hidden"
    }).methods({
        _prev: function() {
            var e = r.default.indexOf(this.media, this.currentMedia);
            0 === e && (e = this.media.length), this.currentMedia = this.media[e - 1], this._renderEmbed()
        },
        _next: function() {
            var e = r.default.indexOf(this.media, this.currentMedia);
            e === this.media.length - 1 && (e = -1), this.currentMedia = this.media[e + 1], this._renderEmbed()
        },
        _prevOrNext: function(e) {
            e.stopImmediatePropagation(), "uiKeyLeft" === e.type ? this._prev() : "uiKeyRight" === e.type && this._next()
        },
        _setupEmbeds: function() {
            if (this.media && 0 !== this.media.length) {
                var e = this;
                this.currentMedia = this.media[0], this.clickedLink && r.default.each(this.media, function(t) {
                    (e.clickedMediaEntityId && t.mediaId === e.clickedMediaEntityId || !e.clickedMediaEntityId && t.url === e.clickedLink) && (e.currentMedia = t)
                }), this._renderEmbed()
            }
        },
        _loadTweet: function() {
            var e = this;
            this.$tweet.append(this.chirp.renderInMediaGallery()), this.$tweet.bind("click", function(t) {
                a.default.publish("chirp/click", [t, e.chirp, e.column])
            })
        },
        _sizeMedia: function() {
            var e = (0, a.default)("img", this.$mainframe),
                t = this.$embed.outerHeight(),
                i = this.$mainframe.height(),
                s = Math.max(0, e.height() - (t - i));
            e.css({
                "max-width": this.$mainframe.width() + "px",
                "max-height": s + "px"
            })
        },
        _fadeIn: function() {
            this.$mainframe.addClass("is-loaded"), this.$embed.fadeTo("fast", 1)
        },
        _renderEmbed: function() {
            var e = this.currentMedia,
                t = this.chirp.conversationId,
                i = this.chirp.getMainTweet ? this.chirp.getMainTweet() : this.chirp,
                u = "scheduled_tweet_group" === this.chirp.chirpType,
                d = e.renderGallery({
                    chirpId: i.id,
                    isDM: t,
                    isFromProtectedUser: u || this.chirp.getMainUser().isProtected
                });
            if (e.isScheduled && e.isVideo) {
                var h = (0, a.default)(d).select(".js-scheduled-video"),
                    m = this.$embed.parent().width(),
                    f = this.$embed.parent().height(),
                    p = m / f,
                    g = (0, s.default)(e.entity.video_info.aspect_ratio, 2),
                    v = g[0] / g[1],
                    T = m,
                    w = f;
                p > v ? T = f * v : w = m / v;
                var b = (0, l.attach)(c.default, h, {
                    data: {
                        videoSrc: e.chooseVideoVariant().url
                    },
                    isScheduled: !0,
                    videoWidth: T,
                    videoHeight: w
                }).teardownEvent;
                this.videoTeardownEvent = b, this.$embed.append(h)
            } else this.$embed.html(d);
            e.isScheduled || this.$embed.append(TD.ui.template.render("text/gallery_original_link", e)), e.needsSecureUrl || e.isScheduled || this.$embed.append(TD.ui.template.render("text/gallery_flag_media", {
                flagged: e.flaggedNSFW
            })), e.needsSecureUrl && (0, a.default)(document).trigger("uiNeedsSecureImageUrl", {
                accountKey: this.chirp.account.getKey(),
                url: e.large()
            });
            var y = (0, a.default)("img", this.$embed);
            0 === y.length ? r.default.delay(function() {
                this._fadeIn(), this._sizeMedia()
            }.bind(this), 1e3) : y.load(function() {
                y.attr("data-maxwidth", y.width()), y.attr("data-maxheight", y.height()), this._sizeMedia(), this._fadeIn()
            }.bind(this)), this.$find(TD.components.MediaGallery.MEDIA_FLAG_NSFW).click(function(t) {
                e.flaggedNSFW = !0, this.$find(TD.components.MediaGallery.MEDIA_FLAG_NSFW).addClass(TD.components.MediaGallery.HIDDEN_CLASS), this.$find(TD.components.MediaGallery.MEDIA_FLAGGED_NSFW).removeClass(TD.components.MediaGallery.HIDDEN_CLASS), TD.controller.clients.getClient(this.chirp.account.getKey()).flagTweet(this.chirp.id, function() {}, function() {
                    var e = (0, n.default)("Problem flagging media. Please try again");
                    (0, o.showErrorNotification)({
                        message: e
                    }), this.$find(TD.components.MediaGallery.MEDIA_FLAG_NSFW).removeClass(TD.components.MediaGallery.HIDDEN_CLASS), this.$find(TD.components.MediaGallery.MEDIA_FLAGGED_NSFW).addClass(TD.components.MediaGallery.HIDDEN_CLASS)
                })
            }.bind(this)), this.media.length > 1 ? (this.$prevButton.removeClass(TD.components.MediaGallery.HIDDEN_CLASS), this.$nextButton.removeClass(TD.components.MediaGallery.HIDDEN_CLASS), this.$mainframe.addClass("s-shorter"), this.$tweet.find(".js-media").show()) : (this.$prevButton.addClass(TD.components.MediaGallery.HIDDEN_CLASS), this.$nextButton.addClass(TD.components.MediaGallery.HIDDEN_CLASS), this.$tweet.find(".js-media").hide())
        },
        destroy: function() {
            this.media.length > 1 && (this.$node.unbind("uiKeyLeft", this.prevOrNext), this.$node.unbind("uiKeyRight", this.prevOrNext)), this.videoTeardownEvent && this.$node.trigger(this.videoTeardownEvent), this.$node.trigger("uiMediaGalleryClosing"), (0, a.default)("#open-modal").hide(), clearInterval(this.sizeMediaInterval), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(1)),
        r = a(i(0));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.AddToCustomTimelineDialog = TD.components.BaseModal.extend(function(e) {
        var t = TD.storage.accountController.getAccountsForService("twitter");
        this.myCustomTimelines = [], this.tweetToAdd = e, this.tweetToAdd.user.isProtected ? this.destroy() : (t.forEach(function(t) {
            var i = TD.controller.clients.getClient(t.getKey());
            this.myCustomTimelines = this.myCustomTimelines.concat(i.customTimelines), i.getCustomTimelines(null, e.id, function(e) {
                for (var t = 0; t < e.length; t++) this.$find('[data-id="' + e[t].id + '"]').prop("checked", !0)
            }.bind(this))
        }.bind(this)), this.myCustomTimelines.sort(function(e, t) {
            var i = e.name.toLowerCase(),
                s = t.name.toLowerCase();
            return i < s ? -1 : i > s ? 1 : 0
        }), this.$node.removeClass("s-short").addClass("s-fluid s-wide cmp s-minimal"), this.$title.html(" " + (0, s.default)("Include Tweet in:")), this.$menuContainer.html(TD.ui.template.render("actions/add_to_customtimeline_dialog", this)).addClass("with-scroll scroll-v scroll-alt").toggleClass("scroll-styled-v", TD.globalRenderOptions.styledScrollbar), this.$checkboxes = this.$find(".js-mdl-content input").click(n.default.bind(this._changeSubscription, this)), (0, r.default)(".js-dismiss", this.$node).click(n.default.bind(this.destroy, this)), (0, r.default)("#actions-modal").html(this.$node).show(), this.$checkboxes.first().focus())
    }).methods({
        _render: function() {
            return (0, r.default)(TD.ui.template.render("short_modal", {
                title: (0, s.default)("Your Collections"),
                hasDoneButton: !0,
                modalClasses: "padding-t--0"
            }))
        },
        _changeSubscription: function(e) {
            var t = (0, r.default)(e.target),
                i = t.attr("data-id"),
                s = t.prop("checked"),
                n = t.attr("data-account"),
                a = s ? "uiAddOrMoveTweetToCustomTimeline" : "uiRemoveTweetFromCustomTimeline";
            (0, r.default)(document).trigger(a, {
                id: i,
                account: n,
                tweetId: this.tweetToAdd.id
            })
        },
        destroy: function(e) {
            (0, r.default)(document).off("uiHasCustomTimelines", this.handleHasCustomTimelines), this.$node.remove(), (0, r.default)("#actions-modal").hide(), e && e.preventDefault(), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(1)),
        r = a(i(0));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.AddToListsDialog = TD.components.BaseModal.extend(function(e) {
        this.myLists = [], this.userToAdd = e, this._getLists(), this.$node.removeClass("s-short").addClass("s-fluid s-narrow cmp s-minimal"), this.$title.html(" " + (0, s.default)("Include {{>text/user_link_screenname}} in:", e)), this.$menuContainer.html(TD.ui.template.render("actions/add_to_list_dialog", this)).addClass("with-scroll scroll-v scroll-alt").toggleClass("scroll-styled-v", TD.globalRenderOptions.styledScrollbar), this.$find(".js-mdl-content input").click(this._changeSubscription.bind(this)), this.$createListButton = this.$find(".js-create-list"), this.$createListButton.click(n.default.bind(this._createList, this)), this.setAndShowContainer((0, r.default)("#actions-modal"))
    }).methods({
        _render: function() {
            return (0, r.default)(TD.ui.template.render("short_modal", {
                title: (0, s.default)("Your Lists"),
                hasDoneButton: !0,
                modalClasses: "padding-t--0"
            }))
        },
        _changeSubscription: function(e) {
            var t = (0, r.default)(e.target),
                i = t.attr("id"),
                s = t.prop("checked"),
                a = t.attr("data-account"),
                o = TD.controller.clients.getClient(a),
                c = TD.storage.Feed.generateKeyFor(a, "list", {
                    listId: i
                }),
                l = TD.controller.feedManager.getPoller(c),
                u = this;
            s ? o.addUserToList(i, this.userToAdd.screenName, function() {
                l && n.default.delay(function() {
                    l.refresh({
                        reset: !0
                    })
                }, 1e3)
            }) : o.removeUserFromList(i, this.userToAdd.screenName, function() {
                l && l.removeWhere(function(e) {
                    return u.userToAdd.id === e.user.id
                })
            })
        },
        _createList: function() {
            this.$node.trigger("uiShowEditListDetails", {
                autoAddUser: this.userToAdd
            }), this.destroy()
        },
        _getLists: function() {
            var e = this;
            TD.storage.accountController.getAccountsForService("twitter").forEach(function(t) {
                var i = t.getKey(),
                    s = TD.controller.clients.getClient(i),
                    n = TD.cache.lists.getListsFor(i).filter(function(e) {
                        return e.isOwnList()
                    });
                e.myLists = e.myLists.concat(n.sort(function(e, t) {
                    var i = e.name.toLowerCase(),
                        s = t.name.toLowerCase();
                    return (i > s) - (i < s)
                })), s.getListMemberships(e.userToAdd.screenName, !0, function(e) {
                    e.forEach(function(e) {
                        document.getElementById(e.id).checked = !0
                    })
                })
            })
        },
        destroy: function(e) {
            this.$node.remove(), (0, r.default)("#actions-modal").hide(), e && e.preventDefault(), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = l(i(3)),
        n = l(i(0)),
        r = l(i(190)),
        a = l(i(354)),
        o = l(i(1788)),
        c = i(23);

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.ActionDialog = TD.components.BaseModal.extend(function(e) {
        var t = e.tweet;
        this.tweet = t, this.$node.removeClass("js-modal-panel s-tall-fixed").addClass("cmp s-inreply l-no-txtarea s-fluid-height"), this.mainUser = t.getMainUser(), this.$find(".mdl-inner").replaceWith((0, n.default)(TD.ui.template.render("actions/action_dialog", {
            isProtected: this.mainUser.isProtected
        }))), this.$inreplyToHolder = this.$find(".js-inreply"), this.accountSelector = new TD.components.AccountSelector, this.middleSection = this.$node.find(".mdl-inner"), o.default.attachTo(this.middleSection, {
            accountSelector: this.accountSelector
        }), this.$buttons = this.$find(".js-action-button"), this.$buttons.click(this._handleClick.bind(this)), this.$retweetButton = this.$find(".js-retweet-button"), this.$inreplyToHolder.on("click", ".js-other-replies-link", this._showOtherReplies.bind(this)), this._boundRetweet = this._retweet.bind(this), this._boundHandleRetweetSuccess = this._handleRetweetSuccess.bind(this), this._boundHandleRetweetFailure = this._handleRetweetFailure.bind(this), this._boundHandleTwitterUsers = this._handleTwitterUsers.bind(this), (0, n.default)(document).on("uiSendRetweetAction", this._boundRetweet), (0, n.default)(document).on("dataRetweetSuccess", this._boundHandleRetweetSuccess), (0, n.default)(document).on("dataRetweetError", this._boundHandleRetweetFailure), (0, n.default)(document).on("dataTwitterUsers", this._boundHandleTwitterUsers), this.displayTweet(t), this.accountSelector.$node.on(TD.components.AccountSelector.CHANGE, this._handleAccountSelectionChange.bind(this)), this.accountSelector.selectAccount(t.account), this.setAndShowContainer((0, n.default)("#actions-modal"))
    }).methods({
        displayTweet: function(e) {
            e && (e.withAvatar = !0, e.inDialog = !0, this.$inreplyToHolder.html(TD.ui.template.render("status/tweet_single", e)).show())
        },
        _getSelectedAccountKeys: function() {
            return [this.accountSelector.getSelectedAccount().accountKey]
        },
        _quote: function() {
            this.tweet.quoteTo(this._getSelectedAccountKeys()), this.destroy()
        },
        _retweet: function() {
            this.$buttons.prop("disabled", !0), (0, n.default)(document).trigger("uiRetweet", {
                id: this.tweet.id,
                from: this._getSelectedAccountKeys()
            })
        },
        _handleClick: function(e) {
            var t = (0, n.default)(e.target);
            if (t.is(":disabled")) return !1;
            switch (t.data("action")) {
                case "quote":
                    this._quote();
                    break;
                case "retweet":
                    this._retweet()
            }
        },
        _showOtherReplies: function(e) {
            var t = r.default.getImplicitMentions(this.tweet.entities.user_mentions);
            this.requestId = r.default.requestUsers(t)
        },
        _handleTwitterUsers: function(e, t) {
            if (t.requestId === this.requestId) {
                this.middleSection.$node.remove(), this.$inreplyToHolder.remove();
                var i = (0, s.default)("People in conversation");
                this.$title.html(i);
                var n = this.$find(".mdl-inner");
                a.default.attachTo(n, {
                    replies: t.users
                })
            }
        },
        _handleAccountSelectionChange: function(e, t) {
            var i = t.selectedAccount,
                s = void 0 === i ? null : i;
            this.$retweetButton.prop("disabled", !s)
        },
        _handleRetweetSuccess: function(e, t) {
            this.tweet.setRetweeted(!0), TD.controller.stats.retweet(this.tweet.getScribeItemData(), t.response.user.id_str), this.destroy()
        },
        _handleRetweetFailure: function(e, t) {
            var i = (0, s.default)("Failed: Retweet");
            t.response.errors && t.response.errors.forEach(function(e) {
                i += " - " + e.message
            }), (0, c.showErrorNotification)({
                message: i
            }), this.$buttons.prop("disabled", !1)
        },
        destroy: function() {
            (0, n.default)(document).off("uiSendRetweetAction", this._boundRetweet), (0, n.default)(document).off("dataRetweetSuccess", this._boundHandleRetweetSuccess), (0, n.default)(document).off("dataRetweetError", this._boundHandleRetweetFailure), (0, n.default)(document).off("dataTwitterUsers", this._boundHandleTwitterUsers), this.accountSelector.destroy(), o.default.teardownAll(), (0, n.default)("#actions-modal").hide(), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(12)),
        r = a(i(8));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = n.default.mixin(function() {
        this.attributes({
            accountSelector: null,
            template: "action_header",
            actionHeaderSelector: ".js-action-header-user-list",
            accountSelectorContainer: ".js-account-selector-container"
        }), this.initialState({
            composeTitleText: ""
        }), this.componentDidInitialize = function() {
            var e = this.attr.accountSelector;
            e.$node.on(TD.components.AccountSelector.CHANGE, this._accountSelectorChangeHandle.bind(this)), this.initialRender()
        }, this._accountSelectorChangeHandle = function() {
            var e = this.attr.accountSelector,
                t = e.getSelectedAccount(),
                i = (0, s.default)("From @" + t.screenName);
            this.mergeState({
                composeTitleText: i
            })
        }, this.initialRender = function() {
            var e = r.default.render(this.attr.template);
            this.$node.html(e), this.select("accountSelectorContainer").html(this.attr.accountSelector.$node)
        }, this.render = function() {
            this.select("actionHeaderSelector").text(this.state.composeTitleText)
        }, this.componentWillTeardown = function() {
            this.attr.accountSelector.$node.off(TD.components.AccountSelector.CHANGE)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = l(i(3)),
        n = l(i(0)),
        r = l(i(1790)),
        a = l(i(1791)),
        o = l(i(1792)),
        c = i(53);

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.components.GlobalSettings = TD.components.BaseModal.extend(function() {
        var e = TD.storage.accountController.isEmpty() ? "accounts" : "general";
        this.$optionList = this.$find(".js-setting-list li"), (0, n.default)("a.list-link", this.$node).click(function(e) {
            var t = (0, n.default)(e.currentTarget).data("action");
            this.switchTab(t)
        }.bind(this)), this.setAndShowContainer((0, n.default)("#settings-modal"), !1), this.switchTab(e)
    }).methods({
        _render: function() {
            return (0, n.default)(TD.ui.template.render("short_modal", {
                title: (0, s.default)("Settings"),
                content: TD.ui.template.render("settings/global_settings_modal", this.getInfo()),
                hasDoneButton: !0,
                centeredFooter: !0
            }))
        },
        getInfo: function() {
            return {
                tabs: [{
                    title: (0, s.default)("General"),
                    action: "general"
                }, {
                    title: (0, s.default)("Link Shortening"),
                    action: "services"
                }, {
                    title: (0, s.default)("Mute"),
                    action: "filter"
                }]
            }
        },
        switchTab: function(e) {
            if (this.$globalSettings = (0, n.default)("#global-settings"), e !== this.currentTabName) {
                switch (this.$optionList.removeClass("selected"), this.teardownEvent && (0, n.default)(document).trigger(this.teardownEvent), e) {
                    case "general":
                        var t = {
                            version: TD.util.getFullVersionString()
                        };
                        TD.util.isWrapperApp() && deck.getWrapperVersion && (t.wrapperVersion = deck.getWrapperVersion());
                        var i = (0, c.attach)(o.default, this.$globalSettings, t);
                        this.teardownEvent = i.teardownEvent;
                        break;
                    case "services":
                        var s = (0, c.attach)(a.default, this.$globalSettings);
                        this.teardownEvent = s.teardownEvent;
                        break;
                    case "filter":
                        var l = (0, c.attach)(r.default, this.$globalSettings);
                        this.teardownEvent = l.teardownEvent
                }
                this.currentTabName = e, this.$optionList.find("[data-action=" + e + "]").parent("li").addClass("selected")
            }
        },
        destroy: function(e) {
            this.teardownEvent && (0, n.default)(document).trigger(this.teardownEvent), (0, n.default)("#settings-modal").hide(), e && e.preventDefault(), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(0)),
        r = o(i(8)),
        a = o(i(12));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = a.default.mixin(function() {
        this.attributes({
            template: "settings/global_setting_filter",
            filterListTemplate: "settings/global_setting_filter_list",
            filterListSelector: ".js-filter-list",
            addFilterButtonSelector: ".js-add-filter",
            addFilterButtonTemplate: "settings/global_setting_filter_add_btn",
            addFilterContainerSelector: ".js-add-filter-container",
            filterTypeSelector: ".js-filter-types",
            filterInputSelector: ".js-filter-input",
            removeFilterButtonSelector: ".js-remove-filter",
            globalSettingsSelector: ".js-global-settings"
        }), this.initialState({
            placeholderText: "",
            addFilterButtonEnabled: !1,
            filters: []
        }), this.componentDidInitialize = function() {
            this.on("submit", {
                globalSettingsSelector: this.handleAddFilter.bind(this)
            }), this.on("click", {
                removeFilterButtonSelector: this.handleRemoveFilter.bind(this)
            }), this.on("keyup", {
                filterInputSelector: this.toggleFilterButtonEnabled.bind(this)
            }), this.on("change", {
                filterTypeSelector: this.handleFilterTypeChange.bind(this)
            }), this.on("click", {
                addFilterButtonSelector: this.handleAddFilter.bind(this)
            }), this.mergeState({
                placeholderText: (0, s.default)("Enter a word or phrase"),
                filters: TD.controller.filterManager.getAll()
            }), this.initialRender()
        }, this.toggleFilterButtonEnabled = function() {
            this.mergeState({
                addFilterButtonEnabled: this.validateFilter()
            })
        }, this.validateFilter = function() {
            var e = this.select("filterTypeSelector").val(),
                t = this.select("filterInputSelector").val();
            return TD.controller.filterManager.validateFilter(e, t)
        }, this.handleAddFilter = function(e) {
            if (e.preventDefault(), this.validateFilter()) {
                var t = this.select("filterTypeSelector").val(),
                    i = this.select("filterInputSelector").val();
                TD.controller.filterManager.addFilter(t, i), this.refreshFilters(), this.select("filterInputSelector").val("")
            }
        }, this.handleRemoveFilter = function(e) {
            var t = (0, n.default)(e.target);
            TD.controller.filterManager.removeFilter({
                id: t.data("id")
            }), this.refreshFilters()
        }, this.getPlaceholderText = function(e) {
            switch (e) {
                case TD.vo.Filter.PHRASE:
                    return (0, s.default)("Enter a word or phrase");
                case TD.vo.Filter.SOURCE:
                    return (0, s.default)("eg TweetSpamApp");
                default:
                    return ""
            }
        }, this.handleFilterTypeChange = function() {
            var e = this.select("filterTypeSelector").val(),
                t = this.getPlaceholderText(e);
            this.mergeState({
                placeholderText: t,
                addFilterButtonEnabled: this.validateFilter()
            })
        }, this.refreshFilters = function() {
            this.mergeState({
                filters: TD.controller.filterManager.getAll()
            })
        }, this.initialRender = function() {
            var e = r.default.render(this.attr.template, {
                placeholderText: this.state.placeholderText,
                addFilterButtonEnabled: this.state.addFilterButtonEnabled,
                filters: this.state.filters
            });
            this.$node.html(e)
        }, this.render = function() {
            var e = this.state.placeholderText;
            this.select("filterInputSelector").attr("placeholder", e);
            var t = r.default.render(this.attr.addFilterButtonTemplate, {
                addFilterButtonEnabled: this.state.addFilterButtonEnabled
            });
            this.select("addFilterContainerSelector").html(t);
            var i = r.default.render(this.attr.filterListTemplate, {
                filters: this.state.filters
            });
            this.select("filterListSelector").html(i)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(8)),
        n = r(i(12));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = n.default.mixin(function() {
        this.attributes({
            template: "settings/global_setting_link_shortening",
            bitlyAccountFormTemplate: "settings/link_shortening_bitly_form",
            linkShorteningSelector: ".js-link-shortening",
            bitlyFormSelector: ".js-bitly-form",
            bitlyUsernameSelector: ".js-bitly-email",
            bitlyApiKeySelector: ".js-bitly-key"
        }), this.initialState({
            selectedShortener: null,
            bitlyAccount: null
        }), this.componentDidInitialize = function() {
            this.on("change", {
                linkShorteningSelector: this.handleLinkShortenerChange
            }), this.on(document, "dataSettingsValues", this.getCurrentSettings), this.getCurrentSettings(), this.initialRender()
        }, this.handleLinkShortenerChange = function(e) {
            var t = e.currentTarget.value;
            TD.settings.setLinkShortener(t)
        }, this.getCurrentSettings = function() {
            var e = TD.settings.getLinkShortener(),
                t = "bitly" === e ? TD.services.bitly.getAccount() : null;
            this.mergeState({
                selectedShortener: e,
                bitlyAccount: t
            })
        }, this.saveBitlyAccount = function() {
            if (TD.util.metric("settings:services:save"), "bitly" === this.state.selectedShortener) return TD.services.bitly.updateAccount({
                login: this.select("bitlyUsernameSelector").val(),
                apiKey: this.select("bitlyApiKeySelector").val()
            })
        }, this.initialRender = function() {
            var e = s.default.render(this.attr.template);
            this.$node.html(e)
        }, this.render = function() {
            var e = "bitly" === this.state.selectedShortener,
                t = e ? s.default.render(this.attr.bitlyAccountFormTemplate, {
                    bitlyAccount: this.state.bitlyAccount
                }) : "";
            this.select("linkShorteningSelector").val(this.state.selectedShortener), this.select("bitlyFormSelector").html(t)
        }, this.before("teardown", function() {
            this.saveBitlyAccount()
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(0)),
        n = a(i(8)),
        r = a(i(12));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            template: "settings/global_setting_general",
            version: null,
            wrapperVersion: void 0,
            streamTweetsInputId: "streaming-updates",
            startupNotificationsInputId: "show-startup-notifications",
            sensitiveContentInputId: "display-sensitive-media",
            autoplayGifsInputId: "auto-play-gifs",
            toggleSwitchSelector: ".js-toggle-switch",
            radioInputSelector: ".js-settings-radio",
            themeInputName: "theme",
            columnWidthInputName: "column-size",
            fontSizeInputName: "font-size",
            columnWidthSelector: ".js-column-size",
            fontSizeSelector: ".js-font-size",
            themeSelector: ".js-theme",
            streamTweetsSelector: ".js-streaming-updates",
            showNotificationsSelector: ".js-show-startup-notifications",
            displaySensitiveContentSelector: ".js-display-sensitive-media",
            autoplayGifsSelector: ".js-auto-play-gifs"
        }), this.componentDidInitialize = function() {
            this.on("click", {
                toggleSwitchSelector: this.handleToggleSwitchClick.bind(this)
            }), this.on("change", {
                radioInputSelector: this.handleRadioInputChange
            }), this.on(document, "dataSettingsValues", this.loadSettings), this.loadSettings(), this.initialRender(), this.$columnWidth = this.select("columnWidthSelector"), this.$fontSize = this.select("fontSizeSelector"), this.$theme = this.select("themeSelector"), this.$streamTweets = this.select("streamTweetsSelector"), this.$showNotifications = this.select("showNotificationsSelector"), this.$displaySensitiveContent = this.select("displaySensitiveContentSelector"), this.$autoplayGifs = this.select("autoplayGifsSelector")
        }, this.loadSettings = function() {
            this.mergeState({
                streamTweets: TD.settings.getUseStream(),
                showStartupNotifications: TD.settings.getShowStartupNotifications(),
                displaySensitiveMedia: TD.settings.getDisplaySensitiveMedia(),
                autoplayGifs: TD.settings.getAutoPlayGifs(),
                theme: TD.settings.getTheme(),
                columnWidth: TD.settings.getColumnWidth(),
                fontSize: TD.settings.getFontSize()
            })
        }, this.handleToggleSwitchClick = function(e) {
            var t = (0, s.default)(e.currentTarget).hasClass("icon-toggle-on"),
                i = !t;
            switch (e.currentTarget.id) {
                case this.attr.streamTweetsInputId:
                    TD.settings.setUseStream(i), this.mergeState({
                        streamTweets: i
                    });
                    break;
                case this.attr.startupNotificationsInputId:
                    TD.settings.setShowStartupNotifications(i), this.mergeState({
                        showStartupNotifications: i
                    });
                    break;
                case this.attr.sensitiveContentInputId:
                    TD.settings.setDisplaySensitiveMedia(i), this.mergeState({
                        displaySensitiveMedia: i
                    });
                    break;
                case this.attr.autoplayGifsInputId:
                    TD.settings.setAutoPlayGifs(i), this.mergeState({
                        autoplayGifs: i
                    })
            }
        }, this.handleRadioInputChange = function(e) {
            var t = e.currentTarget.value;
            switch (e.currentTarget.name) {
                case this.attr.themeInputName:
                    TD.settings.setTheme(t);
                    break;
                case this.attr.columnWidthInputName:
                    TD.settings.setColumnWidth(t);
                    break;
                case this.attr.fontSizeInputName:
                    TD.settings.setFontSize(t)
            }
        }, this.initialRender = function() {
            var e = n.default.render(this.attr.template, {
                version: this.attr.version,
                wrapperVersion: this.attr.wrapperVersion
            });
            this.$node.html(e)
        }, this.render = function() {
            var e = this.state,
                t = e.streamTweets,
                i = e.showStartupNotifications,
                s = e.displaySensitiveMedia,
                n = e.autoplayGifs,
                r = e.theme,
                a = e.columnWidth,
                o = e.fontSize;
            this.$streamTweets.removeClass(t ? "icon-toggle-off" : "icon-toggle-on").addClass(t ? "icon-toggle-on" : "icon-toggle-off"), this.$showNotifications.removeClass(i ? "icon-toggle-off" : "icon-toggle-on").addClass(i ? "icon-toggle-on" : "icon-toggle-off"), this.$displaySensitiveContent.removeClass(s ? "icon-toggle-off" : "icon-toggle-on").addClass(s ? "icon-toggle-on" : "icon-toggle-off"), this.$autoplayGifs.removeClass(n ? "icon-toggle-off" : "icon-toggle-on").addClass(n ? "icon-toggle-on" : "icon-toggle-off"), this.$theme.find("[value=" + r + "]").prop("checked", !0), this.$columnWidth.find("[value=" + a + "]").prop("checked", !0), this.$fontSize.find("[value=" + o + "]").prop("checked", !0)
        }
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = a(i(1)),
        n = a(i(0)),
        r = a(i(533));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.default = TD.components.AccountSelector = r.default.extend(function() {
        var e = this;
        this.$node = n.default.createElement("ul").addClass("js-account-selector margin-t--10 compose-accounts cf"), this.cachedSelectedAccount = null, this.accountIndex = {}, this.refreshPostingAccounts(), this.$node.on("click", ".js-account-item", function(t) {
            var i = (0, n.default)(t.currentTarget);
            t.stopPropagation(), (0, n.default)("li a", e.$node).removeClass("is-selected"), i.addClass("is-selected"), e.updateSelectedAccount()
        }), this.subscription = n.default.subscribe("/storage/client/account_whitelist_changed", s.default.bind(this.refreshPostingAccounts, this))
    }).statics({
        CHANGE: "td-accounts-change",
        SELECTED_CLASS: "is-selected"
    }).methods({
        refreshPostingAccounts: function() {
            var e, t, i, n, r = TD.storage.accountController.getPostingAccounts(),
                a = [];
            for (this.accountIndex = {}, e = 0; e < r.length; e++) i = (t = r[e]).getKey(), a.push(i), this.accountIndex[i] = {
                accountKey: i,
                avatarSize: 36,
                profileImageURL: t.getProfileImageURL(),
                screenName: t.getUsername()
            };
            var o, c, l;
            a.length && (n = TD.ui.template.render("compose/accounts", (o = a, c = this.accountIndex, (l = {
                accounts: [],
                show_acc_toggle: !0
            }).accounts = s.default.map(o, function(e) {
                return c[e]
            }), l)), this.$node.html(n))
        },
        getSelectedAccount: function() {
            var e = void 0;
            if (this.cachedSelectedAccount) return this.cachedSelectedAccount;
            var t = this.$node.find(".is-selected");
            if (1 === t.length) {
                var i = t[0].attributes["data-id"].value;
                e = this.accountIndex[i]
            }
            return this.cachedSelectedAccount = e, e
        },
        selectAccount: function(e) {
            if (e) {
                var t = this.$node.find(".js-account-item");
                t.removeClass("is-selected"), t.filter("li a[data-id='" + e.getKey() + "']").addClass("is-selected"), this.updateSelectedAccount()
            }
        },
        updateSelectedAccount: function() {
            this.cachedSelectedAccount = null;
            var e = this.getSelectedAccount();
            this.$node.trigger("td-accounts-change", {
                selectedAccount: e
            })
        },
        destroy: function() {
            n.default.unsubscribe(this.subscription), this.$node.off("click", ".js-account-item"), this.supr()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = h(i(3)),
        n = h(i(0)),
        r = h(i(240)),
        a = h(i(1)),
        o = h(i(592)),
        c = h(i(182)),
        l = h(i(17)),
        u = i(23),
        d = i(138);

    function h(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.vo.Column = function(e, t) {
        var i = this;
        TD.sync.util.assert(e, "must provide sColumn to create aColumn"), this.model = e, TD.sync.util.assert(this.model.getKey(), "vo.Column will most likely fail if your column has no key"), this.ui = new TD.ui.Column(this.model.getKey()), this._feeds = [], this.filters = [], this.description = "", this.reset(), this.scribedImpressionIDs = new r.default(200), this._isUpdating = !0, this.feedSubscriptions = {}, this.deleteSubscriptions = {}, this.visible = !0, this.visibility = {
            columnWidth: 0,
            visibleWidth: 0,
            visibleHeight: 0,
            visibleFraction: 0
        }, this.temporary = !1, this.detailViewComponent = null, this.UPWARD_SCROLL_CHIRP_BLOCK_SIZE = 40, this.INFINITE_SCROLL_CHIRP_BLOCK_SIZE = 20, this.TARGET_COLUMN_CHIRP_LIMIT = 40, this.RETRY_FILL_TIMEOUT = 1e3, this.loadFeeds(), this.loadFilters(), t && this.setFeeds(t), l.default.isFilterable(this) || this.updateSearchFilter(new TD.vo.SearchFilter), this.COLUMN_MINIMALIST_TWEET_TPM_THRESHOLD = 750, this.CARDS_TPM_THRESHOLD = 10, this.streamRate = 0, this.streamRateEvent = "dataStreamRate." + this.model.getKey(), (0, n.default)(document).on(this.streamRateEvent, this.updateStreamRate.bind(this)), this.tpm = 0, this.tpmUpdateEvent = "dataColumn" + this.model.getKey() + "Tpm", (0, n.default)(document).on(this.tpmUpdateEvent, this.updateTpm.bind(this)), this.tpmCounter = new TD.util.TpmCounter(500, 5e3, this.tpmUpdateEvent), this.tpmIncrementEvent = "incrementTpmCounter." + this.model.getKey(), (0, n.default)(document).on(this.tpmIncrementEvent, function(e, t) {
            t.columnKey === i.model.getKey() && i.tpmCounter.incrementCounter(1)
        }), this.STREAM_ITEM_CONTENT_SELECTOR = ".js-stream-item-content", this.STREAM_ITEM_SELECTOR = ".js-stream-item", this.miscSubscriptions = [n.default.subscribe("/storage/client/settings/display_sensitive_media", function() {
            return i.reloadTweets()
        }), n.default.subscribe("/storage/client/settings/font_size", function() {
            return i.reloadTweets()
        }), n.default.subscribe("/storage/client/settings/theme", function() {
            return i.reloadTweets()
        }), n.default.subscribe("/storage/client/settings/column_width", function() {
            return i.reloadTweets()
        })], this.throttledUpdateUnreadIndicators = a.default.throttle(this.updateUnreadIndicators.bind(this), 100), this.pausePlayGifs = a.default.throttle(this.pausePlayGifs.bind(this), 500), this.chirpsWithPlayingGifs = [], this.visibleChirpsEvent = "uiVisibleChirps." + this.model.getKey(), (0, n.default)(document).on(this.visibleChirpsEvent, function(e, t) {
            t.columnKey === i.model.getKey() && i.handleVisibleChirps(t)
        })
    }, TD.vo.Column.MEDIA_PREVIEW_OFF = "off", TD.vo.Column.MEDIA_PREVIEW_SIZE_SMALL = "small", TD.vo.Column.MEDIA_PREVIEW_SIZE_MEDIUM = "medium", TD.vo.Column.MEDIA_PREVIEW_SIZE_LARGE = "large", TD.vo.Column.prototype.handleVisibleChirps = function(e) {
        var t = e.chirpsData.map(function(e) {
                return e.chirp
            }).filter(function(e) {
                return e && !e.showMore && !e.topCursor
            }),
            i = TD.util.getTopChirp([this.highWaterMarkSeenChirp].concat(t));
        if (i !== this.highWaterMarkSeenChirp && (this.highWaterMarkSeenChirp = i), this.throttledUpdateUnreadIndicators(), this.pausePlayGifs(t), TD.config.debug_highlight_visible_chirps) {
            var s = this.ui.getChirpContainer(),
                r = a.default.pluck(t, "id");
            s.find(".js-stream-item").each(function() {
                var e = (0, n.default)(this),
                    t = e.attr("data-key"),
                    i = r.indexOf(t) > -1 ? "#ffb699" : "transparent";
                e.css("background-color", i)
            })
        }
    }, TD.vo.Column.prototype.loadCards = function(e) {
        var t = this,
            i = this.getMediaPreviewSize() === TD.vo.Column.MEDIA_PREVIEW_OFF,
            s = !(0, d.isUsingHorizonWebCards)() && this.tpm > this.CARDS_TPM_THRESHOLD,
            n = TD.ui.columns.isScrolledToTop(this.model.getKey()) && s,
            r = e.filter(Boolean).filter(function(e) {
                return e.hasCard()
            });
        i || n || r.filter(function(e) {
            return !e.hasMedia()
        }).forEach(function(e) {
            t.ui.loadCard(e, l.default.getColumnType(t), t.temporary)
        })
    }, TD.vo.Column.prototype.pausePlayGifs = function(e) {
        var t = this,
            i = e.filter(Boolean).filter(function(e) {
                var t = e.quotedTweet && e.quotedTweet.hasAnimatedGif();
                return e.hasAnimatedGif() || t
            });
        a.default.difference(this.chirpsWithPlayingGifs, i).forEach(function(e) {
            t.ui.unloadGif(e, t.getRenderOptions())
        }, this.ui), i.forEach(function(e) {
            t.ui.loadGif(e, t.getRenderOptions()), TD.settings.getAutoPlayGifs() ? t.ui.playGifIfNotManuallyPaused(e) : t.ui.pauseGif(e), e.quotedTweet && (t.ui.loadGif(e.quotedTweet, t.getRenderOptions()), TD.settings.getAutoPlayGifs() ? t.ui.playGifIfNotManuallyPaused(e.quotedTweet) : t.ui.pauseGif(e.quotedTweet))
        }), this.chirpsWithPlayingGifs = i
    }, TD.vo.Column.prototype.reset = function() {
        this.state = "awaiting_backfill", this.updateArray = [], this.updateIndex = {}, this.highWaterMarkChirp = null, this.highWaterMarkSeenChirp = null, this.isTrackingRealtime = !0, this.isFetchingUpwardUpdates = !1, this.isFetchingOlderUpdates = !1, this.doUpwardScrollDeferreds = [], TD.ui.columns.unlockColumnFromElement(this.model.getKey()), this.resetUnreadIndicators()
    }, TD.vo.Column.prototype.updateHighWaterMarkChirp = function(e) {
        e && (this.highWaterMarkChirp = TD.util.getTopChirp([this.highWaterMarkChirp, e]))
    }, TD.vo.Column.prototype.backfill = function() {
        var e = this,
            t = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).firstLoad;
        if ("awaiting_backfill" === this.state) {
            this.state = "backfill_loading";
            var i = l.default.getColumnType(this),
                s = this.calculateInfiniteScrollCursor([]),
                n = TD.controller.columnManager.getAllOrdered().indexOf(this),
                r = t && n > 2 ? 500 * n : 0,
                a = TD.core.defer.timeout(r);
            a.addCallback(function() {
                return e.fillAggregateCursor(s)
            }), a.addCallbacks(function(t) {
                e.mergeAndRenderChirps(t.chirps), t.chirps.length ? (e.state = "polling", TD.util.metric("column:backfill:result:chirps:" + i)) : (e.state = "awaiting_backfill", TD.util.metric("column:backfill:result:no-chirps:" + i))
            }, function() {
                e.state = "awaiting_backfill", TD.util.metric("column:backfill:error:fill:" + i)
            }), a.addErrback(function(e) {
                TD.util.metric("column:backfill:error:final:" + i)
            })
        }
    }, TD.vo.Column.prototype.clone = function() {
        return TD.controller.columnManager.makeColumn(this.model.getType(), this.getFeeds(), this.model.getFilters())
    }, TD.vo.Column.prototype.updateStreamRate = function(e, t) {
        this.streamRate = t.itemsPerMinute
    }, TD.vo.Column.prototype.updateTpm = function(e, t) {
        this.tpm = t.itemsPerMinute
    }, TD.vo.Column.prototype.loadFeeds = function() {
        if (this.model.managed) {
            var e = this.model.getFeedKeys();
            if (a.default.isUndefined(e)) TD.sync.util.stateLog("loadFeeds() not loading feeds for", this, "given", this.model.state);
            else {
                this._feeds = [];
                for (var t = 0; t < e.length; t++) {
                    var i = TD.storage.feedController.get(e[t]);
                    this._feeds.push(i)
                }
                this.refreshSubscriptions()
            }
        }
    }, TD.vo.Column.prototype.getFeeds = function() {
        return this._feeds.concat()
    }, TD.vo.Column.prototype.getFeedsByType = function(e) {
        return this.getFeeds().filter(function(t) {
            return t.getType() === e
        })
    }, TD.vo.Column.prototype.setFeeds = function(e) {
        this._feeds = e;
        for (var t = [], i = 0; i < this._feeds.length; i++) t.push(this._feeds[i].getKey());
        this.model.setFeedKeys(t), this.refreshSubscriptions(), this.model.managed && TD.storage.feedController.manageFeeds(this._feeds)
    }, TD.vo.Column.prototype.addFeed = function(e) {
        for (var t, i = [], s = 0; s < this._feeds.length; s++) {
            if ((t = this._feeds[s].getKey()) === e.getKey()) return;
            i.push(t)
        }
        this._feeds.push(e), i.push(e.getKey()), this.model.setFeedKeys(i), this.refreshSubscriptions(), this.model.managed && TD.storage.feedController.manageFeeds(this._feeds)
    }, TD.vo.Column.prototype.addFeeds = function(e) {
        if (e && 0 !== e.length) {
            var t, i = [],
                s = {};
            for (e = this._feeds.concat(e), t = 0; t < e.length; t++) s[e[t].getKey()] || (s[e[t].getKey()] = !0, i.push(e[t]));
            this.setFeeds(i)
        }
    }, TD.vo.Column.prototype.removeFeed = function(e) {
        for (var t, i = [], s = 0, n = this._feeds.length - 1; n >= 0; n--)(t = this._feeds[n].getKey()) === e.getKey() ? (this._feeds.splice(n, 1), s++) : i.push(t);
        return s > 0 && (this.model.setFeedKeys(i), this.refreshSubscriptions(), this.checkChirpIndex()), s
    }, TD.vo.Column.prototype.filterAllowedChirps = function(e) {
        var t = this.model.getClearedTimestamp();
        return e.filter(function(e) {
            return e.created.getTime() > t && e.passFilters(this.filters)
        }, this)
    }, TD.vo.Column.prototype.findChirp = function(e) {
        var t = void 0;
        if (!(t = this.detailViewComponent ? this.detailViewComponent.findChirp(e) : this.updateIndex[e]))
            for (var i = 0; i < this.updateArray.length; i++)
                if (this.updateArray[i].getRelatedTweet() && this.updateArray[i].getRelatedTweet().id === e) {
                    t = this.updateArray[i].getRelatedTweet();
                    break
                } return t
    }, TD.vo.Column.prototype.findMostInterestingChirp = function(e) {
        var t = this.findChirp(e);
        return t && t instanceof TD.services.TwitterAction && (t = t.getRelatedTweet() || t), t
    }, TD.vo.Column.prototype.checkChirpIndex = function() {
        var e = this.model.getFeedKeys(),
            t = a.default.map(e, TD.controller.feedManager.getPoller),
            i = a.default.filter(this.updateArray, function(e) {
                return !a.default.find(t, function(t) {
                    return t.chirpIndex[e.id]
                })
            });
        this.removeFromIndex(null, i, !0), 0 === this.updateArray.length && this.reset()
    }, TD.vo.Column.prototype.refreshSubscriptions = function() {
        var e, t = {},
            i = this.model.getFeedKeys();
        if ("me" === this.model.getType()) {
            var s = !1,
                r = [];
            a.default.each(i, function(e) {
                var t = TD.storage.feedController.get(e);
                t && ("interactions" === t.getType() && (s = !0), "mentions" !== t.getType() && r.push(e))
            }), s && (i = r)
        }
        for (var o = 0; o < i.length; o++) t[e = i[o]] = !0, this.feedSubscriptions[e] || (this.feedSubscriptions[e] = n.default.subscribe("/feed/" + e, this.handlePushChirps.bind(this))), this.deleteSubscriptions[e] || (this.deleteSubscriptions[e] = n.default.subscribe("/delete/" + e, this.handlePushDelete.bind(this)));
        for (e in this.feedSubscriptions) this.feedSubscriptions.hasOwnProperty(e) && (t[e] || (n.default.unsubscribe(this.feedSubscriptions[e]), delete this.feedSubscriptions[e]));
        for (e in this.deleteSubscriptions) this.deleteSubscriptions.hasOwnProperty(e) && (t[e] || (n.default.unsubscribe(this.deleteSubscriptions[e]), delete this.deleteSubscriptions[e]))
    }, TD.vo.Column.prototype.handlePushChirps = function(e) {
        if ("polling" === this.state) {
            var t = TD.core.defer.succeed(e);
            return t.addCallbackWith(this, this.preprocessPollerData), t.addCallbackWith(this, this.mergeMissingChirps), this.isTrackingRealtime && (t.addCallbackWith(this, this.doUpwardScroll), t.addCallback(function() {
                return e
            })), t.addCallbackWith(this, this.processPushData), t
        }
        this.backfill()
    }, TD.vo.Column.prototype.preprocessPollerData = function(e) {
        return e.chirps = this.filterAllowedChirps(e.chirps), e.chirps.sort(TD.util.chirpColumnSort), e
    }, TD.vo.Column.prototype.mergeMissingChirps = function(e) {
        var t = c.default.empty;
        this.updateArray.length && (t = new c.default(c.default.incEnd(this.updateArray[this.updateArray.length - 1]), c.default.incEnd(this.updateArray[0])));
        var i = e.chirps.filter(t.contains, t);
        return this.mergeAndRenderChirps(i), e
    }, TD.vo.Column.prototype.processPushData = function(e) {
        if (!!e.poller.feed.managed && e.notifyAfterSortIndex) {
            var t = new TD.services.ChirpBase;
            t.sortIndex = e.notifyAfterSortIndex;
            var i = [].concat.apply([], e.chirps.map(function(e) {
                return e.getUnreadChirps(t)
            }));
            n.default.publish("/notifications/new", [{
                column: this,
                items: i
            }])
        }
        var s = new c.default(this.highWaterMarkChirp ? c.default.excEnd(this.highWaterMarkChirp) : c.default.negInf, c.default.posInf),
            r = e.chirps.filter(s.contains, s);
        this.updateHighWaterMarkChirp(e.chirps[0]), this.numNewPushedChirps += r.length, this.wasPushedGap = this.wasPushedGap || e.gap, this.throttledUpdateUnreadIndicators()
    }, TD.vo.Column.prototype.handlePushDelete = function(e, t) {
        this.removeFromIndex(e, t, !0)
    }, TD.vo.Column.prototype.resetUnreadIndicators = function() {
        this.numNewPushedChirps = 0, this.wasPushedGap = !1, this.updateUnreadIndicators()
    }, TD.vo.Column.prototype.updateUnreadIndicators = function() {
        this.temporary || this.ui.updateUnreadIndicators({
            numUnseenChirps: this.getNumUnseenChirps(),
            gappy: this.wasPushedGap
        })
    }, TD.vo.Column.prototype.getNumUnseenChirps = function() {
        var e = 0;
        if (!this.isTrackingRealtime) {
            var t = new c.default(this.highWaterMarkSeenChirp ? c.default.excEnd(this.highWaterMarkSeenChirp) : c.default.negInf, c.default.posInf);
            e = this.updateArray.filter(t.contains, t).reduce(function(e, t) {
                return e + (t instanceof TD.services.GapChirp ? t.gapSize : 1)
            }, 0)
        }
        return e + this.numNewPushedChirps
    }, TD.vo.Column.prototype.removeSubscriptions = function() {
        var e;
        for (e in this.feedSubscriptions) this.feedSubscriptions.hasOwnProperty(e) && (n.default.unsubscribe(this.feedSubscriptions[e]), delete this.feedSubscriptions[e]);
        for (e in this.deleteSubscriptions) this.deleteSubscriptions.hasOwnProperty(e) && (n.default.unsubscribe(this.deleteSubscriptions[e]), delete this.deleteSubscriptions[e]);
        this.miscSubscriptions.forEach(function(e) {
            return n.default.unsubscribe(e)
        }), (0, n.default)(document).off(this.streamRateEvent), (0, n.default)(document).off(this.tpmUpdateEvent), (0, n.default)(document).off(this.tpmIncrementEvent), (0, n.default)(document).off(this.visibleChirpsEvent), this.tpmCounter.stop()
    }, TD.vo.Column.prototype.doUpwardScroll = function() {
        var e = this;
        if ("polling" !== this.state) return TD.core.defer.succeed();
        var t = new TD.core.defer.Deferred;
        if (this.doUpwardScrollDeferreds = this.doUpwardScrollDeferreds || [], this.doUpwardScrollDeferreds.push(t), this.isFetchingUpwardUpdates) return t;
        this.isFetchingUpwardUpdates = !0;
        var i = this.fillAggregateCursor(this.calculateUpwardScrollCursor(this.updateArray), {
            emptyPageRetriesAllowed: 0
        });
        return i.addCallbackWith(this, function(e) {
            return e.possibleGapSize = this.numNewPushedChirps - e.chirps.length, e
        }), i.addCallbackWith(this, this.extractChirpsWithGap), i.addCallbackWith(this, this.mergeAndRenderChirps), i.addBoth(this.removeOffscreen.bind(this, "up")), i.addBothWith(this, TD.util.effect(function() {
            this.isFetchingUpwardUpdates = !1, this.resetUnreadIndicators()
        })), i.addBothWith(this, this.throttledUpdateUnreadIndicators), i.addCallbacks(function() {
            var t = e.doUpwardScrollDeferreds;
            e.doUpwardScrollDeferreds = [], t.forEach(function(e) {
                return e.callback()
            })
        }, function(t) {
            var i = e.doUpwardScrollDeferreds;
            e.doUpwardScrollDeferreds = [], i.forEach(function(e) {
                return e.errback(t)
            })
        }), t
    }, TD.vo.Column.prototype.extractChirpsWithGap = function(e) {
        if (e.remainderCursor.interval.empty) return e.chirps;
        var t = new TD.services.GapChirp(e.remainderCursor, {
            sortIndex: e.chirps[e.chirps.length - 1].sortIndex,
            gapSize: e.possibleGapSize
        });
        return e.chirps.concat([t])
    }, TD.vo.Column.prototype.doInfiniteScroll = function(e) {
        if (e = a.default.defaults(e || {}, {
                fromScrollbarDrag: !1
            }), !this.isFetchingOlderUpdates && "polling" === this.state) {
            this.isFetchingOlderUpdates = !0, this.ui.addInfiniteScrollSpinner();
            var t = this.fillAggregateCursor(this.calculateInfiniteScrollCursor(this.updateArray));
            return t.addCallbackWith(this, function(e) {
                this.mergeAndRenderChirps(e.chirps)
            }), t.addBothWith(this, function() {
                this.isFetchingOlderUpdates = !1, this.ui.removeInfiniteScrollSpinner()
            }), e.fromScrollbarDrag || t.addBoth(this.removeOffscreen.bind(this, "down")), t
        }
    }, TD.vo.Column.prototype.fillGap = function(e) {
        var t = this.findChirp(e);
        if (t) {
            var i = this.fillAggregateCursor(t.gapCursor);
            i.addCallbackWith(this, TD.util.effect(this.trackFillGap)), i.addCallbackWith(this, function(e) {
                return e.possibleGapSize = t.gapSize - e.chirps.length, e
            }), i.addCallbackWith(this, this.extractChirpsWithGap), i.addCallbackWith(this, function(e) {
                return this.removeFromIndex(null, [t], !0), this.mergeAndRenderChirps(e)
            }), i.addCallback(TD.core.defer.timeout.bind(null, 200)), i.addCallback(this.removeOffscreen.bind(this, "up"))
        }
    }, TD.vo.Column.prototype.fillAggregateCursor = function(e, t) {
        return this.fillAggregateCursorWithRetries(e, t).addCallback(function(e) {
            return e.emptyPageRetriesMade > 0 && TD.util.metric("column:fetch:retry-fill:retries-made", [e.emptyPageRetriesMade], "metric"), e.data
        })
    }, TD.vo.Column.prototype.fillAggregateCursorWithRetries = function(e, t) {
        t = a.default.defaults(t || {}, {
            emptyPageRetriesAllowed: 5,
            emptyPageRetriesMade: 0,
            bypassCache: !1
        });
        var i = e.getCursors().map(function(e) {
                return TD.controller.feedManager.getPoller(e.feedKey).fillCursor(e, {
                    forceFetch: !0,
                    bypassCache: t.bypassCache
                })
            }),
            s = TD.core.defer.gatherResults(i);
        return s.addCallbackWith(this, this.extractUsableBlock), s.addCallbackWith(this, function(i) {
            var s = i.reduce(function(e, t) {
                return e.concat(t.chirps)
            }, []);
            s.sort(TD.util.chirpColumnSort);
            var n = this.INFINITE_SCROLL_CHIRP_BLOCK_SIZE;
            e.interval.from !== c.default.negInf && (n = this.UPWARD_SCROLL_CHIRP_BLOCK_SIZE), s.length > n && (s = s.slice(0, n), i = i.map(function(e) {
                return TD.controller.feedManager.getPoller(e.requestCursor.feedKey).recalculateResult(e, s)
            }));
            var r = this.makeAggregateCursor(new Date, i.map(function(e) {
                return e.remainderCursor
            }));
            return {
                data: {
                    requestCursor: e,
                    chirps: s,
                    remainderCursor: r
                },
                emptyPageRetriesAllowed: t.emptyPageRetriesAllowed,
                emptyPageRetriesMade: t.emptyPageRetriesMade
            }
        }), TD.decider.get("throttle_column_fill_retry") || s.addCallbackWith(this, this.maybeRetryFillAggregateCursor), s
    }, TD.vo.Column.prototype.maybeRetryFillAggregateCursor = function(e) {
        var t = 0 === e.data.chirps.length,
            i = e.emptyPageRetriesMade < e.emptyPageRetriesAllowed,
            s = e.data.remainderCursor.interval.empty;
        return t && i && !s ? TD.core.defer.timeout(this.RETRY_FILL_TIMEOUT).addCallbackWith(this, function() {
            return this.fillAggregateCursorWithRetries(e.data.remainderCursor, {
                emptyPageRetriesAllowed: e.emptyPageRetriesAllowed,
                emptyPageRetriesMade: e.emptyPageRetriesMade + 1
            })
        }) : TD.core.defer.succeed(e)
    }, TD.vo.Column.prototype.extractUsableBlock = function(e) {
        var t = e.reduce(function(e, t) {
            return e.hull(t.remainderCursor.interval)
        }, c.default.empty);
        return e.map(function(e) {
            var i = e.chirps.filter(function(e) {
                return !t.contains(e)
            });
            return (e = TD.controller.feedManager.getPoller(e.requestCursor.feedKey).recalculateResult(e, i)).chirps = this.filterAllowedChirps(e.chirps), e
        }.bind(this))
    }, TD.vo.Column.prototype.mergeAndRenderChirps = function(e) {
        this.ui.hideIsUpdatingMessage(), this._isUpdating && (this.ui.getChirpContainer().trigger("dataColumnFeedUpdated"), this.ui.hideChirpContainer(), this._isUpdating = !1), 0 === this.updateArray.length && this.ui.removeInfiniteScrollSpinner();
        var t = this.addItemsToIndex(e);
        return 0 === this.updateArray.length ? this.ui.showNoResultsMessage(this.temporary, l.default.isOwnCustomTimeline(this)) : this.ui.hideNoResultsMessage(), l.default.isMessageColumn(this) && (0, n.default)(document).trigger("uiMessageUnreadCount", {
            columnKey: this.model.getKey(),
            count: this.unreadMessageCount()
        }), this.updateHighWaterMarkChirp(this.updateArray[0]), (0, n.default)(document).trigger("uiColumnChirpsChanged", {
            id: this.model.getKey()
        }), t
    }, TD.vo.Column.prototype.getRenderOptions = function() {
        return {
            mediaPreviewSize: this.getMediaPreviewSize(),
            isOwnCustomTimeline: l.default.isOwnCustomTimeline(this),
            isOwnReorderableCustomTimeline: this.isOwnReorderableCustomTimeline(),
            isTemporaryColumn: this.temporary
        }
    }, TD.vo.Column.prototype.addItemsToIndex = function(e) {
        var t, i, s = [];
        e.sort(TD.util.chirpColumnSort);
        var n = {};
        e = e.filter(function(e) {
            var t = !n[e.id];
            return n[e.id] = !0, t
        });
        for (var r = 0; r < e.length; r++) i = e[r], this.updateIndex[i.id] ? this.reRenderChirp(i) : (s.push(i), this.updateIndex[i.id] = i);
        if (t = s.length) {
            for (var a = "", o = [], c = this.updateArray, l = this.getRenderOptions(); s.length > 0 || c.length > 0;)
                if (0 === s.length) o = o.concat(c), c = [];
                else if (0 === c.length) o = o.concat(s), this.addToView(a, s, l, {
                insertAtTop: !a,
                insertAtBottom: !0
            }), s = [];
            else {
                for (var u = [], d = c[0], h = s[0]; TD.util.chirpColumnSort(d, h) > 0 && s.length > 0;) i = s.shift(), u.push(i), s.length > 0 && (h = s[0]);
                u.length > 0 ? (this.addToView(a, u, l, {
                    insertAtTop: !a,
                    insertAtBottom: !1
                }), o = o.concat(u)) : (i = c.shift(), o.push(i), i.passFilters(this.filters) && (a = i.id))
            }
            this.updateArray = o
        }
        return this.loadCards(e), t
    }, TD.vo.Column.prototype.reRenderChirp = function(e) {
        var t = this,
            i = this.updateIndex[e.id],
            s = this.ui.getChirpContainer(),
            r = (0, n.default)(this.ui.renderChirps([e], this.getRenderOptions())),
            a = s.children('[data-key="' + e.id + '"]'),
            o = this.updateArray.indexOf(i),
            c = TD.decider.get("non_destructive_chirp_rerender");
        this.updateIndex[e.id] = e, this.updateArray[o] = e, this.updateArray.sort(TD.util.chirpColumnSort), this.detailViewComponent && this.detailViewComponent.changed(e);
        var u = this.updateArray.indexOf(e);
        if (u > 0) var d = this.updateArray[u - 1].id;
        TD.ui.columns.alterColumnContents(this.model.getKey(), a, function() {
            var e = i.quotedTweet && i.quotedTweet.hasAnimatedGif();
            if ((i.hasAnimatedGif() || e) && t.ui.unloadVideos(a), c && !l.default.isMessageColumn(t)) {
                [".js-tweet-header", ".js-tweet-text"].forEach(function(e) {
                    var t = r.find(e).first();
                    a.find(e).first().replaceWith(t)
                })
            } else a.remove(), 0 === u ? s.prepend(r) : s.children('[data-key="' + d + '"]').after(r)
        })
    }, TD.vo.Column.prototype.removeFromIndex = function(e, t, i) {
        for (var s = 0; s < t.length; s++) {
            var n = t[s];
            this.removeChirp(n), i && this.detailViewComponent && this.detailViewComponent.deleted(n)
        }
    }, TD.vo.Column.prototype.removeChirp = function(e) {
        var t = this.updateIndex[e.id];
        if (t) {
            for (var i = 0; i < this.updateArray.length; i++)
                if ((e = this.updateArray[i]) === t) {
                    this.updateArray.splice(i, 1);
                    break
                } delete this.updateIndex[e.id], this.ui.removeChirp(e.id), (0, n.default)(document).trigger("uiColumnChirpsChanged", {
                id: this.model.getKey()
            })
        }
        0 === this.updateArray.length && this.ui.showIsUpdatingMessage()
    }, TD.vo.Column.prototype.clear = function() {
        if (0 !== this.updateArray.length) {
            var e = this.updateArray[0].created.getTime();
            this.model.setClearedTimestamp(e), this.truncate(0)
        }
    }, TD.vo.Column.prototype.calculateUpwardScrollCursor = function(e) {
        var t = this.getPollers().map(function(t) {
            return {
                feedKey: t.feed.getKey(),
                interval: new c.default(0 === e.length ? c.default.negInf : c.default.excEnd(e[0]), c.default.posInf),
                bounds: {}
            }
        }, this);
        return this.makeAggregateCursor(new Date, t)
    }, TD.vo.Column.prototype.calculateInfiniteScrollCursor = function(e) {
        var t = {
                interval: c.default.whole,
                bounds: {}
            },
            i = this.getPollers().map(function(i) {
                return i.getCacheResult(t, e).remainderCursor
            }, this);
        return this.makeAggregateCursor(new Date, i)
    }, TD.vo.Column.prototype.boundedRefreshCustomTimelineFeed = function(e) {
        var t = this,
            i = this.findChirp(e.relativeToId),
            s = this.updateArray.indexOf(i),
            n = {};
        if (-1 === s) n = {
            upper: null,
            lower: null
        };
        else if (e.placeAbove) {
            var r = this.updateArray[s - 1];
            n = {
                upper: void 0 !== r ? r : null,
                lower: i
            }
        } else {
            var a = this.updateArray[s + 1];
            n = {
                upper: i,
                lower: void 0 !== a ? a : null
            }
        }
        var o = this.getChirpBoundedCursor(n.upper, n.lower),
            c = TD.decider.get("slow_collection_refresh") ? 2e3 : 100,
            l = "move" === e.actionType ? c : 0,
            u = TD.core.defer.timeout(l, o);
        return u.addCallback(function(e) {
            return t.fillAggregateCursor(e, {
                bypassCache: !0
            })
        }), u.addCallback(function(e) {
            return t.mergeAndRenderChirps(e.chirps)
        }), u
    }, TD.vo.Column.prototype.getChirpBoundedCursor = function(e, t) {
        var i = this.getPollers().map(function(i) {
            return i.getCursor({
                upper: e,
                lower: t
            })
        }, this);
        return this.makeAggregateCursor(new Date, i)
    }, TD.vo.Column.prototype.makeAggregateCursor = function(e, t) {
        return new o.default(e, t || [])
    }, TD.vo.Column.prototype.getPollers = function() {
        return this.getFeeds().map(function(e) {
            return TD.controller.feedManager.getPoller(e.getKey())
        })
    }, TD.vo.Column.prototype.removeOffscreen = function(e, t) {
        "number" != typeof t && (t = 0);
        var i = this.TARGET_COLUMN_CHIRP_LIMIT,
            s = TD.ui.columns.isScrolledToTop(this.model.getKey()),
            n = this.ui.state.animationQueue.length;
        return ("up" === e || s) && this.discardTweetsNotInRange(0, i + n + (s ? 0 : t)), "down" === e && this.discardTweetsNotInRange(this.updateArray.length - i, this.updateArray.length), t
    }, TD.vo.Column.prototype.discardTweetsNotInRange = function(e, t) {
        e = Math.max(0, e);
        var i = this.updateArray.slice(0, e).map(TD.util.getChirpId),
            s = this.updateArray.slice(t).map(TD.util.getChirpId);
        this.annihilateChirps(i, {
            willBreakScrollPosition: !0
        }), this.annihilateChirps(s, {
            willBreakScrollPosition: !1
        }), this.updateArray = this.updateArray.slice(e, t), this.updateArray.length || this.reset()
    }, TD.vo.Column.prototype.truncate = function(e) {
        this.discardTweetsNotInRange(0, e)
    }, TD.vo.Column.prototype.annihilateChirps = function(e, t) {
        e.length && (e.forEach(function(e) {
            delete this.updateIndex[e]
        }, this), this.ui.removeChirps(e, t))
    }, TD.vo.Column.prototype.trackFillGap = function(e) {
        TD.util.metric("column:fetch:gap:fill:result", [e.chirps.length], "metric")
    }, TD.vo.Column.prototype.addToView = function(e, t, i, s) {
        var r = this;
        if (0 !== t.length) {
            var a = this.ui.getChirpContainer(),
                o = s.insertAtBottom && s.insertAtTop;
            i.doRenderMinimalist = this.updateArray.length > 0 && this.tpm > this.COLUMN_MINIMALIST_TWEET_TPM_THRESHOLD;
            var c = t[t.length - 1],
                l = t.map(function(e, s) {
                    var a = t.length - 1 - s,
                        o = r.calculateTimeGap(e, c),
                        l = 150 * a - 100 * Math.random(),
                        u = Math.min(r.ui.chirpDelayMaximum, Math.max(l, o));
                    return {
                        chirp: e,
                        $node: (0, n.default)(r.ui.renderChirps([e], i)),
                        deliverAtTime: Date.now() + u
                    }
                }),
                u = l.reduce(function(e, t) {
                    return e.add(t.$node)
                }, (0, n.default)());
            "" === e ? o ? a.html(u) : a.prepend(u) : a.children('[data-key="' + e + '"]').after(u), s.containsNewChirps = !this.highWaterMarkChirp || t[0].belongsAbove(this.highWaterMarkChirp), o ? this.ui.fadeInChirpContainer() : this.ui.slideInChirps(l, this.temporary, this.streamRate, this.tpm, s)
        }
    }, TD.vo.Column.prototype.calculateTimeGap = function(e, t) {
        if (!e || !t) return 0;
        var i = e.getSortIndex(),
            s = t.getSortIndex();
        return "milliseconds" === i.type && "milliseconds" === s.type ? i.value - s.value : e.created && t.created && a.default.isEqual(i, {
            type: "numericString",
            value: e.id
        }) && a.default.isEqual(s, {
            type: "numericString",
            value: t.id
        }) ? e.created.getTime() - t.created.getTime() : 0
    }, TD.vo.Column.prototype.getMediaPreviewSize = function() {
        var e = this.model.getMediaPreviewSize();
        return e || (l.default.isMessageColumn(this) && (e = TD.vo.Column.MEDIA_PREVIEW_OFF), e = this.getSearchFilter().content.hasActiveMediaFilter() ? TD.vo.Column.MEDIA_PREVIEW_SIZE_LARGE : l.default.getColumnType(this) === l.default.columnMetaTypes.INTERACTIONS ? TD.vo.Column.MEDIA_PREVIEW_SIZE_SMALL : TD.vo.Column.MEDIA_PREVIEW_SIZE_MEDIUM), e
    }, TD.vo.Column.prototype.setMediaPreviewSize = function(e) {
        e !== this.getMediaPreviewSize() && this.model.setMediaPreviewSize(e), this.reloadTweets()
    }, TD.vo.Column.prototype.isSingleActionTypeColumn = function() {
        return l.default.singleActionColumnTypes.indexOf(l.default.getColumnType(this)) > -1
    }, TD.vo.Column.prototype.isOwnReorderableCustomTimeline = function() {
        var e = this.getCustomTimeline(),
            t = !!e && e.isCurationOrdering();
        return l.default.isOwnCustomTimeline(this) && t
    }, TD.vo.Column.prototype.deleteCustomTimeline = function(e, t) {
        this.getFeedsByType(l.default.feedTypes.CUSTOMTIMELINE).forEach(function(i) {
            var n = i.getMetadata().id,
                r = TD.controller.clients.getClient(i.getAccountKey()),
                a = i.getKey();
            r.deleteCustomTimeline(n, function() {
                TD.controller.feedManager.deleteFeedsWhere(function(e) {
                    return e.getKey() === a
                }), e && e()
            }, function() {
                (0, u.showErrorNotification)({
                    message: (0, s.default)("Error deleting Collection")
                }), t && t()
            })
        })
    }, TD.vo.Column.prototype.getCustomTimeline = function() {
        var e, t = this.getCustomTimelineFeed();
        if (t) {
            var i = t.getMetadata().id;
            e = TD.controller.clients.getClient(t.getAccountKey()).customTimelines.filter(function(e) {
                return e.id === i
            })[0]
        }
        return e
    }, TD.vo.Column.prototype.getCustomTimelineFeed = function() {
        return this.getFeedsByType(l.default.feedTypes.CUSTOMTIMELINE)[0]
    }, TD.vo.Column.prototype.updateMetadata = function(e) {
        var t, i = this.getFeeds()[0];
        this._isUpdating = !0, this.ui.showIsUpdatingMessage(), e.term = null, t = TD.storage.feedController.getOrCreateFeed(i.getType(), i.getService(), i.getAccountKey(), e), this.ui.getChirpContainer().trigger("dataColumnUpdatingFeed", {
            column: this,
            oldFeed: i,
            newFeed: t
        }), TD.controller.feedManager.replaceFeed(i, t, [this.model.getKey()])
    }, TD.vo.Column.prototype.loadFilters = function() {
        var e = new TD.vo.SearchFilter(this.model.getFilters()).getFilters();
        a.default.isEqual(a.default.pluck(this.filters, "id"), a.default.pluck(e, "id")) || (this.filters = e, this.reloadTweets())
    }, TD.vo.Column.prototype.reloadTweets = function() {
        this._isUpdating || (this.truncate(0), this.backfill())
    }, TD.vo.Column.prototype.reapplyFilters = function() {
        this.reloadTweets()
    }, TD.vo.Column.prototype.updateSearchFilter = function(e) {
        var t, i, s, n, r;
        if (e)
            if (l.default.isSearchColumn(this) || l.default.isEventColumn(this)) this.updateSearchFeedFilter(e);
            else {
                if ((s = this.getFeeds()[0]) && l.default.isActionsColumn(this) && !l.default.isActivityColumn(this)) {
                    i = s.getType(), t = l.default.inferFeedTypeFromActionFilter(e.action);
                    var o = Boolean(s.getMetadata().usersIFollowFilter),
                        c = "following" === e.user.from_type;
                    t === i && o === c || ((r = a.default.clone(s.getMetadata())).usersIFollowFilter = Boolean(c), n = TD.storage.feedController.getOrCreateFeed(t, s.getService(), s.getAccountKey(), r), this.ui.getChirpContainer().trigger("dataColumnUpdatingFeed", {
                        column: this,
                        oldFeed: s,
                        newFeed: n
                    }), TD.controller.feedManager.replaceFeed(s, n, [this.model.getKey()]))
                }
                this.model.setFilters(e.toJSONObject()), this.ui.getChirpContainer().trigger("dataColumnFiltersUpdated")
            }
    }, TD.vo.Column.prototype.updateSearchFeedFilter = function(e) {
        var t = !1,
            i = this.getFeeds()[0],
            s = a.default.clone(i.getMetadata());
        s.baseQuery || (s.baseQuery = s.term);
        var n = e.content && e.content.matching && e.content.matching !== s.baseQuery,
            r = e.content && e.content.matching !== s.baseQuery;
        (l.default.isSearchColumn(this) && n || l.default.isEventColumn(this) && r) && (t = !0, s.baseQuery = e.content.matching);
        var o = new TD.vo.SearchFilter(s.searchFilterData);
        (t || o.getQueryString() !== e.getQueryString()) && (s.searchFilterData = e.toJSONObject(), this.updateMetadata(s))
    }, TD.vo.Column.prototype.setMatchingFilter = function(e) {
        var t = this.getSearchFilter();
        t.content.setMatching(e), this.updateSearchFilter(t)
    }, TD.vo.Column.prototype.getSearchFilter = function() {
        var e, t;
        return l.default.isSearchColumn(this) || l.default.isEventColumn(this) ? (t = this.getFeeds()[0].getMetadata(), (e = new TD.vo.SearchFilter(t.searchFilterData)).content.matching || e.content.setMatching(t.baseQuery || t.term)) : e = new TD.vo.SearchFilter(this.model.getFilters()), e
    }, TD.vo.Column.prototype.hasActiveSearchFilters = function() {
        var e = this.getSearchFilter(),
            t = !this.isSingleActionTypeColumn() && !l.default.isSearchColumn(this),
            i = this.hasActiveUserFilters() || this.hasActiveContentFilters() || this.hasActiveLocationFilters() || this.hasActiveEngagementFilters() || this.hasActiveActionFilters() && t;
        return l.default.isSearchColumn(this) || (i = e.content.matching || i), Boolean(i)
    }, TD.vo.Column.prototype.hasActiveContentFilters = function() {
        var e, t = this.getSearchFilter();
        return e = l.default.isSearchColumn(this) ? t.content.getQueryString() : t.content.matching || t.content.getQueryString() || t.content.type !== TD.vo.ContentFilter.TYPE_ANYTHING, Boolean(e)
    }, TD.vo.Column.prototype.hasActiveLocationFilters = function() {
        var e = this.getSearchFilter().location.getQueryString();
        return Boolean(e)
    }, TD.vo.Column.prototype.hasActiveUserFilters = function() {
        var e = this.getSearchFilter(),
            t = e.user.getQueryString(),
            i = "following" === e.user.from_type;
        return Boolean(t || i)
    }, TD.vo.Column.prototype.hasActiveActionFilters = function() {
        var e = this.getSearchFilter(),
            t = l.default.getColumnType(this),
            i = e.action.getMaxFacets(t);
        return e.action.getActiveFacetCount(t) < i
    }, TD.vo.Column.prototype.hasActiveEngagementFilters = function() {
        var e = this.getSearchFilter().engagement.getQueryString();
        return Boolean(e)
    }, TD.vo.Column.prototype.hasFilterError = function() {
        return this.getSearchFilter().action.hasFilterError(l.default.getColumnType(this))
    }, TD.vo.Column.prototype.markAllMessagesAsRead = function() {
        l.default.isMessageColumn(this) && this.getFeeds().forEach(function(e) {
            var t = e.getAccountKey();
            TD.controller.clients.getClient(t).conversations.markAllRead()
        }, this)
    }, TD.vo.Column.prototype.hasUnreadMessages = function() {
        var e = !1;
        return l.default.isMessageColumn(this) && (e = this.updateArray.some(function(e) {
            return e.unread
        })), e
    }, TD.vo.Column.prototype.unreadMessageCount = function() {
        var e = 0;
        return l.default.isMessageColumn(this) && (e = this.getFeeds().map(function(e) {
            return TD.controller.clients.getClient(e.getAccountKey())
        }).reduce(function(e, t) {
            return e + t.conversations.getUnreadCount()
        }, 0)), e > 20 && (e = (0, s.default)("20+")), e.toString()
    }, TD.vo.Column.prototype.getChirpIndex = function(e) {
        return this.updateArray.indexOf(this.updateIndex[e])
    }, TD.vo.Column.prototype.isEmpty = function() {
        return a.default.isEmpty(this.updateArray)
    }
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(1));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.vo.Filter = function(e, t, i) {
        switch (this.type = e, this.value = t, this.positive = i, n.default.isString(t) && (this.value = t.toLowerCase()), this.type) {
            case TD.vo.Filter.PHRASE:
                this.exact = !1;
                break;
            case TD.vo.Filter.SENDER:
                this.exact = !0, this.fuzzy = !0, this.filterTarget = "parent";
                break;
            case TD.vo.Filter.SOURCE:
                this.exact = !0, this.fuzzy = !1;
                break;
            case TD.vo.Filter.FOLLOWERS:
                this.exact = !1, this.range = !0;
                break;
            case TD.vo.Filter.IS_RETWEET:
                this.exact = !0;
                break;
            case TD.vo.Filter.IS_FROM_VERIFIED:
            case TD.vo.Filter.CHIRP_TYPE:
                this.exact = !0, this.filterTarget = "parent"
        }
        this.id = this.generateLocalID()
    }, TD.vo.Filter.PHRASE = "phrase", TD.vo.Filter.SENDER = "sender", TD.vo.Filter.SOURCE = "source", TD.vo.Filter.FOLLOWERS = "followers", TD.vo.Filter.IS_RETWEET = "is_retweet", TD.vo.Filter.IS_MENTION = "is_mention", TD.vo.Filter.IS_FAVORITE = "is_favorite", TD.vo.Filter.IS_FOLLOW = "is_follow", TD.vo.Filter.IS_ACTION_ON_RETWEET = "is_action_on_retweet", TD.vo.Filter.IS_QUOTED = "is_quoted", TD.vo.Filter.HAS_IMAGE = "has_image", TD.vo.Filter.HAS_VIDEO = "has_video", TD.vo.Filter.HAS_GIF = "has_gif", TD.vo.Filter.HAS_VINE = "has_vine", TD.vo.Filter.HAS_MEDIA = "has_media", TD.vo.Filter.HAS_LINK = "has_link", TD.vo.Filter.IS_FROM_VERIFIED = "verified", TD.vo.Filter.CHIRP_TYPE = "chirp_type", TD.vo.Filter.LOCATION = "location", TD.vo.Filter.SINCE_TIME = "since_time", TD.vo.Filter.UNTIL_TIME = "until_time", TD.vo.Filter.prototype.id = null, TD.vo.Filter.prototype.value = null, TD.vo.Filter.prototype.type = TD.vo.Filter.PHRASE, TD.vo.Filter.prototype.positive = !0, TD.vo.Filter.prototype.exact = !0, TD.vo.Filter.prototype.fuzzy = !1, TD.vo.Filter.prototype.range = !1, TD.vo.Filter.prototype.filterTarget = "child", TD.vo.Filter.prototype.generateLocalID = function() {
        return "filter" + TD.util.deterministicObjectHash(this.toBackendState())
    }, TD.vo.Filter.prototype.pass = function(e) {
        var t = this,
            i = (e = this._getFilterTarget(e)).getFilterableText();
        i = i ? i.toLowerCase() : null;
        var s = e.getSenders();
        s = s ? n.default.map(s, function(e) {
            return e.toLowerCase()
        }) : null;
        var r = e.sourceNoHTML;
        switch (r = r ? r.toLowerCase() : null, this.type) {
            case TD.vo.Filter.PHRASE:
                return this._testString(i);
            case TD.vo.Filter.SENDER:
                return this.positive ? n.default.any(s, function(e) {
                    return t._testString(e)
                }) : n.default.every(s, function(e) {
                    return t._testString(e)
                });
            case TD.vo.Filter.SOURCE:
                return this._testString(r);
            case TD.vo.Filter.FOLLOWERS:
                return this._testNumber(void 0);
            case TD.vo.Filter.IS_RETWEET:
                return this._testBoolean(e.isRetweetedStatus());
            case TD.vo.Filter.IS_FROM_VERIFIED:
                return this._testBoolean(e.isFromVerifiedUser());
            case TD.vo.Filter.HAS_IMAGE:
                return this._testBoolean(e.hasImage());
            case TD.vo.Filter.HAS_VIDEO:
                return this._testBoolean(e.hasVideo());
            case TD.vo.Filter.HAS_GIF:
                return this._testBoolean(e.hasAnimatedGif());
            case TD.vo.Filter.HAS_VINE:
                return this._testBoolean(e.hasVine());
            case TD.vo.Filter.HAS_MEDIA:
                return this._testBoolean(e.hasImage() || e.hasVideo());
            case TD.vo.Filter.HAS_LINK:
                return this._testBoolean(e.hasLink());
            case TD.vo.Filter.CHIRP_TYPE:
                return this._testString(e.getChirpType())
        }
        return !0
    }, TD.vo.Filter.prototype.getDisplayType = function() {
        switch (this.type) {
            case TD.vo.Filter.PHRASE:
                return "";
            case TD.vo.Filter.SENDER:
                return (0, s.default)("user");
            case TD.vo.Filter.SOURCE:
                return (0, s.default)("source");
            case TD.vo.Filter.FOLLOWERS:
                return (0, s.default)("followers");
            case TD.vo.Filter.IS_RETWEET:
                return (0, s.default)("retweets");
            case TD.vo.Filter.HAS_MEDIA:
                return (0, s.default)("media");
            case TD.vo.Filter.HAS_LINK:
                return (0, s.default)("links");
            case TD.vo.Filter.IS_FROM_VERIFIED:
                return (0, s.default)("verified")
        }
        return ""
    }, TD.vo.Filter.prototype._getFilterTarget = function(e) {
        return "parent" !== this.filterTarget && e.targetTweet ? e.targetTweet : e
    }, TD.vo.Filter.prototype._testString = function(e) {
        if (!e || !this.value) return !0;
        if (this.exact) {
            if (e === this.value) return this.positive;
            if (this.fuzzy && "@" + e === this.value) return this.positive
        } else if (-1 !== e.indexOf(this.value)) return this.positive;
        return !this.positive
    }, TD.vo.Filter.prototype._testNumber = function(e) {
        if (!n.default.isNumber(e) || !n.default.isNumber(this.value)) return !0;
        if (this.exact) {
            if (e === this.value) return this.positive
        } else if (this.range && e >= this.value) return this.positive;
        return !this.positive
    }, TD.vo.Filter.prototype._testBoolean = function(e) {
        return !n.default.isBoolean(e) || !n.default.isBoolean(this.value) || (e === this.value ? this.positive : !this.positive)
    }, TD.vo.Filter.prototype.toBackendState = function() {
        return {
            type: this.type,
            value: this.value,
            positive: this.positive,
            exact: this.exact,
            fuzzy: this.fuzzy,
            range: this.range
        }
    }, TD.vo.Filter.prototype.fromBackendState = function(e) {
        this.type = e.type, this.value = e.value, this.positive = e.positive, this.exact = e.exact, this.fuzzy = e.fuzzy, this.range = e.range, this.id = this.generateLocalID()
    }
}, function(e, t, i) {
    "use strict";
    TD.vo.SearchFilter = function(e) {
        this.fromJSONObject(e)
    }, TD.vo.SearchFilter.prototype.action = null, TD.vo.SearchFilter.prototype.content = null, TD.vo.SearchFilter.prototype.location = null, TD.vo.SearchFilter.prototype.engagement = null, TD.vo.SearchFilter.prototype.user = null, TD.vo.SearchFilter.prototype.toJSONObject = function() {
        return {
            action: this.action.toJSONObject(),
            content: this.content.toJSONObject(),
            location: this.location.toJSONObject(),
            engagement: this.engagement.toJSONObject(),
            user: this.user.toJSONObject()
        }
    }, TD.vo.SearchFilter.prototype.fromJSONObject = function(e) {
        e = e || {}, this.action = new TD.vo.ActionFilter(e.action), this.content = new TD.vo.ContentFilter(e.content), this.location = new TD.vo.LocationFilter(e.location), this.engagement = new TD.vo.EngagementFilter(e.engagement), this.user = new TD.vo.UserFilter(e.user)
    }, TD.vo.SearchFilter.prototype.getQueryString = function() {
        return [this.content.getQueryString(), this.location.getQueryString(), this.engagement.getQueryString(), this.user.getQueryString()].join(" ").trim()
    }, TD.vo.SearchFilter.prototype.getFilters = function() {
        var e = this.action.getFilters();
        return e = (e = (e = (e = e.concat(this.content.getFilters())).concat(this.location.getFilters())).concat(this.engagement.getFilters())).concat(this.user.getFilters())
    }
}, function(e, t, i) {
    "use strict";
    var s, n, r, a = d(i(32)),
        o = d(i(7)),
        c = d(i(30)),
        l = d(i(3)),
        u = d(i(17));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var h = (s = {}, (0, c.default)(s, "showMentions", !0), (0, c.default)(s, "showRetweets", !0), (0, c.default)(s, "showFavorites", !0), (0, c.default)(s, "showFollowers", !0), (0, c.default)(s, "showLists", !0), (0, c.default)(s, "showActionsOnRetweets", !0), (0, c.default)(s, "showQuoted", !0), (0, c.default)(s, "showInteractionsOnMentioned", !0), (0, c.default)(s, "showInteractionsOnTagged", !0), s),
        m = (n = {}, (0, c.default)(n, "showFavorites", !0), (0, c.default)(n, "showFollowers", !0), (0, c.default)(n, "showLists", !0), n),
        f = (0, o.default)({}, m, h),
        p = (r = {}, (0, c.default)(r, "showMentions", !0), (0, c.default)(r, "showRetweets", !0), (0, c.default)(r, "showFavorites", !0), (0, c.default)(r, "showFollowers", !0), (0, c.default)(r, "showLists", !0), (0, c.default)(r, "showActionsOnRetweets", !0), (0, c.default)(r, "showQuoted", !0), (0, c.default)(r, "showInteractionsOnMentioned", !0), (0, c.default)(r, "showInteractionsOnTagged", !0), r),
        g = (0, a.default)(f).reduce(function(e, t) {
            return (0, o.default)({}, e, (0, c.default)({}, t, !1))
        }, {});
    TD.vo.ActionFilter = function(e) {
        this.fromJSONObject(e)
    }, TD.vo.ActionFilter.prototype.toJSONObject = function() {
        return (0, o.default)({}, p, this.state)
    }, TD.vo.ActionFilter.prototype.fromJSONObject = function(e) {
        e && (this.state = this.mergeState({}, (0, o.default)({}, g, e)))
    }, TD.vo.ActionFilter.prototype.mergeState = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        return (0, a.default)(t).filter(function(e) {
            return f[e]
        }).reduce(function(e, i) {
            return (0, o.default)({}, e, (0, c.default)({}, i, Boolean(t[i])))
        }, e)
    }, TD.vo.ActionFilter.prototype.getActiveFacetCount = function(e) {
        var t = this.toJSONObject(),
            i = this.getAvailableFacets(e);
        return (0, a.default)(i).reduce(function(e, i) {
            return e + (t[i] ? 1 : 0)
        }, 0)
    }, TD.vo.ActionFilter.prototype.hasFilterError = function(e) {
        return 0 === this.getActiveFacetCount(e)
    }, TD.vo.ActionFilter.prototype.isNotificationsColumn = function(e) {
        return e === u.default.columnMetaTypes.INTERACTIONS || (e === u.default.columnMetaTypes.FOLLOWERS || e === u.default.columnMetaTypes.MENTIONS)
    }, TD.vo.ActionFilter.prototype.getAvailableFacets = function(e) {
        var t, i = this.isNotificationsColumn(e),
            s = (t = {}, (0, c.default)(t, "showActionsOnRetweets", TD.decider.get("action_retweeted_retweet") || TD.decider.get("action_favorited_retweet")), (0, c.default)(t, "showLists", !TD.decider.get("notification_disable_list_events")), (0, c.default)(t, "showQuoted", TD.decider.get("action_quoted_tweet")), t),
            n = i ? (0, o.default)({}, h, s) : (0, o.default)({}, m);
        return (0, a.default)(n).filter(function(e) {
            return Boolean(n[e])
        }).reduce(function(e, t) {
            return (0, o.default)({}, e, (0, c.default)({}, t, !0))
        }, {})
    }, TD.vo.ActionFilter.prototype.getMaxFacets = function(e) {
        var t = this.getAvailableFacets(e);
        return (0, a.default)(t).length
    }, TD.vo.ActionFilter.prototype.getSummaryText = function(e) {
        var t, i, s = [],
            n = this.getMaxFacets(e),
            r = this.getActiveFacetCount(e),
            a = this.getAvailableFacets(e),
            o = this.toJSONObject();
        return 0 === r ? t = (0, l.default)("Filter error") : r === n ? t = "" : r === n - 1 && e !== u.default.columnMetaTypes.ACTIVITY ? (!o.showMentions && a.showMentions && (t = (0, l.default)("All except mentions")), !o.showRetweets && a.showRetweets && (t = (0, l.default)("All except Retweets")), !o.showFavorites && a.showFavorites && (t = (0, l.default)("All except likes")), !o.showFollowers && a.showFollowers && (t = (0, l.default)("All except followers")), !o.showLists && a.showLists && (t = (0, l.default)("All except Lists")), !o.showActionsOnRetweets && a.showActionsOnRetweets && (t = (0, l.default)("All except actions on my Retweets")), !o.showQuoted && a.showQuoted && (t = (0, l.default)("All except quoted Tweets")), !o.showInteractionsOnMentioned && a.showInteractionsOnMentioned && (t = (0, l.default)("All except Tweets mentioning me")), !o.showInteractionsOnTagged && a.showInteractionsOnTagged && (t = (0, l.default)("All except Tweets tagging me"))) : (o.showMentions && a.showMentions && s.push((0, l.default)("mentions")), o.showQuoted && a.showQuoted && s.push((0, l.default)("quoted Tweets")), o.showInteractionsOnMentioned && a.showInteractionsOnMentioned && s.push((0, l.default)("including Tweets mentioning me")), o.showInteractionsOnTagged && a.showInteractionsOnTagged && s.push((0, l.default)("including Tweets tagging me")), o.showRetweets && a.showRetweets && s.push((0, l.default)("Retweets")), o.showFavorites && a.showFavorites && s.push((0, l.default)("likes")), o.showFollowers && a.showFollowers && s.push((0, l.default)("followers")), o.showLists && a.showLists && s.push((0, l.default)("Lists")), o.showActionsOnRetweets && a.showActionsOnRetweets && s.push((0, l.default)("actions on my Retweets")), i = s.pop(), 1 === r ? t = (0, l.default)("{{{actionType}}} only", {
            actionType: i
        }) : (s = s.join(", "), t = (0, l.default)("{{{actionTypes}}} and {{{lastActionType}}}", {
            actionTypes: s,
            lastActionType: i
        }))), t
    }, TD.vo.ActionFilter.prototype.getFilters = function() {
        var e, t = [],
            i = this.toJSONObject();
        return i.showMentions || (e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.MENTION, !1), t.push(e)), i.showRetweets || (e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.RETWEET, !1), t.push(e)), i.showFavorites || (e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.FAVORITE, !1), t.push(e)), i.showFollowers || (e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.FOLLOW, !1), t.push(e)), i.showLists || (e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.LIST_CREATED, !1), t.push(e), e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.LIST_MEMBER_ADDED, !1), t.push(e)), i.showActionsOnRetweets || (TD.decider.get("action_retweeted_retweet") && (e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.RETWEETED_RETWEET, !1), t.push(e)), TD.decider.get("action_favorited_retweet") && (e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.FAVORITED_RETWEET, !1), t.push(e))), i.showInteractionsOnMentioned || (e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.FAVORITED_MENTION, !1), t.push(e), e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.RETWEETED_MENTION, !1), t.push(e)), i.showInteractionsOnTagged || (e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.FAVORITED_MEDIA, !1), t.push(e), e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.RETWEETED_MEDIA, !1), t.push(e)), !i.showQuoted && TD.decider.get("action_quoted_tweet") && (e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.QUOTE, !1), t.push(e), e = new TD.vo.Filter(TD.vo.Filter.CHIRP_TYPE, TD.services.TwitterAction.QUOTED_TWEET, !1), t.push(e)), t
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(594);
    TD.vo.LocationFilter = function(e) {
        this.fromJSONObject(e)
    }, TD.vo.LocationFilter.prototype.toJSONObject = function() {
        return {
            lat: this.lat,
            lng: this.lng,
            radius: this.radius,
            zoom: this.zoom,
            name: this.name
        }
    }, TD.vo.LocationFilter.prototype.fromJSONObject = function(e) {
        e && (this.setLat(e.lat), this.setLng(e.lng), this.setRadius(e.radius), this.setZoom(e.zoom), this.setName(e.name))
    }, TD.vo.LocationFilter.prototype.setLat = function(e) {
        this.lat = e || ""
    }, TD.vo.LocationFilter.prototype.setLng = function(e) {
        this.lng = e || ""
    }, TD.vo.LocationFilter.prototype.setRadius = function(e) {
        this.radius = e || ""
    }, TD.vo.LocationFilter.prototype.setZoom = function(e) {
        this.zoom = e || ""
    }, TD.vo.LocationFilter.prototype.setName = function(e) {
        this.name = e || ""
    }, TD.vo.LocationFilter.prototype.getQueryString = function() {
        return this.lat && this.lng && this.radius ? "near:" + this.lat + "," + this.lng + " within:" + this.radius : ""
    }, TD.vo.LocationFilter.prototype.getSummaryText = function() {
        if (this.name && this.radius) return (0, r.default)("Within {{radius}} of {{name}}", {
            radius: this.radius,
            name: this.name
        });
        if (this.lat && this.lng && this.radius) {
            var e = (0, a.getPrettyCoordinates)(this.lat, this.lng, this.radius);
            return (0, r.default)("Within {{radius}} of {{prettyCoordinates}}", {
                radius: this.radius,
                prettyCoordinates: e
            })
        }
        return ""
    }, TD.vo.LocationFilter.prototype.getFilters = function() {
        return this.lat && this.lng && this.radius ? [new TD.vo.Filter(TD.vo.Filter.LOCATION, this.toJSONObject(), !0)] : []
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.vo.EngagementFilter = function(e) {
        this.fromJSONObject(e)
    }, TD.vo.EngagementFilter.prototype.minReplies = 0, TD.vo.EngagementFilter.prototype.minRetweets = 0, TD.vo.EngagementFilter.prototype.minFavorites = 0, TD.vo.EngagementFilter.prototype.setMinReplies = function(e) {
        this.minReplies = parseInt(e, 10)
    }, TD.vo.EngagementFilter.prototype.setMinRetweets = function(e) {
        this.minRetweets = parseInt(e, 10)
    }, TD.vo.EngagementFilter.prototype.setMinFavorites = function(e) {
        this.minFavorites = parseInt(e, 10)
    }, TD.vo.EngagementFilter.prototype.toJSONObject = function() {
        return {
            minReplies: this.minReplies,
            minRetweets: this.minRetweets,
            minFavorites: this.minFavorites
        }
    }, TD.vo.EngagementFilter.prototype.fromJSONObject = function(e) {
        e && (this.setMinReplies(e.minReplies), this.setMinRetweets(e.minRetweets), this.setMinFavorites(e.minFavorites))
    }, TD.vo.EngagementFilter.prototype.getQueryString = function() {
        var e = [];
        return this.minReplies > 0 && e.push("min_replies:" + this.minReplies), this.minRetweets > 0 && e.push("min_retweets:" + this.minRetweets), this.minFavorites > 0 && e.push("min_faves:" + this.minFavorites), e.join(" ")
    }, TD.vo.EngagementFilter.prototype.getSummaryText = function() {
        var e, t = [];
        switch (this.minReplies > 0 && t.push({
            count: this.minReplies,
            label: (0, r.default)("replies")
        }), this.minRetweets > 0 && t.push({
            count: this.minRetweets,
            label: (0, r.default)("Retweets")
        }), this.minFavorites > 0 && t.push({
            count: this.minFavorites,
            label: (0, r.default)("likes")
        }), t.length) {
            case 0:
                e = "";
                break;
            case 1:
                e = (0, r.default)("at least {{#0}}{{count}} {{label}}{{/0}}", t);
                break;
            case 2:
                e = (0, r.default)("at least {{#0}}{{count}} {{label}}{{/0}} and {{#1}}{{count}} {{label}}{{/1}}", t);
                break;
            case 3:
                e = (0, r.default)("at least {{#0}}{{count}} {{label}}{{/0}}, {{#1}}{{count}} {{label}}{{/1}} and {{#2}}{{count}} {{label}}{{/2}}", t)
        }
        return e
    }, TD.vo.EngagementFilter.prototype.getFilters = function() {
        return []
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.vo.UserFilter = function(e) {
        this.fromJSONObject(e)
    }, TD.vo.UserFilter.FROM_ALL = "all", TD.vo.UserFilter.FROM_USER = "user", TD.vo.UserFilter.FROM_VERIFIED = "verified", TD.vo.UserFilter.FROM_LIST = "list", TD.vo.UserFilter.FROM_FOLLOWING = "following", TD.vo.UserFilter.prototype.from_type = null, TD.vo.UserFilter.prototype.from_name = null, TD.vo.UserFilter.prototype.mention_name = null, TD.vo.UserFilter.prototype.setFrom = function(e, t) {
        t && e !== TD.vo.UserFilter.FROM_VERIFIED && e !== TD.vo.UserFilter.FROM_ALL || (t = ""), this.from_type = e, this.from_name = TD.util.deMentionify(t)
    }, TD.vo.UserFilter.prototype.setMentioned = function(e) {
        this.mention_name = e || "", this.mention_name = TD.util.deMentionify(this.mention_name)
    }, TD.vo.UserFilter.prototype.toJSONObject = function() {
        return {
            from_type: this.from_type,
            from_name: this.from_name,
            mention_name: this.mention_name
        }
    }, TD.vo.UserFilter.prototype.fromJSONObject = function(e) {
        e && (this.setFrom(e.from_type, e.from_name), this.setMentioned(e.mention_name))
    }, TD.vo.UserFilter.prototype.getQueryString = function() {
        var e = [];
        switch (this.from_type) {
            case TD.vo.UserFilter.FROM_USER:
                e.push("from:" + this.from_name);
                break;
            case TD.vo.UserFilter.FROM_VERIFIED:
                e.push("filter:verified");
                break;
            case TD.vo.UserFilter.FROM_LIST:
                e.push("list:" + this.from_name)
        }
        return this.mention_name && e.push("+@" + this.mention_name), e.join(" ")
    }, TD.vo.UserFilter.prototype.getSummaryText = function() {
        var e = [];
        switch (this.from_type) {
            case TD.vo.UserFilter.FROM_USER:
                TD.storage.accountController.getAccountFromUsername(this.from_name).length > 0 ? e.push((0, r.default)("by me (@{{{name}}})", {
                    name: this.from_name
                })) : e.push((0, r.default)("by @{{{name}}}", {
                    name: this.from_name
                }));
                break;
            case TD.vo.UserFilter.FROM_VERIFIED:
                e.push((0, r.default)("by verified users"));
                break;
            case TD.vo.UserFilter.FROM_LIST:
                e.push((0, r.default)("by members of @{{{name}}}", {
                    name: this.from_name
                }));
                break;
            case TD.vo.UserFilter.FROM_FOLLOWING:
                e.push((0, r.default)("by users I follow"))
        }
        return this.mention_name && (TD.storage.accountController.getAccountFromUsername(this.mention_name).length > 0 ? e.push((0, r.default)("mentioning me (@{{{name}}})", {
            name: this.mention_name
        })) : e.push((0, r.default)("mentioning @{{{name}}}", {
            name: this.mention_name
        }))), e.join(", ")
    }, TD.vo.UserFilter.prototype.getFilters = function() {
        var e, t = [];
        switch (this.mention_name && (e = new TD.vo.Filter(TD.vo.Filter.PHRASE, TD.util.atMentionify(this.mention_name), !0), t.push(e)), this.from_type) {
            case TD.vo.UserFilter.FROM_USER:
                e = new TD.vo.Filter(TD.vo.Filter.SENDER, this.from_name, !0), t.push(e);
                break;
            case TD.vo.UserFilter.FROM_VERIFIED:
                e = new TD.vo.Filter(TD.vo.Filter.IS_FROM_VERIFIED, !0, !0), t.push(e)
        }
        return t
    }
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(1)),
        r = o(i(0)),
        a = i(109);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.cache.lists = function() {
        var e = {},
            t = {},
            i = (0, a.makeCommandBag)();

        function o() {
            i.removeAll();
            var e = t.getAll().filter(function(e) {
                return e.isOwnList()
            }).map(function(e) {
                return {
                    label: (0, s.default)("Edit List — “{{listName}}” by @{{screenName}}", {
                        listName: e.name,
                        screenName: e.user.screenName
                    }),
                    apply: function() {
                        return (0, r.default)(document).trigger("uiShowEditListMembers", {
                            list: e
                        })
                    }
                }
            });
            i.add(e)
        }

        function c(t) {
            var i = e[t] || {};
            return e[t] = i, i
        }
        return t.add = function(e) {
            c(e.account.getKey())[e.id] = e, TD.controller.feedManager.fixListFeeds(), TD.cache.names.updateScreenName(e.user.id, e.user.screenName), TD.cache.names.updateListName(e.id, e.name), o()
        }, t.unsubscribe = function(e) {
            delete c(e.account.getKey())[e.id], o()
        }, t.purge = function(t) {
            var i;
            if (n.default.each(e, function(e, s) {
                    i = i || e[t], delete e[t]
                }), i) {
                var s = TD.storage.Feed.generateKeyFor(i.account.getKey(), "list", {
                    listId: t,
                    ownerId: i.user.id
                });
                TD.controller.feedManager.deleteFeedsWhere(function(e) {
                    return e.getKey() === s
                })
            }
            o()
        }, t.getListsFor = function(e) {
            return n.default.values(c(e))
        }, t.find = function(t, i, s, r, a) {
            var o, c, l;
            return i && s && (o = "@" + i.toLowerCase() + "/" + s.toLowerCase()), n.default.each(e, function(e, i) {
                a && a !== i || n.default.each(e, function(e, i) {
                    (t && e.id === t || e.fullName.toLowerCase() === o) && (e.isOwnList() ? c = e : l = e)
                })
            }), r ? c : c || l
        }, t.getAll = function() {
            var t = {};
            return n.default.each(e, function(e, i) {
                n.default.extend(t, e)
            }), n.default.values(t)
        }, t
    }()
}, , , , function(e, t, i) {
    "use strict";
    var s, n = c(i(1)),
        r = c(i(0)),
        a = c(i(17)),
        o = i(38);

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.cache.names = ((s = {
        SECONDS_IN_ONE_WEEK: 604800,
        _cache: null,
        init: function() {
            s._cache = TD.settings.getNameCache(), s._cache.users = s._cache.users || {}, s._cache.lists = s._cache.lists || {}, s._cache.customTimelines = s._cache.customTimelines || {}, r.default.subscribe("/storage/client/column_order_changed", function() {
                s.prune(), s.commit()
            }), r.default.subscribe("/storage/column/feeds_changed", function(e, t, i) {
                var n = TD.storage.columnController.get(i.getKey());
                n && !n.temporary && s.commit()
            })
        },
        getScreenName: function(e) {
            var t, i, n = TD.util.unixTime(new Date),
                r = TD.storage.Account.generateKeyFor("twitter", e),
                a = TD.storage.accountController.get(r);
            return a ? (i = TD.util.atMentionify(a.getUsername()), s.addScreenName(e, i)) : ((t = s._cache.users[e]) && (i = t.name), (!t || t.timestamp + s.SECONDS_IN_ONE_WEEK < n) && s._fetchUser(e)), i
        },
        getListName: function(e, t) {
            var i, n, r = TD.util.unixTime(new Date),
                a = TD.cache.lists.find(e, "", "");
            return a ? (i = a.name, s.addListName(e, i)) : ((n = s._cache.lists[e]) && (i = n.name), (!n || n.timestamp + s.SECONDS_IN_ONE_WEEK < r) && s._fetchList(e, t)), i
        },
        getCustomTimelineName: function(e, t) {
            var i, n, r = TD.util.unixTime(new Date);
            return (n = s._cache.customTimelines[e]) && (i = n.name), (!n || n.timestamp + s.SECONDS_IN_ONE_WEEK < r) && s._fetchCustomTimeline(e, t), i
        },
        addScreenName: function(e, t) {
            if (s._cache) {
                var i = {},
                    n = s._cache.users[e],
                    r = TD.util.atMentionify(t),
                    a = !n || r !== n.name;
                i.name = r, i.timestamp = TD.util.unixTime(new Date), s._cache.users[e] = i, a && (s.commit(), TD.storage.notification.notify("/cache/names/change"))
            }
        },
        addListName: function(e, t) {
            if (s._cache) {
                var i = {},
                    n = s._cache.lists[e],
                    r = !n || t !== n.name;
                i.name = t, i.timestamp = TD.util.unixTime(new Date), s._cache.lists[e] = i, r && (s.commit(), TD.storage.notification.notify("/cache/names/change"))
            }
        },
        addCustomTimelineName: function(e, t) {
            if (s._cache && t) {
                var i = {},
                    n = s._cache.customTimelines[e],
                    r = !n || t !== n.name;
                i.name = t, i.timestamp = TD.util.unixTime(new Date), s._cache.customTimelines[e] = i, r && (s.commit(), TD.storage.notification.notify("/cache/names/change"))
            }
        },
        updateScreenName: function(e, t) {
            s._cache && (s._cache.users[e] && s.addScreenName(e, t))
        },
        updateListName: function(e, t) {
            s._cache && (s._cache.lists[e] && s.addScreenName(e, t))
        },
        updateCustomTimelineName: function(e, t) {
            s._cache && (s._cache.customTimelines[e] && s.addCustomTimelineName(e, t))
        },
        _fetchUser: function(e) {
            TD.cache.twitterUsers.getById(e).addCallback(function(t) {
                s.addScreenName(e, t.screenName)
            })
        },
        _fetchList: function(e, t) {
            var i = TD.storage.Account.generateKeyFor("twitter", t);
            (0, o.getClientByAccountKeyOrDefault)(i).getList(e, null, null, function(t) {
                s.addListName(e, t.name)
            })
        },
        _fetchCustomTimeline: function(e, t) {
            var i = TD.storage.Account.generateKeyFor("twitter", t);
            (0, o.getClientByAccountKeyOrDefault)(i).getCustomTimeline(e, function(t) {
                s.addCustomTimelineName(e, t.name)
            })
        }
    }).commit = n.default.debounce(function() {
        s.prune(), TD.settings.setNameCache(s._cache)
    }, 100), s.prune = function() {
        s._cache = s._getPrunedCache()
    }, s._getPrunedCache = function() {
        var e = {
                users: {},
                lists: {},
                customTimelines: {}
            },
            t = TD.storage.feedController.getAll();
        return n.default.each(t, function(t) {
            var i, n, r, o = t.getType(),
                c = t.getMetadata();
            if (c) {
                switch (o) {
                    case a.default.feedTypes.CUSTOMTIMELINE:
                        r = c.id, i = c.ownerId;
                        break;
                    case a.default.feedTypes.LIST:
                        n = c.listId, i = c.ownerId;
                        break;
                    default:
                        i = c.id
                }
                i && s._cache.users[i] && (e.users[i] = s._cache.users[i]), r && s._cache.customTimelines[r] && (e.customTimelines[r] = s._cache.customTimelines[r]), n && s._cache.lists[n] && (e.lists[n] = s._cache.lists[n])
            }
        }), e
    }, s)
}, function(e, t, i) {
    "use strict";
    var s, n, r, a = c(i(1)),
        o = c(i(0));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.controller.clients = (s = {}, n = {}, r = function(e, t) {
        switch (e) {
            case "twitter":
                return new TD.services.TwitterClient(t);
            case "tweetdeck":
                return new TD.services.TweetDeckClient
        }
    }, {
        init: function() {
            o.default.subscribe("/storage/account/new", function(e) {
                TD.controller.clients.initialiseClients()
            }), (0, o.default)(document).on("dataContributees", this.handleContributees.bind(this)).on("dataContributeeAcceptSuccess", this.handleContributeeInviteAcceptSuccess.bind(this)), TD.controller.clients.initialiseClients()
        },
        initialiseClients: function() {
            for (var e, t = TD.storage.accountController.getPostingAccounts(), i = 0; i < t.length; i++)(e = s[t[i].getKey()]) || (e = r(t[i].getType(), t[i]), s[t[i].getKey()] = e);
            s.tweetdeck || (s.tweetdeck = new TD.services.TweetDeckClient), TD.controller.scheduler.schedulePeriodicTask(1200, TD.controller.clients.refreshRetweetBlockLists), TD.controller.scheduler.schedulePeriodicTask(300, this.fetchContributees.bind(this), !0), (0, o.default)(document).trigger("dataClientsUpdated")
        },
        getClient: function(e) {
            return s[e]
        },
        getTDClient: function() {
            return s.tweetdeck
        },
        getClientsByService: function(e) {
            var t = [];
            for (var i in s) s[i].type == e && t.push(s[i]);
            return t
        },
        getPreferredClient: function(e) {
            var t = TD.storage.accountController.getPreferredAccount(e);
            return t ? this.getClient(t.getKey()) : void 0
        },
        addClient: function(e, t) {
            t || (t = new TD.storage.Account).setType(e);
            var i = TD.controller.auth.create(e, t),
                s = this.getClientsByService(e).length > 0,
                n = function() {
                    i.becomeContributor().addCallbackWith(this, function() {
                        TD.storage.accountController.manage(t), this.initialiseClients()
                    })
                }.bind(this);
            (0, o.default)(document).trigger("metric", {
                key: "account:manage:start"
            }), i.start(t, n, s)
        },
        removeClient: function(e) {
            var t = TD.storage.accountController.get(e);
            t && (s[e] && s[e].cleanUp && s[e].cleanUp(), delete s[e], TD.controller.feedManager.deleteFeedsWhere(function(t) {
                return t.getAccountKey() === e
            }), TD.storage.accountController.blacklistAccount(t), (0, o.default)(document).trigger("dataClientsUpdated"))
        },
        refreshRetweetBlockLists: function() {
            if (TD.util.shouldStream()) {
                var e = TD.controller.clients.getClientsByService("twitter");
                a.default.each(e, function(e) {
                    e.populateRetweetBlockList()
                })
            }
        },
        fetchContributees: function() {
            var e = TD.storage.store.getTwitterLoginAccount();
            e && (0, o.default)(document).trigger("uiNeedsContributees", {
                accountKey: e.getKey()
            })
        },
        addExpectedNewContributeeId: function(e) {
            e || (e = "*"), n[e] = !0
        },
        handleContributeeInviteAcceptSuccess: function(e, t) {
            TD.storage.accountController.manageContributee(t).addCallback(function() {
                (0, o.default)(document).trigger("dataContributeeInviteSuccess", t)
            })
        },
        handleContributees: function(e, t) {
            var i = TD.storage.store.getTwitterLoginAccount();
            if (t.accountKey === i.getKey()) {
                var s = [];
                t.contributees.reduce(function(e, t) {
                    var i = TD.storage.accountController.isContributeeManaged(t),
                        r = n[t.id] || n["*"];
                    return i || r ? e.concat([t]) : (s.push(t), e)
                }, []).forEach(function(e) {
                    delete n["*"], delete n[e.id], TD.storage.accountController.manageContributee(e)
                }), s.concat(t.pending).forEach(function(e) {
                    (0, o.default)(document).trigger("dataContributeeNotManaged", e)
                })
            }
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = a(i(1)),
        r = a(i(0));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.controller.scheduler = s = {
        QUERY_INTERVAL: 1e3,
        SLEEP_THRESHOLD: 6e4,
        _tasks: {},
        _lastTickTime: null,
        tick: function() {
            var e = this;
            setTimeout(function() {
                try {
                    e._handleTick()
                } finally {
                    e.tick()
                }
            }, this.QUERY_INTERVAL)
        },
        init: function() {
            this.tick(), s._lastTickTime = Date.now(), this._jQueryCleanupTaskId = TD.controller.scheduler.schedulePeriodicTask(600, function() {
                r.default.fragments = {}
            })
        },
        _handleTick: function() {
            var e = Date.now(),
                t = e - s._lastTickTime - s.QUERY_INTERVAL;
            s._lastTickTime = e, t > s.SLEEP_THRESHOLD && (0, r.default)(document).trigger("dataAppWokenFromSleep", {
                lateness: t
            }), n.default.each(s._tasks, function(t) {
                e - t.cycleStartTime > t.period && (s._fireTask(t), t.cycleStartTime = Date.now())
            })
        },
        _fireTask: function(e) {
            try {
                e.callback()
            } catch (t) {
                console.log("Error in periodic task:", e, "Error:", t)
            }
        },
        schedulePeriodicTask: function(e, t, i) {
            var s = {
                id: n.default.uniqueId("sched_task_"),
                callback: t,
                period: 1e3 * e,
                cycleStartTime: Date.now()
            };
            return i && this._fireTask(s), this._tasks[s.id] = s, s.id
        },
        updatePeriodicTask: function(e, t, i) {
            var s = this._tasks[e];
            s && (s.period = 1e3 * t, s.callback = i || s.callback)
        },
        restartPeriodicTask: function(e) {
            var t = this._tasks[e];
            t && (t.cycleStartTime = Date.now())
        },
        removePeriodicTask: function(e) {
            delete this._tasks[e]
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = u(i(32)),
        n = u(i(0)),
        r = u(i(95)),
        a = u(i(1809)),
        o = u(i(1)),
        c = i(597),
        l = i(36);

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.controller.feedScheduler = function() {
        var e = {
            FEED_TYPE_TO_MINIMUM_REFRESH_PERIOD: {
                home: 4,
                favorites: 4,
                search: 6,
                usertweets: 5,
                networkactivity: 45
            }
        };
        l.activityValuePolling$.subscribe(function(t) {
            var i = Math.max(parseInt(t, 10), 15);
            e.FEED_TYPE_TO_MINIMUM_REFRESH_PERIOD.networkactivity = i
        }), e.DEFAULT_MINIMUM_REFRESH_PERIOD = 10, e.DEFAULT_REFRESH_PERIOD = 45, e.THROTTLED_REFRESH_PERIOD = 120, e._activeColumns = {}, e._temporaryColumns = {}, e._taskIndex = {}, e.getMinimumRefreshPeriod = function(e) {
            return this.FEED_TYPE_TO_MINIMUM_REFRESH_PERIOD[e] ? this.FEED_TYPE_TO_MINIMUM_REFRESH_PERIOD[e] : this.DEFAULT_MINIMUM_REFRESH_PERIOD
        }, e.init = function() {
            n.default.subscribe("/storage/column/feeds_changed", function(t, i, s) {
                var n = s.getKey(),
                    r = TD.controller.columnManager.get(n);
                r && e.addColumn(r, !r.temporary)
            }), n.default.subscribe("/storage/column/change", function(t) {
                var i = t.getKey(),
                    s = TD.controller.columnManager.get(i);
                if (s) {
                    var n = s.model.getFeedKeys(),
                        r = t.getFeedKeys();
                    o.default.isEqual(n, r) || e.addColumn(s, !s.temporary)
                }
            }), (0, n.default)(document).on("dataRateLimit", this._handleRateLimitData.bind(this)), (0, n.default)(document).on("dataThrottleFeed", this._handleThrottleFeed.bind(this)), (0, n.default)(document).on("dataUserStreamStatus", this._handleStreamStatus.bind(this)), (0, n.default)(document).on("dataAppWokenFromSleep", this._handleAppWoken.bind(this)), (0, n.default)(document).on("dataTwitterAccountAccessEnabled", this._handeAccessEnabled.bind(this))
        }, e._getTask = function(e, t) {
            if (this._taskIndex[e]) return this._taskIndex[e][t]
        }, e._setTask = function(e, t, i) {
            this._taskIndex[e] = this._taskIndex[e] || {}, this._taskIndex[e][t] = i
        }, e._handleRateLimitData = function(e, t) {
            var i = this._getTask(t.accountKey, t.feedType);
            i && (i.rateLimitData = t.rateLimitData, this._setPeriodicTask(i))
        }, e._handleThrottleFeed = function(e, t) {
            var i = this._getTask(t.accountKey, t.feedType);
            i && i.isThrottled !== t.doThrottle && (i.isThrottled = t.doThrottle, this._setPeriodicTask(i))
        }, e._handleStreamStatus = function(t, i) {
            var s = this._taskIndex[i.accountKey];
            o.default.each(s, e._setPeriodicTask.bind(this))
        }, e._handleAppWoken = function(e, t) {
            o.default.each(this._taskIndex, function(e) {
                o.default.each(e, this._resetTask)
            }.bind(this)), TD.controller.stats.appWokenFromSleep(t.lateness)
        }, e._handeAccessEnabled = function(e, t) {
            this._taskIndex[t.accountKey] && o.default.each(this._taskIndex[t.accountKey], this._resetTask, this)
        }, e._resetTask = function(e) {
            e.doTask({
                reset: !0
            }), TD.controller.scheduler.restartPeriodicTask(e.taskId)
        }, e.addColumn = function(e, t) {
            var i = t.firstLoad,
                s = void 0 !== i && i,
                n = e.getFeeds(),
                r = e.model.getKey();
            this._activeColumns[r] && this.removeColumn(r), this._activeColumns[r] = e, e.temporary && (this._temporaryColumns[r] = e);
            for (var a = 0; a < n.length; a++) TD.controller.feedManager.addFeed(n[a]), this._addFeed(n[a]);
            e.backfill({
                firstLoad: s
            })
        }, e._addFeed = function(e) {
            var t, i = e.getAccountKey(),
                s = e.getType(),
                n = e.getKey();
            (t = this._getTask(i, s) || {
                accountKey: i,
                feedType: s,
                feeds: {},
                taskId: null,
                rateLimitData: null,
                isThrottled: !1,
                doTask: null
            }).doTask || (t.doTask = this._doTaskFactory(t)), this._setTask(i, s, t), t.feeds[n] = e, this._setPeriodicTask(t)
        }, e._setPeriodicTask = function(e) {
            var t = this,
                i = (0, a.default)(function() {
                    return t._calculatePeriod(e)
                }, function() {
                    return t.DEFAULT_REFRESH_PERIOD
                });
            e.taskId ? TD.controller.scheduler.updatePeriodicTask(e.taskId, i) : e.taskId = TD.controller.scheduler.schedulePeriodicTask(i, e.doTask, !1)
        }, e._doTaskFactory = function(i) {
            return function(s) {
                var n = o.default.map(i.feeds, function(i, n) {
                    return t(i.state), e._refreshFeed(n, s)
                });
                return TD.core.defer.gatherResults(n)
            }
        };
        var t = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                t = o.default.get(e, "type"),
                i = o.default.get(e, "metadata.term");
            "search" === t && ((0, c.trackQuerySupportedByContent)(i) || (0, n.default)(document).trigger("metric", {
                key: "project-content:unsupported-search-query-polling"
            }))
        };
        return e._calculatePeriod = function(e) {
            var t = this,
                i = (0, r.default)(e.rateLimitData, function() {
                    var i = e.rateLimitData.rateLimitRemaining - 10,
                        n = e.rateLimitData.rateLimitReset + 10 - Date.now() / 1e3,
                        a = i / (0, s.default)(e.feeds).length;
                    return (0, r.default)(n > 0 && i > 0, function() {
                        return Math.min(n / a, n)
                    }, n <= 0, function() {
                        return t.DEFAULT_REFRESH_PERIOD
                    }, function() {
                        return n
                    })
                }, this.DEFAULT_REFRESH_PERIOD),
                n = Math.round(i),
                a = Math.min(Math.max(n, this.getMinimumRefreshPeriod(e.feedType)), 900);
            TD.util.metric("feed_scheduler:period:bounded:" + e.feedType, [a], "metric");
            var o = (0, r.default)(e.isThrottled || TD.decider.get("throttle_polling_period"), function() {
                    return Math.max(a, t.THROTTLED_REFRESH_PERIOD)
                }, a),
                c = (0, r.default)(TD.decider.get("faster_notifications") && "interactions" === e.feedType, function() {
                    return Math.min(15, o)
                }, o);
            return TD.util.metric("feed_scheduler:period:faster:" + e.feedType, [c], "metric"), TD.util.metric("feed_scheduler:period:throttled:" + e.feedType, [o], "metric"), c
        }, e._refreshFeed = function(e, t) {
            return (t = o.default.defaults({}, t)).reset = t.reset || o.default.some(this._temporaryColumns, function(t) {
                return -1 !== t.model.getFeedKeys().indexOf(e)
            }), TD.controller.feedManager.getPoller(e).refresh(t)
        }, e.removeColumn = function(e) {
            delete this._activeColumns[e], delete this._temporaryColumns[e], this._rebuildTaskIndex(), TD.controller.feedManager.cleanupFeeds()
        }, e._rebuildTaskIndex = function() {
            o.default.each(this._taskIndex, function(e) {
                o.default.each(e, function(e) {
                    e.feeds = {}
                })
            }), o.default.each(this._activeColumns, function(t) {
                o.default.each(t.getFeeds(), function(t) {
                    e._addFeed(t)
                })
            }), o.default.each(this._taskIndex, function(e) {
                o.default.each(e, function(e) {
                    o.default.isEmpty(e.feeds) && (TD.controller.scheduler.removePeriodicTask(e.taskId), e.taskId = null)
                })
            })
        }, e.refreshColumn = function(e) {
            var t, i = this._activeColumns[e];
            if (i) {
                t = i.getFeeds();
                for (var s = 0; s < t.length; s++) this._refreshFeed(t[s].getKey())
            }
        }, e.refreshAccountFeeds = function(e, t) {
            o.default.each(this._taskIndex[e], function(e) {
                e.doTask({
                    reset: t
                })
            })
        }, e
    }()
}, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = u(i(1)),
        n = u(i(0)),
        r = u(i(240)),
        a = u(i(17)),
        o = u(i(182)),
        c = i(19),
        l = i(36);

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.default = TD.controller.FeedPoller = function(e) {
        var t = this;
        this.TRIM_THROTTLE_MS = 1e4, this.OPTIMUM_ARRAY_LENGTH = 200, this.MAX_ARRAY_LENGTH = 300, this.TWEET_ID_QUEUE_LENGTH = 500, this.REFRESH_LOCK_EXPIRY = 6e4, this.EXHAUSTED_API_THRESHOLD = 10, this.feed = e, this.mark = "", this.chirpArray = [], this.chirpIndex = {}, this.seenTweetIDs = new r.default(this.TWEET_ID_QUEUE_LENGTH), this.refreshLock = 0, this.requestsInFlight = 0, this.cursorQueue = [], this.isInitialLoad = !0, this.intervalOfPossibility = o.default.whole, this.shouldTrackHighWaterMark = !1, l.actuallyRenderContentSearchTweets$.subscribe(function(e) {
            t.renderContentSearchTweets = e
        }), l.actuallyRenderContentUserTweets$.subscribe(function(e) {
            t.renderContentUserTweets = e
        }), l.activityStreaming$.subscribe(function(e) {
            t.streamActivity = e
        }), this.shouldRenderContentUserTweets = function() {
            return this.renderContentUserTweets
        }, this.shouldRenderContentSearchTweets = function() {
            return this.renderContentSearchTweets
        }, this._checkNotifications = function() {
            var e = TD.storage.columnController.getColumnsContainingFeed(this.feed.getKey());
            this.shouldTrackHighWaterMark = e.some(function(e) {
                return e.getHasSound() || e.getHasNotification()
            })
        }, this._checkNotifications(), this.subscription = n.default.subscribe("/storage/column/column_flags_changed", this._checkNotifications.bind(this)), this.removeChirp = function(e) {
            var t = this.chirpIndex[e];
            if (t) {
                for (var i = 0; i < this.chirpArray.length; i++)
                    if (this.chirpArray[i] === t) {
                        this.chirpArray.splice(i, 1);
                        break
                    } delete this.chirpIndex[e], n.default.publish("/delete/" + this.feed.getKey(), [this, [t]])
            }
        }, this.removeWhere = function(e) {
            this.doWhere(e, function(e) {
                this.removeChirp(e.id)
            }.bind(this))
        }, this.doWhere = function(e, t) {
            this.chirpArray.filter(e).forEach(t)
        }, this.forgetAll = function() {
            this.chirpArray = [], this.chirpIndex = {}, this.seenTweetIDs.flush()
        }, this.recordChirpLateness = function(e, t, i, s) {
            if (TD.decider.get("chirp_lateness_metric")) {
                var r = (e || []).filter(function(e) {
                    return e.chirpType === TD.services.ChirpBase.TWEET && Math.random() < s
                }, this).map(function(e) {
                    return i - e.created.getTime()
                });
                if (0 !== r.length) {
                    var a = TD.ui.template.toHtmlFromRaw("api:delivery-delay:{{apiType}}:{{feedType}}", {
                        apiType: t,
                        feedType: this.feed.getType()
                    });
                    (0, n.default)(document).trigger("metric", {
                        key: a,
                        type: "metric",
                        value: r
                    })
                }
            }
        }, this.acceptStreamChirps = function() {}, this.acceptChirps = function(e, t) {
            if (e && e.length) {
                var i = this.addChirpsToMemCache(e);
                this.isInitialLoad && !TD.settings.getShowStartupNotifications() && this.saveHighWaterMark(), this.publishChirps(i, t), this.saveHighWaterMark(), this.deferredTrimChirps()
            } else this.publishChirps([], t);
            this.isInitialLoad = !1
        }, this.acceptContentedChirps = function(e) {
            ("usertweets" !== this.feed.getType() || this.shouldRenderContentUserTweets()) && ("search" !== this.feed.getType() || this.shouldRenderContentSearchTweets()) && this.acceptChirps(TD.util.poller.annotateChirpsWithApiBounds(this.feed, e), !1)
        }, this.saveHighWaterMark = function() {
            if (this.shouldTrackHighWaterMark) {
                var t = this.chirpArray[0].getSortIndex();
                e.setTopSortIndex(t);
                var i = this.chirpArray[0].created.getTime();
                e.setLatestTime(Math.max(e.getLatestTime(), i))
            }
        }, this.addChirpsToMemCache = function(e) {
            var t, i, s, n, r, a, o, c = [],
                l = [],
                u = !0;
            for (e.sort(TD.util.chirpColumnSort), t = 0; t < e.length; t++) i = e[t], s = this.chirpIndex[i.id], r = this.isRepeatedRetweet(i), s ? (n = this.chirpArray.indexOf(s), this.chirpArray[n] = i, this.chirpIndex[i.id] = i, l.push(i)) : r || (c.push(i), this.chirpIndex[i.id] = i, l.push(i));
            return this.chirpArray.length && c.length && (a = this.chirpArray[0], o = c[c.length - 1], u = a.belongsAbove(o)), this.chirpArray = c.concat(this.chirpArray), u && this.chirpArray.sort(TD.util.chirpColumnSort), l
        }, this.isRepeatedRetweet = function(e) {
            var t, i, s = !1;
            return e instanceof TD.services.TwitterStatus && (t = e.getMainTweet().id, i = this.seenTweetIDs.get(t) || 0, s = e.isRetweetedStatus() && i > 0, this.seenTweetIDs.put(t, i + 1)), s
        }, this.refresh = function(e) {
            (e = s.default.defaults({}, e)).retries = e.retries || 0;
            var t = Date.now();
            if (t < this.refreshLock + this.REFRESH_LOCK_EXPIRY) return TD.core.defer.succeed();
            e.reset && (this.cursorQueue.forEach(function(e) {
                e.d.cancel()
            }), this.cursorQueue = []);
            var i = TD.util.poller.getRefreshCursor(this.feed, this.chirpArray),
                n = i.interval.from !== o.default.negInf && i.interval.to === o.default.posInf,
                r = {
                    bypassCache: !0,
                    forceFetch: e.reset
                };
            this.refreshLock = t;
            var a = this.fillCursor(i, r);
            return a.addBoth(function(e) {
                return this.refreshLock = 0, e
            }.bind(this)), a.addCallbackWith(this, TD.util.effect(function(e) {
                n && this.recordChirpLateness(e.chirps, "rest", Date.now(), TD.controller.FeedPoller.CHIRP_LATENESS_METRIC_SAMPLE)
            })), a.addErrbackWith(this, function(t) {
                if (!TD.decider.get("disable_network_failure_retry") && (e.reset && t && s.default.isObject(t.message) && "responseText" in t.message)) {
                    var i = t.message;
                    if (TD.util.isNetworkFailure(i)) return this.retryRefresh(e)
                }
            }), a
        }, this.retryRefresh = function(e) {
            var t = s.default.assign({}, e, {
                retries: e.retries + 1
            });
            (0, n.default)(document).trigger("metric", {
                key: "feed_poller:refresh:retry:request"
            });
            var i = Math.min(1e3 * Math.pow(2, e.retries / 2), 6e4),
                r = TD.core.defer.timeout(i);
            return r.addCallback(this.refresh.bind(this, t)), 1 === t.retries && r.addCallback(function(e) {
                return (0, n.default)(document).trigger("metric", {
                    key: "feed_poller:refresh:retry:success"
                }), e
            }), r
        }, this.fillCursor = function(e, t) {
            t = t || {}, s.default.defaults(t, {
                bypassCache: !1,
                forceFetch: !1
            });
            var i = new TD.core.defer.Deferred;
            return this.cursorQueue.push({
                cursor: e,
                opts: t,
                d: i
            }), this.processCursorQueue(), i
        }, this.getCacheResult = function(e, t) {
            var i = TD.util.poller.makeChirpInterval(t),
                s = e.interval.intersection(this.intervalOfPossibility),
                n = t.filter(s.contains, s),
                r = s.intersection(i.complement().before),
                a = TD.util.poller.calculateUpperBound(this.feed.getKey(), n);
            return {
                requestCursor: e,
                chirps: n,
                remainderCursor: {
                    feedKey: this.feed.getKey(),
                    interval: r,
                    bounds: {
                        upper: a || e.bounds.upper,
                        lower: e.bounds.lower
                    }
                }
            }
        }, this.recalculateResult = function(e, t) {
            return t.length === e.chirps.length ? e : this.getCacheResult(e.requestCursor, t)
        }, this.processCursorQueue = function() {
            if (this.cursorQueue = this.cursorQueue.filter(function(e) {
                    var t = this;
                    if (e.opts.bypassCache) return !0;
                    var i = this.getCacheResult(e.cursor, this.chirpArray),
                        n = TD.util.poller.isCacheHit(i);
                    return n && s.default.defer(function() {
                        var i = t.getCacheResult(e.cursor, t.chirpArray);
                        e.d.callback(i)
                    }), !n
                }, this), !(0 === this.cursorQueue.length || this.requestsInFlight > 0)) {
                var e = this.cursorQueue.shift(),
                    t = this.fetchChirps(e.cursor, e.opts);
                t.addCallbackWith(this, function(t) {
                    var i = this.processRestResult(this.chirpArray, e.cursor, t);
                    i.isGappy && this.forgetAll(), "usertweets" === this.feed.getType() && (0, c.metric)("api:rest:tweet:usertweets", i.chirps.length), this.acceptChirps(i.chirps, i.isGappy);
                    var s = this.getCacheResult(e.cursor, this.chirpArray);
                    return TD.util.poller.isCacheHit(s) || (s = this.getCacheResult(e.cursor, t)), t.length < this.EXHAUSTED_API_THRESHOLD && (a.default.nonExhaustibleFeedTypes[this.feed.getType()] || (this.intervalOfPossibility = s.remainderCursor.interval.complement().after), s.remainderCursor.interval = o.default.empty), s
                }), t.addCallbacks(e.d.callback.bind(e.d), e.d.errback.bind(e.d)), t.addBothWith(this, this.processCursorQueue)
            }
        }, this.processRestResult = function(e, t, i) {
            var s = TD.util.poller.makeChirpInterval(e),
                n = TD.util.poller.makeRequestResultInterval(i, t.interval),
                r = s.unify(n),
                o = !a.default.gaplessFeedTypes[this.feed.getType()];
            o || (r = s.hull(n));
            var c = [s, n, r].sort(function(e, t) {
                    return e.toComparator(e.to, t.to) || e.fromComparator(t.from, e.from)
                }).pop(),
                l = r.empty && c.equalTo(n),
                u = i;
            if (o) {
                var d = c.intersection(t.interval);
                u = i.filter(d.contains, d)
            }
            return {
                chirps: u,
                isGappy: l
            }
        }, this.fetchChirps = function(e, t) {
            (t = s.default.defaults(t || {}, {
                forceFetch: !1
            })).poller = this, t.feedType = this.feed.getType(), t.metadata = this.feed.getMetadata();
            var i = TD.controller.clients.getClient(this.feed.getAccountKey());
            if (!i) return TD.core.defer.fail(new Error("Could not find client for feed: " + this.feed.getAccountKey()));
            this.requestsInFlight++;
            var r = i.getChirpsForFeed(e, t),
                a = setTimeout(function() {
                    r.cancel(), (0, n.default)(document).trigger("metric", {
                        key: "feed_poller:request:timeout:" + t.feedType
                    })
                }, TD.controller.FeedPoller.REQUEST_TIMEOUT);
            return r.addCallbackWith(this, function(e) {
                return TD.util.poller.annotateChirpsWithApiBounds(this.feed, e).sort(TD.util.chirpColumnSort)
            }), r.addBoth(function(e) {
                return this.requestsInFlight--, clearTimeout(a), setTimeout(this.processCursorQueue.bind(this), 1), e
            }.bind(this)), r
        }, this.getCursor = function(e) {
            var t = [];
            e.upper && (t = this.chirpArray.filter(function(t) {
                return !t.belongsBelow(e.upper)
            }));
            var i = [];
            return e.lower && (i = this.chirpArray.filter(function(t) {
                return !t.belongsAbove(e.lower)
            })), {
                feedKey: this.feed.getKey(),
                interval: new o.default(e.lower ? o.default.excEnd(e.lower) : o.default.negInf, e.upper ? o.default.excEnd(e.upper) : o.default.posInf),
                bounds: {
                    upper: e.upper ? TD.util.poller.calculateUpperBound(this.feed.getKey(), t) : void 0,
                    lower: e.lower ? TD.util.poller.calculateLowerBound(this.feed.getKey(), i, {
                        isGapless: a.default.gaplessFeedTypes[this.feed.getType()]
                    }) : void 0
                }
            }
        }, this.trimChirps = function() {
            if (!(this.chirpArray.length < this.MAX_ARRAY_LENGTH))
                for (var e = this.chirpArray.splice(this.OPTIMUM_ARRAY_LENGTH, Number.MAX_VALUE), t = 0; t < e.length; t++) delete this.chirpIndex[e[t].id]
        }, this.deferredTrimChirps = s.default.throttle(this.trimChirps.bind(this), this.TRIM_THROTTLE_MS, {
            leading: !1
        }), this.publishAll = function() {
            this.publishChirps(this.chirpArray)
        }, this.publishChirps = function(e, t) {
            n.default.publish("/feed/" + this.feed.getKey(), [{
                poller: this,
                chirps: e.concat(),
                notifyAfterSortIndex: this.feed.getTopSortIndex(),
                gap: !!t
            }])
        }, this.destroy = function() {
            var e = this.feed;
            this.chirpArray = [], this.chirpIndex = {}, n.default.unsubscribeAll("/feed/" + e.getKey()), n.default.unsubscribeAll("/delete/" + e.getKey()), n.default.unsubscribe(this.subscription)
        }
    }, TD.controller.FeedPoller.FEED_TYPES = {
        customTimeline: "customtimeline",
        direct: "direct",
        dataminr: "dataminr",
        favorites: "favorites",
        home: "home",
        interactions: "interactions",
        list: "list",
        mentions: "mentions",
        networkactivity: "networkactivity",
        scheduled: "scheduled",
        search: "search",
        useractivity: "useractivity",
        usertimeline: "usertimeline",
        usertweets: "usertweets",
        livevideo: "livevideo",
        event: "event"
    }, TD.controller.FeedPoller.NOTIFICATION_FEED_TYPES = ["interactions", "mentions"], TD.controller.FeedPoller.CURSORED_ON_TWEET_TIMESTAMP = {
        interactions: !0,
        networkactivity: !0,
        useractivity: !0
    }, TD.controller.FeedPoller.CURSORED_FEED_TYPES = {
        customtimeline: !0,
        livevideo: !0
    }, TD.controller.FeedPoller.SCHEDULED_FEED_TYPES = {
        scheduled: !0
    }, TD.controller.FeedPoller.CHIRP_LATENESS_METRIC_SAMPLE = .01, TD.controller.FeedPoller.REQUEST_TIMEOUT = 45e3
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = u(i(32)),
        n = u(i(3)),
        r = u(i(1)),
        a = u(i(0)),
        o = u(i(17)),
        c = i(23),
        l = u(i(1812));

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.default = TD.controller.feedManager = function() {
        var e = {},
            t = {},
            i = new l.default;

        function u() {
            var e, t = TD.storage.accountController.getDefault(),
                i = t.getKey();
            "twitter" === t.getType() && (e = TD.storage.feedController.getAll(), e = r.default.filter(e, function(e) {
                return "search" === e.getType() && e.getAccountKey() !== i
            }), r.default.each(e, function(e) {
                var t = TD.storage.feedController.getOrCreateFeed(e.getType(), e.getService(), i, e.getMetadata());
                TD.controller.feedManager.replaceFeed(e, t)
            }))
        }

        function d(e, t) {
            var i, s = t && t.toLowerCase();
            i = t ? (0, n.default)("User @{{screenName}} has been suspended", {
                screenName: t
            }) : (0, n.default)("User has been suspended"), (0, c.showNotification)({
                message: i
            }), TD.controller.feedManager.deleteWhere(function(i) {
                var n = i.getMainUser && i.getMainUser();
                return !!n && (e && e == n.id || t && s === n.screenName.toLowerCase())
            })
        }

        function h(e, t, i) {
            var s = i.getRelatedTweet();
            if (!s) return !1;
            var n = s.id === e || s.retweetedStatus && s.retweetedStatus.id === e,
                r = s.account.getKey() === t;
            return n && r
        }
        return e.init = function() {
            var e, i = TD.storage.feedController.getAll();
            for (e = 0; e < i.length; e++) {
                var s = i[e];
                t[s.getKey()] = new TD.controller.FeedPoller(s)
            }
            a.default.subscribe("/user/removeTweets", this.deleteUserChirps), a.default.subscribe("/user/suspended", d), a.default.subscribe("/storage/client/default_account_changed", u), (0, a.default)(document).on("dataUndoRetweetSuccess", this.handleUndoRetweetSuccess.bind(this)), (0, a.default)(document).on("dataUndoRetweetError", this.handleUndoRetweetError.bind(this))
        }, e.handleUndoRetweetSuccess = function(e, t) {
            this.deleteWhere(function(e) {
                return e.retweetedStatus && e.retweetedStatus.id === t.tweetId && e.creatorAccount && e.creatorAccount.getKey() === t.from
            }), this.doWhere(h.bind(null, t.tweetId, t.from), function(e) {
                e.getRelatedTweet().setRetweeted(!1)
            })
        }, e.handleUndoRetweetError = function(e, t) {
            (0, c.showErrorNotification)({
                message: (0, n.default)("Undo retweet failed")
            }), this.doWhere(h.bind(null, t.tweetId, t.from), function(e) {
                e.getRelatedTweet().setRetweeted(!0)
            })
        }, e.getPoller = function(e) {
            return t[e]
        }, e.addFeed = function(s) {
            i.addSubscription(s);
            var n = s.getKey(),
                r = e.getPoller(n) || new TD.controller.FeedPoller(s);
            return t[n] = r, r
        }, e.removeFeed = function(s) {
            i.removeSubscription(s);
            var n = s.getKey(),
                r = e.getPoller(n);
            delete t[n], r.destroy()
        }, e.cleanupFeeds = function() {
            var i = TD.controller.columnManager.getAll(),
                s = {};
            for (var n in i)
                for (var r = i[n].getFeeds(), a = 0; a < r.length; a++) s[r[a].getKey()] = !0;
            for (var o in t)
                if (!s[o]) {
                    var c = t[o].feed;
                    e.removeFeed(c), TD.storage.feedController.remove(c.getKey())
                }
        }, e.deleteChirp = function(t) {
            e.deleteWhere(function(e) {
                if (e.id === t) return !0;
                if (e.getRelatedTweet) {
                    var i = e.getRelatedTweet();
                    return i && i.id === t
                }
                return !1
            })
        }, e.deleteWhere = function(e, i) {
            i = r.default.defaults(i || {}, {
                feedTypes: o.default.allFeedTypes
            }), (0, s.default)(t).forEach(function(s) {
                var n = t[s],
                    r = n.feed.getType();
                i.feedTypes[r] && n.removeWhere(e)
            })
        }, e.doWhere = function(e, i) {
            for (var s in t) t[s].doWhere(e, i)
        }, e.deleteUserChirps = function(t, i, s) {
            e.deleteWhere(function(e) {
                try {
                    var s = e.getCreator && e.getCreator();
                    return s && s.id === t && e.account.getUserID() === i
                } catch (e) {}
                return !1
            }, s)
        }, e.deleteFeedsWhere = function(e) {
            TD.storage.clientController.client.getColumnOrder().forEach(function(t) {
                var i = TD.controller.columnManager.get(t);
                i.getFeeds().forEach(function(t) {
                    e(t) && (TD.storage.feedController.remove(t), i.removeFeed(t))
                }), 0 === i.getFeeds().length && i instanceof TD.vo.Column && TD.controller.columnManager.deleteColumn(t)
            })
        }, e.replaceFeed = function(t, i, s) {
            var n = TD.controller.columnManager.getAll();
            s && (n = r.default.filter(n, function(e) {
                return -1 !== s.indexOf(e.model.getKey())
            })), r.default.each(n, function(e) {
                e instanceof TD.vo.Column && e.removeFeed(t) > 0 && e.addFeed(i)
            }), e.cleanupFeeds()
        }, e.fixListFeeds = r.default.debounce(r.default.once(function() {
            var e = function(e, t) {
                    var i = TD.storage.feedController.getOrCreateFeed(e.getType(), e.getService(), e.getAccountKey(), {
                        listId: t.id,
                        ownerId: t.user.id
                    });
                    TD.controller.feedManager.replaceFeed(e, i)
                },
                t = [],
                i = TD.storage.feedController.getAll();
            i = r.default.filter(i, function(e) {
                var t = e.getMetadata();
                return !("list" !== e.getType() || t.listId && t.ownerId)
            }), r.default.each(i, function(i) {
                var s = i.getMetadata(),
                    n = TD.cache.lists.find(null, s.screenName, s.slug);
                n ? e(i, n) : t.push(i)
            }), r.default.each(t, function(t) {
                var i = TD.controller.clients.getClient(t.getAccountKey()),
                    s = t.getMetadata();
                i.getList(null, s.screenName, s.slug, function(i) {
                    e(t, i)
                }, function() {})
            })
        }), 5e3), e.isContentStreaming = function(e) {
            var t = i.getSubscription(e);
            return t && "ok" === t.getStatus()
        }, e
    }()
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = w(i(119)),
        n = w(i(534)),
        r = w(i(47)),
        a = w(i(7)),
        o = w(i(30)),
        c = w(i(236)),
        l = w(i(10)),
        u = w(i(11)),
        d = w(i(1)),
        h = w(i(0)),
        m = i(36),
        f = i(597),
        p = i(353),
        g = i(49),
        v = w(i(29)),
        T = w(i(1813));

    function w(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var b = "search",
        y = (0, g.fromEventOnce)((0, h.default)(document), "TD.ready"),
        C = function() {
            function e() {
                var t = this;
                (0, l.default)(this, e), this.subscriptions = new c.default, this.enabledSubscriptionsByFeedType = (0, o.default)({}, b, !1), this.contentSearchSubscription = m.contentSearchEnabled$.combineLatest(y, function(e) {
                    return e
                }).subscribe(function(e) {
                    return t._toggleSubscriptionsEnabled(b, e)
                }), this.dataSettingsSubscription = v.default.Observable.fromEvent((0, h.default)(document), "dataSettingsValues", function(e, t) {
                    return t
                }).filter(function(e) {
                    return e && void 0 !== e.use_stream
                }).pluck("use_stream").subscribe(function(e) {
                    e ? t._enableContent() : t._disableContent()
                })
            }
            return (0, u.default)(e, [{
                key: "teardown",
                value: function() {
                    this.contentSearchSubscription.unsubscribe(), this.dataSettingsSubscription.unsubscribe(), this.clearAll()
                }
            }, {
                key: "getGraphQLQueryOptsForFeed",
                value: function(e) {
                    var t = e.getType();
                    return this.enabledSubscriptionsByFeedType[t] && t === b ? this.getTrackQuery(e) : null
                }
            }, {
                key: "getTrackQuery",
                value: function(e) {
                    var t = e.getMetadata().term;
                    if ((0, f.trackQuerySupportedByContent)(t)) return (0, a.default)({}, T.default, {
                        variables: {
                            query: t
                        }
                    });
                    TD.util.metric("project-content:unsupported-track")
                }
            }, {
                key: "handleMessages",
                value: function(t, i, s) {
                    var n = this;
                    t.forEach(function(t) {
                        e.sendTweetMetric((0, a.default)({}, t, {
                            feed: s
                        }))
                    });
                    var r = t.filter(function(e) {
                        return n.logAndFilterError(e)
                    }).map(function(e) {
                        return n.tweetFromContentMessage(e)
                    }).filter(Boolean).map(function(e) {
                        return new TD.services.TwitterStatus(i).fromGraphQLJSONObject(e)
                    }).filter(function(e) {
                        return !e.getMainUser().isBlockingOrMuting()
                    });
                    r.length && TD.controller.feedManager.getPoller(s.getKey()).acceptContentedChirps(r)
                }
            }, {
                key: "logAndFilterError",
                value: function(e) {
                    var t = e.errors,
                        i = void 0 === t ? [] : t;
                    return !i.length || (i.forEach(function(e) {
                        var t = e.source,
                            i = void 0 === t ? "unknown" : t,
                            s = e.kind,
                            n = void 0 === s ? "unknown" : s,
                            r = e.code,
                            a = void 0 === r ? "unknown" : r;
                        TD.util.metric("api:content:error:source:" + i), TD.util.metric("api:content:error:kind:" + n), TD.util.metric("api:content:error:code:" + a)
                    }), !1)
                }
            }, {
                key: "tweetFromContentMessage",
                value: function(e) {
                    var t = "project-content:tweet-count",
                        i = e.payload,
                        s = d.default.get(i, "track.__typename");
                    if ("TweetSubscriptionEvent" === s) return TD.util.metric(t + ":track"), this.tweetFromTrackMessage(e);
                    if ("SubscriptionStatus" === s) {
                        var n = i.track.status;
                        return TD.util.metric(t + ":subscription-status:" + n), null
                    }
                    return TD.util.metric(t + ":unknown"), null
                }
            }, {
                key: "tweetFromTrackMessage",
                value: function(e) {
                    var t = e.payload.track.tweet;
                    return t || TD.util.metric("project-content:tweet-missing:track"), t
                }
            }, {
                key: "getSubscription",
                value: function(e) {
                    return this.subscriptions.get(e.getKey())
                }
            }, {
                key: "addSubscription",
                value: function(e) {
                    if (TD.settings.getUseStream()) {
                        var t = e.getKey();
                        if (t && !this.subscriptions.has(t)) {
                            var i = this.getGraphQLQueryOptsForFeed(e);
                            if (i) {
                                var s = TD.storage.accountController.get(e.getAccountKey()),
                                    n = this.doSubscribe((0, a.default)({}, i, {
                                        account: s,
                                        feed: e
                                    }));
                                this.subscriptions.set(t, n), TD.util.metric("project-content:subscribe:" + e.getType())
                            }
                        }
                    }
                }
            }, {
                key: "doSubscribe",
                value: function(e) {
                    var t = this,
                        i = e.query,
                        s = e.queryId,
                        n = e.variables,
                        a = e.account,
                        o = e.feed,
                        c = e.bufferWindow,
                        l = void 0 === c ? 200 : c,
                        u = (0, p.getAccountPipeline)(a).subscribeToGraphQLQuery({
                            query: i,
                            queryId: s,
                            variables: (0, r.default)(n)
                        }),
                        d = u.messages$,
                        h = u.status$,
                        m = d.bufferTime(l).filter(function(e) {
                            return e.length > 0
                        }).subscribe(function(e) {
                            return t.handleMessages(e, a, o)
                        }),
                        f = void 0,
                        g = h.subscribe(function(e) {
                            f = e
                        });
                    return {
                        getFeed: function() {
                            return o
                        },
                        unsubscribe: function() {
                            m.unsubscribe(), g.unsubscribe()
                        },
                        getStatus: function() {
                            return f
                        }
                    }
                }
            }, {
                key: "_removeSubscriptionByKey",
                value: function(e) {
                    var t = this.subscriptions.get(e);
                    if (!t || !e) return console.error('subscription with feed key "' + e + '" not found'), !1;
                    t.unsubscribe();
                    var i = this.subscriptions.get(e).getFeed();
                    this.subscriptions.delete(e), TD.util.metric("project-content:unsubscribe:" + i.getType())
                }
            }, {
                key: "removeSubscription",
                value: function(e) {
                    if (!e) return console.error("no subscription passed"), !1;
                    var t = e.getKey();
                    return this._removeSubscriptionByKey(t), this.subscriptions
                }
            }, {
                key: "clearAll",
                value: function() {
                    var e = !0,
                        t = !1,
                        i = void 0;
                    try {
                        for (var s, r = (0, n.default)(this.subscriptions.keys()); !(e = (s = r.next()).done); e = !0) {
                            var a = s.value;
                            this._removeSubscriptionByKey(a)
                        }
                    } catch (e) {
                        t = !0, i = e
                    } finally {
                        try {
                            !e && r.return && r.return()
                        } finally {
                            if (t) throw i
                        }
                    }
                }
            }, {
                key: "clearByType",
                value: function(e) {
                    if (e) {
                        var t = !0,
                            i = !1,
                            r = void 0;
                        try {
                            for (var a, o = (0, n.default)(this.subscriptions); !(t = (a = o.next()).done); t = !0) {
                                var c = a.value,
                                    l = (0, s.default)(c, 2),
                                    u = l[0];
                                l[1].getFeed().getType() === e && this._removeSubscriptionByKey(u)
                            }
                        } catch (e) {
                            i = !0, r = e
                        } finally {
                            try {
                                !t && o.return && o.return()
                            } finally {
                                if (i) throw r
                            }
                        }
                    }
                }
            }, {
                key: "_enableContent",
                value: function() {
                    var e = this;
                    TD.storage.feedController.getAll().filter(function(e) {
                        return (0, f.feedSupportedByContent)(e.getType())
                    }).forEach(function(t) {
                        return e.addSubscription(t)
                    })
                }
            }, {
                key: "_disableContent",
                value: function() {
                    this.clearAll()
                }
            }, {
                key: "_toggleSubscriptionsEnabled",
                value: function(e, t) {
                    if ("string" == typeof e && "boolean" == typeof this.enabledSubscriptionsByFeedType[e]) {
                        this.enabledSubscriptionsByFeedType[e] = Boolean(t);
                        var i = t ? "enable" : "disable";
                        TD.util.metric("project-content:toggle-subscriptions:" + e + ":toggle"), TD.util.metric("project-content:toggle-subscriptions:" + e + ":" + i);
                        try {
                            t ? this._enableContent() : this.clearByType(e), TD.util.metric("project-content:toggle-subscriptions:" + e + ":toggle:success"), TD.util.metric("project-content:toggle-subscriptions:" + e + ":" + i + ":success")
                        } catch (t) {
                            TD.util.metric("project-content:toggle-subscriptions:" + e + ":toggle:failure"), TD.util.metric("project-content:toggle-subscriptions:" + e + ":" + i + ":failure")
                        }
                    }
                }
            }], [{
                key: "sendTweetMetric",
                value: function(e) {
                    var t = e.payload.track,
                        i = "TweetSubscriptionEvent" === d.default.get(t, "__typename"),
                        s = d.default.get(t, "tweet.rest_id");
                    if (i && s) {
                        var n = e.feed.getType();
                        TD.util.metric("api:content:tweet:" + n)
                    }
                }
            }]), e
        }();
    t.default = C
}, function(e, t) {
    e.exports = {
        queryId: "dulg02mS_QVPdNiq24rKgg"
    }
}, function(e, t, i) {
    "use strict";
    var s = a(i(1)),
        n = a(i(0)),
        r = a(i(17));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.controller.notifications = function() {
        var e, t = 500,
            i = {},
            a = [],
            o = {},
            c = !1,
            l = window.Notification,
            u = !1,
            d = "growl",
            h = "w3c";

        function m() {
            (e = null, c && (document.getElementById("update-sound").play(), c = !1), a.length && u) && ((u === d ? a.slice(0, 5) : a).forEach(function(e) {
                var t;
                switch (u) {
                    case d:
                        deck.doGrowl(e.title, e.text, e.img, e.chirpID, e.columnKey);
                        break;
                    case h:
                        (t = new l(e.title, {
                            body: e.text,
                            icon: e.img
                        })).onclose = i.reset, t.onshow = function() {
                            setTimeout(function() {
                                t.close()
                            }, 5e3)
                        }, t.onclick = function() {
                            i.showDetailView(e.columnKey, e.chirpID), TD.util.isChromeApp() && chrome.extension.getBackgroundPage().TD.bg.utils.showTDTab(), window.focus()
                        }
                }
            }), i.reset(), a = [])
        }
        var f = function(e) {
                switch (e) {
                    case "privateMe":
                        return 5;
                    case "direct":
                        return 4;
                    case "me":
                        return 3;
                    case "mentions":
                        return 2;
                    case "home":
                        return 1;
                    case "search":
                        return -1;
                    default:
                        return 0
                }
            },
            p = function(e) {
                var t = !!TD.util.isWrapperApp() || i.isPermissionGranted();
                return t && (u = h, e && e("granted")), t
            };
        return i.init = function() {
            TD.util.isMacApp() ? u = d : l && p(), n.default.subscribe("/notifications/new", function(i) {
                var n = i.column,
                    l = i.items;
                if (0 !== (l = l.filter(function(e) {
                        return e.passFilters(n.filters) && !e.isOwnChirp()
                    })).length) {
                    var d = [];
                    if (n.model.getHasNotification() && u)
                        for (var h = 0; h < l.length; h++) {
                            var p = l[h],
                                g = o[p.id];
                            if (g) f(n.type) > f(g.columnType) && (g.columnKey = n.model.getKey(), g.columnTitle = r.default.getColumnTitleHTML(n), g.columnType = n.model.getType(), g.accountKey = p.account.getKey());
                            else {
                                var v = {
                                        chirpID: p.messageThreadId || p.id,
                                        accountKey: p.account.getKey(),
                                        columnKey: n.model.getKey(),
                                        columnTitle: r.default.getColumnTitleHTML(n),
                                        columnType: n.model.getType()
                                    },
                                    T = p.getNotificationData();
                                if (!T) continue;
                                T.img = T.img || TD.assets.get("logos", {
                                    name: "32"
                                }), s.default.extend(v, T), d.push(v), o[l[h].id] = v
                            }
                        }
                    c = c || n.model.getHasSound(), a = a.concat(d), !e && (a.length > 0 || c) && (e = setTimeout(m, t))
                }
            }.bind(this))
        }, i.hasNotifications = function() {
            return !!u || l && "denied" !== l.permission
        }, i.isPermissionGranted = function() {
            return !!u || l && "granted" === l.permission
        }, i.canPermissionBeRequested = function() {
            return l && "default" === l.permission
        }, i.getPermission = function(e) {
            p(e) || l.requestPermission(function(t) {
                "permission" in l || (l.permission = t), p(e)
            })
        }, i.showDetailView = function(e, t) {
            (0, n.default)(document).trigger("uiColumnFocus", {
                columnKey: e
            });
            var i = TD.controller.columnManager.get(e),
                s = i.findMostInterestingChirp(t);
            if (s) {
                var r = i.findChirp(t);
                TD.ui.updates.showDetailView(i, s, r)
            }
        }, i.reset = function() {
            o = {}, c = !1
        }, i
    }()
}, function(e, t, i) {
    "use strict";
    var s = r(i(47)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }

    function a(e) {
        this.SESSION_BUFFER_KEY = "ScribeTransport", this.SCRIBE_API_ENDPOINT = "/i/jot", this.options = {}, e && (this.updateOptions(e), this.registerEventHandlers(e))
    }
    e.exports = a, a.prototype = {
        flush: function(e, t) {
            if (e && e.length) {
                if (void 0 === t && (t = !!this.options.sync), this.options.useAjax) {
                    var i = {
                        url: this.options.url,
                        data: n.default.extend(this.ajaxParams(e), this.options.requestParameters),
                        type: "POST",
                        dataType: "json",
                        async: !t,
                        headers: {
                            "X-Twitter-Polling": !0
                        }
                    };
                    this.options.debug && (this.options.debugHandler && (i.success = this.options.debugHandler), i.data.debug = "1"), n.default.ajax(i)
                } else {
                    var s = this.options.debug ? "&debug=1" : "";
                    (new Image).src = this.options.url + "?q=" + (+new Date).toString().slice(-4) + s + "&" + this.imageParams(e)
                }
                this.reset()
            }
        },
        ajaxParams: function(e) {
            if ("string" == typeof e) return {
                log: "[" + e + "]"
            };
            var t = this.options.encodeParameters;
            return t && "function" == typeof t ? t.apply(this, arguments) : {
                log: (0, s.default)(e)
            }
        },
        imageParams: function(e) {
            if ("string" == typeof e) return "log=%5B" + e + "%5D";
            var t = this.options.encodeParameters;
            return t && "function" == typeof t ? t.apply(this, arguments) : "log=" + encodeURIComponent((0, s.default)(e))
        },
        reset: function() {
            this.options.bufferEvents && (this.skipUnloadFlush = !1, sessionStorage.removeItem(this.options.bufferKey))
        },
        getBuffer: function() {
            return sessionStorage.getItem(this.options.bufferKey) || ""
        },
        logWithStorageException: function(e, t) {
            var i = {
                category: "client_scribe_storage_error",
                error: e.message,
                url: document.location.href,
                product_name: "swift",
                event_name: "storage_quota_exceeded",
                type: "js_error"
            };
            this.addCategoryField(i, i.category), this.flush(this.appendData(t, this.encodeEventData(i)))
        },
        storeData: function(e, t) {
            try {
                sessionStorage.setItem(e, t)
            } catch (e) {
                if ("QuotaExceededError" !== e.name && "QuotaExceededError" !== e.message && "NS_ERROR_DOM_QUOTA_REACHED" !== e.name && "QUOTA_EXCEEDED_ERR" !== e.name && -2147024882 !== e.number) throw e;
                this.logWithStorageException(e, t)
            }
        },
        encodeEventData: function(e) {
            var t = (0, s.default)(e);
            return this.options.useAjax || (t = encodeURIComponent(t)), t
        },
        appendData: function(e, t) {
            return e + (e ? this.SEPARATOR + t : t)
        },
        addToBuffer: function(e) {
            var t = this.getBuffer(),
                i = this.encodeEventData(e),
                s = this.appendData(t, i);
            this.options.bufferSize && this.fullBuffer(s) ? this.options.useAjax ? this.flush(s) : (this.flush(t), this.storeData(this.options.bufferKey, i)) : this.storeData(this.options.bufferKey, s)
        },
        addCategoryField: function(e, t) {
            e._category_ = t
        },
        send: function(e, t, i) {
            !t || !e || this.options.bufferSize < 0 || (this.addCategoryField(e, t), !i && this.options.bufferEvents && this.options.bufferSize ? this.addToBuffer(e) : this.flush([e], i), this.options.debug && (0, n.default)(document).trigger("scribedata." + this.options.bufferKey, e), this.options.metrics && "debug" != e.event_info && (0, n.default)(document).trigger("debugscribe", e))
        },
        fullBuffer: function(e) {
            return e.length >= (this.options.useAjax ? 2083 * this.options.bufferSize : 2050 - this.options.url.length)
        },
        updateOptions: function(e) {
            if (this.options = n.default.extend({}, this.options, e), this.options.requestParameters || (this.options.requestParameters = {}), void 0 === this.options.flushOnUnload && (this.options.flushOnUnload = !0), this.options.bufferKey || (this.options.bufferKey = this.SESSION_BUFFER_KEY), 0 === this.options.bufferSize && (this.options.bufferEvents = !1), void 0 === this.options.useAjax && (this.options.useAjax = !0), this.options.bufferEvents || void 0 == this.options.bufferEvents) try {
                sessionStorage.setItem(this.SESSION_BUFFER_KEY + ".init", "test");
                var t = "test" == sessionStorage.getItem(this.SESSION_BUFFER_KEY + ".init");
                sessionStorage.removeItem(this.SESSION_BUFFER_KEY + ".init"), this.options.bufferEvents = t
            } catch (e) {
                this.options.bufferEvents = !1
            }
            if (this.options.debug && !this.options.debugHandler) {
                var i = this;
                this.options.debugHandler = e.debugHandler || function(e) {
                    (0, n.default)(document).trigger("handlescribe." + i.options.bufferKey, e)
                }
            }
            var s = "https:" === window.location.protocol ? "https:" : "http:";
            void 0 === this.options.url ? this.options.useAjax ? this.options.url = this.SCRIBE_API_ENDPOINT : this.options.url = "https://twitter.com" + this.SCRIBE_API_ENDPOINT : this.options.url = this.options.url.replace(/^[a-z]+:/g, s).replace(/\/$/, ""), this.options.bufferEvents && void 0 === this.options.bufferSize && (this.options.bufferSize = 20)
        },
        appHost: function() {
            return window.location.host
        },
        registerEventHandlers: function() {
            var e = this,
                t = (0, n.default)(document);
            if (this.options.bufferEvents && (t.on("flushscribe." + e.options.bufferKey, function(t) {
                    e.flush(e.getBuffer(), !0)
                }), this.options.flushOnUnload)) {
                var i = function(t) {
                    e.skipUnloadFlush = !t || !t.match(/http/) || !!t.match(new RegExp("^https?://" + e.appHost(), "gi")), e.skipUnloadFlush && window.setTimeout(function() {
                        e.skipUnloadFlush = !1
                    }, 3e3)
                };
                t.on("mouseup." + this.options.bufferKey, "a", function(e) {
                    this.getAttribute("target") || e.button || e.metaKey || e.shiftKey || e.altKey || e.ctrlKey || i(this.getAttribute("href"))
                }), t.on("submit." + this.options.bufferKey, "form", function(e) {
                    i(this.getAttribute("action"))
                }), t.on("uiNavigate." + this.options.bufferKey, function(e, t) {
                    i(t.url)
                }), (0, n.default)(window).on("unload." + this.options.bufferKey, function() {
                    e.skipUnloadFlush || e.flush(e.getBuffer(), !0), e.skipUnloadFlush = !1
                })
            }
            this.SEPARATOR = this.options.useAjax ? "," : encodeURIComponent(",")
        },
        destroy: function() {
            this.flush(this.getBuffer()), (0, n.default)(document).off("flushscribe." + this.options.bufferKey), (0, n.default)(window).off("unload." + this.options.bufferKey), (0, n.default)(document).off("mouseup." + this.options.bufferKey), (0, n.default)(document).off("submit." + this.options.bufferKey), (0, n.default)(document).off("uiNavigate." + this.options.bufferKey)
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = a(i(47)),
        n = a(i(118)),
        r = a(i(0));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = function(e) {
        this.scribeContext = {}, this.scribeData = {}, this.scribe = function(t, i) {
            var a = e || window.scribeTransport;
            if (!a) throw new Error("You must create a global scribeTransport variable or pass one into this constructor.");
            if (!t || "object" != (void 0 === t ? "undefined" : (0, n.default)(t)) || i && "object" != (void 0 === i ? "undefined" : (0, n.default)(i))) throw new Error("Invalid terms or data hash argument when calling ClientEvent.scribe().");
            if (this.scribeContext) {
                var o = "function" == typeof this.scribeContext ? this.scribeContext() : this.scribeContext;
                t = r.default.extend({}, o, t)
            }
            for (var c in t) t[c] = t[c] && ("" + t[c]).toLowerCase().replace(/_?[^a-z0-9_]+_?/g, "_");
            if (a.options.debug && r.default.each(["client", "action"], function(e, i) {
                    if (!t[i]) throw new Error("You must specify a " + i + " term in your client_event.")
                }), i = r.default.extend({}, i), this.scribeData) {
                var l = "function" == typeof this.scribeData ? this.scribeData() : this.scribeData;
                i = r.default.extend({}, l, i)
            }
            i.event_namespace = t, i.triggered_on = i.triggered_on || +new Date, i.format_version = i.format_version || 2, void 0 !== i.custom_json_payload && (i.custom_json_payload = (0, s.default)(i.custom_json_payload)), a.send(i, "client_event")
        }
    }
}, function(e, t, i) {
    "use strict";
    var s, n, r, a, o = i(1),
        c = (s = o) && s.__esModule ? s : {
            default: s
        };
    TD.controller.filterManager = (r = [], a = function() {
        var e = [];
        c.default.each(r, function(t) {
            e.push(t.toBackendState())
        }), TD.settings.setGlobalFilter(e)
    }, (n = {}).init = function() {
        var e = TD.settings.getGlobalFilter();
        c.default.each(e, function(e) {
            var t = new TD.vo.Filter;
            t.fromBackendState(e), r.push(t)
        }), n.reapplyAllFilters()
    }, n.reapplyAllFilters = function() {
        c.default.each(TD.controller.columnManager.getAll(), function(e) {
            e.reapplyFilters()
        })
    }, n.pass = function(e, t) {
        var i, s;
        for (i = 0, s = r.length; i < s; i++)
            if (!r[i].pass(e)) return !1;
        if (t)
            for (i = 0, s = t.length; i < s; i++)
                if (!t[i].pass(e)) return !1;
        return !0
    }, n.getAll = function(e, t) {
        return r
    }, n.addFilter = function(e, t, i) {
        var s = new TD.vo.Filter(e, t, Boolean(i));
        return r.push(s), n.reapplyAllFilters(), a(), s
    }, n.validateFilter = function(e, t) {
        return !(!e || !t || 0 == c.default.trim(t).length || c.default.any(r, function(i) {
            return i.type === e && i.value === t
        }))
    }, n.removeFilter = function(e) {
        var t = null;
        r.forEach(function(i, s) {
            e.id ? i.id === e.id && (t = s) : e.type && e.text && i.type === e.type && i.value === e.text && (t = s)
        }), null !== t && (r.splice(t, 1), n.reapplyAllFilters(), a())
    }, n.hasFilterApplied = function(e, t) {
        return r.some(function(i) {
            return i.type === e && i.value === t
        })
    }, n)
}, function(e, t, i) {
    "use strict";
    var s = o(i(32)),
        n = o(i(1)),
        r = o(i(0)),
        a = o(i(29));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = new function() {
        var e = {},
            t = new a.default.BehaviorSubject(null),
            i = sessionStorage.getItem("sessionDeciderOverlay");
        i && (console.warn("sessionDeciderOverlay found in sessionStorage"), TD.config.decider_overlay = n.default.extend(TD.config.decider_overlay || {}, JSON.parse(i) || {})), this.accessLevels = {
            scheduler: {
                levels: [{
                    level: "READ_BACKGROUND",
                    deciderKey: "scheduler_read_background"
                }, {
                    level: "READ_VISIBLE",
                    deciderKey: "scheduler_read_visible"
                }, {
                    level: "WRITE",
                    deciderKey: "scheduler_write"
                }, {
                    level: "WRITE_MEDIA",
                    deciderKey: "scheduler_write_media"
                }]
            },
            mediaUpload: {
                levels: [{
                    level: "USE_SRU",
                    deciderKey: "upload_use_sru"
                }, {
                    level: "BIG_GIFS",
                    deciderKey: "upload_big_gifs"
                }]
            }
        }, this.updateForGuestId = function() {
            return this.updateFromBackendForID(TD.storage.store.getOrCreateGuestID())
        }, this.updateFromBackendForID = function(e) {
            var t = TD.sync.tdapi.getDecider(e);
            return t.addCallbackWith(this, function(e) {
                this.updateFromBackend(e.decider)
            }), t
        }, this.updateFromBackend = function(i) {
            e = i || {}, (0, r.default)(document).trigger("dataDeciderUpdated"), t.next(this.getAllWithOverlay())
        }, this.get = function(t) {
            return TD.config.decider_overlay && void 0 !== TD.config.decider_overlay[t] ? TD.config.decider_overlay[t] : e[t]
        }, this.getAll = function() {
            return n.default.clone(e)
        }, this.getAllWithOverlay = function() {
            return [].concat((0, s.default)(TD.config.decider_overlay || {})).reduce(function(e, t) {
                return e[t] = this.get(t), e
            }.bind(this), this.getAll())
        }, this.hasAccessLevel = function(e, t) {
            var i = this.accessLevels[e];
            return !(i.opts && i.opts.gateFunction && !i.opts.gateFunction()) && i.levels.reduce(function(e, i) {
                var s = i.level === t,
                    n = i.deciderKey;
                !n && i.deciderKeyByEnv && (n = i.deciderKeyByEnv[TD.util.getAppEnv()] || i.deciderKeyByEnv.default);
                var r = e.canAccessPreviousLevel && !!this.get(n);
                return {
                    canAccessPreviousLevel: r,
                    canAccessDesiredLevel: s ? r : e.canAccessDesiredLevel
                }
            }.bind(this), {
                canAccessPreviousLevel: !0,
                canAccessDesiredLevel: !1
            }).canAccessDesiredLevel
        }, this.getStreamForDeciderKey = function(e) {
            return e ? a.default.Observable.create(function(i) {
                var s = t.filter(Boolean).map(function(t) {
                    return t[e]
                }).distinctUntilChanged().subscribe(i);
                return function() {
                    s.unsubscribe()
                }
            }) : a.default.Observable.empty()
        }
    }
}, function(e, t, i) {
    "use strict";

    function s() {
        this.data = {}, this.length = 0
    }
    s.prototype.clear = function() {
        this.data = {}, this.length = 0
    }, s.prototype.getItem = function(e) {
        var t = this.data[e];
        return void 0 !== t ? t : null
    }, s.prototype.key = function(e) {
        throw new Error("MemoryStore.key not implemented.")
    }, s.prototype.removeItem = function(e) {
        null !== this.getItem(e) && (delete this.data[e], this.length--)
    }, s.prototype.setItem = function(e, t) {
        null === this.getItem(e) && this.length++, this.data[e] = "" + t
    }, e.exports = s
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = {
        CURRENT_VERSION: 5,
        getVersion: function(e) {
            var t = e.getItem("__version__");
            return null === t ? a.guessVersion(e) : Number(t)
        },
        guessVersion: function(e) {
            var t = e.getItem("settings"),
                i = e.getItem("clients"),
                s = e.getItem("columns");
            if (i && !t && (i = JSON.parse(i), !r.default.isEmpty(i) && "ΔQ" in r.default.values(i)[0])) return 2;
            return !i && t && s ? 0 : 4
        },
        doUpgrade: function(e) {
            var t = a.getVersion(e._backend);
            (!t || t < 4) && a._upgradeAllToV4(e), (t = a.getVersion(e._backend)) < 5 && a._upgradeV4ToV5(e), e.setVersion(this.CURRENT_VERSION)
        },
        _upgradeAllToV4: function(e) {
            console.log("Upgrading store to v4"), e.constructor.flushDataFromStore(e._backend, e.constructor.PERSISTENT_SESSION_ITEMS), e.setVersion(4)
        },
        _upgradeV4ToV5: function(e) {
            window.sessionStorage && sessionStorage.removeItem("migrate");
            var t = e._backend;
            "tweetdeck" === t.getItem("currentAuthType") && (t.removeItem("currentAuthType"), t.removeItem("tweetdeckAccount"), t.removeItem("_session")), e.setVersion(5)
        }
    };
    e.exports = a
}, function(e, t, i) {
    "use strict";
    var s, n, r, a, o = i(1),
        c = (s = o) && s.__esModule ? s : {
            default: s
        };
    TD.sync.trace = (n = TD.sync.util, a = [], (r = {}).record = function() {
        var e = (new Date).toLocaleTimeString();
        a.push([e].concat(c.default.toArray(arguments))), TD.config.debug_trace && n.stateLog.apply(null, ["-------- TRACE: " + e].concat(c.default.toArray(arguments))), TD.config.debug_menu || a.length > 200 && a.splice(0, 100)
    }, r.request = function(e, t, i) {
        r.record("request", e, i.type, t, c.default.clone(i))
    }, r.response = function(e, t, i, s) {
        r.record("response", e, t, c.default.clone(i), c.default.clone(s))
    }, r.objInit = function(e, t, i) {
        r.record("obj init", e, c.default.clone(t), c.default.clone(i))
    }, r.manage = function(e, t) {
        r.record("manage", e, t, n.clone(t.getStateForLocalstorage()))
    }, r.update = function(e, t, i) {
        r.record("update", e, t, c.default.clone(i))
    }, r.push = function(e, t, i, s) {
        r.record("push", e, t, c.default.clone(i), n.clone(s))
    }, r.tsResults = function(e, t, i, s, n, a) {
        r.record("t+s results", e, c.default.clone(t), c.default.clone(i), c.default.clone(s), c.default.clone(n), a)
    }, r.tsResult = function(e, t, i, s, n, a) {
        r.record("t+s result", e, c.default.clone(t), c.default.clone(i), s, c.default.clone(n), a)
    }, r.conflicts = function(e, t, i, s, n) {
        r.record("conflicts", e, c.default.clone(t), c.default.clone(i), c.default.clone(s), n)
    }, r.conflict = function(e, t, i, s, n) {
        r.record("conflict", e, c.default.clone(t), c.default.clone(i), c.default.clone(s), n)
    }, r.assert = function(e, t) {
        r.record("ASSERT", e, t, n.getStack())
    }, r.clear = function() {
        a = []
    }, r.logDump = function() {
        var e = "-------------------------------------------------------------";
        console.log(e + " TRACE dump " + e), c.default.each(a, function(e) {
            console.log(e)
        }), console.log(e + "  END dump  " + e)
    }, r.logSummarise = function() {
        var e = "-------------------------------------------------------------";
        console.log(e + " TRACE dump " + e);
        var t = n.list_to_set(["obj init", "update"]);
        c.default.each(a, function(e) {
            t[e[1]] || console.log(e)
        }), console.log(e + "  END dump  " + e)
    }, r)
}, function(e, t, i) {
    "use strict";
    var s = a(i(47)),
        n = a(i(0)),
        r = a(i(1));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.sync.tdapi = function(e, t, i, a) {
        var o = {},
            c = null;
        o.getDecider = function(e) {
            var t = "/decider?identifier=" + e;
            return o.drequest(t, {
                type: "GET"
            }, {})
        }, o.importSetup = function(e, t) {
            return o.requestWithBody("/import", "POST", {
                from_username: e,
                passhash: t
            })
        }, o.importPreview = function(e, t) {
            return o.drequest("/import/preview", {
                type: "POST",
                headers: {},
                data: (0, s.default)({
                    from_username: e,
                    passhash: t
                }),
                contentType: "application/json"
            })
        }, o.onAuthFail = function(e, t) {
            c = e
        }, o.Conflict = function(e) {
            this.body = e
        };
        var l = new RegExp("^([^:]*): (.*)$"),
            u = function(e, t) {
                r.default.isUndefined(t) && (t = {});
                var i = e.getAllResponseHeaders(),
                    s = i.split("\r\n");
                return 1 == s.length && (s = i.split("\n")), r.default.each(s, function(e) {
                    var i = e.match(l);
                    i && (t[i[1].toLowerCase()] = i[2])
                }), t
            };
        return o.drequest = function(s, a, l, d) {
            var h = r.default.uniqueId(a && a.reqid ? "[" + a.reqid + "]rq:" : "rq:");
            if (e.stateLog("drequest", h, s, a), (null === a || r.default.isUndefined(a)) && (a = o.getReq()), i.request(h, s, a), "/" == s.charAt(0) && (s = TD.config.api_root + s), !r.default.startsWith(s, "http://") && !r.default.startsWith(s, "https://")) return t.fail(new Error("Malformed url"));
            a.headers = r.default.defaults(a.headers || {}, {
                "X-Twitter-Client-Version": TD.util.getTweetDeckUserAgentString()
            });
            var m = function(i, s) {
                var r = n.default.ajax(i, s),
                    a = new t.Deferred;
                return r.done(function(e, t, i) {
                    a.callback(i)
                }), r.fail(function(i, s, n) {
                    409 === i.status ? (e.assert("Conflict" === n, "409 should be Conflict"), a.callback(i)) : a.errback(new t.XMLHttpRequestError(i, n))
                }), a
            }(s, a);
            m.reqid = h;
            m.addErrback(function(e) {
                var t = e.req;
                if (401 !== t.status || d) throw e;
                if ("X-TD-Session" !== u(t)["www-authenticate"]) throw e;
                throw c && c(), e
            });
            return m.addCallback(function(t, n) {
                var c, d = function(t) {
                    if ("" === t) return t;
                    try {
                        return JSON.parse(t)
                    } catch (i) {
                        return r.default.isEmpty(t) || e.warn(["failed to json parse drequest response;", t, "for request", s, a]), t
                    }
                };
                return c = 409 === t.status ? new o.Conflict(d(t.responseText)) : d(t.responseText), l && u(t, l), l && l.date && TD.storage.notification.notify("/date", l.date), e.stateLog("drequest ret", h, s, c, t.getAllResponseHeaders().split("\n")), i.response(h, s, c, l), c
            }, h), m
        }, o.requestWithBody = function(e, t, i, n, r, a, c) {
            var l = o.getReq({
                type: t,
                reqid: a,
                headers: r || {},
                data: (0, s.default)(i),
                contentType: "application/json"
            });
            return o.drequest(e, l, n, c)
        }, o.getReq = function(e) {
            var t = {
                type: "GET",
                headers: {}
            };
            for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
            return e && e.method && (t.type = e.method), t
        }, o
    }(TD.sync.util, TD.core.defer, TD.sync.trace, TD.core.base64)
}, function(e, t, i) {
    "use strict";
    var s, n, r, a = l(i(0)),
        o = l(i(1)),
        c = l(i(154));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.storage.notification = (n = [], r = function() {
        var e = n.splice(0, n.length);
        o.default.each(e, function(e) {
            if (e.topic) try {
                a.default.publish(e.topic, e.args)
            } catch (t) {
                console.log("FAILURE publishing event", e, t)
            } else e.d && e.d.callback()
        })
    }, (s = {}).notify = function(e) {
        var t = Array.prototype.slice.call(arguments, 1);
        n.push({
            topic: e,
            args: t
        }), o.default.defer(r)
    }, s.flush = function() {
        var e = new c.default.Deferred;
        return n.push({
            d: e
        }), o.default.defer(r), e
    }, s)
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.storage.StoredObj = function(e, t, i, s, n, a, o) {
        function c(e) {
            this.controller = e
        }
        return c.prototype.controller = null, c.prototype.managed = !1, c.prototype.stateCache = null, c.prototype.state = null, c.prototype.privateState = null, c.prototype.eventname = "/storage/object", c.prototype._init = function(i) {
            i || (i = {}), o.objInit(this, i), this.state = {}, this.privateState = {}, r.default.isEmpty(i) ? (this.deltaQ = [], this.stateCache = null) : (this.deltaQ = [new e.StoredDelta("init", i)], this.stateCache = r.default.clone(i)), t.verboseLog("StoredObj.init", this, i, this.deltaQ)
        }, c.prototype.getApiid = function() {
            var e = this.getPrivate("apiid");
            return t.assert(e, "missing apiid", this), e
        }, c.prototype.hasApiid = function() {
            return Boolean(this.getPrivate("apiid"))
        }, c.prototype.setApiid = function(e) {
            return o.update("set apiid", this, [e]), this.setPrivate("apiid", e)
        }, c.prototype.getKey = function() {
            return this.getPrivate("key")
        }, c.prototype.setKey = function(e) {
            return this.setPrivate("key", e)
        }, c.prototype._prepCache = function() {
            return null === this.stateCache && (t.assert(0 === this.deltaQ.length, "empty stateCache must coincide with empty ΔQ"), this.stateCache = r.default.clone(this.state)), this.stateCache
        }, c.prototype.set = function(i, s) {
            return o.update("set", this, [i, s]), t.assert("columns" !== i, "you should be setting column_order, not columns"), this._prepCache(), this.deltaQ.push(new e.StoredDelta("set", i, s)), this.stateCache[i] = s, a.notify(this.eventname + "/change", this), this.controller.triggerPush()
        }, c.prototype.setListPermutation = function(i, s) {
            TD.config.debug_checks && this.checkCache();
            var c = this.get(i);
            if (r.default.isEqual(s, c)) return o.update("set null list permutation", this, [i, c, s]), t.stateLog("ignoring request to change list at", i), n.succeed();
            o.update("set list permutation", this, [i, c, s]);
            var l = e.StoredDelta.listPermutator(i, c, s);
            return t.verboseLog("set list permutation", c, "→", s, "Δs:", l), this.deltaQ = this.deltaQ.concat(l), this.stateCache = e.StoredDelta.applyMultiple(this.deltaQ, this.state), TD.config.debug_checks && this.checkCache(), a.notify(this.eventname + "/change", this), this.controller.triggerPush()
        }, c.prototype.listPrepend = function(t, i) {
            o.update("list prepend", this, [t, i]);
            var s = this.get(t);
            return s || (s = []), this._prepCache(), this.deltaQ.push(new e.StoredDelta("linsert", t, i, 0)), this.stateCache[t] = [i].concat(s), a.notify(this.eventname + "/change", this), this.controller.triggerPush()
        }, c.prototype.listAppend = function(t, i) {
            o.update("list append", this, [t, i]);
            var s = this.get(t);
            return s || (s = []), this._prepCache(), this.deltaQ.push(new e.StoredDelta("linsert", t, i, s.length)), this.stateCache[t] = s.concat([i]), a.notify(this.eventname + "/change", this), this.controller.triggerPush()
        }, c.prototype.listAdd = function(i, s) {
            var c = this.get(i);
            c || (c = []);
            var l = new e.StoredDelta("ladd", i, s, c.length),
                u = l.applyToValue(i, c);
            return r.default.isEqual(u, c) ? (o.update("set null list add", this, [i, c, u]), t.stateLog("ignoring request to add to list at", i), n.succeed()) : (o.update("list add", this, [i, s]), this._prepCache(), this.deltaQ.push(l), this.stateCache[i] = u, a.notify(this.eventname + "/change", this), this.controller.triggerPush())
        }, c.prototype.listTruncate = function(t, i) {
            o.update("list truncate", this, [t, i]);
            var s = this.get(t);
            return s || (s = []), this._prepCache(), this.deltaQ.push(new e.StoredDelta("ltrunc", t, i)), s.length > i && s.splice(i, s.length - i), this.stateCache[t] = s, a.notify(this.eventname + "/change", this), this.controller.triggerPush()
        }, c.prototype.listRemove = function(t, i) {
            o.update("list remove", this, [t, i]);
            var s = this.get(t) || [];
            return this._prepCache(), this.deltaQ.push(new e.StoredDelta("ldel", t, i)), this.stateCache[t] = r.default.without(s, i), a.notify(this.eventname + "/change", this), this.controller.triggerPush()
        }, c.prototype.listDedupe = function(t) {
            o.update("list dedupe", this, [t]);
            var i = this.get(t) || [];
            this._prepCache();
            var s = new e.StoredDelta("ldedupe", t);
            return this.deltaQ.push(s), this.stateCache[t] = s.applyToValue(t, i), a.notify(this.eventname + "/change", this), this.controller.triggerPush()
        }, c.prototype.dictSet = function(t, i, s) {
            o.update("dict set", this, [t, i, s]), this._prepCache();
            var n = r.default.clone(this.get(t));
            return this.deltaQ.push(new e.StoredDelta("hset", t, i, s)), n || (n = {}), n[i] = s, this.stateCache[t] = n, a.notify(this.eventname + "/change", this), this.controller.triggerPush()
        }, c.prototype.setPrivate = function(e, t) {
            var i = this.privateState[e];
            return this.privateState[e] = t, i !== t && a.notify(this.eventname + "/change", this), n.succeed()
        }, c.prototype.getPrivate = function(e) {
            return this.privateState[e]
        }, c.prototype.immutableSet = function(e, i) {
            var s = this.state[e];
            if (i != s) throw t.warn("ERROR: attempt to change", e, "of", this, "from", s, "to", i), new Error("attempt to modify immutable field " + e);
            return n.succeed()
        }, c.prototype.setValueIffDifferent = function(e, i, s, o) {
            var c = this.get(e);
            return r.default.isEqual(c, i) ? n.succeed(null) : (t.verboseLog(this, "setValueIffDifferent", e, "from", c, "to", i), s && a.notify(s, i, c, this), o && o(i, c), a.notify(this.eventname + "/change", this), this.set(e, i))
        }, c.prototype.get = function(e) {
            return null === this.stateCache ? this.state[e] : this.stateCache[e]
        }, c.prototype.latestDelta = function() {
            return r.default.isEmpty(this.deltaQ) ? null : this.deltaQ[this.deltaQ.length - 1].id
        }, c.prototype.getStateForBackend = function() {
            TD.config.debug_checks && (t.precondition(this.isDirty(), "don't call getStateForBackend unless isDirty"), this.checkCache());
            var e = r.default.clone(null !== this.stateCache ? this.stateCache : this.state);
            return !e.mtime && this.state.mtime && (e.mtime = this.state.mtime), {
                "Δid": this.latestDelta(),
                state: this.transformForRemote(e, this.privateState)
            }
        }, c.prototype.postProcessNewRemoteState = function() {}, c.prototype.newRemoteState = function(i) {
            o.update("new remote state", this, i), TD.config.debug_checks && (t.stateLog("checking cache"), this.checkCache()), t.verboseLog("transforming to local:", this, t.clone(i)), this.state = this.transformToLocal(i), 0 !== this.deltaQ.length ? (t.assert(null !== this.stateCache, "if we have Δs, we should have cache"), t.verboseLog("applying pending deltas", this, t.clone(this.deltaQ)), this.stateCache = e.StoredDelta.applyMultiple(this.deltaQ, this.state)) : t.assert(null === this.stateCache, "if no Δs, should have no cache"), this.postProcessNewRemoteState(), TD.config.debug_checks && (t.stateLog("checking cache"), this.checkCache()), a.notify(this.eventname + "/change", this)
        }, c.prototype.commit = function(i, s) {
            o.update("commit", this, [i + " : " + s]);
            var n = r.default.pluck(this.deltaQ, "id").indexOf(i);
            if (-1 === n) throw t.stateLog("asked to commit " + i + " but it doesn't exist in " + r.default.map(this.deltaQ, function(e) {
                return e.toString()
            })), new Error("invalid deltaId supplied");
            if (TD.config.debug_checks && this.checkCache(), n === this.deltaQ.length - 1) this.deltaQ = [], this.state = r.default.clone(this.stateCache), this.state.mtime = s, this.stateCache = null, TD.config.debug_checks && this.checkCache();
            else {
                var a = this.deltaQ.splice(0, n + 1),
                    c = e.StoredDelta.applyMultiple(a, this.state);
                this.state = c, this.state.mtime = s, this.stateCache.mtime = s, TD.config.debug_checks && this.checkCache(), this.controller.triggerPush()
            }
        }, c.prototype.checkCache = function() {
            var i = e.StoredDelta.checkStateCache(this.state, this.deltaQ, this.stateCache);
            t.assert(i, "cache != state+Δs")
        }, c.prototype.checkInvariants = function() {
            this.hasApiid() || t.assert(r.default.isEmpty(this.state), 'must have no "state" if no apiid'), t.assert(this.state && r.default.isUndefined(this.state.apiid), "apiid in non-priv state, bad"), this.isDirty() ? (t.assert(!r.default.isEmpty(this.deltaQ), "deltaQ must be non-empty if dirty"), t.assert(null !== this.stateCache, "cache must be present if dirty"), this.checkCache(), this.hasApiid() && t.assert(null !== this.latestDelta(), "latestDelta() must not return null for Δid for dirty object")) : (t.assert(r.default.isEmpty(this.deltaQ), "deltaQ must be empty if not dirty"), t.assert(null === this.stateCache, "cache must be absent if not dirty"))
        }, c.prototype.isDirty = function() {
            return this.hasApiid() ? 0 !== this.deltaQ.length : (t.assert(0 !== this.deltaQ.length, "should be dirty if no apiid"), !0)
        }, c
    }(TD.storage, TD.sync.util, TD.sync.tdapi, TD.util, TD.core.defer, TD.storage.notification, TD.sync.trace)
}, function(e, t, i) {
    "use strict";
    var s = r(i(47)),
        n = r(i(1));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.storage.StoredDelta = function(e, t, i, r, a) {
        function o(t) {
            this.type = t, e.assert(u[t] && c, "unknown type " + t), this.args = n.default.toArray(arguments).slice(1), this.id = "Δ" + (new Date).getTime() + n.default.uniqueId(":"), l(t, this.args), "init" === t && (e.verboseLog("initialisation delta", this.id, this.args[0]), "mtime" in this.args[0] && (e.warn("WARNING init Δ contains mtime!", e.clone(this.args[0])), e._break()))
        }
        var c = {
                init: 1,
                set: 2,
                del: 1,
                lmove: 3,
                ldel: 2,
                linsert: 3,
                ladd: 3,
                ltrunc: 2,
                ldedupe: 1,
                hset: 3,
                other: 0
            },
            l = function(t, i) {
                var s = c[t];
                switch (e.assert(i.length === s, "wrong no. args for " + t + ", expected " + s + " got " + i.length), t) {
                    case "ltrunc":
                        e.assert("number" == typeof i[1], "ltrunc: length must be number");
                        break;
                    case "linsert":
                    case "ladd":
                    case "ldel":
                    case "lmove":
                        e.assert("string" == typeof i[1], "list elements must be strings")
                }
            };
        o.prototype.toString = function() {
            return "StoredDelta[" + this.id + "](" + this.type + ": " + (0, s.default)(this.args) + ")"
        }, o.prototype.serialise = function() {
            return [this.type].concat(this.args)
        };
        var u = {
            init: function(t, i) {
                if (!n.default.isEqual(t, {})) {
                    var s = e.clone(t),
                        r = e.clone(i);
                    return delete s.mtime, delete r.mtime, n.default.isEqual(s, r) ? (e.warn("WARNING Δ init_state === state", e.clone(t), "init:", i.mtime, "state:", t.mtime), t) : void e.warn("WARNING discarding init_state", e.clone(i), "in favour of", e.clone(t))
                }
                return n.default.clone(i)
            },
            set: function(e, t, i) {
                return e[t] = i, e
            },
            del: function(e, t) {
                return delete e[t], e
            },
            lmove: function(e, t, i, s) {
                var r = n.default.clone(e[t]),
                    a = r.indexOf(i);
                if (-1 != a) return r.splice(a, 1), r.splice(a + s, 0, i), e[t] = r, e
            },
            ldel: function(e, t, i) {
                var s;
                return s = n.default.isUndefined(e[t]) ? [] : n.default.without(e[t], i), e[t] = s, e
            },
            linsert: function(e, t, i, s) {
                var r;
                return (r = n.default.isUndefined(e[t]) ? [] : n.default.clone(e[t])).splice(s, 0, i), e[t] = r, e
            },
            ladd: function(e, t, i, s) {
                return n.default.include(e[t], i) ? e : ((r = n.default.isUndefined(e[t]) ? [] : n.default.clone(e[t])).splice(s, 0, i), e[t] = r, e);
                var r
            },
            ltrunc: function(e, t, i) {
                var s;
                return (s = n.default.isUndefined(e[t]) ? [] : e[t]).length > i && s.splice(i, s.length - i), e[t] = s, e
            },
            ldedupe: function(e, t) {
                var i;
                return i = n.default.isUndefined(e[t]) ? [] : e[t], e[t] = n.default.uniq(i), e
            },
            hset: function(e, t, i, s) {
                var r = n.default.clone(e[t]);
                return r || (r = {}), r[i] = s, e[t] = r, e
            }
        };
        o.prototype.apply = function(t) {
            var i = n.default.clone(t),
                s = u[this.type].apply(this, [i].concat(this.args));
            return s || (e.warn("WARNING: unable to apply Δ", this.toString(), "to", e.clone(t)), n.default.clone(t))
        }, o.prototype.applyToValue = function(e, t) {
            var i = {};
            return i[e] = t, this.apply(i)[e]
        }, o.listPermutator = function(t, i, s) {
            var r = [],
                a = n.default.clone(i);
            if (e.verboseLog("StoredDelta.listPermutator", i, "→", s), i.length != n.default.union(i).length || s.length != n.default.union(s).length) throw e.stateLog("Duplicate error in listPermutator", {
                original: i,
                original_: n.default.union(i),
                target: s,
                targetu: n.default.union(s)
            }), new TypeError("lists must not contain duplicates");
            n.default.each(n.default.difference(i, s), function(e) {
                r.push(new o("ldel", t, e)), a.splice(a.indexOf(e), 1)
            });
            for (var c = 0; c < s.length; c++)
                if (a[c] != s[c]) {
                    var l = s[c],
                        u = a.indexOf(l); - 1 === u ? (r.push(new o("ladd", t, l, c)), a.splice(c, 0, l)) : (r.push(new o("lmove", t, l, c - u)), a.splice(u, 1), a.splice(c, 0, l))
                } return r
        }, o.applyMultiple = function(e, t) {
            return n.default.reduce(e, function(e, t) {
                return t.apply(e)
            }, t)
        };
        return o.deserialiseDeltas = function(e) {
            return n.default.map(e, function(e) {
                return function(e, t) {
                    function i() {
                        return e.apply(this, t)
                    }
                    return i.prototype = e.prototype, new i
                }(o, e)
            })
        }, o.checkStateCache = function(t, i, s) {
            if (null === s && 0 === i.length) return !0;
            var r = n.default.clone(s);
            delete r.mtime;
            var a = o.applyMultiple(i, n.default.clone(t));
            return delete a.mtime, !!n.default.isEqual(r, a) || (e.stateLog("cache", s, "!= goal", a, "for", t, "+", i), !1)
        }, o
    }(TD.sync.util, TD.sync.tdapi, TD.util, TD.core.defer, TD.storage.notification)
}, function(e, t, i) {
    "use strict";
    var s, n, r, a, o, c, l, u = i(1),
        d = (s = u) && s.__esModule ? s : {
            default: s
        };
    TD.storage.SobjController = (n = TD.storage, r = TD.sync.util, a = TD.sync.tdapi, TD.storage.notification, o = TD.core.defer, c = TD.sync.trace, (l = function() {
        this._objects = null, this._objectsByApiid = null, this.reqsinflight = null, this.apiEndpoint = null, this._moduleName = null
    }).prototype.toString = function() {
        return "<SobjController[" + (this._moduleName || "unknown") + "]>"
    }, l.prototype.triggerPush = function() {
        throw r.printStacktrace(), new Error("NotImplemented")
    }, l.prototype.bindTrigger = function(e) {
        var t = r.makeThingScheduler,
            i = n.store.getTwitterLoginAccountID.bind(n.store);
        this.triggerPush = t(d.default.bind(this.pushDirty, this), null, e, i)
    }, l.prototype.remove = function(e) {
        var t = this._objects[e];
        t && (t.managed = !1, t.hasApiid() && delete this._objectsByApiid[t.getApiid()]), delete this._objects[e]
    }, l.prototype.getAll = function() {
        return d.default.values(this._objects)
    }, l.prototype.getByApiid = function(e) {
        return r.assert(e, "must provide apiid; " + r.repr(e)), r.assert("undefined" != e, "huh? where did that come from?"), this._objectsByApiid[e]
    }, l.prototype.pushPreflight = function() {
        return o.succeed(null)
    }, l.prototype.pushDirty = function() {
        TD.config.debug_checks && this.checkInvariants();
        var e = d.default.uniqueId("pD:");
        c.push(this, "pushDirty", null, e);
        var t = this,
            i = this.pushPreflight();
        return i.addCallback(function() {
            var i = d.default.filter(t._objects, function(e) {
                return e.isDirty()
            });
            if (d.default.isEmpty(i)) return c.push(t, "(not dirty)", null, e), o.succeed();
            var s = t.pushObjects(i, e);
            return s.addCallback(function() {
                return t.pushDirty()
            }), s
        }), i
    }, l.prototype.prePushCheckInvariants = function(e) {}, l.prototype.pushObjects = function(e, t) {
        if (r.verboseLog(this.toString() + ".pushObjects()", this, e), t || (t = d.default.uniqueId("pO:")), c.push(this, "pushObjects", e, t), r.assert(this.apiEndpoint, "api endpoint must be set"), d.default.isEmpty(e)) return c.push(this, "(empty)", e, t), o.succeed([]);
        TD.config.debug_checks && this.prePushCheckInvariants(e);
        var i = d.default.map(e, function(e) {
                return e.getStateForBackend()
            }),
            s = d.default.pluck(i, "Δid"),
            n = d.default.pluck(i, "state");
        c.push(this, "objs+Δs", e, s, t), TD.config.debug_checks && (d.default.each(n, function(e) {
            r.assert(e.mtime || !e.id, "for a test and set request, we expect (require) either mtime (modify) or absence of id (create) for every object")
        }), d.default.isEmpty(this.reqsinflight) || (r.warn("WARNING! called pushObjects", e, "when already have requests in flight", r.clone(this.reqsinflight)), r._break()));
        var a = this.pushObjectsRequest(n, e, s, t);
        return a.addCallbackWith(this, function(e) {
            return this._processTSResults(e.responses, e.objects, e.deltaIds, e.respHeaders, e.pushid)
        }), a.addErrback(function(e) {
            return TD.util.metric("sync:sobj_controller:push_objects:error"), e
        }), a
    }, l.prototype.pushObjectsRequest = function(e, t, i, s) {
        var n = this;
        return TD.storage.store.getOrCreateTwitterLoginAccount().addCallback(function(t) {
            return TD.net.ajax.request(TD.config.twitter_api_base + "/1.1/tweetdeck" + n.apiEndpoint, {
                method: "POST",
                params: e,
                headers: {
                    "x-td-mtime-check": "partial",
                    "content-type": "application/json"
                },
                account: t
            })
        }).addCallback(function(e) {
            return {
                responses: e.data,
                objects: t,
                deltaIds: i,
                respHeaders: {
                    "x-td-mtime": e.xhr.getResponseHeader("x-td-mtime")
                },
                pushid: s
            }
        })
    }, l.prototype._processTSResults = function(e, t, i, s, n) {
        c.tsResults(this, e, t, i, s, n), e instanceof a.Conflict && (c.conflicts(this, e.body, t, s, n), e = e.body), r.assert(e.length == t.length, "wrong number of responses/objects!"), r.assert(e.length == i.length, "wrong number of responses/deltas!"), r.verboseLog("objects", t, "deltas", i), d.default.each(i, function(e) {
            r.assert(null !== e, "Δid must not be null")
        });
        var o, l = s["x-td-mtime"];
        r.assert(l, "require x-td-mtime header in object PUT");
        for (var u, h, m = this, f = 0; f < e.length; f++) o = e[f], d.default.isString(o) ? (r.verboseLog("_processTSResults", t[f], e[f]), u = t[f], h = e[f], r.verboseLog("_processTSResults:check_set_apiid", u, h), u.hasApiid() ? r.assert(u.getApiid() == h, "apiid mismatch") : (m._objectsByApiid[h] = u, u.setApiid(h)), t[f].commit(i[f], l)) : (c.conflict(this, o, t[f], s, n), r.verboseLog("_processTSResults: not an apiid:", o), t[f].newRemoteState(e[f]))
    }, l.prototype.pushObject = function(e, t) {
        r.verboseLog(this.toString() + ".pushObject()", this, e, t), c.push(this, "object", e);
        var i = e.getStateForBackend(),
            s = i["Δid"],
            n = i.state;
        r.assert(n.mtime, "for a test and set request, we expect (require) mtime");
        var a = this.pushObjectRequest(t, n, e, s);
        return a.addCallbackWith(this, function(e) {
            return this._processTSResult(e.response, e.object, e.deltaId, e.respHeaders)
        }), a.addErrback(function(e) {
            return TD.util.metric("sync:sobj_controller:push_object:error"), e
        }), a
    }, l.prototype.pushObjectRequest = function(e, t, i, s) {
        return TD.storage.store.getOrCreateTwitterLoginAccount().addCallback(function(i) {
            return TD.net.ajax.request(TD.config.twitter_api_base + "/1.1/tweetdeck" + e, {
                method: "POST",
                params: t,
                headers: {
                    "x-td-iff-mtime": t.mtime,
                    "content-type": "application/json"
                },
                account: i
            })
        }).addCallback(function(e) {
            return {
                response: e.data || "",
                object: i,
                deltaId: s,
                respHeaders: {
                    "x-td-mtime": e.xhr.getResponseHeader("x-td-mtime")
                }
            }
        })
    }, l.prototype._processTSResult = function(e, t, i, s) {
        var n;
        if (c.tsResult(this, e, t, i, s), r.verboseLog("object", t, "delta", i), r.assert(null !== i, "Δid must not be null"), e instanceof a.Conflict) r.verboseLog("_processTSResult: got a conflict:", e), n = t.newRemoteState(e.body);
        else {
            r.assert(d.default.isString(e), "don't know how to handle response");
            var o = s["x-td-mtime"];
            r.assert(o, "require x-td-mtime header in object PUT"), r.verboseLog("_processTSResult", t, e), n = t.commit(i, o)
        }
        return n
    }, l.prototype.checkInvariants = function() {
        var e = this;
        d.default.each(this._objects, function(t) {
            var i = t.checkInvariants;
            i && i.call(t), t.hasApiid() && r.assert(e._objectsByApiid[t.getApiid()], "all managed objects with apiid must be in _objectsByApiid")
        })
    }, l)
}, function(e, t, i) {
    "use strict";
    var s, n, r, a, o, c = i(1),
        l = (s = c) && s.__esModule ? s : {
            default: s
        };
    TD.storage.FeedController = (n = TD.storage, r = TD.sync.util, TD.sync.tdapi, a = TD.storage.notification, TD.core.defer, (o = function() {
        var e = this;
        this.apiEndpoint = "/feeds", this._moduleName = "feeds", this.reqsinflight = [], this.bindTrigger("feedctr"), e._objects = {}, e._objectsByApiid = {}, this.toString = function() {
            return "<FeedController>"
        }, this.init = function() {
            r.trace("feedController init"), TD.config.debug_checks && this.checkInvariants()
        }, this.reset = function() {
            this._objects = {}, this._objectsByApiid = {}
        }, this.updateFromBackend = function(e) {
            var t = this;
            r.stateLog("feedController.updateFromBackend:", e), l.default.each(e, function(e, i) {
                var s = t._objectsByApiid[i];
                s ? (s.newRemoteState(e), a.notify("/storage/feed/updated", s)) : ((s = n.Feed.newFromBackendState(e)).setApiid(i), t.manage(s), a.notify("/storage/feed/new", s))
            })
        }, this.get = function(e) {
            return this._objects[e]
        }, this.manage = function(t) {
            t.managed = !0;
            var i = this._objects[t.getKey()];
            return i && t === i ? e.triggerPush() : (i && (r.warn("WARNING replacing feed", i, "with", t, "please use feedController.getOrCreateFeed", [r.getStack().split("\n")]), i.getLatestTime() > t.getLatestTime() && r.warn("Warning: latestTime weirdness:", i.getLatestTime(), t.getLatestTime()), i.hasApiid() && t.setApiid(i.getApiid()), i.isDirty() && (l.default.isEmpty(i.deltaQ) || "init" != i.deltaQ[0].type) && r.assert(!i.isDirty(), "houston, we have a problem")), this._objects[t.getKey()] = t, t.hasApiid() && (this._objectsByApiid[t.getApiid()] = t), e.triggerPush())
        }, this.manageFeeds = function(t) {
            for (var i = 0; i < t.length; i++) e.manage(t[i])
        }, this._selfcheckapiids = function() {
            for (var t in this._objects) {
                var i = this._objects[t];
                i.apiid && _assert(i == e.getByApiid(i.apiid), "lookup failed")
            }
        }, e.isEmpty = function() {
            return l.default.isEmpty(this._objects)
        }, e.getOrCreateFeed = function(e, t, i, s, r) {
            var a, o, c;
            if ("search" !== e || s.term || s.baseQuery && s.searchFilterData && (a = new TD.vo.SearchFilter(s.searchFilterData), s.term = [s.baseQuery, a.getQueryString()].join(" ")), c = n.Feed.generateKeyFor(i, e, s), !(o = this._objects[c])) {
                var l = {
                    type: e,
                    service: t,
                    accountkey: i,
                    metadata: s,
                    apiid: r
                };
                o = new n.Feed(l)
            }
            return r && (o.apiid = r, this._objectsByApiid[r] = o), o
        }
    }).prototype = new n.SobjController, n.feedController = new o, o)
}, function(e, t, i) {
    "use strict";
    var s, n, r, a, o = u(i(1)),
        c = u(i(0)),
        l = u(i(17));

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.storage.ColumnController = (s = TD.storage, n = TD.sync.util, TD.sync.tdapi, r = TD.storage.notification, TD.core.defer, ((a = function() {
        var e = this;
        this.apiEndpoint = "/columns", this._moduleName = "columns", this.reqsinflight = [], this.bindTrigger("colctr"), c.default.subscribe("/storage/account/new", function(t) {
            e.addToCombinedColumns(t)
        }), c.default.subscribe("/storage/client/account_whitelist_changed", function() {
            e.rebuildScheduledColumns()
        }), this._objects = {}, this._objectsByApiid = {}, this.toString = function() {
            return "<ColumnController>"
        }, this.init = function() {
            n.trace("columnController init"), (0, c.default)(document).one("TD.ready", function() {
                e.rebuildScheduledColumns()
            }), TD.config.debug_checks && this.checkInvariants()
        }, this.reset = function() {
            this._objects = {}, this._objectsByApiid = {}
        }, this.updateFromBackend = function(e) {
            var t = this;
            n.stateLog("columnController.updateFromBackend:", e), o.default.each(e, function(e, i) {
                var n = t._objectsByApiid[i];
                n ? n.newRemoteState(e) : ((n = s.Column.newFromBackendState(e)).setApiid(i), t.manage(n), r.notify("/storage/column/new", n))
            })
        }, this.get = function(e) {
            return this._objects[e]
        }, this.getColumnsContainingFeed = function(e) {
            var t = [];
            return o.default.each(this._objects, function(i) {
                o.default.each(i.getFeedKeys(), function(s) {
                    s == e && t.push(i)
                })
            }), t
        }, this.getColumnsByType = function(e) {
            return o.default.filter(this._objects, function(t) {
                return t.getType() === e
            })
        }, this.manage = function(e) {
            return e.managed = !0, n.assert(e.getKey(), "columns must have valid keys to be managed!"), this._objects[e.getKey()] = e, e.hasApiid() && (this._objectsByApiid[e.getApiid()] = e), this.triggerPush()
        }, this.remove = function(e) {
            var t = this._objects[e];
            t && (t.managed = !1), delete this._objects[e]
        }, this.getAll = function() {
            return o.default.values(this._objects)
        }, this.getByApiid = function(e) {
            n.assert(e, "must provide apiid; " + n.repr(e)), n.assert("undefined" !== e, "huh? where did that come from?");
            var t = this._objectsByApiid[e];
            return t || (n.warn("WARNING: col ", e, " not found in cols_by_apiid ", o.default.keys(this._objectsByApiid)), n.stateLog("this._objects, apiids; ", n.pformat(o.default.map(this._objects, function(e, t) {
                return [t, e.getApiid()]
            })))), t
        }, this.isEmpty = function() {
            return o.default.isEmpty(this._objects)
        }, this._selfcheckapiids = function() {
            for (var e in this._objects) {
                var t = this._objects[e];
                t.hasApiid() && _assert(t == this.getByApiid(t.getApiid()), "lookup failed")
            }
        }, this.addToCombinedColumns = function(e) {
            if (n.stateLog("ADDING ACCOUNT TO COMBINED COLS", e), s.clientController.client)
                for (var t, i, r, a, o = s.clientController.client.getColumnOrder(), c = {
                        home: !0,
                        me: !0,
                        privateMe: !0
                    }, l = function(e) {
                        return e.getKey()
                    }, u = 0; u < o.length; u++)
                    if (t = this.get(o[u])) {
                        if (c[i = t.getType()]) {
                            switch (r = null, i) {
                                case "me":
                                    r = this.getMeFeeds([e]);
                                    break;
                                case "privateMe":
                                    r = this.getInboxFeeds([e])
                            }
                            r && (a = r.map(l), t.setFeedKeys(t.getFeedKeys().concat(a)), t.managed && s.feedController.manageFeeds(r))
                        }
                    } else n.warn("Warning: Column not found!"), n._break()
        }, this.rebuildScheduledColumns = function() {
            var e = this.getScheduledFeeds(),
                t = e.map(function(e) {
                    return e.getKey()
                });
            this.getColumnsByType("scheduled").forEach(function(i) {
                i.setFeedKeys(t), i.managed && s.feedController.manageFeeds(e), setTimeout(function() {
                    TD.controller.feedScheduler.refreshColumn(i.getKey())
                }, 200)
            })
        };
        var t = function(e, t) {
            return s.feedController.getOrCreateFeed(e, t.getType(), t.getKey(), {})
        };
        this.getMeFeeds = function(e) {
            for (var i = [], s = 0; s < e.length; s++) "twitter" === e[s].getType() && i.push(t("mentions", e[s]));
            return i
        }, this.getInboxFeeds = function(e) {
            for (var i = [], s = 0; s < e.length; s++) "twitter" === e[s].getType() && i.push(t("direct", e[s]));
            return i
        }, this.getScheduledFeeds = function() {
            return TD.storage.accountController.getAccountsForService("twitter").map(t.bind(this, l.default.feedTypes.SCHEDULED))
        }, this.prePushCheckInvariants = function(e) {
            o.default.each(e, function(e) {
                o.default.each(e.getFeedKeys(), function(e) {
                    n.assert(s.feedController.get(e), "feeds must exist + be managed in columns push; " + e), n.assert(s.feedController.get(e).hasApiid(), "feeds must all have apiid in columns push; " + e)
                })
            })
        }
    }).prototype = new s.SobjController).pushPreflight = function() {
        return s.feedController.triggerPush(.05)
    }, s.columnController = new a, a)
}, function(e, t, i) {
    "use strict";
    var s, n, r, a, o, c = d(i(83)),
        l = d(i(1)),
        u = d(i(0));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.storage.AccountController = (s = TD.storage, n = TD.sync.util, TD.sync.tdapi, r = TD.storage.notification, a = TD.core.defer, (o = function() {
        var e = this;
        this._moduleName = "accounts", this.reqsinflight = [], e.ACCEPTED_ACCOUNT_TYPES = {
            twitter: !0,
            bitly: !0
        }, this._objects = {}, this._cookieAccountPromise = null, this._unverified = {}, e.blacklistAccount = function(t) {
            n.stateLog("blacklisting", t);
            var i = t.getKey();
            s.clientController.client.addToAccountBlacklist(i), this._objects[i] && e.remove(i), s.clientController.client.delFromAccountWhitelist(i), r.notify("/storage/account/blacklisted", t)
        }, e.whitelistAccounts = function(e) {
            n.stateLog("whitelisting", e), s.clientController.client ? l.default.each(e, function(e) {
                s.clientController.client.addToAccountWhitelist(e.getKey()), s.clientController.client.delFromAccountBlacklist(e.getKey())
            }) : n.warn("Can't update whitelist: client not initialised")
        }, e.isEmpty = function() {
            return l.default.isEmpty(this._objects)
        }, e.isSingleUser = function() {
            return 1 === this.getAll().length
        }, e.getDefault = function() {
            if (s.clientController.client) {
                var t = s.clientController.client.getDefaultAccount(),
                    i = this._objects[t];
                return t && i && e.isPostingAccount(i) ? i : e.isEmpty() ? null : (e.setDefault(e.getPostingAccounts()[0].getKey()), this._objects[s.clientController.client.getDefaultAccount()])
            }
        }, e.getUserIdentifier = function() {
            var t = e.getAccountFromId(s.store.getTwitterLoginAccountID());
            return t ? t.state.username : ""
        }, e.setDefault = function(e) {
            s.clientController.client.setDefaultAccount(e)
        }, e.getAccountsForService = function(t) {
            return e.getAll().filter(function(e) {
                return e.getType() === t
            })
        }, e.getAccountFromUsername = function(t) {
            var i = e.getAccountsForService("twitter");
            return t = t.toLowerCase(), l.default.select(i, function(e) {
                return e.getUsername().toLowerCase() === t
            })
        }, e.getAccountFromId = function(t) {
            var i = e.getAccountsForService("twitter");
            return l.default.find(i, function(e) {
                return "" + e.getUserID() === t
            })
        }, e.getPreferredAccount = function(t) {
            var i = e.getDefault();
            return !i || t && i.getType() != t ? e.getAccountsForService(t)[0] : i
        }, this.init = function() {
            n.trace("accountController init"), u.default.subscribe("/storage/client/change", function(t) {
                l.default.each(t.getAccountBlacklist(), function(t) {
                    e._objects[t] && e.remove(t)
                })
            })
        }, this.reset = function() {
            this._objects = {}, this._cookieAccountPromise = null
        }, this.triggerPush = function() {
            n.assert(!1, "triggerPush() should not be called on account controller")
        }, this.updateFromBackend = function(e, t) {
            n.stateLog("accountController.updateFromBackend:", e);
            var i = n.list_to_set(t.settings.account_whitelist || []);
            e = (e = e || []).filter(function(e) {
                var t = s.Account.generateKeyFor(e.service, e.uid),
                    n = i[t];
                return !!this.ACCEPTED_ACCOUNT_TYPES[e.service] && (n || (this._unverified[t] = s.Account.newFromBackendState(e)), n)
            }.bind(this));
            var r = this;
            l.default.each(e, function(e) {
                var t = s.Account.generateKeyFor(e.service, e.uid),
                    i = r._objects[t];
                i ? (n.stateLog("updating existing", i, "with", e), i.newRemoteState(e)) : (n.stateLog("creating new Account with", e), i = s.Account.newFromBackendState(e), r.manage(i))
            })
        }, this.get = function(e) {
            return "tweetdeck" === e ? {
                getKey: function() {
                    return "tweetdeck"
                },
                getUserID: function() {
                    return "tweetdeck"
                },
                getType: function() {
                    return "tweetdeck"
                }
            } : this._objects[e]
        }, this.manage = function(e) {
            if (!e.getKey()) throw (0, u.default)(document).trigger("metric", {
                key: "account:manage:fail"
            }), new TypeError("account must have its .key set");
            return e.managed = !0, this._objects[e.getKey()] || r.notify("/storage/account/new", e), this._objects[e.getKey()] = e, this.whitelistAccounts([e]), s.store.setLastVerifiedTimestamp(e), (0, u.default)(document).trigger("metric", {
                key: "account:manage:success"
            }), this.pushAccount(e)
        }, this.manageContributee = function(e) {
            var t = TD.storage.Account.generateKeyFor("twitter", e.id),
                i = this.get(t);
            return i ? this.updateAccountFromContributee(i, e) : this.createAccountFromContributee(e)
        }, this.createAccountFromContributee = function(e) {
            var t = new TD.storage.Account(null, {
                contributor: !0
            });
            return t.setType("twitter"), t.setUserID(e.id), t.setIsAdmin(e.isAdmin), t.computeKey(), this._verifyAndManageAccount(t)
        }, this.updateAccountFromContributee = function(e, t) {
            var i = TD.core.defer.succeed();
            return e.getPrivate("isAccessDenied") && (e.setPrivate("isAccessDenied", !1), (0, u.default)(document).trigger("dataTwitterAccountAccessEnabled", {
                accountKey: e.getKey()
            }), i.addCallback(e.makeContributor.bind(e))), i.addCallback(e.setIsAdmin.bind(e, t.isAdmin)), i
        }, this.isContributeeManaged = function(e) {
            var t = TD.storage.Account.generateKeyFor("twitter", e.id);
            return !!this.get(t)
        }, e.remove = function(e) {
            var t = this._objects[e];
            t.managed = !1, delete this._objects[e], r.notify("/storage/account/removed", t), s.store.removeLastVerifiedTimestamp(t), t.isContributor() && !t.getPrivate("isAccessDenied") && (0, u.default)(document).trigger("uiRemoveContributee", {
                accountKey: TD.storage.store.getTwitterLoginAccount().getKey(),
                userId: t.getUserID()
            })
        }, e.getAll = function() {
            var t = l.default.values(this._objects);
            return t.sort(e.accountComparator), t
        }, e.getPostingAccounts = function() {
            return l.default.filter(e.getAll(), e.isPostingAccount)
        }, e.isPostingAccount = function(e) {
            return "bitly" !== e.getType()
        }, e.accountComparator = function(t, i) {
            var s = t.getType(),
                n = i.getType(),
                r = "twitter" === s,
                a = "twitter" === n,
                o = TD.storage.store.getTwitterLoginAccount(),
                c = o ? o.getKey() : e.getDefault().getKey();
            if (t.getKey() === c) return -1;
            if (i.getKey() === c) return 1;
            if (r && a) {
                var l = t.getUsername().toLowerCase(),
                    u = i.getUsername().toLowerCase();
                return (l > u) - (l < u)
            }
            return r ? -1 : a ? 1 : (s > n) - (s < n)
        }, e.getDefaults = function() {
            var t = e.getAll(),
                i = e.getDefault(),
                s = [],
                n = {};
            i && (n[i.getType()] = !0, s.push(i));
            for (var r = 0; r < t.length; r++) n[t[r].getType()] || (n[t[r].getType()] = !0, s.push(t[r]));
            return s
        }, e.pushAccount = function(e) {}, e.authFromAccount = function(e) {
            return TD.controller.auth.create(e.getType(), e)
        }, e.getTemporaryCookieAccount = function() {
            var e = new TD.storage.Account;
            return e.setType("twitter"), e.makeOAuth2(), e
        }, e.getCookieAccount = function() {
            var e = TD.storage.store.getTwitterLoginAccount();
            if (e && e.isCookieUser()) return e
        }, e._verifyAndManageAccount = function(t, i) {
            var s = e.authFromAccount(t),
                n = new a.Deferred;
            return s.verifyAccount(n.callback.bind(n), n.errback.bind(n)), i && n.addErrback(function() {}), n.addCallback(function() {
                return TD.storage.accountController.manage(t)
            }), n
        }, e.verifyAndManageCookieAccount = function(t) {
            return e.authFromAccount(t).verifyCookieAccount().addCallback(function() {
                return TD.storage.accountController.manage(t)
            })
        }, e.verifyTwitterCookieAccount = function() {
            var e = this;
            this._cookieAccountPromise || (this._cookieAccountPromise = new c.default(function(t, i) {
                var s = e.getTemporaryCookieAccount();
                e.verifyAndManageCookieAccount(s).addCallback(l.default.constant(s)).addCallbacks(t, i)
            }));
            var t = new TD.core.defer.Deferred;
            return this._cookieAccountPromise.then(t.callback.bind(t), t.errback.bind(t)), t
        }, e.verifyNewTwoginAccount = function() {
            n.stateLog("verifyNewTwoginAccount");
            var e = s.Account.generateKeyFor("twitter", TD.storage.store.getTwitterLoginAccountID()),
                t = this._unverified[e];
            if (t) var i = this._verifyAndManageAccount(t, !0);
            return this._unverified = {}, i || TD.core.defer.succeed()
        }
    }).prototype = new s.SobjController, s.accountController = new o, o)
}, function(e, t, i) {
    "use strict";
    var s, n, r, a, o, c, l = d(i(47)),
        u = d(i(1));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.storage.ClientController = (s = TD.storage, n = TD.sync.util, TD.util, r = TD.sync.tdapi, TD.storage.notification, a = TD.core.defer, o = TD.sync.trace, (c = function() {
        var e = this;
        this.apiEndpoint = "/clients", u.default.defer(function() {
            var t = n.makeThingScheduler,
                i = s.store.getTwitterLoginAccountID.bind(s.store);
            e.triggerPush = t(u.default.bind(e.pushIfDirty, e), null, "clisync", i)
        }), this._moduleName = "clients", this.reqsinflight = [], this._objects = {}, this._objectsByApiid = this._objects, this.client = null, this.toString = function() {
            return "<ClientController>"
        }, this.init = function() {
            n.stateLog("client controller init start", this.client), n.trace("clientController init"), TD.config.sync_name in this._objects ? (this.client = this._objects[TD.config.sync_name], n.assert(this.client.getName(), "need name!"), n.stateLog("client controller new client:", this.client)) : n.stateLog("no initial client state; deferring client creation"), n.stateLog("clientController.init: client: ", this.client)
        }, this.reset = function() {
            this.client = null
        }, this.createNewClient = function() {
            n.stateLog("clientController.createNewClient()");
            var e = this,
                t = {
                    name: TD.config.sync_name,
                    columns: [],
                    settings: {}
                },
                i = {},
                a = r.requestWithBody("/clients", "POST", t, i);
            return a.addCallback(function() {
                n.stateLog("createNewClient resp headers; ", i);
                var r = i["x-td-mtime"];
                return n.assert(r, "require x-td-mtime header in client POST"), t.mtime = r, e.client = s.Client.newFromBackendState(t), n.assert(e.client.getName(), "Client should have name at this point"), e._objects[e.client.getName()] = e.client, n.stateLog("clientController.createNewClient with", e.client.state), e.triggerPush()
            }), a
        }, this.createNewBackendState = function() {
            var e = {
                    name: "blackbird",
                    columns: [],
                    settings: {
                        settings: {
                            version: TD.controller.upgrade.CURRENT_VERSION
                        }
                    }
                },
                t = TD.net.ajax.request(TD.config.twitter_api_base + "/1.1/tweetdeck/clients", {
                    method: "POST",
                    params: (0, l.default)(e)
                });
            return t.addCallbackWith(this, function(t) {
                var i = t.xhr.getResponseHeader("x-td-mtime");
                return n.assert(i, "require x-td-mtime header in client POST"), e.mtime = i, this.client = s.Client.newFromBackendState(e), this._objects[this.client.getName()] = this.client, n.stateLog("clientController.createNewClient with", this.client.state), this.triggerPush()
            }), t
        }, this.updateFromBackend = function(e) {
            null === this.client ? (this.client = s.Client.newFromBackendState(e), this._objects[this.client.getName()] = this.client, n.stateLog("client controller (ufb) new client:", this.client)) : this.client.newRemoteState(e)
        }, this.pushIfDirty = function() {
            if (TD.config.debug_checks && this.checkInvariants(), o.push(this, "dirty", null), this.client.isDirty()) {
                o.push(this, "dirty", this.client);
                var e = this,
                    t = s.columnController.triggerPush();
                return t.addCallback(function() {
                    return n.assert(e.client.isDirty(), "?!? push dirty, but not dirty"), e.pushObject(e.client, "/clients/" + e.client.getName())
                }), t.addCallback(function() {
                    return e.pushIfDirty()
                }), t
            }
            return o.push(this, "not dirty", null), a.succeed()
        }
    }).prototype = new s.SobjController, s.clientController = new c, c)
}, function(e, t, i) {
    "use strict";
    var s, n, r, a = c(i(47)),
        o = c(i(1));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.storage.Feed = (s = TD.storage, n = TD.sync.util, TD.sync.tdapi, TD.util, ((r = function e(t, i) {
        this._init(t), o.default.isUndefined(i) || (this.state = this.transformToLocal(i)), this.setKey(e.generateKeyFor(this.getAccountKey(), this.getType(), this.getMetadata()))
    }).prototype = new s.StoredObj(s.feedController)).eventname = "/storage/feed", r.generateKeyFor = function(e, t, i) {
        i = i || {};
        var s = [e, t, TD.util.deterministicObjectHash(i)];
        return n.assert(e, "accountkey not set in Feed.generateKey"), n.assert(t, "type not set in Feed.generateKey"), encodeURI(s.join(":"))
    }, r.prototype.getType = function() {
        return this.get("type")
    }, r.prototype.setType = function(e) {
        return this.immutableSet("type", e)
    }, r.prototype.getService = function() {
        return this.get("service")
    }, r.prototype.setService = function(e) {
        return this.immutableSet("service", e)
    }, r.prototype.getAccountKey = function() {
        return this.get("accountkey")
    }, r.prototype.setAccountKey = function(e) {
        return this.immutableSet("accountkey", e)
    }, r.prototype.getTopSortIndex = function() {
        var e = this.get("marks");
        return e ? e.top_sort_index ? e.top_sort_index || null : {
            value: this.getLatestTime(),
            type: "milliseconds"
        } : null
    }, r.prototype.setTopSortIndex = function(e) {
        var t = this.get("marks") || {};
        return Array.isArray(t) && (t = o.default.extend({}, t)), t[0] = t[0] || {}, t.top_sort_index = e, this.set("marks", t)
    }, r.prototype.getLatestTime = function() {
        var e = this.get("marks");
        return !e || o.default.isEmpty(e) ? 0 : e[0].last_notification || 0
    }, r.prototype.setLatestTime = function(e) {
        var t = this.get("marks");
        return !t || o.default.isEmpty(t) ? this.set("marks", [{
            last_notification: e
        }]) : (t[0].last_notification = e, this.set("marks", t))
    }, r.prototype.getMetadata = function() {
        return o.default.clone(this.get("metadata"))
    }, r.prototype.setMetadata = function(e) {
        return this.immutableSet("metadata", e)
    }, r.prototype.transformForRemote = function(e, t) {
        var i = s.accountController.get(e.accountkey);
        n.assert(i && i.getUserID(), "must have acct + uid for feed transform");
        var r = i.getUserID(),
            o = {
                type: e.type,
                service: e.service,
                account: {
                    userid: r.toString()
                },
                metadata: (0, a.default)(e.metadata),
                marks: e.marks
            };
        return e.mtime && (o.mtime = e.mtime), t.apiid && (o.id = t.apiid), o
    }, r.prototype.reprocessNotificationMarks = function(e, t) {
        var i = null,
            s = null;
        if (t && t.marks && !o.default.isEmpty(t.marks) && (i = t.marks[0].last_notification, s = t.marks), e.marks && !o.default.isEmpty(e.marks)) {
            s = e.marks;
            var n = e.marks[0].last_notification;
            i && n ? i = Math.max(i, n) : n && (i = n)
        }
        return s ? s[0].last_notification = i : s = i ? [{
            last_notification: i
        }] : [], s
    }, r.prototype.transformToLocal = function(e) {
        return {
            type: e.type,
            service: e.service,
            accountkey: s.Account.generateKeyFor(e.service, e.account.userid),
            metadata: JSON.parse(e.metadata),
            mtime: e.mtime,
            marks: e.marks
        }
    }, r.newFromBackendState = function(e) {
        return new r(null, e)
    }, r)
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.storage.Column = function(e, t, i, r, a) {
        var o = function(e) {
            this._init(e), this.privateState.key || (this.privateState.key = "c" + (new Date).getTime() + s.default.uniqueId("s"))
        };
        (o.prototype = new e.StoredObj(e.columnController)).eventname = "/storage/column", o.prototype.getTitle = function() {
            var e = this.get("title");
            return s.default.isUndefined(e) ? "loading…" : e
        }, o.prototype.setTitle = function(e) {
            return this.set("title", e)
        }, o.prototype.getDescription = function() {
            return this.get("description")
        }, o.prototype.setDescription = function(e) {
            return this.set("description", e)
        }, o.prototype.getType = function() {
            return this.get("type")
        }, o.prototype.setType = function(e) {
            return this.set("type", e)
        }, o.prototype.getFilters = function() {
            return this.get("filters")
        }, o.prototype.setFilters = function(e) {
            return this.setValueIffDifferent("filters", e)
        }, o.prototype.getHasSound = function() {
            var e = this.get("settings");
            return Boolean(e && e.has_sound)
        }, o.prototype.setHasSound = function(e) {
            return e = Boolean(e), a.notify("/storage/column/column_flags_changed", "has_sound", e, this), this.dictSet("settings", "has_sound", e)
        }, o.prototype.getHasNotification = function() {
            var e = this.get("settings");
            return Boolean(e && e.has_notification)
        }, o.prototype.setHasNotification = function(e) {
            return e = Boolean(e), a.notify("/storage/column/column_flags_changed", "has_notification", e, this), this.dictSet("settings", "has_notification", e)
        }, o.prototype.getMediaPreviewSize = function() {
            var e = this.get("settings");
            return e ? e.media_preview_size : null
        }, o.prototype.setMediaPreviewSize = function(e) {
            return (0, n.default)(document).trigger("dataColumnSettings", {
                columnKey: this.getKey(),
                mediaPreviewSize: e
            }), this.dictSet("settings", "media_preview_size", e)
        }, o.prototype.getClearedTimestamp = function() {
            var e = this.get("settings");
            return e && e.cleared_timestamp ? e.cleared_timestamp : 0
        }, o.prototype.setClearedTimestamp = function(e) {
            return a.notify("/storage/column/column_marks_changed", "cleared_timestamp", e, this), this.dictSet("settings", "cleared_timestamp", e)
        }, o.prototype.getFeedKeys = function() {
            return this.get("feedkeys")
        }, o.prototype.setFeedKeys = function(e) {
            return this.setValueIffDifferent("feedkeys", s.default.isArray(e) ? s.default.uniq(e.sort(), !0) : e, "/storage/column/feeds_changed")
        };
        var c = ["mtime", "type", "title", "description", "settings", "position", "bookmarks", "filters"];
        return o.prototype.transformForRemote = function(i, n) {
            var r = {};
            return s.default.each(c, function(e) {
                r[e] = i[e]
            }), r.feeds = s.default.map(i.feedkeys, function(i) {
                var s = e.feedController.get(i);
                return t.assert(s && s.hasApiid(), "feeds must have apiid when transforming column for remote"), s.getApiid()
            }), i.mtime && (r.mtime = i.mtime), n.apiid && (r.id = n.apiid), r
        }, o.prototype.transformToLocal = function(i) {
            TD.config.debug_checks && s.default.each(i.feeds, function(s) {
                t.assert(e.feedController.getByApiid(s), "feed not found by apiid in " + t.pformat(i.feeds))
            });
            var n = {};
            return s.default.each(c, function(e) {
                n[e] = i[e]
            }), n.feedkeys = s.default.map(i.feeds, function(t) {
                return e.feedController.getByApiid(t).getKey()
            }), n.apiid = i.id, n
        }, o.newFromBackendState = function(e) {
            var t = new o;
            return t.newRemoteState(e), t
        }, o
    }(TD.storage, TD.sync.util, TD.sync.tdapi, TD.util, TD.storage.notification)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = o(i(1)),
        n = o(i(599)),
        r = function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(154)),
        a = i(36);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var c = (window.location.search.toLowerCase().split("requiregdprconsent=")[1] || "").split("&")[0];
    t.default = TD.storage.Account = function(e, t, i, o, l) {
        var u = function(e, t) {
            e ? (this.state = s.default.clone(e), this.privateState = {}) : (this.state = {}, this.privateState = {}), this.triggerPush = function() {
                return r.succeed()
            }, t && t.contributor && this.makeContributor()
        };
        (u.prototype = new e.StoredObj(e.accountController)).eventname = "/storage/account", u.generateKeyFor = n.default.generateAccountKey, u.getIdentifiersForKey = function(e) {
            var t = e.split(":");
            return {
                service: t[0],
                id: t[1]
            }
        }, u.gdprConsentFeatureIsEnabled = !1, a.gdprConsent$.subscribe(function(e) {
            return u.gdprConsentFeatureIsEnabled = e
        }), u.prototype.manuallyAddConsentAccounts = function() {
            return c.split(",")
        }, u.prototype.requiresConsent = function() {
            return !!u.gdprConsentFeatureIsEnabled && (this.manuallyAddConsentAccounts().includes(this.getUsername().toLowerCase()) || this.get("require_some_consent"))
        }, u.generateRemoteDataForTwitterUser = function(e) {
            return {
                key: u.CONTRIBUTOR_OAUTH_TOKEN,
                token: "",
                secret: "",
                screen_name: e.screen_name,
                service: "twitter",
                uid: e.id_str,
                avatar: e.profile_image_url_https,
                name: e.name,
                require_some_consent: e.require_some_consent
            }
        }, u.OAUTH2_AUTH_TOKEN = "COOKIE", u.CONTRIBUTOR_OAUTH_TOKEN = "CONTRIBUTOR", u.UNKNOWN_SCREEN_NAME = "???", u.prototype.computeKey = function() {
            if (!this.getType() || !this.getUserID()) throw {
                name: "NotReadyError",
                message: "cannot computeKey on account; insufficient data"
            };
            this.setKey(u.generateKeyFor(this.getType(), this.getUserID()))
        }, u.prototype.set = function(e, t) {
            return this.state[e] = t, i.notify(this.eventname + "/change", this), this.triggerPush()
        }, u.prototype.checkInvariants = function() {
            t.assert(s.default.isEmpty(this.deltaQ), "Accounts must not have Δs"), t.assert(null === this.stateCache, "Accounts do not use stateCache")
        }, u.prototype.setIsVerified = function(e) {
            return this.setPrivate("verified", e)
        }, u.prototype.getIsVerified = function() {
            return this.getPrivate("verified")
        }, u.prototype.getUsername = function() {
            return this.get("username")
        }, u.prototype.setUsername = function(e) {
            return this.set("username", e)
        }, u.prototype.getName = function() {
            return this.get("name")
        }, u.prototype.setName = function(e) {
            return this.set("name", e)
        }, u.prototype.getUserID = function() {
            return this.get("userId")
        }, u.prototype.setUserID = function(e) {
            return this.set("userId", e)
        }, u.prototype.getType = function() {
            return this.get("type")
        }, u.prototype.setType = function(e) {
            return this.set("type", e)
        }, u.prototype.getOAuthToken = function() {
            return this.get("oauth_token")
        }, u.prototype.setOAuthToken = function(e) {
            return this.set("oauth_token", e)
        }, u.prototype.getTokenSecret = function() {
            return this.get("token_secret")
        }, u.prototype.setTokenSecret = function(e) {
            return this.set("token_secret", e)
        }, u.prototype.getProfileImageURL = function() {
            var e = this.get("profileImageURL");
            return e && TD.util.isRetina() && (e = e.replace(TD.services.TwitterUser.NORMAL_SUFFIX_REGEXP, TD.services.TwitterUser.BIGGER_SUFFIX)), e
        }, u.prototype.setProfileImageURL = function(e) {
            return this.set("profileImageURL", e)
        }, u.prototype.getIsPrivate = function() {
            return this.getPrivate("isPrivate")
        }, u.prototype.setIsPrivate = function(e) {
            return this.setPrivate("isPrivate", e)
        }, u.prototype.getUpdated = function() {
            return this.getPrivate("updated")
        }, u.prototype.setUpdated = function(e) {
            return this.setPrivate("updated", e)
        }, u.prototype.isCookieUser = function() {
            return this.getOAuthToken() === u.OAUTH2_AUTH_TOKEN
        }, u.prototype.makeOAuth2 = function() {
            return this.setOAuthToken(u.OAUTH2_AUTH_TOKEN)
        }, u.prototype.isContributor = function() {
            return this.getOAuthToken() === u.CONTRIBUTOR_OAUTH_TOKEN
        }, u.prototype.makeContributor = function() {
            return this.setOAuthToken(u.CONTRIBUTOR_OAUTH_TOKEN)
        }, u.prototype.isMissingUserData = function() {
            return this.getUsername() === u.UNKNOWN_SCREEN_NAME
        }, u.prototype.getIsAdmin = function() {
            return !!(!this.isContributor() || this.getPrivate("isAdmin"))
        }, u.prototype.setIsAdmin = function(e) {
            return this.setPrivate("isAdmin", !!e)
        }, u.prototype.getStateForBackend = function(e) {
            e = e || {};
            var t = {
                secret: this.getTokenSecret(),
                screen_name: this.getUsername(),
                name: this.getName(),
                avatar: this.getProfileImageURL(),
                key: this.getOAuthToken()
            };
            return e.withIdentifiers && (t.uid = this.getUserID(), t.service = this.getType()), t
        };
        var d = {
            key: "oauth_token",
            token: "oauth_token",
            secret: "token_secret",
            screen_name: "username",
            service: "type",
            uid: "userId",
            avatar: "profileImageURL",
            name: "name"
        };
        return u.prototype.newRemoteState = function(e) {
            var i = this;
            t.stateLog(this, ".updateFromBackend(", e, ")"), s.default.each(d, function(t, s) {
                e[s] && i.set(t, e[s])
            }), void 0 !== e.require_some_consent && i.set("require_some_consent", e.require_some_consent)
        }, u.newFromBackendState = function(e) {
            var t = new u;
            return t.newRemoteState(e), t.computeKey(), t
        }, u.prototype.isSameUser = function(e) {
            return this.getUsername().toLowerCase() === e.toLowerCase()
        }, u
    }(TD.storage, TD.sync.util, TD.storage.notification, TD.util, TD.core.base64)
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.storage.Client = function(e, t, i, r, a, o, c) {
        var l = function(e) {
            t.trace("Client constructor:"), t.stateLog("Client constructor: ", e);
            var i = e && e.column_order;
            i && !s.default.isEqual(i, s.default.union(i)) && (t.warn("WARNING! removing duplicates in column_order", s.default.clone(i)), e.column_order = s.default.union(i)), t.assert(!e || !e.columns, '"columns" should not be in local client state'), this._init(e), this.managed = !0, TD.config.debug_checks && this.checkInvariants()
        };
        (l.prototype = new e.StoredObj(e.clientController)).eventname = "/storage/client", l.prototype.recent_searches_limit = 5, l.prototype.getName = function() {
            return this.get("name")
        }, l.prototype.getApiid = function() {
            return this.get("name")
        }, l.prototype.hasApiid = function() {
            return !0
        }, l.prototype.getColumnOrder = function() {
            return s.default.clone(this.get("column_order") || [])
        }, l.prototype.setColumnOrder = function(e) {
            if (s.default.each(e, function(e) {
                    t.precondition("string" == typeof e, "must provide string column keys")
                }), !s.default.isEqual(e, s.default.union(e))) throw t.warn("ERROR: column_order contains duplicates:", e), new Error("column_order must not contain duplicates");
            return a.notify("/storage/client/column_order_changed"), this.setListPermutation("column_order", e)
        }, l.prototype.removeColumn = function(e) {
            return a.notify("/storage/client/column_order_changed"), this.listRemove("column_order", e)
        }, l.prototype.appendColumn = function(e) {
            return a.notify("/storage/client/column_order_changed"), this.listAdd("column_order", e)
        }, l.prototype.getAccountBlacklist = function() {
            return s.default.clone(this.get("account_blacklist") || [])
        }, l.prototype.addToAccountBlacklist = function(t) {
            var i = this.get("account_blacklist") || [];
            if (s.default.include(i, t)) return o.succeed(null);
            var n = this.listAdd("account_blacklist", t);
            return a.notify("/storage/client/account_blacklist_changed", i, this.get("account_blacklist"), this), e.accountController.remove(t), n
        }, l.prototype.delFromAccountWhitelist = function(e) {
            var t = this.get("account_whitelist") || [];
            if (!s.default.include(t, e)) return o.succeed(null);
            var i = this.listRemove("account_whitelist", e),
                r = this.get("account_whitelist");
            return a.notify("/storage/client/account_whitelist_changed", t, r, this), (0, n.default)(document).trigger("dataAccountWhitelist", {
                accountKeys: r
            }), i
        }, l.prototype.addToAccountWhitelist = function(e) {
            var t = this.get("account_whitelist") || [];
            if (s.default.include(t, e)) return o.succeed(null);
            var i = this.listAdd("account_whitelist", e),
                r = this.get("account_whitelist");
            return a.notify("/storage/client/account_whitelist_changed", t, r, this), (0, n.default)(document).trigger("dataAccountWhitelist", {
                accountKeys: r
            }), i
        }, l.prototype.delFromAccountBlacklist = function(e) {
            var t = this.get("account_blacklist") || [];
            if (!s.default.include(t, e)) return o.succeed(null);
            var i = this.listRemove("account_blacklist", e);
            return a.notify("/storage/client/account_blacklist_changed", t, this.get("account_blacklist"), this), i
        }, l.prototype.getAccountWhitelist = function() {
            return s.default.clone(this.get("account_whitelist"))
        }, l.prototype.getDefaultAccount = function() {
            return this.get("default_account")
        }, l.prototype.addRecentSearch = function(e) {
            return o.gatherResults([this.listRemove("recent_searches", e), this.listPrepend("recent_searches", e), this.listTruncate("recent_searches", this.recent_searches_limit)])
        }, l.prototype.getRecentSearches = function() {
            return this.get("recent_searches") || []
        }, l.prototype.removeRecentSearch = function(e) {
            this.listRemove("recent_searches", e)
        }, l.prototype.clearRecentSearches = function() {
            this.set("recent_searches", [])
        }, l.prototype.postProcessNewRemoteState = function() {
            var e = this.getColumnOrder(),
                i = s.default.union(e);
            s.default.isEqual(i, e) || (t.warn("WARNING! found duplicates in column order, collapsing", e), this.state.column_order = i)
        }, l.prototype.setDefaultAccount = function(e) {
            return t.assert(!s.default.isUndefined(e), "huh? you wanted to do what now?"), this.setValueIffDifferent("default_account", e, "/storage/client/default_account_changed")
        };
        var u = ["account_blacklist", "account_whitelist", "default_account", "settings", "recent_searches"];
        return l.prototype.transformForRemote = function(i, n) {
            t.stateLog("Client.transformToLocal L", i);
            var r = {};
            s.default.each(u, function(e) {
                i[e] && (r[e] = i[e])
            });
            var a = {
                settings: r,
                name: i.name
            };
            return a.columns = s.default.map(i.column_order || [], function(i) {
                var s = e.columnController.get(i);
                return t.assert(s.hasApiid(), "Column " + i + " does not have apiid", s), s.getApiid()
            }), i.mtime && (a.mtime = i.mtime), t.stateLog("Client.transformToLocal R", a), a
        }, l.prototype.transformToLocal = function(i) {
            t.stateLog("Client.transformToLocal R", i);
            var n = {},
                r = !1;
            n.column_order = s.default.filter(s.default.map(i.columns, function(s) {
                if (!s) return t.warn("WARNING: bogus data in rstate.columns!", t.pformat(i.columns)), null;
                var n = e.columnController.getByApiid(s);
                return n || (t.stateLog("allocating new empty local sColumn for", s), (n = new e.Column).setApiid(s), e.columnController.manage(n), r = !0), n.getKey()
            }), Boolean), r && TD.sync.controller.ueberpull();
            var a = i.settings || {};
            return s.default.each(u, function(e) {
                a[e] && (n[e] = a[e])
            }), n.mtime = i.mtime, n.name = i.name, t.stateLog("Client.transformToLocal L", n), n
        }, l.prototype.setApiid = function(e) {
            t.assert(!1, "no-one should ever set apiid on Client")
        }, l.newFromBackendState = function(e) {
            var t = new l;
            return t.newRemoteState(e), t
        }, l
    }(TD.storage, TD.sync.util, TD.sync.tdapi, TD.util, TD.storage.notification, TD.core.defer, TD.sync.trace)
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(1)),
        r = o(i(0)),
        a = function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(109));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = TD.settings = function(e, t) {
        var i, o = a.makeCommandBag(),
            c = {},
            l = {},
            u = ["previous_splash_version", "dataminr_auth_token"],
            d = ["narrow", "medium", "wide"];
        c.COLUMN_WIDTH_VALUES = d;
        var h = ["smallest", "small", "medium", "large", "largest"];
        c.FONT_SIZE_VALUES = h;
        var m = {
            smallest: 12,
            small: 13,
            medium: 14,
            large: 15,
            largest: 16
        };

        function f(e) {
            var t, s;
            if (!i) throw new Error("Settings client hasn't been initialized. Call settings.init() first.");
            return s = void 0, (t = i.get("settings")) && (s = t[e]), n.default.isUndefined(s) && (s = l[e]), (n.default.isArray(s) || n.default.isObject(s)) && (s = TD.sync.util.clone(s)), s
        }
        return c.linkShorteners = [{
            id: "twitter",
            title: "Twitter"
        }, {
            id: "bitly",
            title: "Bit.ly"
        }], c.init = function() {
            (i = e.clientController.client) ? (0, r.default)(document).trigger("dataSettingsValues", TD.sync.util.clone(i.get("settings"))): console.warn("Initialized settings before storage.clientController.init() was called."), o.add([{
                label: (0, s.default)("Increase column width"),
                apply: function() {
                    var e = c.getColumnWidth(),
                        t = Math.min(d.length - 1, d.indexOf(e) + 1);
                    c.setColumnWidth(d[t])
                },
                canApply: function() {
                    return c.getColumnWidth() !== n.default.last(d)
                }
            }, {
                label: (0, s.default)("Decrease column width"),
                apply: function() {
                    var e = c.getColumnWidth(),
                        t = Math.max(0, d.indexOf(e) - 1);
                    c.setColumnWidth(d[t])
                },
                canApply: function() {
                    return c.getColumnWidth() !== n.default.first(d)
                }
            }, {
                label: (0, s.default)("Increase font size"),
                apply: function() {
                    var e = c.getFontSize(),
                        t = Math.min(h.length - 1, h.indexOf(e) + 1);
                    c.setFontSize(h[t])
                },
                canApply: function() {
                    return c.getFontSize() !== n.default.last(h)
                }
            }, {
                label: (0, s.default)("Decrease font size"),
                apply: function() {
                    var e = c.getFontSize(),
                        t = Math.max(0, h.indexOf(e) - 1);
                    c.setFontSize(h[t])
                },
                canApply: function() {
                    return c.getFontSize() !== n.default.first(h)
                }
            }, {
                label: "Use dark theme",
                apply: function() {
                    return TD.settings.setTheme("dark")
                },
                canApply: function() {
                    return "dark" !== c.getTheme()
                }
            }, {
                label: "Use light theme",
                apply: function() {
                    return TD.settings.setTheme("light")
                },
                canApply: function() {
                    return "light" !== c.getTheme()
                }
            }])
        }, c.set = function(e, s) {
            var a = {};
            return t.notify("/storage/client/settings/" + e, s), n.default.isEqual(s, f(e)) ? TD.core.defer.succeed() : (-1 === u.indexOf(e) && (n.default.isString(s) || n.default.isBoolean(s) || n.default.isNumber(s)) && TD.controller.stats.setting(e, s), n.default.defer(function() {
                a[e] = s, (0, r.default)(document).trigger("dataSettingsValues", a)
            }), i.dictSet("settings", e, s))
        }, l.use_stream = !0, c.getUseStream = function() {
            return Boolean(f("use_stream"))
        }, c.setUseStream = function(e) {
            return c.set("use_stream", Boolean(e))
        }, l.use_notification_sound = !0, c.getUseNotificationSound = function() {
            return Boolean(f("use_notification_sound"))
        }, c.setUseNotificationSound = function(e) {
            return c.set("use_notification_sound", Boolean(e))
        }, c.getLanguage = function() {
            return String(f("language"))
        }, c.setLanguage = function(e) {
            return c.set("language", String(e))
        }, l.check_for_updates = !0, c.getCheckForUpdates = function() {
            return Boolean(f("check_for_updates"))
        }, c.setCheckForUpdates = function(e) {
            return c.set("check_for_updates", Boolean(e))
        }, l.use_narrow_columns = !1, l.column_width = "medium", c.getColumnWidth = function() {
            var e = f("use_narrow_columns");
            return n.default.isBoolean(e) && (c.set("use_narrow_columns", null), e) ? (c.setColumnWidth("narrow"), "narrow") : f("column_width")
        }, c.setColumnWidth = function(e) {
            return c.set("column_width", e)
        }, l.font_size = "medium", c.getFontSize = function() {
            return f("font_size")
        }, c.getHorizonWebFontSize = function(e) {
            switch (e) {
                case "large":
                    return "normal";
                case "largest":
                    return "large";
                default:
                    return "small"
            }
        }, c.setFontSize = function(e) {
            return c.set("font_size", e)
        }, c.getFontSizePixels = function(e) {
            return m[e]
        }, l.theme = "light", c.getTheme = function() {
            return f("theme")
        }, c.setTheme = function(e) {
            return c.set("theme", String(e))
        }, l.link_shortener = "twitter", c.getLinkShortener = function() {
            return String(f("link_shortener"))
        }, c.setLinkShortener = function(e) {
            return c.set("link_shortener", String(e))
        }, l.use_jmp = !1, c.getUseJmp = function() {
            return Boolean(f("use_jmp"))
        }, c.setUseJmp = function(e) {
            return c.set("use_jmp", Boolean(e))
        }, c.getGlobalFilter = function() {
            return f("global_filter")
        }, c.setGlobalFilter = function(e) {
            return c.set("global_filter", e)
        }, l.show_startup_notifications = !0, c.getShowStartupNotifications = function() {
            return Boolean(f("show_startup_notifications"))
        }, c.setShowStartupNotifications = function(e) {
            return c.set("show_startup_notifications", Boolean(e))
        }, l.show_trends_filter_callout = !0, c.getShowTrendsFilterCallout = function() {
            return f("show_trends_filter_callout")
        }, c.setShowTrendsFilterCallout = function(e) {
            return c.set("show_trends_filter_callout", Boolean(e))
        }, l.show_search_filter_callout = !0, c.getShowSearchFilterCallout = function() {
            return f("show_search_filter_callout")
        }, c.setShowSearchFilterCallout = function(e) {
            return c.set("show_search_filter_callout", Boolean(e))
        }, l.show_gdpr_important_updates = !0, c.getShowGdprImportantUpdates = function() {
            return f("show_gdpr_important_updates")
        }, c.setShowGdprImportantUpdates = function(e) {
            return c.set("show_gdpr_important_updates", Boolean(e))
        }, l.premium_has_seen_welcome_modal = !1, c.getPremiumHasSeenWelcomeModal = function() {
            return f("premium_has_seen_welcome_modal")
        }, c.setPremiumHasSeenWelcomeModal = function(e) {
            return c.set("premium_has_seen_welcome_modal", Boolean(e))
        }, l.show_trending_column_new_pill = !0, c.getShowTrendingColumnNewPill = function() {
            return f("show_trending_column_new_pill")
        }, c.setShowTrendingColumnNewPill = function(e) {
            return c.set("show_trending_column_new_pill", Boolean(e))
        }, l.auto_play_gifs = !0, c.getAutoPlayGifs = function() {
            return f("auto_play_gifs")
        }, c.setAutoPlayGifs = function(e) {
            return c.set("auto_play_gifs", Boolean(e))
        }, l.display_sensitive_media = !1, c.getDisplaySensitiveMedia = function() {
            return Boolean(f("display_sensitive_media"))
        }, c.setDisplaySensitiveMedia = function(e) {
            return c.set("display_sensitive_media", Boolean(e))
        }, l.scheduled_col_autoadded = !1, c.getScheduledColAdded = function() {
            return Boolean(f("scheduled_col_autoadded"))
        }, c.setScheduledColAdded = function(e) {
            return c.set("scheduled_col_autoadded", Boolean(e))
        }, l.previous_splash_version = "0", c.getPreviousSplashVersion = function() {
            return f("previous_splash_version")
        }, c.setPreviousSplashVersion = function(e) {
            return c.set("previous_splash_version", String(e))
        }, l.name_cache = {}, c.getNameCache = function() {
            return f("name_cache")
        }, c.setNameCache = function(e) {
            return c.set("name_cache", e)
        }, l.seen_message_ids = [], c.getIdsForSeenMessages = function() {
            return f("seen_message_ids")
        }, c.setIdsForSeenMessages = function(e) {
            return c.set("seen_message_ids", e)
        }, l.navbar_width = "condensed", c.getNavbarWidth = function() {
            return f("navbar_width")
        }, c.setNavbarWidth = function(e) {
            return c.set("navbar_width", e)
        }, l.compose_stay_open = !1, c.getComposeStayOpen = function() {
            return Boolean(f("compose_stay_open"))
        }, c.setComposeStayOpen = function(e) {
            return c.set("compose_stay_open", Boolean(e))
        }, l.dataminr_auth_token = null, c.getDataminrAuthToken = function() {
            return f("dataminr_auth_token")
        }, c.setDataminrAuthToken = function(e) {
            return c.set("dataminr_auth_token", e)
        }, l.account_selector_grid_mode = "grid", c.getAccountSelectorGridMode = function() {
            return f("account_selector_grid_mode")
        }, c.setAccountSelectorGridMode = function(e) {
            return c.set("account_selector_grid_mode", e)
        }, l.safeguarded_account_list = [], c.getSafeguardedAccountList = function() {
            return f("safeguarded_account_list")
        }, c.setSafeguardedAccountList = function(e) {
            return c.set("safeguarded_account_list", e)
        }, c.removeSafeguardedAccount = function(e) {
            return c.set("safeguarded_account_list", c.getSafeguardedAccountList().filter(function(t) {
                return e !== t
            }))
        }, c.addSafeguardedAccount = function(e) {
            return c.set("safeguarded_account_list", c.getSafeguardedAccountList().filter(function(t) {
                return e !== t
            }).concat([e]))
        }, c.getBitlyAccount = function() {
            var e = f("bitly_login"),
                t = f("bitly_api_key");
            if (e && t) return {
                apiKey: t,
                login: e
            }
        }, c.setBitlyAccount = function(e) {
            return c.set("bitly_login", e.login).addCallback(function() {
                return c.set("bitly_api_key", e.apiKey)
            }).addCallback(function() {
                return c.getBitlyAccount()
            })
        }, c
    }(TD.storage, TD.storage.notification)
}, function(e, t, i) {
    "use strict";
    var s = d(i(63)),
        n = d(i(43)),
        r = d(i(7)),
        a = d(i(119)),
        o = d(i(1)),
        c = d(i(0)),
        l = d(i(95)),
        u = function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(600));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.sync.controller = function(e, t, i) {
        var d = {};

        function h() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                t = e.columns,
                i = void 0 === t ? {} : t,
                n = e.client,
                a = (n = void 0 === n ? {} : n).columns,
                o = void 0 === a ? [] : a,
                c = (0, s.default)(n, ["columns"]),
                l = o.filter(function(e) {
                    return i[e]
                });
            return l.length !== o.length && TD.util.metric("sync:controller:fix-missing-columns:columns-missing"), (0, r.default)({}, e, {
                client: (0, r.default)({}, c, {
                    columns: l
                })
            })
        }
        return d.flushSyncDataAndReload = function() {
            TD.storage.Store.flushWebstorage(TD.storage.Store.PERSISTENT_SESSION_ITEMS), TD.util.isWrapperApp() && deck.tearDown(), window.location.reload()
        }, d.updateFromBackendData = function(e) {
            TD.storage.accountController.updateFromBackend(e.accounts, e.client), TD.storage.feedController.updateFromBackend(e.feeds), TD.storage.columnController.updateFromBackend(e.columns), TD.storage.clientController.updateFromBackend(e.client), TD.decider.get("disable_decider_using_dedicated_endpoint") && TD.decider.updateFromBackend(e.decider)
        }, d.ueberpull = function() {
            e.trace("überpull");
            var t = i.succeed();
            return t.addCallback(function() {
                return TD.storage.columnController.triggerPush(.05)
            }), t.addErrback(e.errmark, "d.Eb:triggerPush"), t.addCallback(d.sync), t.addCallback(function(e) {
                (0, c.default)(document).trigger("dataMessages", {
                    messages: e.messages
                })
            }), t.addErrback(e.errmark, "d.Eb:sync.controller.updateFromBackend"), t
        }, d.init = function() {
            var e = i.succeed();
            return e.addCallback(function() {
                TD.storage.feedController.init(), TD.storage.columnController.init(), TD.storage.accountController.init(), TD.storage.clientController.init();
                var e = TD.config.sync_period;
                o.default.isUndefined(e) && (e = 600), d.loop = setInterval(d.ueberpull, 1e3 * e)
            }), e.addCallback(d.sync), e
        }, d.sync = function() {
            return TD.util.metric("sync:controller:sync-with-cookie"), d.fetchSyncData().addCallbackWith(d, d.applySyncData)
        }, d.fetchSyncData = function() {
            var t = TD.storage.store.getOrCreateTwitterLoginAccount(),
                i = d.fetchAccountsForTwitterAccount();
            i.addCallback(function(e) {
                return e.forEach(function(e) {
                    e.user.require_some_consent ? TD.util.metric("gdpr:contributee:requires-consent") : TD.util.metric("gdpr:contributee:given-consent")
                }), e
            });
            var s = d.fetchAllForTwitterAccount();
            return s.addErrback(d.maybeCreateNewBackendState), s.addCallback(function(e) {
                return delete e.decider, e
            }), TD.core.defer.gatherResults([t, i, s]).addErrback(TD.util.effect(function() {
                return e.warn("WARNING! sync with twitter account failed")
            }))
        }, d.applySyncData = function(t) {
            var i = TD.core.defer.succeed(t);
            return i.addCallback(function(e) {
                var t = (0, a.default)(e, 3),
                    i = t[0],
                    s = t[1],
                    o = t[2];
                return (0, r.default)({}, o, {
                    loginAccount: i,
                    accounts: [i.getStateForBackend({
                        withIdentifiers: !0
                    })].concat((0, n.default)(s.map(function(e) {
                        return TD.storage.Account.generateRemoteDataForTwitterUser(e.user)
                    })))
                })
            }), i.addCallback(h), i.addCallback(TD.util.dEffect(d.updateFromBackendData)), i.addCallback(TD.util.dEffect(function(t) {
                return TD.decider.updateFromBackendForID(t.loginAccount.getUserID()).addErrback(TD.util.effect(function() {
                    return e.warn("WARNING! decider poll failed")
                }))
            })), i
        }, d.maybeCreateNewBackendState = function(e) {
            if (404 !== e.number) return e;
            var t = TD.storage.clientController.createNewBackendState();
            return t.addCallbackWith(d, d.fetchAllForTwitterAccount), t
        }, d.fetchAccounts = function() {
            return t.drequest("/accounts")
        }, d.fetchAccountsForTwitterAccount = function() {
            return (0, l.default)(TD.decider.get("graphql_login"), u.getContributees, function() {
                return TD.net.ajax.request(TD.config.twitter_api_base + "/1.1/users/contributees.json").addCallback(function(e) {
                    return e.data
                })
            })
        }, d.fetchAllForTwitterAccount = function() {
            return TD.net.ajax.request(TD.config.twitter_api_base + "/1.1/tweetdeck/clients/blackbird/all").addCallback(function(e) {
                return e.data
            })
        }, d.checkInvariants = function() {
            var e = [TD.storage.feedController, TD.storage.columnController, TD.storage.accountController, TD.storage.clientController];
            o.default.each(e, function(e) {
                var t = e.checkInvariants;
                t && t.call(e)
            })
        }, d.reset = function() {
            d.loop && (clearInterval(d.loop), delete d.loop), TD.storage.columnController.reset(), TD.storage.feedController.reset(), TD.storage.accountController.reset(), TD.storage.clientController.reset()
        }, d
    }(TD.sync.util, TD.sync.tdapi, TD.core.defer)
}, function(e, t) {
    e.exports = {
        queryId: "6OcU_i9bc8_7iRQOfs-1Ww"
    }
}, function(e, t, i) {
    "use strict";
    var s, n, r, a, o = i(1839),
        c = i(1);
    TD.net.util = (s = {}, n = encodeURIComponent, r = /[!'()]/g, a = /\*/g, window.encodeURIComponent = function(e) {
        return n(e).replace(r, escape).replace(a, "%2A")
    }, s.addURLParam = function(e, t, i) {
        var n = {};
        return n[t] = i, s.addURLParameters(e, n)
    }, s.addURLParameters = function(e, t) {
        var i = s.buildQueryString(t),
            n = e;
        return i ? (-1 === e.indexOf("?") ? n += "?" : n += "&", n + i) : e
    }, s.buildQueryString = function(e) {
        var t, i = [];
        if (e)
            for (var s in e) void 0 !== e[s] && (t = s + "=" + encodeURIComponent(e[s]), i.push(t));
        return i.join("&")
    }, s.formDecode = function(e) {
        var t, i, s, n = {};
        return e.split("#", 1)[0].split("&").forEach(function(e) {
            if ((s = e.indexOf("=")) > 0) {
                t = e.slice(0, s), i = e.slice(s + 1);
                try {
                    t = decodeURIComponent(t)
                } catch (e) {}
                try {
                    i = decodeURIComponent(i)
                } catch (e) {}
                n[t] = i
            }
        }), n
    }, s.decodeURL = function(e) {
        var t = e.split("?");
        return t.length > 1 ? s.formDecode(t[1]) : {}
    }, s.formEncode = function(e) {
        var t = [];
        for (var i in e) t.push(i + "=" + encodeURIComponent(e[i]));
        return t.join("&")
    }, s.getQueryStringParams = function() {
        var e = window.location.href.split("?");
        if (e.length >= 2) {
            var t = e.slice(1).join("?");
            return this.formDecode(t)
        }
        return {}
    }, s.getFailureScribePayload = function(e) {
        return {
            request: {
                hadBody: !!c.get(e, ["requestSettings", "data"]),
                headers: c.get(e, ["requestSettings", "tweetdeck", "headers"]),
                settings: c.get(e, ["requestSettings", "tweetdeck", "settings"]),
                type: c.get(e, ["requestSettings", "type"]),
                url: c.get(e, ["requestSettings", "url"])
            },
            response: {
                errors: c.get(e, ["req", "responseJSON", "errors"], []),
                headers: o(e.req.getAllResponseHeaders()),
                message: e.message,
                statusCode: e.number
            }
        }
    }, s)
}, , , , function(e, t, i) {
    "use strict";
    var s = d(i(43)),
        n = d(i(3)),
        r = d(i(1)),
        a = d(i(0)),
        o = i(1843),
        c = d(i(17)),
        l = i(233),
        u = i(36);

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = function() {
        var e = {};

        function t(e) {
            return !!e.req && (401 === e.req.status || 403 === e.req.status)
        }

        function i() {
            TD.sync.util.trace("init.purgeDeprecatedAccounts()"), TD.storage.columnController.getAll().forEach(function(e) {
                if (1 === e.getFeedKeys().length) switch (e.getType()) {
                    case c.default.storageColumnTypes.HOME:
                    case c.default.storageColumnTypes.INBOX:
                    case c.default.storageColumnTypes.ME:
                        e.setType(c.default.storageColumnTypes.OTHER), TD.util.metric("startup:convert-singleton-column:" + e.getType());
                        break;
                    default:
                        return
                }
            }), d(function(e) {
                var t = "twitter" === e.getService() && "sentdirect" === e.getType();
                return t && TD.controller.stats.purgedFeed({
                    service: e.getService(),
                    type: e.getType(),
                    message: "Purged sentdirect feed (no longer supported)"
                }), t
            }), d(function(e) {
                var t = r.default.isUndefined(TD.storage.accountController.get(e.getAccountKey()));
                return t && TD.controller.stats.purgedFeed({
                    service: e.getService(),
                    type: e.getType(),
                    accountKey: e.getAccountKey(),
                    message: "Purged feed due to bad account key"
                }), t
            }), d(function(e) {
                var t = "usertimeline" === e.getType();
                return t && TD.controller.stats.purgedFeed({
                    service: e.getService(),
                    type: e.getType(),
                    message: "Purged usertimeline feed (no longer supported)"
                }), t
            })
        }

        function d(e) {
            var t = r.default.filter(TD.storage.feedController.getAll(), e),
                i = r.default.map(t, function(e) {
                    var t = e.getKey();
                    return TD.storage.feedController.remove(t), t
                }),
                s = r.default.filter(TD.storage.columnController.getAll(), function(e) {
                    var t = r.default.difference(e.getFeedKeys(), i),
                        s = c.default.isSimpleColumn(e.getType());
                    return e.setFeedKeys(t), r.default.isEmpty(t) && !s
                }),
                n = r.default.map(s, function(e) {
                    return e.getKey()
                });
            if (!r.default.isEmpty(n)) {
                var a = TD.storage.clientController.client;
                a.setColumnOrder(r.default.difference(a.getColumnOrder(), n)), r.default.each(n, function(e) {
                    TD.storage.columnController.remove(e), TD.util.metric("startup:remove:column:no-feeds")
                })
            }
        }

        function h() {
            var t;
            (t = TD.util).metric.apply(t, (0, s.default)(e.initTimer.metric("ready"))), TD.sync.util.trace("init.initControllerAndUI()"), (0, a.default)(document).trigger("uiNeedsSettings"), TD.controller.clients.init(), TD.controller.feedManager.init(), TD.cache.names.init(), TD.ui.main.init(), TD.controller.scheduler.init(), TD.controller.columnManager.init(), TD.controller.feedScheduler.init(), TD.controller.notifications.init(), TD.controller.scheduler.schedulePeriodicTask(15, function() {
                "visible" == document.visibilityState && TD.controller.stats.heartbeat(TD.storage.store.getTwitterLoginAccountID())
            }, !0), TD.controller.filterManager.init(), TD.ready = !0, TD.sync.util.trace("init: TD.ready"), (0, a.default)(document).trigger("TD.ready"), TD.storage.accountController.isEmpty() && (0, a.default)(document).trigger("uiShowAccountSettings")
        }
        return e.preload = function() {
            e.initTimer = new o.Timer("timing:controller:init"), u.newFontStack$.subscribe(function(e) {
                e ? document.body.classList.add("system-font-stack") : document.body.classList.remove("system-font-stack")
            }), TD.util.isTouchDevice() && window.navigator.standalone && ((0, a.default)("head meta[name=viewport]").remove(), (0, a.default)("head").prepend('<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">'));
            var t = (0, a.default)(document.documentElement);
            t.addClass("os-" + TD.util.getOSName()), TD.util.isTouchDevice() && (t.addClass("touch-device"), TD.decider.get("touchdeck_font_size_v2") && t.addClass("with-touch-font-size")), TD.controller.stats.init()
        }, e.start = function() {
            l.hashflags.start(), TD.util.metric("startup:start");
            var r = TD.util.getAppEnv();
            TD.util.isWrapperApp() && TD.util.isUnsupportedWebWrapperVersion() && (TD.util.metric("startup:start:wrapper-app:unsupported"), deck.closeLoadingScreen && deck.closeLoadingScreen(), window.location.assign(TD.config.api_root + TD.assets.get("html", {
                name: "deprecated"
            }) + "?appenv" + r)), TD.controller.scheduler.schedulePeriodicTask(2592e3, function() {
                window.location.reload(!0)
            }), (0, a.default)(document).on("unload", function() {
                window.deck && window.deck.closeLoadingScreen && window.deck.closeLoadingScreen()
            });
            var o = TD.core.defer.succeed();
            return o.addCallback(function() {
                return (0, a.default)(document).trigger("dataAppStart")
            }), o.addBothWith(TD.decider, TD.decider.updateForGuestId), o.addBoth(function() {
                TD.util.isWrapperApp() && deck.closeLoadingScreen && deck.closeLoadingScreen()
            }), o.addBoth(function() {
                var t;
                (t = TD.util).metric.apply(t, (0, s.default)(e.initTimer.metric("do-login"))), TD.util.metric("startup:do-login")
            }), o.addCallback(function() {
                return TD.sync.controller.init()
            }), o.addCallback(function(e) {
                return TD.storage.store.storeLoginResult(e.loginAccount.getUserID()), e
            }), o.addCallbacks(TD.util.effect(function() {
                return TD.util.metric("login:try-cookie:allowed")
            }), TD.util.effect(function(e) {
                TD.util.metric("login:try-cookie:failed"), t(e) || TD.util.metric("login:try-cookie:error")
            })), o.addCallback(TD.storage.notification.flush), o.addCallback(i), o.addCallback(function() {
                return TD.core.defer.gatherResults([TD.storage.feedController.triggerPush(.05), TD.storage.columnController.triggerPush(.05)])
            }), o.addCallback(function() {
                TD.storage.store.checkVersion()
            }), o.addCallback(i), o.addCallbackWith(TD.controller.upgrade, TD.controller.upgrade.doUpgrades), o.addCallback(function() {
                return TD.storage.accountController.verifyNewTwoginAccount()
            }), o.addCallback(TD.settings.init), o.addCallback(function() {
                TD.controller.stats.setUid(TD.storage.store.getTwitterLoginAccountID())
            }), o.addCallback(h), o.addErrback(function(i) {
                console.error("TweetDeck initialisation failed"), console.error(i), TD.util.metric("startup:do-login:errback"), TD.util.metric("startup:errback"), TD.controller.stats.loginError(i.toString());
                var s = TD.storage.store.getTwitterLoginAccountID() || "unknown";
                TD.controller.stats.setUid(s), TD.controller.stats.flushScribeQueue(), TD.sync.controller.reset(), TD.storage.Store.flushWebstorage();
                var r = t(i),
                    a = function(e) {
                        if (!e.req) return !1;
                        return 0 === e.req.status || 12007 === e.req.status
                    }(i),
                    o = (0, n.default)("Sorry, something went wrong. Please try again later."),
                    c = i.message ? "(" + i.message + ")" : "";
                return r ? (o = "", c = "") : a ? (TD.util.metric("startup:network-failure"), o = (0, n.default)("Please check your network connection and refresh TweetDeck.")) : TD.util.metric("startup:something-went-wrong"), e.showLogin((o + " " + c).trim())
            }), o
        }, e.showLogin = function(t) {
            var i;
            return (i = TD.util).metric.apply(i, (0, s.default)(e.initTimer.metric("show-login-screen"))), TD.util.metric("startup:setup-login-screen"), t && TD.util.metric("startup:setup-login-screen:with-error"), (0, a.default)(document).trigger("uiLoginShowLoginForm", {
                errorMsg: t
            }), new TD.core.defer.Deferred
        }, e.signOut = function(e) {
            return (0, a.default)(document).trigger("uiLogout", e), TD.core.defer.timeout(1e4)
        }, e
    }()
}, function(e, t, i) {
    "use strict";
    var s = a(i(119)),
        n = a(i(10)),
        r = a(i(11));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = function() {
        function e(t) {
            (0, n.default)(this, e), this.ns = t, this.t = e.now()
        }
        return (0, r.default)(e, [{
            key: "mark",
            value: function(t) {
                var i = this.ns,
                    s = this.t;
                return [i + ":" + t, Math.floor(e.now() - s)]
            }
        }, {
            key: "metric",
            value: function(e) {
                var t = this.mark(e),
                    i = (0, s.default)(t, 2);
                return [i[0],
                    [i[1]], "metric"
                ]
            }
        }]), e
    }();
    o.now = function() {
        var e = window.performance || {};
        return e.now = e.now || e.webkitNow || e.msNow || e.oNow || e.mozNow || function() {
            return Date.now()
        }, e.now()
    }, t.Timer = o
}, function(e, t, i) {
    "use strict";
    var s, n, r, a = c(i(1)),
        o = c(i(17));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.controller.upgrade = (s = TD.storage, TD.config, TD.sync.util, n = TD.core.defer, r = {
        CURRENT_VERSION: 2,
        recordVersion: function(e) {
            return s.clientController.client.dictSet("settings", "version", e)
        },
        doUpgrades: function() {
            var e = s.clientController.client.get("settings");
            if (a.default.isUndefined(e) || a.default.isUndefined(e.version)) return TD.util.metric("controller:upgrade:new-user:to:" + r.CURRENT_VERSION), r.recordVersion(r.CURRENT_VERSION).addErrback(TD.util.effect(function() {
                TD.util.metric("controller:upgrade:error"), TD.util.metric("controller:upgrade:new-user:error")
            }));
            var t = Number(e.version) || 0;
            TD.util.metric("controller:upgrade:existing-version:" + t);
            for (var i = n.succeed(), o = 1; o <= r.CURRENT_VERSION; o++)
                if (t < o) {
                    var c = "version_" + o.toString();
                    r.hasOwnProperty(c) && (TD.util.metric("controller:upgrade:to:" + o), i.addCallback(r[c]), i.addCallback(r.recordVersion.bind(r, o)))
                } return i.addErrback(TD.util.effect(function() {
                return TD.util.metric("controller:upgrade:error")
            })), i
        },
        version_1: function() {
            s.columnController.getAll().forEach(function(e) {
                var t;
                TD.storage.feedController.get(e.getFeedKeys()[0]).getType() === o.default.feedTypes.MENTIONS && ((t = new TD.vo.SearchFilter(e.getFilters())).action.fromJSONObject({
                    showMentions: !0,
                    showRetweets: !1,
                    showFavorites: !1,
                    showFollowers: !1,
                    showLists: !1
                }), e.setFilters(t.toJSONObject()))
            })
        },
        version_2: function() {
            !1 === TD.storage.clientController.client.get("settings").show_inline_media && s.columnController.getAll().forEach(function(e) {
                e.setMediaPreviewSize(TD.vo.Column.MEDIA_PREVIEW_OFF)
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = g(i(84)),
        n = g(i(7)),
        r = g(i(43)),
        a = g(i(30)),
        o = g(i(3)),
        c = g(i(0)),
        l = g(i(1)),
        u = g(i(95)),
        d = i(109),
        h = g(i(17)),
        m = g(i(1846)),
        f = g(i(29)),
        p = i(36);

    function g(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.controller.columnManager = function(e, t, i) {
        var g, v, T, w, b, y, C, _, D, S = {
            _aColumnIndex: {},
            _columnOrder: []
        };
        S.commands = (0, d.makeCommandBag)(), S.TIMELINE = "timeline", S.MENTIONS = "mentions", S.FOLLOWERS = "followers", S.SEARCH = "search", S.LISTS = "lists", S.CUSTOMTIMELINES = "customtimelines", S.MESSAGES = "messages", S.TRENDS = "trends", S.ANALYTICS = "analytics", S.TWEETS = "tweets", S.FAVORITES = "favorites", S.HOME = "home", S.ME = "me", S.INBOX = "privateMe", S.SCHEDULED = "scheduled", S.NETWORKACTIVITY = "networkactivity", S.INTERACTIONS = "interactions", S.DATAMINR = "dataminr", S.LIVEVIDEO = "livevideo", S.EVENT = "event", S.WHATSHAPPENING = "whatshappening", S.columnTypeToIconClass = (g = {}, (0, a.default)(g, S.TIMELINE, h.default.columnIconClasses.HOME), (0, a.default)(g, S.INTERACTIONS, h.default.columnIconClasses.INTERACTIONS), (0, a.default)(g, S.MENTIONS, h.default.columnIconClasses.MENTIONS), (0, a.default)(g, S.FOLLOWERS, h.default.columnIconClasses.FOLLOWERS), (0, a.default)(g, S.SEARCH, h.default.columnIconClasses.SEARCH), (0, a.default)(g, S.LISTS, h.default.columnIconClasses.LIST), (0, a.default)(g, S.CUSTOMTIMELINES, h.default.columnIconClasses.CUSTOMTIMELINE), (0, a.default)(g, S.MESSAGES, h.default.columnIconClasses.MESSAGES), (0, a.default)(g, S.TWEETS, h.default.columnIconClasses.USER), (0, a.default)(g, S.FAVORITES, h.default.columnIconClasses.FAVORITES), (0, a.default)(g, S.NETWORKACTIVITY, h.default.columnIconClasses.ACTIVITY), (0, a.default)(g, S.HOME, h.default.columnIconClasses.HOME), (0, a.default)(g, S.ME, h.default.columnIconClasses.MENTIONS), (0, a.default)(g, S.INBOX, h.default.columnIconClasses.MESSAGES), (0, a.default)(g, S.SCHEDULED, h.default.columnIconClasses.SCHEDULED), (0, a.default)(g, S.TRENDS, h.default.columnIconClasses.TRENDS), (0, a.default)(g, S.ANALYTICS, h.default.columnIconClasses.ANALYTICS), (0, a.default)(g, S.DATAMINR, h.default.columnIconClasses.DATAMINR), (0, a.default)(g, S.LIVEVIDEO, h.default.columnIconClasses.LIVEVIDEO), (0, a.default)(g, S.EVENT, h.default.columnIconClasses.EVENT), (0, a.default)(g, S.WHATSHAPPENING, h.default.columnIconClasses.WHATSHAPPENING), g), S.SELF_ACCOUNTS_ONLY = (v = {}, (0, a.default)(v, S.MESSAGES, !0), (0, a.default)(v, S.NETWORKACTIVITY, !0), (0, a.default)(v, S.INTERACTIONS, !0), (0, a.default)(v, S.FOLLOWERS, !0), (0, a.default)(v, S.TIMELINE, !0), v), S.TWITTER_GENERIC = (T = {}, (0, a.default)(T, S.TIMELINE, !0), (0, a.default)(T, S.MENTIONS, !0), (0, a.default)(T, S.FOLLOWERS, !0), (0, a.default)(T, S.MESSAGES, !0), (0, a.default)(T, S.TWEETS, !0), (0, a.default)(T, S.FAVORITES, !0), (0, a.default)(T, S.NETWORKACTIVITY, !0), (0, a.default)(T, S.INTERACTIONS, !0), T), S.SELF_FEED_TYPE = (w = {}, (0, a.default)(w, S.TIMELINE, "home"), (0, a.default)(w, S.MESSAGES, "direct"), (0, a.default)(w, S.TWEETS, "usertweets"), (0, a.default)(w, S.FOLLOWERS, "interactions"), w), S.NON_SELF_FEED_TYPE = (b = {}, (0, a.default)(b, S.TIMELINE, "usertimeline"), (0, a.default)(b, S.TWEETS, "usertweets"), (0, a.default)(b, S.MENTIONS, "search"), b), S.MENU_TITLE = (y = {}, (0, a.default)(y, S.TIMELINE, (0, o.default)("Home")), (0, a.default)(y, S.MENTIONS, (0, o.default)("Mentions")), (0, a.default)(y, S.SEARCH, (0, o.default)("Search")), (0, a.default)(y, S.FOLLOWERS, (0, o.default)("Followers")), (0, a.default)(y, S.LISTS, (0, o.default)("List")), (0, a.default)(y, S.CUSTOMTIMELINES, (0, o.default)("Collection")), (0, a.default)(y, S.MESSAGES, (0, o.default)("Messages")), (0, a.default)(y, S.TRENDS, (0, o.default)("Trending")), (0, a.default)(y, S.ANALYTICS, (0, o.default)("Analytics")), (0, a.default)(y, S.TWEETS, (0, o.default)("User")), (0, a.default)(y, S.FAVORITES, (0, o.default)("Likes")), (0, a.default)(y, S.ME, (0, o.default)("Mentions")), (0, a.default)(y, S.INBOX, (0, o.default)("Messages")), (0, a.default)(y, S.SCHEDULED, (0, o.default)("Scheduled")), (0, a.default)(y, S.NETWORKACTIVITY, (0, o.default)("Activity")), (0, a.default)(y, S.INTERACTIONS, (0, o.default)("Notifications")), (0, a.default)(y, S.DATAMINR, (0, o.default)("Dataminr")), (0, a.default)(y, S.LIVEVIDEO, (0, o.default)("Live video")), (0, a.default)(y, S.EVENT, (0, o.default)("General Election")), (0, a.default)(y, S.WHATSHAPPENING, (0, o.default)("What's Happening")), y), S.MODAL_TITLE = (C = {}, (0, a.default)(C, S.TIMELINE, (0, o.default)("Add a Home column")), (0, a.default)(C, S.MENTIONS, (0, o.default)("Add a Mentions column")), (0, a.default)(C, S.SEARCH, (0, o.default)("Search")), (0, a.default)(C, S.FOLLOWERS, (0, o.default)("Add a Followers column")), (0, a.default)(C, S.LISTS, (0, o.default)("Add a List column")), (0, a.default)(C, S.CUSTOMTIMELINES, (0, o.default)("Add a Collection column")), (0, a.default)(C, S.MESSAGES, (0, o.default)("Add a Messages column")), (0, a.default)(C, S.TRENDS, (0, o.default)("Trending")), (0, a.default)(C, S.TWEETS, (0, o.default)("Add a User column")), (0, a.default)(C, S.FAVORITES, (0, o.default)("Add a Likes column")), (0, a.default)(C, S.ME, (0, o.default)("Add a Mentions column")), (0, a.default)(C, S.INBOX, (0, o.default)("Add a Messages column")), (0, a.default)(C, S.SCHEDULED, (0, o.default)("Scheduled")), (0, a.default)(C, S.NETWORKACTIVITY, (0, o.default)("Add an Activity column")), (0, a.default)(C, S.INTERACTIONS, (0, o.default)("Add a Notifications column")), (0, a.default)(C, S.DATAMINR, (0, o.default)("Add a Dataminr column")), (0, a.default)(C, S.LIVEVIDEO, (0, o.default)("Add a Live Video column")), (0, a.default)(C, S.EVENT, (0, o.default)("Add a General Election column")), C), S.MENU_ATTRIBUTION = (_ = {}, (0, a.default)(_, S.ME, (0, o.default)("(all accounts)")), (0, a.default)(_, S.INBOX, (0, o.default)("(all accounts)")), _), S.DISPLAY_ORDER = [{
            type: S.TIMELINE,
            service: "twitter",
            class: "top-row"
        }, {
            type: S.TWEETS,
            service: "twitter",
            class: "top-row"
        }, {
            type: S.INTERACTIONS,
            service: "twitter",
            class: "top-row"
        }, {
            type: S.SEARCH,
            service: "twitter",
            class: "top-row"
        }, {
            type: S.LISTS,
            service: "twitter"
        }, {
            type: S.CUSTOMTIMELINES,
            service: "twitter",
            class: "feature-customtimelines"
        }, {
            type: S.TRENDS,
            service: "twitter",
            premiumColumnType: !1
        }, {
            type: S.FAVORITES,
            service: "twitter"
        }, {
            type: S.MESSAGES,
            service: "twitter"
        }, {
            type: S.MENTIONS,
            service: "twitter"
        }, {
            type: S.FOLLOWERS,
            service: "twitter"
        }, {
            type: S.SCHEDULED
        }, {
            type: S.INBOX
        }, {
            type: S.ME
        }, {
            type: S.NETWORKACTIVITY,
            service: "twitter"
        }, {
            type: S.ANALYTICS,
            service: "twitter"
        }, {
            type: S.WHATSHAPPENING,
            service: "twitter",
            premiumColumnType: !0
        }, {
            type: S.LIVEVIDEO,
            service: "twitter"
        }, {
            type: S.EVENT,
            service: "twitter"
        }, {
            type: S.DATAMINR,
            service: "dataminr"
        }], S.DISPLAY_ORDER_SINGLETONS = [{
            type: S.ME
        }, {
            type: S.INBOX
        }, {
            type: S.SCHEDULED
        }], S.DISPLAY_ORDER_PROFILE = [{
            type: S.TWEETS,
            service: "twitter",
            profile: !0,
            title: (0, o.default)("Tweets"),
            columnIconClass: h.default.columnIconClasses.TWITTER
        }, {
            type: S.MENTIONS,
            service: "twitter",
            profile: !0
        }, {
            type: S.LISTS,
            service: "twitter",
            profile: !0
        }, {
            type: S.CUSTOMTIMELINES,
            service: "twitter",
            profile: !0,
            class: "feature-customtimelines"
        }, {
            type: S.FAVORITES,
            service: "twitter",
            profile: !0
        }];
        var k = S.DISPLAY_ORDER.concat(S.DISPLAY_ORDER_SINGLETONS).concat(S.DISPLAY_ORDER_PROFILE);
        S.updateTitlesAndIconClasses = function() {
            l.default.each(k, function(e) {
                e.title = e.title || S.MENU_TITLE[e.type], e.attribution = e.attribution || S.MENU_ATTRIBUTION[e.type], e.columnIconClass = e.columnIconClass || S.columnTypeToIconClass[e.type]
            })
        }, S.updateTitlesAndIconClasses(), S.HELP_TEXT = (D = {}, (0, a.default)(D, S.TIMELINE, (0, o.default)("Add a Timeline column for your own accounts, or search for a user and add theirs")), (0, a.default)(D, S.MENTIONS, (0, o.default)("Add a Mentions column for your own accounts, or search for a user and add theirs")), (0, a.default)(D, S.SEARCH, (0, o.default)("Add a column for a saved or recent Search, or enter a new search in the box")), (0, a.default)(D, S.LISTS, (0, o.default)("Create a new List, or select an existing List to edit or add a column")), (0, a.default)(D, S.CUSTOMTIMELINES, (0, o.default)("Create a new Collection, or select an existing timeline")), (0, a.default)(D, S.LIVEVIDEO, (0, o.default)("Select a live stream or come back later")), (0, a.default)(D, S.EVENT, ""), (0, a.default)(D, S.MESSAGES, (0, o.default)("Add a Direct Messages column for your accounts")), (0, a.default)(D, S.TRENDS, (0, o.default)("Add a column to monitor Tweets for any Trend")), (0, a.default)(D, S.TWEETS, (0, o.default)("Add a column for Tweets sent from your own accounts, or search for a user and add theirs")), (0, a.default)(D, S.FAVORITES, (0, o.default)("Add a Likes column for your own accounts, or search for a user and add theirs")), (0, a.default)(D, S.INTERACTIONS, (0, o.default)("Add a column to monitor your mentions, Retweets, likes, follows and List additions in real time")), (0, a.default)(D, S.NETWORKACTIVITY, (0, o.default)("Add a column to view likes, follows and List additions by your friends in real time")), (0, a.default)(D, S.DATAMINR, (0, o.default)("Add a column to view alerts for a Dataminr watchlist")), D), (0, c.default)(document).on("dataDeciderUpdated", function() {
            S.updateTitlesAndIconClasses()
        }), S.init = function() {
            E({
                firstLoad: !0
            }), f.default.Observable.fromEvent((0, c.default)(document), "dataSettingsValues", function(e, t) {
                return t
            }).filter(function(e) {
                return e && void 0 !== e.show_trending_column_new_pill
            }).pluck("show_trending_column_new_pill").subscribe(function() {
                S.reMapDisplayOrder()
            }), p.trendsAndBeta$.subscribe(function(e) {
                var t = e.trendsInColumnEnabled,
                    i = e.betaEnabled;
                S.trendsColumnEnabled = t, S.reMapDisplayOrder(i)
            }), S.checkColumns(), TD.controller.scheduler.schedulePeriodicTask(60, S.reportColumns, !0), c.default.subscribe("/storage/client/column_order_changed", E), c.default.subscribe("/storage/client/change", E), c.default.subscribe("/storage/column/feeds_changed", function(e, t, i) {
                var s = S.get(i.getKey());
                s && s.loadFeeds()
            }), c.default.subscribe("/storage/column/change", function(e) {
                var i = S.get(e.getKey());
                if (i instanceof TD.vo.Column) {
                    var s = i.model.getFeedKeys(),
                        n = e.getFeedKeys();
                    l.default.isEqual(s, n) || i.loadFeeds(), e.managed && e.hasApiid() && (i = S.getByApiid(e.getApiid()), TD.ui.columns.refreshTitle(i)), i.loadFilters()
                } else t.stateLog("loading new new column", e), E()
            }), c.default.subscribe("/cache/names/change", S.refreshColumnTitles), c.default.subscribe("/storage/account/change", S.refreshColumnTitles), c.default.subscribe("/storage/account/new", function(e) {
                1 === TD.storage.accountController.getAll().length && S.checkColumns()
            }), (0, c.default)(document).on("uiNeedsScheduledColumnVisible", this.handleMakeOrRefreshScheduledColumn), (0, c.default)(document).on("uiNeedsColumnOrder", S.handleUiNeedsColumnOrder), (0, c.default)(document).on("uiNeedsColumns", S.handleUiNeedsColumns)
        }, S.setupCommands = function() {
            var e = S.getAllOrdered(),
                t = String(e.length).length,
                i = e.map(function(e, i) {
                    var s = l.default.padLeft(i + 1, t, "0"),
                        n = h.default.getColumnTitleArgs(e),
                        r = n && n.needsUserAttribution ? n.screenName : "",
                        a = l.default.get(n, "title", "");
                    return h.default.getColumnType(e) === h.default.columnMetaTypes.SEARCH ? {
                        column: e,
                        title: s + ": " + (0, o.default)("Search") + " “" + a + "”"
                    } : {
                        column: e,
                        title: s + ": " + a + " " + r
                    }
                }),
                s = [].concat((0, r.default)(i.map(function(e, t) {
                    var i = e.column,
                        s = e.title;
                    return {
                        label: (0, o.default)("Go to column — {{title}}", {
                            title: s
                        }),
                        shortcut: t < 9 ? {
                            key: String(t + 1)
                        } : null,
                        apply: function() {
                            return S.showColumn(i.model.getKey())
                        }
                    }
                })), [{
                    label: (0, o.default)("Go to final column"),
                    shortcut: {
                        key: "0"
                    },
                    apply: function() {
                        return (0, c.default)(document).trigger("uiColumnFocus", {
                            last: !0
                        })
                    }
                }]),
                n = i.map(function(e) {
                    var t = e.column;
                    return {
                        label: "Remove column — " + e.title,
                        apply: function() {
                            return S.deleteColumn(t.model.getKey())
                        }
                    }
                });
            S.commands.removeAll(), S.commands.add([].concat((0, r.default)(s), (0, r.default)(n)))
        }, S.refreshColumnTitles = l.default.throttle(function() {
            l.default.each(S.getAll(), function(e) {
                TD.ui.columns.refreshTitle(e)
            }), S.setupCommands()
        }, 100), S.handleUiNeedsColumns = function() {
            S.sendColumns()
        }, S.handleUiNeedsColumnOrder = function() {
            S.sendColumnOrder()
        }, S.reportColumns = function() {
            var e = {};
            if (l.default.each(S._aColumnIndex, function(t) {
                    var i = h.default.getColumnType(t).replace(/^col_/, "");
                    l.default.each(t.getFeeds(), function(t) {
                        var s = t.getAccountKey().replace(/^twitter:/, "");
                        e[s] || (e[s] = {}), e[s][i] = (e[s][i] || 0) + 1
                    })
                }), TD.controller.stats.generic({
                    page: "main",
                    component: "column_manager",
                    action: "report_columns"
                }, {
                    custom_json_payload: e
                }), TD.decider.get("report_column_usage_stats")) {
                var t = l.default.map(S._aColumnIndex, function(e) {
                    return h.default.getColumnType(e)
                });
                l.default.each(l.default.countBy(t), function(e, t) {
                    var i = t.replace(/^col_/, "");
                    TD.util.metric("column:stats:active_usage:" + i, [e], "metric"), TD.util.metric("column:stats:active_usage:" + i + ":" + e)
                })
            }
        }, S.sendColumnOrder = function() {
            (0, c.default)(document).trigger("dataColumnOrder", {
                columnOrder: S._columnOrder
            })
        }, S.sendColumns = function() {
            (0, c.default)(document).trigger("dataColumns", {
                columns: S.getAllOrdered()
            })
        }, S.checkColumns = function() {
            var t = TD.storage.accountController.getPreferredAccount("twitter");
            0 === e.clientController.client.getColumnOrder().length && t && S.makeDefaultColumns(t)
        }, S.get = function(e) {
            return S._aColumnIndex[e]
        }, S.getByApiid = function(e) {
            return l.default.find(S._aColumnIndex, function(t) {
                return t.model.hasApiid() && t.model.getApiid() === e ? t : null
            })
        }, S.getAll = function() {
            return l.default.clone(S._aColumnIndex)
        }, S.getAllOrdered = function() {
            var e = this.getAll();
            return S._columnOrder.map(function(t) {
                return e[t]
            })
        }, S.add = function(e) {
            S._aColumnIndex[e.model.getKey()] = e
        }, S.addMany = function(e) {
            e.forEach(S.add)
        }, S.deleteColumn = function(t) {
            var i = S._aColumnIndex[t];
            i && !i.temporary && TD.controller.stats.removeColumn(h.default.getColumnType(i)), e.clientController.client.removeColumn(t)
        }, S.removeFromAppLayer = function(t) {
            var i = S._aColumnIndex[t],
                s = i instanceof TD.vo.Column;
            i && s && i.removeSubscriptions(), delete S._aColumnIndex[t], e.columnController.remove(t), TD.controller.feedScheduler.removeColumn(t), TD.ui.columns.removeColumn(t)
        }, S.move = function(e, t) {
            if (t) {
                var i = S._columnOrder.indexOf(e),
                    s = S._columnOrder.concat(),
                    n = (0, u.default)("right" === t, function() {
                        return Math.min(i + 1, S._columnOrder.length - 1)
                    }, "left" === t, function() {
                        return Math.max(i - 1, 0)
                    }),
                    r = S._columnOrder[n];
                s[n] = s[i], s[i] = r, TD.storage.clientController.client.setColumnOrder(s), E(), S.showColumn(e)
            }
        };
        var E = function(t) {
                var i = e.clientController.client.getColumnOrder();
                !l.default.isEqual(S._columnOrder, i) && I(i, t), (0, c.default)(document).trigger("dataColumnsLoaded")
            },
            I = function(i) {
                var s = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                    r = l.default.difference(S._columnOrder, i),
                    a = l.default.difference(i, S._columnOrder);
                l.default.each(r, function(e) {
                    S.removeFromAppLayer(e), TD.ui.columns.removeColumn(e)
                });
                var o = a.filter(function(s) {
                    var n = e.columnController.get(s);
                    return n || t.stateLog("WARNING: column not found for", s, "all columns:", e.columnController.getAll(), "in column_order", i), n
                }).map(function(t) {
                    var i = S.get(t);
                    return (0, u.default)(i, function() {
                        return i
                    }, function() {
                        return S.createColumn(e.columnController.get(t))
                    })
                });
                S.addMany(o), TD.ui.columns.addColumnsToView(o), S._columnOrder = i, S.sendColumnOrder(), S.sendColumns(), l.default.each(a, function(e) {
                    var t = S.get(e);
                    t instanceof TD.vo.Column && TD.controller.feedScheduler.addColumn(t, (0, n.default)({}, s, {
                        doStartStreaming: !0
                    }))
                }), S.setupCommands()
            };
        return S.createColumn = function(e, t) {
            var i = e.getType();
            return (0, s.default)(h.default.simpleColumnTypes).includes(i) ? new m.default(e) : new TD.vo.Column(e, t)
        }, S.addColumnToUI = function(t) {
            var i, s = t.model.getKey();
            return t.temporary = !1, S.add(t), e.feedController.manageFeeds(t.getFeeds()), e.columnController.manage(t.model), i = e.clientController.client.appendColumn(s), E(), l.default.defer(S.showColumn, s), TD.controller.stats.addColumn(h.default.getColumnType(t)), i
        }, S.addColumnToUIAfterColumnKey = function(e, t) {
            if (t) {
                var i = TD.storage.clientController.client.getColumnOrder(),
                    s = i.indexOf(t),
                    n = e.model.getKey();
                i.splice(s + 1, 0, n), TD.storage.clientController.client.setColumnOrder(i)
            }
            S.addColumnToUI(e)
        }, S.makeColumnFor = function(t) {
            var i, s, n, r = t.metadata || {},
                a = t.searchFilter,
                o = e.accountController.getAccountsForService("twitter");
            if ("tweetdeck" === t.service) switch (t.type) {
                case "me":
                    s = e.columnController.getMeFeeds(o), i = S.makeColumn("me", s);
                    break;
                case "privateMe":
                    s = e.columnController.getInboxFeeds(o), i = S.makeColumn("privateMe", s);
                    break;
                case "scheduled":
                    s = e.columnController.getScheduledFeeds(), i = S.makeColumn("scheduled", s);
                    break;
                case "trends":
                case "analytics":
                case "whatshappening":
                    i = S.makeColumn(t.type, [])
            } else {
                switch (t.type) {
                    case "usertimeline":
                    case "favorites":
                    case "usertweets":
                        t.metaString && (r.id = t.metaString);
                        break;
                    case "event":
                    case "search":
                        a = new TD.vo.SearchFilter, r.searchFilterData = a.toJSONObject(), r.baseQuery = t.metaString;
                        break;
                    case "list":
                        n = t.metaString.split("/"), TD.sync.util.assert(2 === n.length, "List meta should contain both ownerId and listId", n), r.ownerId = n[0], r.listId = n[1];
                        break;
                    case "customtimeline":
                        n = t.metaString.split("/"), TD.sync.util.assert(2 === n.length, "Collection meta should contain both ownerId and id", n), r.ownerId = n[0], r.id = n[1]
                }
                i || (i = S.makeOtherColumnAndFeeds({
                    type: t.type,
                    service: t.service,
                    accountKey: t.accountKey,
                    metadata: r,
                    searchFilter: a
                }))
            }
            return i
        }, S.makeDefaultColumns = function(e) {
            var t = [];
            "twitter" === e.getType() && (t = S.trendsColumnEnabled ? ["home", "interactions", "direct", "trends"] : ["home", "interactions", "direct", "networkactivity"]), l.default.each(t, function(t) {
                var i = S.makeColumnFor({
                    type: t,
                    service: "trends" === t ? "tweetdeck" : e.getType(),
                    accountKey: e.getKey()
                });
                S.addColumnToUI(i)
            })
        }, S.reMapDisplayOrder = function(e) {
            S.DISPLAY_ORDER = S.DISPLAY_ORDER.map(function(t) {
                if (t.type !== S.TRENDS) return t;
                var i = S.trendsColumnEnabled && TD.settings.getShowTrendingColumnNewPill();
                return (0, n.default)({}, t, {
                    newColumnType: i && !e,
                    premiumColumnType: S.trendsColumnEnabled && e
                })
            })
        }, S.makeColumn = function(t, i, s) {
            var n = {
                type: t,
                feedkeys: [],
                settings: {}
            };
            return s && (n.filters = s), S.createColumn(new e.Column(n), i)
        }, S.makeOtherColumnAndFeeds = function(t) {
            var i = e.feedController,
                s = [];
            s.push(i.getOrCreateFeed(t.type, t.service, t.accountKey, t.metadata));
            var n = t.searchFilter ? t.searchFilter.toJSONObject() : null;
            return S.makeColumn("other", s, n)
        }, S.handleMakeOrRefreshScheduledColumn = function(e, t) {
            t = t || {};
            var i = TD.storage.columnController.getColumnsByType("scheduled");
            if (!i.length && !TD.settings.getScheduledColAdded() && t.allowAdd) {
                var s = S.makeColumnFor({
                    type: "scheduled",
                    service: "tweetdeck"
                });
                return S.addColumnToUI(s), void TD.settings.setScheduledColAdded(!0)
            }
            i.forEach(function(e) {
                try {
                    TD.controller.feedScheduler.refreshColumn(e.getKey()), S.get(e.getKey()).doInfiniteScroll()
                } catch (e) {
                    console.error("Refreshing scheduled column failed", e)
                }
            })
        }, S.showColumn = function(e) {
            (0, c.default)(document).trigger("uiColumnFocus", {
                columnKey: e
            })
        }, S.getColumnsByAccountKey = function(e) {
            return l.default.values(S._aColumnIndex).filter(function(t) {
                return t.getFeeds().some(function(t) {
                    return t.getAccountKey() === e
                })
            })
        }, S.findChirpByAccountKey = function(e) {
            var t = e.chirpId,
                i = e.accountKey,
                s = e.columnKey,
                n = S.getColumnsByAccountKey(i);
            return s ? n.find(function(e) {
                return e.model.getKey() === s
            }).findChirp(t) : n.find(function(e) {
                return Boolean(e.findChirp(t))
            }).findChirp(t)
        }, S
    }(TD.storage, TD.sync.util, TD.core.defer)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = r(i(10)),
        n = r(i(11));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = function() {
        function e(t) {
            (0, s.default)(this, e), this.model = t
        }
        return (0, n.default)(e, [{
            key: "getSearchFilter",
            value: function() {
                var e = this.model.getFilters();
                return e || (e = {
                    content: {
                        value: {
                            accountId: String(TD.storage.accountController.getPreferredAccount("twitter").getUserID())
                        }
                    }
                }), e
            }
        }, {
            key: "updateSearchFilter",
            value: function(e) {
                this.model.setFilters(e)
            }
        }, {
            key: "getFeeds",
            value: function() {
                return []
            }
        }, {
            key: "reapplyFilters",
            value: function() {}
        }]), e
    }();
    t.default = a
}, function(e, t, i) {
    "use strict";
    var s, n, r = d(i(3)),
        a = d(i(0)),
        o = d(i(1)),
        c = d(i(95)),
        l = i(23),
        u = function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(600));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.controller.auth = (n = {
        twitter: "TwitterAuth",
        bitly: "BitlyValidate"
    }, (s = {}).create = function(e, t) {
        return TD.sync.util.assert(n[e], 'bad name for auth "' + e + '"'), new TD.controller.auth[n[e]](t)
    }, s), TD.controller.auth.AuthorisationProcessor = function() {
        this.start = function(e, t, i) {
            TD.util.isChromeApp() ? this.start_chrome(e, t, i) : TD.util.isWrapperApp() ? this.start_wrapper(e, t, i) : this.start_web(e, t, i)
        }, this.start_wrapper = function(e, t, i) {
            var s = deck.authenticateOn(this.getAuthURL(e, i)),
                n = this;
            s.loadedUrl.connect(function(i) {
                var r = n.getTokenFromURL(e.getType(), i);
                r && (r.access_token ? n.updateAccount(r.access_token, t) : n.updateAccount(r.oauth_token, r.oauth_token_secret, t), s.hide(), s.deleteLater())
            }), s.show()
        }, this.start_web = function(e, t, i) {
            var s = window.open(this.getAuthURL(e, i), "mywindow", "width=800,height=450"),
                n = this;
            setTimeout(function i() {
                var r, a;
                try {
                    s && s.location && s.location.href && (r = s.location.href)
                } catch (e) {}
                if (r && (a = n.getTokenFromURL(e.getType(), r))) return a.access_token ? n.updateAccount(a.access_token, t) : n.updateAccount(a.oauth_token, a.oauth_token_secret, t), void s.close();
                setTimeout(i, 250)
            }, 500)
        }, this.getAuthURL = function(e, t) {
            var i = e.getType(),
                s = {};
            if ("twitter" === i) {
                var n = Boolean(t),
                    r = e.getUsername();
                n && (s.force_login = n), r && (s.screen_name = r)
            }
            return TD.net.util.addURLParameters(TD.config.api_root + "/oauth/authorize/" + i, s)
        }, this.getTokenFromURL = function(e, t) {
            var i, s;
            return (o.default.contains(t, "/oauth/success/" + e) || o.default.contains(t, "/oauth2/success/" + e)) && (s = t.split("?")[1], i = TD.net.util.formDecode(s)), i
        }, this.start_chrome = function(e, t, i) {
            var s, n, r = this;
            chrome.tabs.getSelected(null, function(e) {
                s = e.id
            }), n = {
                url: this.getAuthURL(e, i)
            }, chrome.tabs.create(n, function(i) {
                var n = i.id;
                chrome.tabs.onUpdated.addListener(function(i, a, o) {
                    var c;
                    i === n && o.url && "complete" == o.status && (c = r.getTokenFromURL(e.getType(), o.url)) && (c.access_token ? r.updateAccount(c.access_token, t) : r.updateAccount(c.oauth_token, c.oauth_token_secret, t), chrome.tabs.update(s, {
                        selected: !0
                    }), chrome.tabs.remove(i))
                })
            })
        }
    }, TD.controller.auth.TwitterAuth = function(e) {
        var t = this;
        t.account = e, this.verifyAccount = function(e, i) {
            (0, a.default)(document).trigger("metric", {
                key: "auth:twitter:verify:start"
            });
            var s = t.account,
                n = TD.config.twitter_api_base + "/" + TD.config.twitter_api_version + "/account/verify_credentials.json",
                r = TD.net.ajax.request(n, {
                    account: s,
                    isSigned: !0,
                    settings: {
                        timeout: 6e3
                    }
                });
            r.addCallback(function(n) {
                var r = n.data,
                    o = s.getUserID();
                o && o != r.id ? (console.log("Attempting to update wrong account:", s, "Using data:", r), (0, a.default)(document).trigger("metric", {
                    key: "auth:twitter:verify:wrong_account"
                }), TD.sync.util.printStacktrace(), (0, l.showErrorNotification)({
                    message: "Failed to add account. Please try again later."
                }), i()) : ((0, a.default)(document).trigger("metric", {
                    key: "auth:twitter:verify:success"
                }), t.updateAccountFromVerifySuccess(s, r), e(s))
            }), r.addErrback(function(e) {
                return (0, a.default)(document).trigger("metric", {
                    key: "auth:twitter:verify:fail"
                }), (0, l.showErrorNotification)({
                    message: "Failed to verify account. Please try again later."
                }), e
            }), i && r.addErrback(i)
        }, this.verifyCookieAccount = function() {
            TD.util.metric("auth:twitter:verify-cookie:start");
            var e = !!TD.decider.get("graphql_login");
            return (0, a.default)(document).trigger("dataUsingGraphQL", {
                isUsingGraphQL: e
            }), (0, c.default)(e, function() {
                return u.getLoggedInUser()
            }, function() {
                return TD.net.ajax.getCookieUser().addCallback(function(e) {
                    return e.data
                })
            }).addCallbackWith(this, function(e) {
                TD.util.metric("auth:twitter:verify-cookie:success"), this.updateAccountFromVerifySuccess(this.account, e)
            }).addErrback(TD.util.effect(function(e) {
                TD.util.metric("auth:twitter:verify-cookie:fail")
            }))
        }, this.updateAccountFromVerifySuccess = function(e, t) {
            e.setUsername(t.screen_name), e.setName(t.name), e.setProfileImageURL(t.profile_image_url_https), e.setUserID(t.id_str), e.setIsPrivate(t.protected), e.setIsVerified(t.verified), e.setUpdated(Date.now()), e.computeKey(), e.set("require_some_consent", t.require_some_consent)
        }, this.updateAccount = function(e, i, s) {
            var n = t.account;
            n.setUsername(""), n.setUserID(""), n.setType("twitter"), n.setOAuthToken(e), n.setTokenSecret(i), this.verifyAccount(s)
        }, this.becomeContributor = function() {
            var e, t = TD.storage.store.getTwitterLoginAccount();
            return TD.decider.get("convert_new_oauth_account_to_contributor") && !this.account.isContributor() && t && this.account.getUserID() !== t.getUserID() ? ((e = this.becomeContributorApiRequest(t.getUserID())).addCallbackWith(this, function() {
                this.account.makeContributor(), this.account.setTokenSecret(void 0)
            }), e.addCallbacks(this.handleBecomeContributorSuccess.bind(this), this.handleBecomeContributorError.bind(this)), e) : TD.core.defer.succeed()
        }.bind(this), this.becomeContributorApiRequest = function(e) {
            var t = TD.config.twitter_api_base + "/" + TD.config.twitter_api_version + "/users/contributors/update.json";
            return TD.net.ajax.request(t, {
                account: this.account,
                isSigned: !0,
                method: "POST",
                params: {
                    user_id: e,
                    admin: !0
                }
            })
        }, this.handleBecomeContributorSuccess = function(e) {
            return (0, a.default)(document).trigger("metric", {
                key: "account:become_contributor:success"
            }), e
        }, this.handleBecomeContributorError = function(e) {
            var t, i = e.req.responseJSON.errors[0],
                s = "unknown",
                n = e.req.status;
            if (i) switch (s = i.code || s, i.code) {
                case 317:
                    t = (0, r.default)("@{{username}} may not have any more Team members.", {
                        username: this.account.getUsername()
                    });
                    break;
                case 318:
                    t = (0, r.default)("You cannot join any more Teams.");
                    break;
                case 330:
                    t = (0, r.default)("You have privacy settings enabled preventing you from joining this Team. Visit twitter.com/settings to adjust.");
                    break;
                default:
                    t = i.message
            }
            return t = t || (0, r.default)("An unknown error occurred. Please try again shortly."), (0, l.showErrorNotification)({
                message: t
            }), (0, a.default)(document).trigger("metric", {
                key: "account:become_contributor:error:" + n + ":" + s
            }), e
        }
    }, TD.controller.auth.BitlyValidate = function(e) {
        var t = this;
        t.account = e, this.updateAccount = function(e, t) {
            this.verifyAccount(t)
        }, this.verifyAccount = function(e, i) {
            var s = t.account,
                n = {
                    x_login: s.get("userId"),
                    x_apiKey: s.get("oauth_token"),
                    apiKey: "R_b8032856b71a14fabfe64f6845689ddf",
                    login: "tweetdeckapi",
                    format: "json"
                },
                r = TD.net.ajax.jsonp("https://api-ssl.bitly.com/v3/validate", n);
            r.addCallback(function(t) {
                var n = t.data;
                n.data && 1 == n.data.valid ? (s.setUpdated((new Date).getTime()), s.computeKey(), e(s)) : i()
            }), r.addErrback(i)
        }
    }, TD.controller.auth.TwitterAuth.prototype = new TD.controller.auth.AuthorisationProcessor
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    t.default = TD.services.ChirpBase = function(e) {
        this.account = e
    }, TD.services.ChirpBase.kMEDIA_CLASS = "s-media", TD.services.ChirpBase.RETWEET_CLASS = "is-retweet", TD.services.ChirpBase.FAVORITE_CLASS = "is-favorite", TD.services.ChirpBase.UNREAD_CLASS = "is-unread", TD.services.ChirpBase.TWEET = "tweet", TD.services.ChirpBase.GAP = "gap", TD.services.ChirpBase.CONVERSATION_JOIN = "conversation_participants_join", TD.services.ChirpBase.CONVERSATION_PARTICIPANTS_JOIN = "conversation_participants_join", TD.services.ChirpBase.CONVERSATION_PARTICIPANTS_FAILED = "conversation_participants_failed", TD.services.ChirpBase.CONVERSATION_NAME_UPDATE = "conversation_name_update", TD.services.ChirpBase.MESSAGE = "message", TD.services.ChirpBase.MESSAGE_THREAD = "message_thread", TD.services.ChirpBase.SCHEDULED_STATUS = "scheduled_status", TD.services.ChirpBase.SCHEDULED_GROUP = "scheduled_group", TD.services.ChirpBase.SCHEDULED_TWEET = "scheduled_tweet", TD.services.ChirpBase.SCHEDULED_TWEET_GROUP = "scheduled_tweet_group", TD.services.ChirpBase.DATAMINR_ALERT = "dataminr_alert", TD.services.ChirpBase.prototype.id = "", TD.services.ChirpBase.prototype.chirpType = "unknown", TD.services.ChirpBase.prototype.text = "", TD.services.ChirpBase.prototype.created = null, TD.services.ChirpBase.prototype.htmlText = "", TD.services.ChirpBase.prototype.creatorAccount = null, TD.services.ChirpBase.prototype.embeds = null, TD.services.ChirpBase.prototype.isQuoteStatus = !1, TD.services.ChirpBase.prototype.isListAction = !1, TD.services.ChirpBase.prototype.apiBounds = null, TD.services.ChirpBase.prototype.getApiBounds = function(e) {
        return this.apiBounds = this.apiBounds || {}, this.apiBounds[e] || {}
    }, TD.services.ChirpBase.prototype.setApiBounds = function(e, t) {
        return this.apiBounds = this.apiBounds || {}, this.apiBounds[e] = t, this
    }, TD.services.ChirpBase.prototype.apiSource = "rest", TD.services.ChirpBase.prototype.cursor = null, TD.services.ChirpBase.prototype.sortIndex = null, TD.services.ChirpBase.prototype._hasImage = null, TD.services.ChirpBase.prototype._hasVideo = null, TD.services.ChirpBase.prototype._hasAnimatedGif = null, TD.services.ChirpBase.prototype._hasVine = null, TD.services.ChirpBase.prototype._hasLink = null, TD.services.ChirpBase.prototype.fromJSONObject = function() {
        throw new Error("fromJSONObject Not Implemented")
    }, TD.services.ChirpBase.prototype.isOwnChirp = function() {
        throw new Error("isOwnChirp Not Implemented")
    }, TD.services.ChirpBase.prototype.destroy = function() {
        throw new Error("destroy Not Implemented")
    }, TD.services.ChirpBase.prototype.render = function() {
        throw new Error("render Not Implemented")
    }, TD.services.ChirpBase.prototype.getNotificationData = function() {
        return null
    }, TD.services.ChirpBase.prototype.email = function() {
        throw new Error("email Not Implemented")
    }, TD.services.ChirpBase.prototype.postComment = function() {
        throw new Error("postComment Not Implemented")
    }, TD.services.ChirpBase.prototype.getChirpURL = function() {
        throw new Error("getChirpURL Not Implemented")
    }, TD.services.ChirpBase.prototype.isTranslatable = function() {
        return !1
    }, TD.services.ChirpBase.prototype.translate = function() {
        throw new Error("translate Not Implemented")
    }, TD.services.ChirpBase.prototype.getChirpType = function() {
        return this.chirpType
    }, TD.services.ChirpBase.prototype.getScribeItemData = function() {
        throw new Error("getScribeItemData not implemented")
    }, TD.services.ChirpBase.prototype.getDOMChirps = function() {
        var e = "[data-key$='" + this.id + "'][data-account-key='" + this.account.getKey() + "']";
        return (0, r.default)(e)
    }, TD.services.ChirpBase.prototype.passFilters = function(e) {
        return TD.controller.filterManager.pass(this, e)
    }, TD.services.ChirpBase.prototype._generateHTMLText = function() {
        this.htmlText = TD.util.transform(this.text)
    }, TD.services.ChirpBase.prototype.createdPretty = function() {
        return TD.util.prettyDate(this.created)
    }, TD.services.ChirpBase.prototype.createdPrettyFull = function() {
        return TD.util.prettyTimeString(this.created)
    }, TD.services.ChirpBase.prototype.createdPrettyTimeOrDate = function() {
        return TD.util.prettyTimeOrDateString(this.created)
    }, TD.services.ChirpBase.prototype.getSinceId = function() {
        return this.id
    }, TD.services.ChirpBase.prototype.getUnreadChirps = function(e) {
        var t = !e || this.belongsAbove(e);
        return !this.isOwnChirp() && t ? [this] : []
    }, TD.services.ChirpBase.prototype.getSortIndex = function() {
        return this.sortIndex || (this.sortIndex = {
            value: this.created.getTime(),
            type: "milliseconds"
        }), this.sortIndex
    }, TD.services.ChirpBase.prototype.belongsAbove = function(e) {
        return TD.util.chirpColumnSort(this, e) < 0
    }, TD.services.ChirpBase.prototype.belongsBelow = function(e) {
        return TD.util.chirpColumnSort(this, e) > 0
    }, TD.services.ChirpBase.prototype.getFilterableText = function() {
        return this.text
    }, TD.services.ChirpBase.prototype.getSenders = function() {
        return null
    }, TD.services.ChirpBase.prototype.isRetweetedStatus = function() {
        return null
    }, TD.services.ChirpBase.prototype.getRelatedTweet = function() {
        return null
    }, TD.services.ChirpBase.prototype.getMedia = function() {
        return this._media ? this._media : []
    }, TD.services.ChirpBase.prototype.getCardsForGallery = function() {
        return []
    }, TD.services.ChirpBase.prototype.hasMedia = function() {
        return this.getMedia().length > 0
    }, TD.services.ChirpBase.prototype.hasCard = function() {
        return Boolean(this.card)
    }, TD.services.ChirpBase.prototype.isMediaGridContent = function() {
        return TD.decider.get("multi_photo_media_grid") && this.getMedia().length > 1
    }, TD.services.ChirpBase.prototype.mediaLength = function() {
        return this.getMedia().length
    }, TD.services.ChirpBase.prototype.hasImage = function() {
        return null === this._hasImage && (this._hasImage = this.getMedia().some(function(e) {
            return !e.isVideo
        })), this._hasImage
    }, TD.services.ChirpBase.prototype.hasVideo = function() {
        return null === this._hasVideo && (this._hasVideo = this.getMedia().some(function(e) {
            return e.isVideo
        })), this._hasVideo
    }, TD.services.ChirpBase.prototype.hasVine = function() {
        return null === this._hasVine && (this._hasVine = this.getMedia().some(function(e) {
            return e.isVine
        })), this._hasVine
    }, TD.services.ChirpBase.prototype.hasAnimatedGif = function() {
        return null === this._hasAnimatedGif && (this._hasAnimatedGif = this.getMedia().some(function(e) {
            return e.isAnimatedGif
        })), this._hasAnimatedGif
    }, TD.services.ChirpBase.prototype.hasLink = function() {
        return null === this._hasLink && (this._hasLink = twttrTxt.extractUrls(this.text).length > 0), this._hasLink
    }, TD.services.ChirpBase.prototype.isFromVerifiedUser = function() {
        return !1
    }, TD.services.ChirpBase.msFudge = 0, TD.services.ChirpBase.prototype.fudgeCreatedTime = function(e) {
        var t = TD.services.ChirpBase.msFudge;
        e.setMilliseconds(t), t++, t %= 1e3, TD.services.ChirpBase.msFudge = t
    }, TD.services.ChirpBase.prototype.scribeMediaImpression = function() {}, TD.services.ChirpBase.prototype.isStreamed = function() {
        return "realtime" === this.apiSource
    }, TD.services.ChirpBase.prototype.isFromContent = function() {
        return "graphql" === this.apiSource
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.services.GapChirp = function(e, t) {
        t = t || {}, this.id = r.default.uniqueId("gap_"), this.gapCursor = e, this.gapSize = this.processGapSize(t.gapSize), this.sortIndex = {
            type: t.sortIndex.type,
            value: t.sortIndex.value,
            conflictResolution: "after"
        }
    }, TD.services.GapChirp.prototype = new TD.services.ChirpBase, TD.services.GapChirp.prototype.chirpType = TD.services.ChirpBase.GAP, TD.services.GapChirp.prototype.processGapSize = function(e) {
        return "number" != typeof e ? 0 : 10 * ~~(Math.max(e, 0) / 10)
    }, TD.services.GapChirp.prototype.render = function() {
        return TD.ui.template.render("status/gap_in_stream", {
            id: this.id,
            showSize: this.gapSize > 10,
            size: TD.util.truncateNumber(this.gapSize)
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = p(i(43)),
        n = p(i(3)),
        r = p(i(0)),
        a = p(i(1851)),
        o = p(i(601)),
        c = p(i(8)),
        l = p(i(190)),
        u = i(23),
        d = p(i(1)),
        h = p(i(602)),
        m = i(603),
        f = i(138);

    function p(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.services.TwitterStatus = function(e) {
        this.account = e
    }, TD.services.TwitterStatus.prototype = new TD.services.ChirpBase, TD.services.TwitterStatus.prototype.chirpType = TD.services.ChirpBase.TWEET, TD.services.TwitterStatus.prototype.user = null, TD.services.TwitterStatus.prototype.inReplyToID = "", TD.services.TwitterStatus.prototype.inReplyToUserID = "", TD.services.TwitterStatus.prototype.inReplyToScreenName = "", TD.services.TwitterStatus.prototype.isFavorite = !1, TD.services.TwitterStatus.prototype.isRetweeted = !1, TD.services.TwitterStatus.prototype.retweetCount = 0, TD.services.TwitterStatus.prototype.likeCount = 0, TD.services.TwitterStatus.prototype.replyCount = 0, TD.services.TwitterStatus.prototype.retweetedStatus = null, TD.services.TwitterStatus.prototype.quotedTweet = null, TD.services.TwitterStatus.prototype.entities = null, TD.services.TwitterStatus.prototype.poll = null, TD.services.TwitterStatus.prototype.sourceUrl = "", TD.services.TwitterStatus.prototype.sourceNoHTML = "", TD.services.TwitterStatus.prototype._media = null, TD.services.TwitterStatus.prototype._filterableText = null, TD.services.TwitterStatus.prototype.fromJSONObject = function(e) {
        this.id = e.id_str || e.id, this.sortIndex = {
            value: this.id,
            type: "numericString"
        }, e.user && (this.user = new TD.services.TwitterUser(this.account).fromJSONObject(e.user), this.creatorAccount = TD.storage.accountController.get(TD.storage.Account.generateKeyFor("twitter", this.user.id))), e.source && (this.sourceNoHTML = e.source.replace(/<[^>]*>/g, ""), this.sourceUrl = twttrTxt.extractUrls(e.source)[0]), this._addPrettyEngagementCounts(e), this.inReplyToUserID = e.in_reply_to_user_id_str, this.inReplyToScreenName = e.in_reply_to_screen_name, this.isFavorite = e.favorited, this.isRetweeted = e.retweeted, this.retweetCount = e.retweet_count, this.likeCount = e.favorite_count, this.replyCount = e.reply_count, this.currentUserRetweet = e.current_user_retweet, this.possiblySensitive = e.possibly_sensitive, this.inReplyToID = e.in_reply_to_status_id_str || e.in_reply_to_status_id;
        var t = d.default.get(e, "retweeted_status.self_thread.id_str", !1);
        return this.selfThreadId = d.default.get(e, "self_thread.id_str", t), e.retweeted_status ? (this.retweetedStatus = new TD.services.TwitterStatus(this.account).fromJSONObject(e.retweeted_status), this.text = this.retweetedStatus.text, this.entities = this.retweetedStatus.entities) : (this.text = o.default.getTweetText(e), this.entities = o.default.getTweetEntities(e)), this.retweetedStatus ? (this.quotedTweet = this.retweetedStatus.quotedTweet, this.isQuoteStatus = this.retweetedStatus.isQuoteStatus, this.quotedTweetMissing = this.retweetedStatus.quotedTweetMissing) : (this.isQuoteStatus = Boolean(e.quoted_status_id_str || e.is_quote_status), this.quotedTweet = e.quoted_status ? new TD.services.TwitterStatus(this.account).fromJSONObject(e.quoted_status) : null, this.quotedStatusId = e.quoted_status_id_str, this.quotedTweetMissing = Boolean(this.isQuoteStatus && !this.quotedTweet)), this._media = TD.services.TwitterMedia.getMediaFromEntities(this.entities), this.lang = e.lang, this.place = e.place || {}, this.created = TD.util.parseDateString(e.created_at), this.card = e.card, d.default.get(e, "card.name", "").includes("poll") && (this.poll = a.default.getPollDataFromCard(e.card)), this.conversationMuted = e.conversation_muted, this._generateHTMLText(), this
    }, TD.services.TwitterStatus.prototype.fromGraphQLJSONObject = function(e) {
        var t = e.rest_id,
            i = e.legacy,
            s = e.core,
            n = i;
        this.id = t, this.apiSource = "graphql", this.sortIndex = {
            value: this.id,
            type: "numericString"
        }, s && s.user && (this.user = new TD.services.TwitterUser(this.account).fromGraphQLJSONObject(s.user), this.creatorAccount = TD.storage.accountController.get(TD.storage.Account.generateKeyFor("twitter", this.user.id))), n.source && (this.sourceNoHTML = n.source.replace(/<[^>]*>/g, ""), this.sourceUrl = twttrTxt.extractUrls(n.source)[0]), this._addPrettyEngagementCounts(n), this.inReplyToUserID = n.in_reply_to_user_id_str, this.inReplyToScreenName = n.in_reply_to_screen_name, this.isFavorite = n.favorited, this.isRetweeted = n.retweeted, this.retweetCount = n.retweet_count, this.likeCount = n.favorite_count, this.replyCount = n.reply_count, this.possiblySensitive = n.possibly_sensitive, this.inReplyToID = n.in_reply_to_status_id_str;
        var r = d.default.get(n, "retweeted_status.legacy.self_thread.id_str", !1);
        return this.selfThreadId = d.default.get(n, "self_thread.id_str", r), n.retweeted_status ? (this.retweetedStatus = new TD.services.TwitterStatus(this.account).fromGraphQLJSONObject(n.retweeted_status), this.text = this.retweetedStatus.text, this.entities = this.retweetedStatus.entities) : (this.text = o.default.getTweetText(n), this.entities = o.default.getTweetEntities(n)), Boolean(n.quoted_status_id_str) && (Boolean(n.quoted_status) ? TD.util.metric("project-content:success:quoted_tweet") : d.default.get(this, "retweetedStatus.quotedTweet") || TD.util.metric("project-content:errors:missing_quoted_tweet")), this.retweetedStatus ? (this.quotedTweet = this.retweetedStatus.quotedTweet, this.isQuoteStatus = this.retweetedStatus.isQuoteStatus, this.quotedTweetMissing = this.retweetedStatus.quotedTweetMissing) : (this.isQuoteStatus = Boolean(n.quoted_status_id_str), this.quotedTweet = n.quoted_status ? new TD.services.TwitterStatus(this.account).fromGraphQLJSONObject(n.quoted_status) : null, this.quotedStatusId = n.quoted_status_id_str, this.quotedTweetMissing = Boolean(this.isQuoteStatus && !this.quotedTweet)), this._media = TD.services.TwitterMedia.getMediaFromEntities(this.entities), this.lang = n.lang, this.place = n.place || {}, this.created = TD.util.parseDateString(n.created_at), n.card && (this.card = (0, f.convertCardFromGraphQL)(n.card)), d.default.get(n, "card.name", "").includes("poll") && (this.poll = a.default.getPollDataFromCard(n.card)), this.conversationMuted = n.conversation_muted, this._generateHTMLText(), this
    }, TD.services.TwitterStatus.prototype._addPrettyEngagementCounts = function(e) {
        if (TD.controller.stats.isInExperimentBucket("live_engagement_in_column_8020", "live_engagement_enabled")) {
            var t = parseInt(e.retweet_count, 10),
                i = parseInt(e.favorite_count || d.default.get(e, "retweeted_status.favorite_count") || d.default.get(e, "retweeted_status.legacy.favorite_count"), 10),
                s = parseInt(e.reply_count || d.default.get(e, "retweeted_status.reply_count") || d.default.get(e, "retweeted_status.legacy.reply_count"), 10),
                n = (0, m.getHumanFormatOptions)();
            this.prettyRetweetCount = !!t && (0, h.default)(t, n), this.prettyLikeCount = !!i && (0, h.default)(i, n), this.prettyReplyCount = !!s && (0, h.default)(s, n), this.withPrettyEngagements = !0
        } else this.withPrettyEngagements = !1
    }, TD.services.TwitterStatus.prototype._generateHTMLText = function() {
        this.htmlText = TD.util.transform(this.text, this.entities)
    }, TD.services.TwitterStatus.prototype.getMainUser = function() {
        return this.retweetedStatus ? this.retweetedStatus.user : this.user
    }, TD.services.TwitterStatus.prototype.getCreator = function() {
        return this.user
    }, TD.services.TwitterStatus.prototype.getRelatedTweet = function() {
        return this
    }, TD.services.TwitterStatus.prototype.getMainTweet = function() {
        return this.retweetedStatus ? this.retweetedStatus : this
    }, TD.services.TwitterStatus.prototype.getReplyContext = function() {
        if (!this.inReplyToID) return "";
        var e = l.default.getRecipientsToDisplay(this.getReplyingToUsers());
        return e.users.length > 0 ? c.default.render("compose/reply_info", {
            recipients: e
        }) : void 0
    }, TD.services.TwitterStatus.prototype.isInThread = function() {
        return Boolean(this.selfThreadId)
    }, TD.services.TwitterStatus.prototype.hasLocationData = function() {
        var e = this.getMainTweet();
        return !(!e.place.full_name && !e.place.country)
    }, TD.services.TwitterStatus.prototype.getLocationName = function() {
        return this.getMainTweet().place.name
    }, TD.services.TwitterStatus.prototype.getLocationFullName = function() {
        var e = this.getMainTweet();
        return e.place.full_name && e.place.country ? [e.place.full_name, e.place.country].join(", ") : e.place.country ? e.place.country : ""
    }, TD.services.TwitterStatus.prototype.getLocationURL = function() {
        var e;
        switch (this.getMainTweet().place.place_type) {
            case "admin":
                e = 10;
                break;
            case "city":
                e = 12;
                break;
            case "country":
                e = 6;
                break;
            case "neighbourhood":
                e = 13;
                break;
            case "poi":
            case "default":
                e = 15
        }
        return "https://maps.google.com/maps?q=" + encodeURIComponent(this.getLocationFullName()) + "&z=" + e
    }, TD.services.TwitterStatus.prototype.getLocationSearchEncodedURL = function() {
        return "https://twitter.com/search?q=" + encodeURIComponent('near:"' + this.getLocationFullName() + '"')
    }, TD.services.TwitterStatus.prototype.isOwnChirp = function() {
        return Boolean(this.creatorAccount)
    }, TD.services.TwitterStatus.prototype.isRetweetedStatus = function() {
        return Boolean(this.retweetedStatus)
    }, TD.services.TwitterStatus.prototype.isTranslatable = function() {
        var e = this.getMainTweet();
        return TD.decider.get("machine_translated_tweets") && e.lang && e.lang !== TD.languages.getSystemLanguageCode(!0) && TD.languages.isSupportedTranslationSourceLanguage(e.lang) && TD.languages.isSystemLangSupportedDestinationLanguage() && !e.isOwnChirp() && !e.user.isProtected && !e.getTranslation()
    }, TD.services.TwitterStatus.prototype.translate = function() {
        var e = TD.controller.clients.getClient(this.account.getKey()),
            t = this.getMainTweet().lang,
            i = TD.languages.getSupportedDestinationSystemLanguage(),
            s = function(e) {
                var t, s, n = this.getDOMChirps().add(this.getMainTweet().getDOMChirps()),
                    a = n.find(".js-translate-call-to-action");
                n = n.filter(function(e) {
                    return 0 === (0, r.default)(".js-tweet-translation", this).length
                }), this.lang = e.translated_lang || this.lang, a.remove(), e.translated_lang !== i && (e.htmltext = TD.util.transform(e.text, e.entities), e.localizedLanguageName = this.getLocalizedLanguageName(), (t = n.find(".js-tweet-text")).after(TD.ui.template.render("status/tweet_translation", e)), s = n.find(".js-tweet-translation").find(".js-tweet-translation-text"), t.addClass("tweet-translation-original-text margin-bn"), s.html(e.htmltext), this.setTranslation(e))
            }.bind(this);
        e.translateTweet(this.getMainTweet().id, i, s, function(e) {
            (0, u.showErrorNotification)({
                message: (0, n.default)("Translation failed")
            })
        }), TD.controller.stats.translate(this.getMainUser().id, this.id, this.account.getUserID(), i, t)
    }, TD.services.TwitterStatus.prototype.setTranslation = function(e) {
        this.getMainTweet().translation = e
    }, TD.services.TwitterStatus.prototype.getTranslation = function() {
        return this.getMainTweet().translation
    }, TD.services.TwitterStatus.prototype.getChirpURL = function() {
        var e = this.getMainTweet();
        return "https://twitter.com/" + e.user.screenName + "/status/" + e.id
    }, TD.services.TwitterStatus.prototype.getLightChirpURL = function() {
        var e = this.getMainTweet();
        return "twitter.com/" + e.user.screenName + "/status/" + e.id
    }, TD.services.TwitterStatus.prototype.getLocalizedLanguageName = function() {
        var e = TD.languages.getLanguageFromISOCode(this.getMainTweet().lang);
        return e ? e.localized_name : ""
    }, TD.services.TwitterStatus.prototype.destroy = function() {
        this.isOwnChirp() ? this._action("delete", function(e) {
            TD.controller.feedManager.deleteChirp(e.id)
        }) : (0, u.showErrorNotification)({
            message: (0, n.default)("You don't own this account - can't delete")
        })
    }, TD.services.TwitterStatus.prototype.getQuoteText = function() {
        var e = {
            username: this.user.screenName,
            text: TD.util.removeHTMLCodes(this.text)
        };
        return TD.ui.template.toHtml("RT @{{username}}: {{{text}}}", e)
    }, TD.services.TwitterStatus.prototype.renderMinimalist = function(e) {
        return e.isMinimalist = !0, this.render(e)
    }, TD.services.TwitterStatus.prototype.render = function(e) {
        e = e || {};
        var t = TD.settings.getDisplaySensitiveMedia(),
            i = {
                tweet: this,
                withMediaPreview: !0,
                isMediaPreviewOff: e.mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_OFF,
                isMediaPreviewSmall: e.mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_SIZE_SMALL,
                isMediaPreviewLarge: e.mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_SIZE_LARGE,
                mediaPreviewSrc: function() {
                    return this.getMediaSrcForPreviewSize(e.mediaPreviewSize)
                },
                altText: function() {
                    return this.getAltText()
                },
                renderQuoted: function() {
                    return this.renderQuotedTweet(e)
                },
                thumbSizeClass: TD.services.TwitterMedia.thumbSizeClasses[e.mediaPreviewSize],
                isPossiblySensitive: (this.possiblySensitive || d.default.get(this.retweetedStatus, "possiblySensitive")) && !t,
                isMinimalist: Boolean(e.isMinimalist),
                withDragHandle: !1,
                withRemove: !1,
                withTweetActions: !0,
                withFooter: !0,
                withAvatar: !0,
                withLinebreaks: !0,
                isFavorited: this.isFavorite,
                isRetweeted: this.isRetweet
            };
        TD.config.debug_highlight_streamed_chirps && (this.isStreamed() ? e.chirpClassnames = "is-streamed" : this.isFromContent() ? e.chirpClassnames = "is-contented" : e.chirpClassnames = "");
        var s = this.getMedia().find(function(e) {
                return e.isAnimatedGif
            }),
            n = Boolean(s) ? s.getAnimatedGifForPreview() : {},
            a = r.default.extend({}, i, n, e);
        return TD.ui.template.render("status/tweet_in_stream", a).trim()
    }, TD.services.TwitterStatus.prototype.renderInMediaGallery = function() {
        return TD.ui.template.render("status/tweet_in_box", {
            tweet: this,
            withTweetActions: !0,
            withTweetActionsVisible: !0,
            withFooter: !0,
            withAvatar: !0,
            withMediaPreview: !1,
            actionsMenuPosition: "pos-l pos-t",
            inDialog: !0
        })
    }, TD.services.TwitterStatus.prototype.renderQuotedTweet = function(e) {
        (e = e || {}).mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_SIZE_LARGE && (e.mediaPreviewSize = TD.vo.Column.MEDIA_PREVIEW_SIZE_MEDIUM), e.isMediaPreviewLarge = !1, e.thumbSizeClass = TD.services.TwitterMedia.thumbSizeClasses[e.mediaPreviewSize], e.withAvatar = !1, e.isMediaPreviewCompact = !1, e.isMediaPreviewInQuoted = !0;
        var t = TD.settings.getDisplaySensitiveMedia(),
            i = {
                tweet: this,
                withAvatar: !1,
                withInlinedUsername: !0,
                withMediaPreview: !0,
                isMediaPreviewOff: e.mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_OFF,
                isMediaPreviewSmall: e.mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_SIZE_SMALL,
                altText: function() {
                    return this.getAltText()
                },
                mediaPreviewSrc: function() {
                    return this.getMediaSrcForPreviewSize(e.mediaPreviewSize)
                },
                isPossiblySensitive: this.possiblySensitive && !t
            },
            s = this.getMedia().find(function(e) {
                return e.isAnimatedGif
            }),
            n = Boolean(s) ? s.getAnimatedGifForPreview() : {},
            a = r.default.extend({}, i, n, e);
        return TD.ui.template.render("status/quoted_tweet", a)
    }, TD.services.TwitterStatus.prototype.getNotificationData = function() {
        var e, t = this.getMainTweet(),
            i = {};
        return t.sender ? (e = t.recipient ? t.recipient.screenName : t.account.getUsername(), i.title = t.sender.screenName + " > " + e) : t.user && t.user.screenName && (i.title = t.user.screenName), i.img = t.getMainUser().profileImageURL, i.text = (0, r.default)("<div>" + t.htmlText + "</div>").text(), i
    }, TD.services.TwitterStatus.prototype.favorite = function(e) {
        var t, i, s, r, a = this.isFavorite,
            o = TD.controller.clients.getClient(this.account.getKey());
        this.setFavorite(!this.isFavorite), this.animateFavorite(e.element), r = function() {
            (0, u.showErrorNotification)({
                message: a ? (0, n.default)("Unlike failed") : (0, n.default)("Like failed")
            })
        }, s = function(e) {
            var t = TD.core.defer.fail();
            403 !== e.status && 404 !== e.status || (t = this.refreshFavorite(o)), t.addErrback(function() {
                this.setFavorite(a), r()
            }.bind(this))
        }.bind(this), i = function(e) {
            e.error && s()
        }, a ? (o.unfavorite(this.id, i, s), t = TD.controller.stats.unfavorite) : (o.favorite(this.id, i, s), t = TD.controller.stats.favorite), t(this.getScribeItemData(), this.account.getUserID())
    }, TD.services.TwitterStatus.prototype.refreshFavorite = function(e) {
        var t = new TD.core.defer.Deferred;
        return e.show(this.id, t.callback.bind(t), t.errback.bind(t)), t.addCallback(function(e) {
            this.setFavorite(e.isFavorite)
        }.bind(this)), t
    }, TD.services.TwitterStatus.prototype.animateFavorite = function(e) {
        if (TD.decider.get("heartfave_animation") && !e.find(".js-like-count").length) {
            var t = e.find('a[rel="favorite"]'),
                i = t.find("i");
            if (!this.isFavorite) return t.blur(), t.find(".heartsprite").remove(), void i.toggleClass("is-invisible", !1);
            window.requestAnimationFrame(function() {
                var e = (0, r.default)(TD.ui.template.render("heartsprite"));
                i.toggleClass("is-invisible", !0), t.blur(), t.append(e)
            })
        } else {
            window.requestAnimationFrame(function() {
                e.find('a[rel="favorite"]').toggleClass("anim anim-slower anim-bounce-in", this.isFavorite).blur()
            }.bind(this))
        }
    }, TD.services.TwitterStatus.prototype.email = function() {
        var e, t = (0, n.default)("Tweet forwarded by @{{1}}", {
                1: this.account.getUsername()
            }),
            i = [];
        i.push(this.text), i.push((0, n.default)("Original Tweet: {{1}}", {
            1: this.getChirpURL()
        })), i.push((0, n.default)("Sent via TweetDeck")), e = i.join("\n\n"), TD.util.openEmail(null, t, e)
    }, TD.services.TwitterStatus.prototype.retweet = function() {
        var e = 1 === TD.storage.accountController.getAccountsForService("twitter").length;
        if (!this.isRetweeted || !e) {
            var t = (0, n.default)("Retweet this to your followers?");
            return new TD.components.ActionDialog({
                tweet: this,
                title: t
            })
        }
        this.setRetweeted(!1), (0, r.default)(document).trigger("uiUndoRetweet", {
            tweetId: this.getMainTweet().id,
            from: this.account.getKey()
        })
    }, TD.services.TwitterStatus.prototype.quoteTo = function(e) {
        TD.controller.stats.quoteTweet(), (0, r.default)(document).trigger("uiComposeTweet", {
            type: "tweet",
            from: e,
            quotedTweet: this.getMainTweet()
        })
    }, TD.services.TwitterStatus.prototype.messageTo = function() {
        var e = this.getMainTweet();
        TD.controller.stats.shareTweetViaDM(), (0, r.default)(document).trigger("uiComposeTweet", {
            type: "message",
            from: [this.account.getKey()],
            quotedTweet: e
        })
    }, TD.services.TwitterStatus.prototype._action = function(e, t) {
        var i, s, a = this;
        TD.controller.clients.getClient(this.account.getKey());

        function o() {
            (0, u.removeNotification)({
                notification: i,
                timeoutDelayMs: 100
            }), (0, u.showErrorNotification)({
                message: (0, n.default)("{{message}} failed", {
                    message: s
                })
            })
        }

        function c(e) {
            e.error ? o() : ((0, u.updateNotification)({
                message: (0, n.default)("Success: {{message}}", {
                    message: s
                }),
                notification: i,
                remove: !0
            }), t && t(a))
        }
        switch (e) {
            case "delete":
                s = this.retweetedStatus ? (0, n.default)("Undoing Retweet") : (0, n.default)("Deleting"), TD.controller.clients.getClient(this.creatorAccount.getKey()).destroy(this.id, c, o);
                break;
            case "deleteDM":
                s = (0, n.default)("Deleting"), (0, r.default)(document).trigger("uiDeleteDm", {
                    id: this.id,
                    accountKey: (this.creatorAccount || this.account).getKey(),
                    success: c,
                    error: o
                })
        }
        i = (0, u.showNotification)({
            message: s,
            timeoutDelayMs: 1 / 0
        })
    }, TD.services.TwitterStatus.prototype._entitySort = function(e, t) {
        return t.indices[0] - e.indices[0]
    }, TD.services.TwitterStatus.prototype.passFilters = function(e) {
        return TD.controller.filterManager.pass(this, e) && (!this.quotedTweet || TD.controller.filterManager.pass(this.quotedTweet, e))
    }, TD.services.TwitterStatus.prototype.getFilterableText = function() {
        var e, t = "";
        return this._filterableText ? t = this._filterableText : 0 === this.entities.urls.length && 0 === this.entities.media.length ? t = this.text : (e = (e = (e = [this.text]).concat(d.default.pluck(this.entities.urls, "expanded_url"))).concat(d.default.pluck(this.entities.media, "expanded_url")), t = (e = d.default.compact(e)).join(" "), this._filterableText = t), t
    }, TD.services.TwitterStatus.prototype.getSenders = function() {
        var e = [this.user.screenName];
        return this.isRetweetedStatus() && e.push(this.retweetedStatus.user.screenName), e
    }, TD.services.TwitterStatus.prototype.lastInSelfThread = function() {
        return this.isSelfThreadEnd
    }, TD.services.TwitterStatus.prototype.isMidSelfThread = function() {
        return this.positionInConversation < this.numberOfTweetsInSelfThread - 1
    }, TD.services.TwitterStatus.prototype.isMidConversation = function() {
        return this.positionInConversation < this.numberOfTweetsInConversation - 1
    }, TD.services.TwitterStatus.prototype.indentedChirp = function() {
        return "ShowMore" === this.cursorType || this.isInThread() && this.hasReplies() && !this.lastInSelfThread()
    }, TD.services.TwitterStatus.prototype.hasReplies = function() {
        var e = this.isInThread() && !Boolean(this.inReplyToID),
            t = this.isMidConversation();
        return e || t || this.showMoreCursor
    }, TD.services.TwitterStatus.prototype.setPositionInConversation = function(e) {
        this.positionInConversation = e
    }, TD.services.TwitterStatus.prototype.setQuotedStatus = function(e) {
        e && (this.quotedTweet = e, this.quotedTweetMissing = !1)
    }, TD.services.TwitterStatus.prototype.setIsSelfThreadEnd = function(e, t) {
        var i = e.find(function(t, i) {
                var s = e[i + 1],
                    n = d.default.get(s, "content.item.content.tweet.displayType");
                return "SelfThread" !== d.default.get(s, "content.item.content.conversationThread.conversationComponents[0].conversationTweetComponent.tweet.displayType", n)
            }),
            s = d.default.get(i, "content.item.content.tweet.id");
        this.isSelfThreadEnd = s === t && !this.isMidSelfThread()
    }, TD.services.TwitterStatus.prototype.setConversationRootId = function(e) {
        this.conversationRootId = e
    }, TD.services.TwitterStatus.prototype.setShowMoreCursor = function(e) {
        this.showMoreCursor = e
    }, TD.services.TwitterStatus.prototype.setNumberOfTweetsInConversation = function(e) {
        var t = e.filter(function(e) {
                return !e.tweetComposerComponent
            }),
            i = t.filter(function(e) {
                return "SelfThread" === d.default.get(e, "content.item.content.tweet.displayType", !1)
            });
        this.numberOfTweetsInConversation = t.length, this.numberOfTweetsInSelfThread = i.length
    }, TD.services.TwitterStatus.prototype.setRetweeted = function(e) {
        this.isRetweeted = e;
        var t = this.isRetweeted ? "icon-retweet-filled" : "icon-retweet",
            i = this.isRetweeted ? "icon-retweet" : "icon-retweet-filled";
        this.getDOMChirps().find(".js-tweet").toggleClass(TD.services.ChirpBase.RETWEET_CLASS, e).find(".js-icon-retweet").addClass(t).removeClass(i), this.retweetedStatus && this.retweetedStatus.setRetweeted(e)
    }, TD.services.TwitterStatus.prototype.setFavorite = function(e) {
        this.isFavorite = e;
        var t = this.isFavorite ? "icon-heart-filled" : "icon-favorite",
            i = this.isFavorite ? "icon-favorite" : "icon-heart-filled";
        this.getDOMChirps().find(".js-tweet").toggleClass(TD.services.ChirpBase.FAVORITE_CLASS, e).find('a[rel="favorite"]').attr("title", TD.ui.template.render("text/favorite_action", this)).find(".js-icon-favorite").addClass(t).removeClass(i)
    }, TD.services.TwitterStatus.prototype.isMention = function() {
        for (var e, t = String(this.account.getUserID()), i = this.account.getUsername().toLowerCase(), s = this.entities.user_mentions.length, n = 0; n < s; n++)
            if ((e = this.entities.user_mentions[n]).id_str) {
                if (e.id_str === t) return !0
            } else if (e.screen_name.toLowerCase() === i) return !0;
        return !1
    }, TD.services.TwitterStatus.prototype.getMedia = function() {
        return this.retweetedStatus ? this.retweetedStatus.getMedia() : this._media || []
    }, TD.services.TwitterStatus.prototype.getUniqueMedia = function() {
        var e = this.getMedia(),
            t = {},
            i = [],
            s = this.id;
        return d.default.each(e, function(e) {
            t[e.shortUrl] || i.push({
                media: e,
                chirpId: s
            })
        }), i
    }, TD.services.TwitterStatus.prototype.getAllTaggedUsers = function() {
        var e = this.getMedia().map(function(e) {
                return e.getTaggedUsers()
            }),
            t = d.default.flatten(e);
        return d.default.uniq(t, "id")
    }, TD.services.TwitterStatus.prototype.getReplyingToUsers = function() {
        var e = this,
            t = this.getReplyUsers().filter(function(t) {
                return t.id === e.inReplyToUserID
            }),
            i = l.default.getImplicitMentions(this.entities.user_mentions),
            n = i.filter(function(t) {
                return t.id === e.account.getUserID()
            });
        return d.default.uniq([].concat((0, s.default)(t), (0, s.default)(n), (0, s.default)(i)), "id")
    }, TD.services.TwitterStatus.prototype.getReplyUsers = function() {
        var e = this.getMainTweet(),
            t = [d.default.pick(e.user, ["id", "screenName", "name"])];
        this.retweetedStatus && t.push(d.default.pick(this.user, ["id", "screenName", "name"]));
        var i = d.default.get(e, "entities.user_mentions", []);
        return t = (t = t.concat(i.map(function(e) {
            return {
                id: e.id_str,
                screenName: e.screen_name,
                name: e.name
            }
        }))).concat(this.getAllTaggedUsers()), t = d.default.uniq(t, "id")
    }, TD.services.TwitterStatus.prototype.hasLink = function() {
        var e = this.entities.media || [],
            t = this.entities.urls || [];
        return Boolean(e.length || t.length)
    }, TD.services.TwitterStatus.prototype.isFromVerifiedUser = function() {
        return this.getMainTweet().user.isVerified
    }, TD.services.TwitterStatus.prototype.hasImage = function() {
        return null === this._hasImage && (this._hasImage = TD.services.ChirpBase.prototype.hasImage.call(this) || TD.services.TwitterMedia.entitiesContainImage(this.entities)), this._hasImage
    }, TD.services.TwitterStatus.prototype.hasVideo = function() {
        return null === this._hasVideo && (this._hasVideo = TD.services.ChirpBase.prototype.hasVideo.call(this) || TD.services.TwitterMedia.entitiesContainVideo(this.entities)), this._hasVideo
    }, TD.services.TwitterStatus.prototype.getScribeItemData = function(e) {
        var t;
        return this.isRetweetedStatus() ? (t = this.getMainTweet().getScribeItemData(e)).retweeting_tweet_id = this.id : (t = {
            item_type: 0,
            id: this.id
        }, e && (t.visibility_start = e.visibilityStart, t.visibility_end = e.visibilityEnd)), t
    }, TD.services.TwitterStatus.prototype.scribeMediaImpression = function() {
        TD.controller.stats.mediaImpression(this.getScribeItemData())
    }, TD.services.TwitterStatus.prototype.muteConversation = function(e) {
        return TD.controller.clients.getClient(e.getKey()).muteConversation(this.id).addCallbackWith(this, TD.util.effect(function() {
            this.conversationMuted = !0, (0, u.showNotification)({
                message: (0, n.default)("Muted conversation")
            })
        }))
    }, TD.services.TwitterStatus.prototype.unmuteConversation = function(e) {
        return TD.controller.clients.getClient(e.getKey()).unmuteConversation(this.id).addCallbackWith(this, TD.util.effect(function() {
            this.conversationMuted = !1, (0, u.showNotification)({
                message: (0, n.default)("Unmuted conversation")
            })
        }))
    }
}, function(e, t, i) {
    "use strict";
    var s = i(19),
        n = i(1);
    t.getPollDataFromCard = function(e) {
        var i = t.parsePollCardResponse(e),
            r = n(i.choices).pluck("count").sum(),
            a = t.insertPercentages(i.choices);
        i.countsAreFinal && r > 0 && (a = t.insertWinner(i.choices)), a = a.map(function(e) {
            return e.label = s.cleanWithEmoji(e.label), e
        });
        var o = i.endDatetimeUTC && TD.util.timeLeft(new Date(i.endDatetimeUTC), {
            longForm: !0,
            adjustSystemTime: !0
        });
        return {
            choices: a,
            hasCount: r > 0,
            hasTimeLeft: o && "now" !== o,
            prettyCount: s.prettyNumber(r) + " vote" + (1 === r ? "" : "s"),
            prettyTimeLeft: o
        }
    }, t.parsePollCardResponse = function(e) {
        var t = e.binding_values,
            i = [];
        return n.range(1, 5).forEach(function(e) {
            var s = n.get(t, "choice" + e + "_label.string_value"),
                r = n.get(t, "choice" + e + "_count.string_value", "0"),
                a = n.get(t, "selected_choice.string_value");
            s && i.push({
                label: s,
                count: Number(r),
                isSelectedChoice: Number(a) === e
            })
        }), {
            countsAreFinal: n.get(t, "counts_are_final.boolean_value"),
            endDatetimeUTC: n.get(t, "end_datetime_utc.string_value"),
            choices: i
        }
    }, t.insertPercentages = function(e) {
        var t = n(e).pluck("count").sum(),
            i = e.map(function(e) {
                return 0 === t ? e.percentage = 0 : e.count >= t ? e.percentage = 100 : e.percentage = Math.round(e.count / t * 100), e
            }),
            s = n(i).pluck("percentage").sum(),
            r = n.findLast(i, function(e) {
                return e.count > 0
            });
        return t > 0 && 100 !== s && (r.percentage += 100 - s), i
    }, t.insertWinner = function(e) {
        var t = n(e).pluck("count").max();
        return e.map(function(e) {
            return e.isWinner = e.count === t, e
        })
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.services.TwitterConversationNameUpdateEvent = function(e, t) {
        this.sender = t, this.account = e
    }, TD.services.TwitterConversationNameUpdateEvent.prototype = new TD.services.ChirpBase, TD.services.TwitterConversationNameUpdateEvent.prototype.chirpType = TD.services.ChirpBase.CONVERSATION_NAME_UPDATE, TD.services.TwitterConversationNameUpdateEvent.prototype.messageThreadId = null, TD.services.TwitterConversationNameUpdateEvent.prototype.previewText = null, TD.services.TwitterConversationNameUpdateEvent.prototype.getNotificationData = function() {
        return {
            img: this.sender.profileImageURL,
            title: this.conversationName,
            text: this.sender.name + " " + (0, r.default)("has renamed the group conversation.")
        }
    }, TD.services.TwitterConversationNameUpdateEvent.prototype.fromJSONObject = function(e) {
        return this.id = e.id, this.conversationId = e.conversation_id, this.created = new Date(parseInt(e.time, 10)), this.messageThreadId = TD.services.TwitterConversation.getConversationId({
            account: this.account,
            conversationId: this.conversationId
        }), this.conversationName = e.conversation_name, this.sanitizedConversationName = TD.util.transform(e.conversation_name || ""), this.previewText = this.generatePreviewText(), this
    }, TD.services.TwitterConversationNameUpdateEvent.prototype.generatePreviewText = function() {
        return TD.ui.template.render("status/conversation_name_update_preview", {
            chirp: this
        })
    }, TD.services.TwitterConversationNameUpdateEvent.prototype.isOwnChirp = function() {
        return this.sender && this.sender.id === this.account.getUserID()
    }, TD.services.TwitterConversationNameUpdateEvent.prototype.render = function() {
        return TD.ui.template.render("status/conversation_name_update", {
            chirp: this
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = o(i(7)),
        n = o(i(1)),
        r = o(i(0)),
        a = i(601);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.services.TwitterConversationMessageEvent = function(e, t) {
        this.account = e, this.sender = t
    }, TD.services.TwitterConversationMessageEvent.prototype = new TD.services.TwitterStatus, TD.services.TwitterConversationMessageEvent.prototype.chirpType = TD.services.ChirpBase.MESSAGE, TD.services.TwitterConversationMessageEvent.prototype.messageThreadId = null, TD.services.TwitterConversationMessageEvent.prototype.htmlText = null, TD.services.TwitterConversationMessageEvent.prototype.fromJSONObject = function(e) {
        if (this.id = e.id_str || String(e.id), this.text = e.message_data.text, this.conversationId = e.conversation_id, this.messageThreadId = TD.services.TwitterConversation.getConversationId({
                account: this.account,
                conversationId: e.conversation_id
            }), this.created = new Date(parseInt(e.time, 10)), this.entities = e.message_data.entities || {}, this.attachment = e.message_data.attachment, this.createdDate = TD.util.prettyDate(this.created), this._media = TD.services.TwitterMedia.getMediaFromEntities(this.entities).concat(TD.services.TwitterMedia.getMediaFromAttachment(this.attachment)).map(function(e) {
                return "twitter" !== e.service || e.isVideo || e.isAnimatedGif || (e.needsSecureUrl = !0), e
            }), this.attachment && this.attachment.tweet) {
            this.quotedTweet = new TD.services.TwitterStatus(this.account).fromJSONObject(this.attachment.tweet.status);
            (0, a.identifyQuoteTweetAttachmentUrls)(this.entities, [0, 0], this.quotedTweet.id)
        }
        return this.htmlText = TD.util.transform(this.text, this.entities), this
    }, TD.services.TwitterConversationMessageEvent.prototype.hasLocationData = function() {
        return !1
    }, TD.services.TwitterConversationMessageEvent.prototype.getMainUser = function() {
        return this.sender
    }, TD.services.TwitterConversationMessageEvent.prototype.isOwnChirp = function() {
        return this.sender.id === this.account.getUserID()
    }, TD.services.TwitterConversationMessageEvent.prototype.dm = function() {
        (0, r.default)(document).trigger("uiComposeTweet", {
            type: "message",
            from: [this.account.getKey()],
            messageRecipients: [{
                screenName: this.sender.screenName
            }]
        })
    }, TD.services.TwitterConversationMessageEvent.prototype.getChirpURL = function() {
        return ""
    }, TD.services.TwitterConversationMessageEvent.prototype.destroy = function() {
        var e = this;
        this._action("deleteDM", function() {
            TD.controller.clients.getClient(e.account.getKey()).deleteMessage(e.id)
        })
    }, TD.services.TwitterConversationMessageEvent.prototype.render = function() {
        var e = this.getMedia().find(function(e) {
                return e.isAnimatedGif
            }),
            t = Boolean(e) ? e.getAnimatedGifForPreview() : {},
            i = TD.vo.Column.MEDIA_PREVIEW_SIZE_MEDIUM,
            a = this.account.getKey();
        return TD.ui.template.render("status/message_in_stream", (0, s.default)({
            message: this,
            withFooter: !0,
            withAvatar: !0,
            withMediaPreview: !0,
            isMediaPreviewSmall: i === TD.vo.Column.MEDIA_PREVIEW_SIZE_SMALL,
            isMediaPreviewLarge: i === TD.vo.Column.MEDIA_PREVIEW_SIZE_LARGE,
            mediaPreviewSrc: function() {
                var e = this.getMediaSrcForPreviewSize(i);
                return this.needsSecureUrl && n.default.defer(function() {
                    (0, r.default)(document).trigger("uiNeedsSecureImageUrl", {
                        accountKey: a,
                        url: e
                    })
                }), e
            },
            isGifActive: !0,
            withAutoplay: TD.settings.getAutoPlayGifs(),
            renderQuoted: function() {
                return this.renderQuotedTweet({
                    mediaPreviewSize: i
                })
            },
            thumbSizeClass: TD.services.TwitterMedia.thumbSizeClasses[i],
            accountKey: this.account.getKey()
        }, t))
    }, TD.services.TwitterConversationMessageEvent.prototype.renderInMediaGallery = function() {
        return TD.ui.template.render("status/message_in_box", {
            message: this,
            withFooter: !0,
            withAvatar: !0,
            withMediaPreview: !1,
            withTweetActions: !0,
            withTweetActionsVisible: !0
        })
    }, TD.services.TwitterConversationMessageEvent.prototype.getSenders = function() {
        return [this.sender.screenName]
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.services.TwitterConversationJoinEvent = function(e) {
        this.sender = e.sender, this.account = e.account
    }, TD.services.TwitterConversationJoinEvent.prototype = new TD.services.ChirpBase, TD.services.TwitterConversationJoinEvent.prototype.chirpType = TD.services.ChirpBase.CONVERSATION_JOIN, TD.services.TwitterConversationJoinEvent.prototype.messageThreadId = null, TD.services.TwitterConversationJoinEvent.prototype.previewText = null, TD.services.TwitterConversationJoinEvent.prototype.getNotificationData = function() {
        return {
            img: this.sender.profileImageURL,
            title: this.notificationTitle.withSender,
            text: this.sender.name + " " + (0, r.default)("has added you to a group conversation.")
        }
    }, TD.services.TwitterConversationJoinEvent.prototype.fromJSONObject = function(e) {
        this.id = e.id, this.conversationId = e.conversation_id, this.created = new Date(parseInt(e.time, 10)), this.messageThreadId = TD.services.TwitterConversation.getConversationId({
            account: this.account,
            conversationId: this.conversationId
        }), this.previewText = this.generatePreviewText();
        var t = TD.controller.clients.getClient(this.account.getKey());
        return this.conversation = t.conversations.getConversation(this.conversationId), this
    }, TD.services.TwitterConversationJoinEvent.prototype.getParticipants = function() {
        var e = this.conversation.participants.length,
            t = Math.ceil(e / Math.ceil(e / 8));
        return this.conversation.participants.map(function(e, i) {
            return {
                participant: e,
                isEndOfRow: !((i + 1) % t)
            }
        })
    }, TD.services.TwitterConversationJoinEvent.prototype.generatePreviewText = function() {
        return TD.ui.template.render("status/conversation_join_preview", {
            chirp: this
        })
    }, TD.services.TwitterConversationJoinEvent.prototype.isOwnChirp = function() {
        return this.sender.id === this.account.getUserID()
    }, TD.services.TwitterConversationJoinEvent.prototype.render = function() {
        return TD.ui.template.render("status/conversation_join", {
            numberOfParticipants: this.conversation.participants.length,
            chirp: this
        })
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.services.TwitterConversationParticipantsJoinEvent = function(e) {
        this.sender = e.sender, this.account = e.account, this.addedParticipants = e.addedParticipants
    }, TD.services.TwitterConversationParticipantsJoinEvent.prototype = new TD.services.ChirpBase, TD.services.TwitterConversationParticipantsJoinEvent.prototype.chirpType = TD.services.ChirpBase.CONVERSATION_PARTICIPANTS_JOIN, TD.services.TwitterConversationParticipantsJoinEvent.prototype.messageThreadId = null, TD.services.TwitterConversationParticipantsJoinEvent.prototype.previewText = null, TD.services.TwitterConversationParticipantsJoinEvent.prototype.getNotificationData = function() {
        var e = this.addedParticipants[this.addedParticipants.length - 1];
        return {
            img: e.profileImageURL,
            title: this.notificationTitle.withoutSender,
            text: e.name + " " + (0, r.default)("has beed added to the group conversation.")
        }
    }, TD.services.TwitterConversationParticipantsJoinEvent.prototype.fromJSONObject = function(e) {
        return this.id = e.id, this.conversationId = e.conversation_id, this.created = new Date(parseInt(e.time, 10)), this.messageThreadId = TD.services.TwitterConversation.getConversationId({
            account: this.account,
            conversationId: this.conversationId
        }), this.previewText = this.generatePreviewText(), this
    }, TD.services.TwitterConversationParticipantsJoinEvent.prototype.generatePreviewText = function() {
        return TD.ui.template.render("status/conversation_participants_join_preview", {
            chirp: this,
            numberOfOtherParticipants: this.addedParticipants.length - 1
        })
    }, TD.services.TwitterConversationParticipantsJoinEvent.prototype.isOwnChirp = function() {
        return this.sender.id === this.account.getUserID()
    }, TD.services.TwitterConversationParticipantsJoinEvent.prototype.render = function() {
        return TD.ui.template.render("status/conversation_participants_join", {
            chirp: this
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(19));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.services.TwitterConversationParticipantsLeaveEvent = function(e, t) {
        this.account = e, this.leftParticipants = t, this.leftParticipants.forEach(function(e) {
            e.emojifiedName = n.default.cleanWithEmoji(e.name)
        })
    }, TD.services.TwitterConversationParticipantsLeaveEvent.prototype = new TD.services.ChirpBase, TD.services.TwitterConversationParticipantsLeaveEvent.prototype.chirpType = TD.services.ChirpBase.CONVERSATION_PARTICIPANT_REMOVED, TD.services.TwitterConversationParticipantsLeaveEvent.prototype.messageThreadId = null, TD.services.TwitterConversationParticipantsLeaveEvent.prototype.previewText = null, TD.services.TwitterConversationParticipantsLeaveEvent.prototype.getNotificationData = function() {
        return this.leftParticipants.map(function(e) {
            return {
                img: e.profileImageURL,
                title: this.notificationTitle.withoutSender,
                text: e.name + " " + (0, s.default)("has left the group conversation.")
            }
        }, this).pop()
    }, TD.services.TwitterConversationParticipantsLeaveEvent.prototype.fromJSONObject = function(e) {
        return this.id = e.id, this.conversationId = e.conversation_id, this.created = new Date(parseInt(e.time, 10)), this.messageThreadId = TD.services.TwitterConversation.getConversationId({
            account: this.account,
            conversationId: this.conversationId
        }), this.previewText = this.generatePreviewText(), this
    }, TD.services.TwitterConversationParticipantsLeaveEvent.prototype.generatePreviewText = function() {
        return TD.ui.template.render("status/conversation_participants_leave_preview", {
            chirp: this
        })
    }, TD.services.TwitterConversationParticipantsLeaveEvent.prototype.isOwnChirp = function() {
        return !1
    }, TD.services.TwitterConversationParticipantsLeaveEvent.prototype.render = function() {
        return TD.ui.template.render("status/conversation_participants_leave", {
            chirp: this
        })
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.services.TwitterConversationFailedParticipantsEvent = function(e) {
        this.id = r.default.uniqueId("failedParticipants"), this.account = e.account, this.failedParticipants = e.failedParticipants.map(function(t, i) {
            return {
                participant: t,
                isLastItem: i === e.failedParticipants.length - 1
            }
        }), this.conversationId = e.conversationId, this.messageThreadId = TD.services.TwitterConversation.getConversationId({
            account: this.account,
            conversationId: this.conversationId
        }), this.previewText = this.generatePreviewText(), this.created = new Date
    }, TD.services.TwitterConversationFailedParticipantsEvent.prototype = new TD.services.ChirpBase, TD.services.TwitterConversationFailedParticipantsEvent.prototype.chirpType = TD.services.ChirpBase.CONVERSATION_PARTICIPANTS_FAILED, TD.services.TwitterConversationFailedParticipantsEvent.prototype.messageThreadId = null, TD.services.TwitterConversationFailedParticipantsEvent.prototype.previewText = null, TD.services.TwitterConversationFailedParticipantsEvent.prototype.getParticipants = function() {
        var e = this.failedParticipants.length,
            t = Math.ceil(e / Math.ceil(e / 8));
        return this.failedParticipants.map(function(e, i) {
            return {
                participant: e,
                isEndOfRow: !((i + 1) % t)
            }
        })
    }, TD.services.TwitterConversationFailedParticipantsEvent.prototype.generatePreviewText = function() {
        return TD.ui.template.render("status/conversation_failed_participants_preview")
    }, TD.services.TwitterConversationFailedParticipantsEvent.prototype.isOwnChirp = function() {
        return !0
    }, TD.services.TwitterConversationFailedParticipantsEvent.prototype.render = function() {
        return TD.ui.template.render("status/conversation_failed_participants", {
            chirp: this
        })
    }
}, function(e, t, i) {
    "use strict";
    TD.services.TwitterConversationReadEvent = function(e) {
        this.account = e
    }, TD.services.TwitterConversationReadEvent.prototype = new TD.services.ChirpBase, TD.services.TwitterConversationReadEvent.prototype.chirpType = TD.services.ChirpBase.CONVERSATION_READ, TD.services.TwitterConversationReadEvent.prototype.messageThreadId = null, TD.services.TwitterConversationReadEvent.prototype.fromJSONObject = function(e) {
        return this.id = e.id, this.conversationId = e.conversation_id, this.created = new Date(parseInt(e.time, 10)), this.lastReadEventId = e.last_read_event_id, this.messageThreadId = TD.services.TwitterConversation.getConversationId({
            account: this.account,
            conversationId: this.conversationId
        }), this
    }
}, function(e, t, i) {
    "use strict";
    var s = a(i(32)),
        n = a(i(0)),
        r = a(i(17));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.services.Conversations = function(e, t) {
        this.client = t, this.account = e, this.conversationCache = {}, this.accessLevel = {
            oneToOne: !1,
            groupRead: !1
        }, this.currentUsers = {}
    }, TD.services.Conversations.prototype.getConversation = function(e) {
        return this.conversationCache[e]
    }, TD.services.Conversations.prototype.getAllConversations = function() {
        return (0, s.default)(this.conversationCache).map(function(e) {
            return this.conversationCache[e]
        }, this)
    }, TD.services.Conversations.prototype.setAccessLevel = function(e) {
        e.oneToOne === this.accessLevel.oneToOne && e.groupRead === this.accessLevel.groupRead || (this.destroyAll(), this.accessLevel = e, TD.controller.columnManager.getColumnsByAccountKey(this.account.getKey()).filter(function(e) {
            return r.default.isMessageColumn(e)
        }).forEach(function(e) {
            e.model.getFeedKeys().map(TD.controller.feedManager.getPoller).forEach(function(e) {
                e.refresh({
                    reset: !0
                })
            })
        }))
    }, TD.services.Conversations.prototype.destroyAll = function() {
        var e = (0, s.default)(this.conversationCache).map(function(e) {
            return this.conversationCache[e]
        }, this);
        e.length && this.client.publishChirpsInternal("remove", "direct", e), this.conversationCache = {}
    }, TD.services.Conversations.prototype.processUserUpdates = function(e, t) {
        var i = {},
            n = [];
        if (e && (this.conversationCache = {}), t = t.user_inbox ? t.user_inbox : t.user_events ? t.user_events : t.conversation_timeline) {
            if (t.users && (this.currentUsers = {}, this.processUsers(t.users)), t.conversations && (n = this.processConversations(t.conversations, t.users), this.cacheConversations(n)), t.cursor && (0, s.default)(this.conversationCache).forEach(function(e) {
                    this.conversationCache[e].cursor = t.cursor
                }, this), this.updateMinEntryIds(t), t.entries && (i = this.processConversationEntries(t.entries, t.users)), t.failed_participants && 1 === n.length) {
                var r = n[0].conversationId,
                    a = this.processFailedParticipants(t.failed_participants, r);
                i[r] = i[r] || [], i[r] = i[r].concat([a])
            }
            return this.addEventsToConversations(i).forEach(function(e) {
                -1 === n.indexOf(e) && n.push(e)
            }), t.unread_conversations && (0, s.default)(t.unread_conversations).forEach(function(e) {
                var t = this.conversationCache[e];
                t && (t.unread = !0)
            }, this), n
        }
    }, TD.services.Conversations.prototype.markAllRead = function() {
        var e = this.getAllConversations();
        if (e.length) {
            var t = e.map(function(e) {
                return e.getMaxEntryId()
            }).sort(TD.util.numericStringComparator).pop();
            (0, n.default)(document).trigger("uiMarkAllDmsAsRead", {
                lastReadEventId: t,
                accountKey: this.account.getKey(),
                success: function() {
                    var t = e.filter(function(e) {
                        return !0 === e.unread
                    });
                    t.length && (t.forEach(function(e) {
                        e.unread = !1, e.messages.forEach(function(e) {
                            e.read = !0
                        })
                    }), this.client.publishChirpsInternal("publish", "direct", t))
                }.bind(this)
            })
        }
    }, TD.services.Conversations.prototype.updateMinEntryIds = function(e) {
        var t = (0, s.default)(this.conversationCache),
            i = t.length > 0 ? this.conversationCache[t[0]].minEntryId : null;
        (!i || e.min_entry_id && TD.util.numericStringComparator(i, e.min_entry_id) > 0) && (0, s.default)(this.conversationCache).forEach(function(t) {
            this.conversationCache[t].minEntryId = e.min_entry_id
        }, this)
    }, TD.services.Conversations.prototype.processUsers = function(e) {
        (0, s.default)(e).forEach(function(t) {
            this.currentUsers[t] || (this.currentUsers[t] = e[t] ? this.client.processUser(e[t]) : this.client.processDeletedUser(t))
        }.bind(this))
    }, TD.services.Conversations.prototype.addEventsToConversations = function(e) {
        var t = [];
        return (0, s.default)(e).forEach(function(i) {
            var s = this.conversationCache[i];
            s && s.addMessages(e[i]) && t.push(s)
        }, this), t
    }, TD.services.Conversations.prototype.processConversations = function(e, t) {
        return (0, s.default)(e).map(function(i) {
            var s = e[i];
            try {
                var n = this.conversationCache[i];
                if (n) {
                    n = this.conversationCache[i].fromJSONObject(s);
                    var r = this.inflateParticipants(s, t);
                    n.setParticipants(r)
                } else n = this.processConversation(s, t);
                return n
            } catch (e) {
                this.logProcessingError("conversation", e)
            }
        }, this).filter(function(e) {
            return e
        })
    }, TD.services.Conversations.prototype.logProcessingError = function(e, t) {
        TD.sync.util.warn("Threw on processing conversation", e, t), (0, n.default)(document).trigger("metric", {
            key: "conversation:processing-error:" + e
        })
    }, TD.services.Conversations.prototype.cacheConversations = function(e) {
        e.forEach(function(e) {
            e instanceof TD.services.TwitterConversation && !this.conversationCache[e.conversationId] && (this.conversationCache[e.conversationId] = e)
        }, this)
    }, TD.services.Conversations.prototype.processConversationEntries = function(e, t) {
        var i = {};
        return e.forEach(function(e) {
            var s;
            try {
                s = e.message && this.processMessage(e.message, t) || e.conversation_read && this.processConversationReadEvent(e.conversation_read) || e.participants_join && this.processConversationParticipantsJoinEvent(e.participants_join) || e.join_conversation && this.processConversationJoinEvent(e.join_conversation) || e.participants_leave && this.processConversationParticipantsLeaveEvent(e.participants_leave) || e.conversation_name_update && this.processConversationNameUpdate(e.conversation_name_update) || e.remove_conversation && this.processRemoveConversation(e.remove_conversation)
            } catch (e) {
                this.logProcessingError("entry", e)
            }
            s && (i[s.conversationId] = i[s.conversationId] || [], i[s.conversationId].push(s))
        }, this), i
    }, TD.services.Conversations.prototype.processFailedParticipants = function(e, t) {
        var i = (0, s.default)(e).map(function(e) {
            return this.currentUsers[e]
        }, this);
        return new TD.services.TwitterConversationFailedParticipantsEvent({
            account: this.account,
            conversationId: t,
            failedParticipants: i
        })
    }, TD.services.Conversations.prototype.inflateParticipants = function(e, t) {
        var i = this.account.getUserID();
        return e.participants.filter(function(t) {
            return t.user_id !== i || 1 === e.participants.length
        }).sort(function(t, i) {
            return t.user_id === e.created_by_user_id ? -1 : i.user_id === e.created_by_user_id ? 1 : TD.util.numericStringComparator(t.join_time, i.join_time) || TD.util.numericStringComparator(t.user_id, i.user_id)
        }).map(function(e) {
            return this.currentUsers[e.user_id] || t[e.user_id] ? this.client.processUser(t[e.user_id]) : this.client.processDeletedUser(e.user_id)
        }, this)
    }, TD.services.Conversations.prototype.processConversation = function(e, t) {
        var i = this.inflateParticipants(e, t);
        return new TD.services.TwitterConversation(this.account, i).fromJSONObject(e)
    }, TD.services.Conversations.prototype.processConversationReadEvent = function(e) {
        return new TD.services.TwitterConversationReadEvent(this.account).fromJSONObject(e)
    }, TD.services.Conversations.prototype.processConversationNameUpdate = function(e) {
        var t = this.currentUsers[e.by_user_id];
        return new TD.services.TwitterConversationNameUpdateEvent(this.account, t).fromJSONObject(e)
    }, TD.services.Conversations.prototype.processConversationJoinEvent = function(e) {
        var t = this.currentUsers[e.sender_id];
        return new TD.services.TwitterConversationJoinEvent({
            account: this.account,
            sender: t
        }).fromJSONObject(e)
    }, TD.services.Conversations.prototype.processConversationParticipantsJoinEvent = function(e) {
        var t = [];
        e.participants.forEach(function(e) {
            t.push(this.currentUsers[e.user_id])
        }.bind(this));
        var i = this.currentUsers[e.sender_id];
        return new TD.services.TwitterConversationParticipantsJoinEvent({
            account: this.account,
            sender: i,
            addedParticipants: t
        }).fromJSONObject(e)
    }, TD.services.Conversations.prototype.processConversationParticipantsLeaveEvent = function(e) {
        var t = [];
        return e.participants.forEach(function(e) {
            t.push(this.currentUsers[e.user_id])
        }.bind(this)), new TD.services.TwitterConversationParticipantsLeaveEvent(this.account, t).fromJSONObject(e)
    }, TD.services.Conversations.prototype.processRemoveConversation = function() {
        var e = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).conversation_id;
        this.conversationCache[e] && this.deleteConversation(e)
    }, TD.services.Conversations.prototype.processMessage = function(e) {
        var t = e.message_data.sender_id,
            i = this.currentUsers[t];
        if (i) return new TD.services.TwitterConversationMessageEvent(this.account, i).fromJSONObject(e)
    }, TD.services.Conversations.prototype.deleteMessageByIdAndReturnChangedConversations = function(e) {
        return (0, s.default)(this.conversationCache).map(function(e) {
            return this.conversationCache[e]
        }.bind(this)).filter(function(t) {
            return t.removeMessage(e)
        })
    }, TD.services.Conversations.prototype.renameConversation = function(e) {
        var t = this.getConversation(e.conversationId);
        t.name = e.name, this.client.publishChirpsInternal("publish", "direct", [t])
    }, TD.services.Conversations.prototype.deleteConversation = function(e) {
        var t = this.getConversation(e);
        TD.controller.feedManager.deleteChirp(t.id), delete this.conversationCache[e]
    }, TD.services.Conversations.prototype.getUnreadCount = function() {
        return (0, s.default)(this.conversationCache).reduce(function(e, t) {
            return e + (this.conversationCache[t].unread ? 1 : 0)
        }.bind(this), 0)
    }
}, function(e, t, i) {
    "use strict";
    var s = c(i(3)),
        n = c(i(1)),
        r = c(i(0)),
        a = c(i(19)),
        o = i(23);

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.services.TwitterConversation = function(e, t) {
        this.unread = !1, this.messages = [], this.messageIndex = {}, this.account = e, this.participants = t || [], this.hasValidParticipant = !(1 === this.participants.length && t[0].isDeleted), this.sortIndex = {
            type: "milliseconds"
        }
    }, TD.services.TwitterConversation.CONVERSATION_STATUS_AT_END = "AT_END", TD.services.TwitterConversation.CONVERSATION_ENTRY_COUNT = 100, TD.services.TwitterConversation.getConversationId = function(e) {
        return TD.ui.template.toHtml("conversation-{{accountId}}-{{conversationId}}", {
            accountId: e.account.getUserID(),
            conversationId: e.conversationId
        })
    }, TD.services.TwitterConversation.prototype = new TD.services.ChirpBase, TD.services.TwitterConversation.prototype.fromJSONObject = function(e) {
        return this.type = e.type, this.conversationId = e.conversation_id, this.notificationsDisabled = !!e.notifications_disabled, this.name = e.name, this.lastReadEventId = e.last_read_event_id, this.sortTimestamp = new Date(parseInt(e.sort_timestamp, 10)), this.id = TD.services.TwitterConversation.getConversationId({
            conversationId: this.conversationId,
            account: this.account
        }), this.calculateAttributes(), this
    }, TD.services.TwitterConversation.prototype.chirpType = TD.services.ChirpBase.MESSAGE_THREAD, TD.services.TwitterConversation.prototype.participants = null, TD.services.TwitterConversation.prototype.unread = !1, TD.services.TwitterConversation.prototype.replied = !1, TD.services.TwitterConversation.prototype.messages = null, TD.services.TwitterConversation.prototype.messageIndex = null, TD.services.TwitterConversation.prototype.conversationId = null, TD.services.TwitterConversation.prototype.name = null, TD.services.TwitterConversation.prototype.getAUserThatIsNotMe = function() {
        for (var e = this.account.getUserID(), t = 0; t < this.participants.length; t++)
            if (this.participants[t].id !== e) return this.participants[t]
    }, TD.services.TwitterConversation.prototype.getNotificationTitle = function(e) {
        var t = this.getConversationTitleInformation(),
            i = t.name;
        if (!i) {
            var s = t.numberOfOtherParticipants,
                n = s > 1 ? " +" + s : "";
            i = (e || this.getAUserThatIsNotMe() || this.participants[0]).name + n
        }
        return i
    }, TD.services.TwitterConversation.prototype.isOneToOne = function() {
        return 1 === this.participants.length
    }, TD.services.TwitterConversation.prototype.getConversationTitleInformation = function() {
        var e = this.participants.length;
        return {
            name: a.default.cleanWithEmoji(this.name),
            isOneToOne: 1 === e,
            isThreeway: 2 === e,
            isOneToMany: e > 2,
            numberOfOtherParticipants: e - 1,
            isDeleted: 1 === e && this.participants[0].isDeleted
        }
    }, TD.services.TwitterConversation.prototype.isCorrectThreadForMessage = function(e) {
        return e.messageThreadId === this.id
    }, TD.services.TwitterConversation.prototype.setLastReadEventId = function(e) {
        if (TD.util.numericStringComparator(e, this.lastReadEventId) > 0) return this.lastReadEventId = e, this.getUnreadChirps().forEach(function(t) {
            TD.util.numericStringComparator(t.id, e) < 1 && (t.read = !0)
        }), !0
    }, TD.services.TwitterConversation.prototype.addNotificationTitleInfo = function(e) {
        e.notificationTitle || (e.notificationTitle = {
            withSender: this.getNotificationTitle(e.sender),
            withoutSender: this.getNotificationTitle()
        })
    }, TD.services.TwitterConversation.prototype.addMessages = function(e) {
        var t, i, s = !1,
            n = [];
        if (e && 0 !== e.length) {
            for (t = 0, i = e.length; t < i; t++) {
                var a = e[t];
                if (!this.messageIndex[a.id]) {
                    if (!this.isCorrectThreadForMessage(a)) throw new Error("Wrong thread!");
                    a instanceof TD.services.TwitterConversationReadEvent ? s = this.setLastReadEventId(a.lastReadEventId) : (s = !0, a.messageThreadId = this.id, this.messages.push(a), this.messageIndex[a.id] = a, a.read = a.isOwnChirp() || TD.util.numericStringComparator(a.id, this.lastReadEventId) < 1)
                }
            }
            return this.messages.sort(TD.util.chirpColumnSort), this.calculateAttributes(), s && (0, r.default)(document).trigger("uiConversationChanged", {
                chirp: this
            }), n.length && (0, r.default)(document).trigger("uiMessageThreadNotifications", {
                notifications: n
            }), s
        }
    }, TD.services.TwitterConversation.prototype.setParticipants = function(e) {
        this.participants = e
    }, TD.services.TwitterConversation.prototype.removeMessage = function(e) {
        return !!this.messageIndex[e] && (delete this.messageIndex[e], this.messages = this.messages.filter(function(t) {
            return t.id !== e
        }), this.calculateAttributes(), (0, r.default)(document).trigger("uiMessageThreadRead", {}), !0)
    }, TD.services.TwitterConversation.prototype.getMainUser = function() {
        return this.participants[0]
    }, TD.services.TwitterConversation.prototype.isUnread = function() {
        return this.getUnreadChirps().length > 0
    }, TD.services.TwitterConversation.prototype.replied = function() {
        return this.messages[0] && this.messages[0].isOwnChirp()
    }, TD.services.TwitterConversation.prototype.updateSender = function() {
        var e = this.messages[0];
        !e || e.isOwnChirp() ? (this.sender = null, this.showSenderName = !1) : this.participants.length > 1 && (this.showSenderName = e instanceof TD.services.TwitterConversationMessageEvent, this.sender = e.sender)
    }, TD.services.TwitterConversation.prototype.updateSortIndex = function() {
        this.created = this.sortTimestamp, this.sortIndex.value = this.sortTimestamp.getTime(), this.messages.length > 0 && this.messages[0].belongsAbove(this) && (this.sortIndex.value = this.messages[0].sortIndex.value)
    }, TD.services.TwitterConversation.prototype.updateContent = function() {
        var e = this.messages[0];
        if (this.attachmentOnly = !1, this.hasQuotedTweet = !1, e) {
            this.text = e.text || "", this.htmlText = e.htmlText, this.previewText = e.previewText, this._media = e._media, this.hasQuotedTweet = Boolean(e.quotedTweet);
            var t = !1,
                i = !1;
            if (this._media && this._media.length) {
                var s = this.text;
                i = this._media.some(function(e) {
                    if (e.entity && e.entity.indices && e.entity.indices[1] === this.text.length) return s = this.text.substr(0, e.entity.indices[0]), !0
                }.bind(this))
            }
            this.text.length > 140 && (s = this.text.substr(0, 140) + "…", t = !0), (t || i) && (this.text = s.trim(), this.htmlText = TD.util.transform(this.text, this.entities)), !this.text && !this.previewText && this._media && this._media.length && (this.attachmentOnly = !0)
        } else this.text = "", this.htmlText = "", this.previewText = ""
    }, TD.services.TwitterConversation.prototype.calculateAttributes = function() {
        this.unread = this.isUnread(), this.updateSender(), this.updateSortIndex(), this.updateContent()
    }, TD.services.TwitterConversation.prototype.render = function(e) {
        var t = this.account.getKey(),
            i = Math.min(this.participants.length, 3),
            s = "media-grid-" + i + "-mirror",
            a = e.templateName || "status/conversation";
        return TD.ui.template.render(a, {
            chirp: this,
            mediaPreviewSrc: function() {
                var e = this.getMediaSrcForPreviewSize("small");
                return this.needsSecureUrl && n.default.defer(function() {
                    (0, r.default)(document).trigger("uiNeedsSecureImageUrl", {
                        accountKey: t,
                        url: e
                    })
                }), e
            },
            withMultipleAvatars: i > 1,
            avatars: this.participants.slice(0, 3),
            avatarsClass: s,
            accountKey: t
        })
    }, TD.services.TwitterConversation.prototype.renderThread = function() {
        var e = [];
        return this.messages.forEach(function(t) {
            e.push(t.render())
        }), e.join("")
    }, TD.services.TwitterConversation.prototype.setStatus = function(e) {
        this.status = e
    }, TD.services.TwitterConversation.prototype.isAtEnd = function() {
        return this.status === TD.services.TwitterConversation.CONVERSATION_STATUS_AT_END
    }, TD.services.TwitterConversation.prototype.updateConversation = function() {
        var e, t = TD.controller.clients.getClient(this.account.getKey()),
            i = {
                ext: "altText"
            };
        return this.isAtEnd() ? e = TD.core.defer.succeed() : (i.count = TD.services.TwitterConversation.CONVERSATION_ENTRY_COUNT, this.messages.length && (i.max_id = this.messages[this.messages.length - 1].id), e = t.getDmConversation(this.conversationId, i)), e
    }, TD.services.TwitterConversation.prototype.isOwnChirp = function() {
        return !1
    }, TD.services.TwitterConversation.prototype.getUnreadChirps = function(e) {
        return e && this.notificationsDisabled ? [] : this.messages.filter(function(t) {
            var i = !e || t.belongsAbove(e);
            return t.chirpType === TD.services.ChirpBase.MESSAGE && !t.isOwnChirp() && !t.read && i
        })
    }, TD.services.TwitterConversation.prototype.getMaxEntryId = function() {
        for (var e = null, t = 0; !e && this.messages[t];) this.messages[t].chirpType === TD.services.ChirpBase.MESSAGE && (e = this.messages[t].id), t++;
        return e || 0
    }, TD.services.TwitterConversation.prototype.markAsRead = function() {
        var e = this.getUnreadChirps();
        if (!(e.length <= 0)) {
            this.getDOMChirps().removeClass(TD.services.ChirpBase.UNREAD_CLASS), e.forEach(function(e) {
                e.read = !0
            }), this.unread = !1, (0, r.default)(document).trigger("uiMessageThreadRead", {});
            var t = function(t) {
                this.unread = !0, e && e.forEach(function(e) {
                    e.read = !1
                }), (0, o.showErrorNotification)({
                    message: (0, s.default)("Failed to mark message as read.")
                }), this.getDOMChirps().addClass(TD.services.ChirpBase.UNREAD_CLASS)
            };
            this.conversationId ? (0, r.default)(document).trigger("uiMarkDmAsRead", {
                lastReadEventId: this.getMaxEntryId(),
                conversationId: this.conversationId,
                error: t.bind(this),
                accountKey: this.account.getKey()
            }) : t.call(this)
        }
    }, TD.services.TwitterConversation.prototype.getSenders = function() {
        return 1 !== this.participants.length || this.participants[0].isDeleted ? [] : [this.participants[0].screenName]
    }
}, function(e, t, i) {
    "use strict";
    var s = l(i(43)),
        n = l(i(7)),
        r = i(191),
        a = l(i(1)),
        o = i(1862),
        c = i(36);

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.services.TwitterMedia = function() {}, TD.services.TwitterMedia.TWITPIC_RE = /(http:\/\/|www.)?twitpic.com\/(\w+)/, TD.services.TwitterMedia.YFROG_RE = /(http:\/\/|www.)?yfrog.com\/\w+/, TD.services.TwitterMedia.PLIXI_RE = /(http:\/\/|www.)?plixi.com\/p\/[0-9]+/, TD.services.TwitterMedia.LOCKERZ_RE = /(http:\/\/|www.)?lockerz.com\/s\/[0-9]+/, TD.services.TwitterMedia.YOUTUBE_LONG_RE = /(?:(?:https?\:\/\/)?(?:www\.)?)?youtube\.com\/watch[a-zA-Z0-9_\-\?\&\=\/]+/, TD.services.TwitterMedia.YOUTUBE_TINY_RE = /(http:\/\/|www.)?youtu\.be\/([a-zA-Z0-9_\-\?\&\=\/]+)/, TD.services.TwitterMedia.YOUTUBE_RE = new RegExp(TD.services.TwitterMedia.YOUTUBE_LONG_RE.source + "|" + TD.services.TwitterMedia.YOUTUBE_TINY_RE.source), TD.services.TwitterMedia.YOUTUBE_STARTTIME = /^(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s?)?$/, TD.services.TwitterMedia.VIMEO_RE = /https?:\/\/(www\.|player\.)?vimeo\.com\/(.+)/i, TD.services.TwitterMedia.VINE_RE = /https?:\/\/(www\.)?vine\.co\/v\/(.+)/i, TD.services.TwitterMedia.FLICKR_RE = /https?:\/\/(www\.)?(flic.kr|flickr.com\/photos)\/(.+)/i, TD.services.TwitterMedia.IMGUR_RE = /https?:\/\/([a-z0-9]+\.)?imgur.com\/(.+)/i, TD.services.TwitterMedia.PHOTOZOU_RE = /https?:\/\/photozou\.jp\/photo\/(show|photo_only)\/(.+)/i, TD.services.TwitterMedia.FILTERABLE_VIDEO_SERVICES = [TD.services.TwitterMedia.VIMEO_RE, TD.services.TwitterMedia.VINE_RE, TD.services.TwitterMedia.YOUTUBE_TINY_RE, TD.services.TwitterMedia.YOUTUBE_RE, TD.services.TwitterMedia.YOUTUBE_LONG_RE], TD.services.TwitterMedia.FILTERABLE_IMAGE_SERVICES = [TD.services.TwitterMedia.FLICKR_RE, TD.services.TwitterMedia.IMGUR_RE, TD.services.TwitterMedia.PHOTOZOU_RE], TD.services.TwitterMedia.YOUTUBE_GALLERY_WIDTH = 640, TD.services.TwitterMedia.YOUTUBE_GALLERY_HEIGHT = 390, TD.services.TwitterMedia.VINE_GALLERY_WIDTH = 540, TD.services.TwitterMedia.VINE_GALLERY_HEIGHT = 540, TD.services.TwitterMedia.AVAILABLE_COLUMN_SPACE = {
        narrow: 250,
        medium: 290,
        wide: 330,
        temporary: 350
    }, TD.services.TwitterMedia.MAX_THUMB_WIDTH = 90, TD.services.TwitterMedia.MAX_THUMB_HEIGHT = 65, TD.services.TwitterMedia.THUMBNAIL_CONTAINER_CLASS = "media-thumb-container", TD.services.TwitterMedia.THUMBNAIL_IMG_CLASS = "media-thumb-img", TD.services.TwitterMedia.thumbSizeClasses = {
        off: "",
        small: "media-size-small",
        medium: "media-size-medium",
        large: "media-size-large"
    }, TD.services.TwitterMedia.IMAGE_CLASS = "media-img", TD.services.TwitterMedia.SERVICES = {
        twitpic: TD.services.TwitterMedia.TWITPIC_RE,
        yfrog: TD.services.TwitterMedia.YFROG_RE,
        lockerz: TD.services.TwitterMedia.LOCKERZ_RE,
        youtube: TD.services.TwitterMedia.YOUTUBE_RE,
        vine: TD.services.TwitterMedia.VINE_RE
    }, TD.services.TwitterMedia.COLUMN_WIDTH_MEDIA_SIZE_MAP = {
        narrow: {
            stream: {
                small: {
                    width: 102,
                    height: 64
                },
                medium: {
                    width: 204,
                    height: 108
                },
                large: {
                    width: 270,
                    height: 270
                }
            },
            detail: {
                width: 250,
                height: 250
            }
        },
        medium: {
            stream: {
                small: {
                    width: 122,
                    height: 77
                },
                medium: {
                    width: 244,
                    height: 130
                },
                large: {
                    width: 310,
                    height: 350
                }
            },
            detail: {
                width: 290,
                height: 290
            }
        },
        wide: {
            stream: {
                small: {
                    width: 142,
                    height: 91
                },
                medium: {
                    width: 248,
                    height: 153
                },
                large: {
                    width: 350,
                    height: 350
                }
            },
            detail: {
                width: 330,
                height: 330
            }
        }
    }, TD.services.TwitterMedia.UIVEnabled = !1, c.unifiedImageVariants$.subscribe(function(e) {
        TD.services.TwitterMedia.UIVEnabled = e
    }), TD.services.TwitterMedia.getMediaFromAttachment = function(e) {
        var t = [];
        return e && (e.photo ? t.push((new TD.services.TwitterMedia).fromPhotoAttachment(e.photo)) : e.video ? t.push((new TD.services.TwitterMedia).fromVideoAttachment(e.video)) : e.animated_gif && t.push((new TD.services.TwitterMedia).fromAnimatedGIFAttachment(e.animated_gif))), t
    }, TD.services.TwitterMedia.getMediaFromEntities = function(e, t) {
        var i = [],
            s = {};
        t = t || {}, a.default.each(e.media, function(e) {
            i.push((new TD.services.TwitterMedia).fromMediaEntity(e))
        });
        var n = a.default.map(e.urls, function(e) {
            var t = e.expanded_url || e.url;
            return s[t] = e.url, a.default.startsWith(t, "http") || (t = "http://" + t), t
        });
        a.default.each(n, function(e) {
            var t;
            for (var n in TD.services.TwitterMedia.SERVICES)(t = e.match(TD.services.TwitterMedia.SERVICES[n])) && 0 === e.indexOf(t[0]) && i.push((new TD.services.TwitterMedia).fromURL(n, s[e], e, t))
        }), a.default.each(i, function(e) {
            a.default.extend(e, t)
        });
        var r = TD.services.TwitterMedia._entitiesContainNativeMultiPhoto(i);
        if (r.length > 0) return r;
        var o = TD.services.TwitterMedia._entitiesContainMultiPhoto(i);
        if (o.length > 0) return o.pop();
        var c = TD.services.TwitterMedia._entitiesContainNativeVideo(i);
        if (c.length > 0) return c;
        var l = TD.services.TwitterMedia._entitiesContainAnimatedGif(i);
        if (l.length > 0) return l;
        var u = TD.services.TwitterMedia._entitiesContainVideo(i);
        return u.length > 0 ? [u.pop()] : i
    }, TD.services.TwitterMedia.entitiesContainImage = function(e) {
        return TD.services.TwitterMedia.FILTERABLE_IMAGE_SERVICES.some(function(t) {
            return e.urls.some(function(e) {
                return t.test(e.expanded_url)
            })
        })
    }, TD.services.TwitterMedia.entitiesContainVideo = function(e) {
        return TD.services.TwitterMedia.FILTERABLE_VIDEO_SERVICES.some(function(t) {
            return e.urls.some(function(e) {
                return t.test(e.expanded_url)
            })
        })
    }, TD.services.TwitterMedia._entitiesContainVideo = function(e) {
        return a.default.filter(e, function(e) {
            var t;
            return a.default.some(TD.services.TwitterMedia.FILTERABLE_VIDEO_SERVICES, function(i) {
                i.test(e.url) && (t = e)
            }), t
        })
    }, TD.services.TwitterMedia._entitiesContainNativeMultiPhoto = function(e) {
        return a.default.filter(e, function(e) {
            if (e.nativePhotoCapable() && !1 === e.referenced_media) return e
        })
    }, TD.services.TwitterMedia._entitiesContainMultiPhoto = function(e) {
        var t = a.default.groupBy(e, function(e) {
            return e.nativePhotoCapable() && !0 === e.referenced_media ? e.url : "__delete"
        });
        return delete t.__delete, a.default.values(t)
    }, TD.services.TwitterMedia._entitiesContainNativeVideo = function(e) {
        return e.filter(function(e) {
            return e.nativeVideoCapable()
        })
    }, TD.services.TwitterMedia._entitiesContainAnimatedGif = function(e) {
        return e.filter(function(e) {
            return e.animatedGifCapable()
        })
    }, TD.services.TwitterMedia.prototype = {
        flaggedNSFW: !1,
        isVideo: !1,
        isAnimatedGif: !1,
        isVine: !1
    }, TD.services.TwitterMedia.prototype.nativePhotoCapable = function() {
        return "twitter" === this.service && "photo" === this.entity.type
    }, TD.services.TwitterMedia.prototype.nativeVideoCapable = function() {
        return "twitter" === this.service && "video" === this.entity.type
    }, TD.services.TwitterMedia.prototype.animatedGifCapable = function() {
        return "twitter" === this.service && "animated_gif" === this.entity.type
    }, TD.services.TwitterMedia.prototype.fromMediaEntity = function(e) {
        return this.entity = e, this.service = "twitter", this.isVideo = "video" === e.type, this.isAnimatedGif = "animated_gif" === e.type, this.url = this.shortUrl = e.url, this.sizes = e.sizes, this.needsSecureUrl = !1, this.isScheduled = !1, this.mediaId = e.id_str, this.taggedUsers = this.getTaggedUsers(), this.hasTaggedUsers = Boolean(this.taggedUsers.length), e.source_status_id ? this.referenced_media = !0 : this.referenced_media = !1, this
    }, TD.services.TwitterMedia.prototype.fromPhotoAttachment = function(e) {
        return this.entity = e, this.service = "twitter", this.url = e.media_url_https, this.shortUrl = e.display_url, this.sizes = e.sizes, this.needsSecureUrl = !1, this.isScheduled = !1, this.mediaId = e.id_str, this.referenced_media = !1, this
    }, TD.services.TwitterMedia.prototype.fromVideoAttachment = function(e) {
        return this.fromMediaEntity(e)
    }, TD.services.TwitterMedia.prototype.fromAnimatedGIFAttachment = function(e) {
        return this.fromMediaEntity(e)
    }, TD.services.TwitterMedia.prototype.fromURL = function(e, t, i, s) {
        if (this.url = i, this.urlMatches = s, this.shortUrl = t, this.service = e, "vine" === this.service) this.isVine = !0, this.isVideo = !0, this.mediaId = this.url.split("/").pop();
        else if ("youtube" === this.service) {
            if (this.isVideo = !0, this.url.match(TD.services.TwitterMedia.YOUTUBE_LONG_RE) ? this.mediaId = TD.net.util.decodeURL(this.url).v : this.mediaId = this.url.split("/").pop().split("?")[0], this.startTimeInUrl = TD.net.util.decodeURL(this.url).t, !this.startTimeInUrl) {
                var n = this.url.split("#")[1] || "";
                this.startTimeInUrl = TD.net.util.formDecode(n).t
            }
            if (this.startTimeInUrl) {
                var r = this.startTimeInUrl.match(TD.services.TwitterMedia.YOUTUBE_STARTTIME),
                    a = r[1] ? parseInt(3600 * r[1], 10) : 0,
                    o = r[2] ? parseInt(60 * r[2], 10) : 0,
                    c = r[3] ? parseInt(r[3], 10) : 0;
                this.startTime = a + o + c
            }
        }
        return this
    }, TD.services.TwitterMedia.prototype.getTwitterPreviewUrl = function(e) {
        return this.isScheduled ? this.entity.url : this.entity.media_url_https + (e || "")
    }, TD.services.TwitterMedia.prototype.thumb = function() {
        switch (this.service) {
            case "twitter":
                return this.getTwitterPreviewUrl(":thumb");
            case "twitpic":
                return "https://twitpic.com/show/thumb/" + this.urlMatches[2];
            case "yfrog":
                return this.url.replace("http://", "https://") + ":small";
            case "lockerz":
                return "https://api.plixi.com/api/tpapi.svc/imagefromurl?size=thumbnail&url=" + this.url;
            case "youtube":
                return "https://img.youtube.com/vi/" + this.mediaId + "/default.jpg";
            case "vine":
                return this.large()
        }
    }, TD.services.TwitterMedia.prototype.small = function() {
        switch (this.service) {
            case "twitter":
                return this.getTwitterPreviewUrl(":small");
            case "twitpic":
            case "yfrog":
            case "lockerz":
            case "vine":
                return this.large();
            case "youtube":
                return "https://img.youtube.com/vi/" + this.mediaId + "/mqdefault.jpg"
        }
    }, TD.services.TwitterMedia.prototype.medium = function() {
        switch (this.service) {
            case "twitter":
                return this.getTwitterPreviewUrl();
            case "twitpic":
            case "yfrog":
            case "lockerz":
            case "vine":
                return this.large();
            case "youtube":
                return "https://img.youtube.com/vi/" + this.mediaId + "/mqdefault.jpg"
        }
    }, TD.services.TwitterMedia.prototype.large = function() {
        switch (this.service) {
            case "twitter":
                return this.getTwitterPreviewUrl(":large");
            case "twitpic":
                return "https://twitpic.com/show/full/" + this.urlMatches[2];
            case "yfrog":
                return this.url.replace("http://", "https://") + ":iphone";
            case "lockerz":
                return "https://api.plixi.com/api/tpapi.svc/imagefromurl?size=medium&url=" + this.url;
            case "youtube":
                return "https://img.youtube.com/vi/" + this.mediaId + "/hqdefault.jpg";
            case "vine":
                return "https://vine.co/v/" + this.mediaId + "/thumb"
        }
    }, TD.services.TwitterMedia.prototype.bestUnifiedImageVariant = function(e, t) {
        var i = TD.util.isRetina(),
            s = {
                mediaUrl: this.entity.media_url_https,
                originalInfo: {
                    width: a.default.get(this.entity, "original_info.width", this.sizes.medium.w),
                    height: a.default.get(this.entity, "original_info.height", this.sizes.medium.h)
                },
                isRetina: i,
                containerWidth: e,
                containerHeight: t
            };
        return (0, o.getUnifiedImageVariant)(s).url
    }, TD.services.TwitterMedia.prototype.chooseVideoVariant = function() {
        return this.entity.video_info.variants.filter(function(e) {
            return "video/mp4" === e.content_type
        }).sort(function(e, t) {
            return ~~e.bitrate - ~~t.bitrate
        }).pop()
    }, TD.services.TwitterMedia.prototype.getContainerForPreviewSize = function(e) {
        var t = TD.settings.getColumnWidth(),
            i = TD.services.TwitterMedia.COLUMN_WIDTH_MEDIA_SIZE_MAP[t].stream[e];
        return {
            containerWidth: i.width,
            containerHeight: i.height
        }
    }, TD.services.TwitterMedia.prototype.getContainerForDetail = function() {
        var e = TD.settings.getColumnWidth(),
            t = TD.services.TwitterMedia.COLUMN_WIDTH_MEDIA_SIZE_MAP[e].detail;
        return {
            containerWidth: t.width,
            containerHeight: t.height
        }
    }, TD.services.TwitterMedia.prototype.getAltText = function() {
        return a.default.get(this.entity, "ext_alt_text", "")
    }, TD.services.TwitterMedia.prototype.getMediaSrcForPreviewSize = function(e) {
        var t = TD.controller.stats.isInExperimentBucket("tweetdeck_uiv_7739", "uiv_images");
        if ((TD.services.TwitterMedia.UIVEnabled || t) && "twitter" === this.service && a.default.get(this, "entity.original_info", !1)) {
            var i = this.getContainerForPreviewSize(e),
                s = i.containerWidth,
                n = i.containerHeight;
            return this.bestUnifiedImageVariant(s, n)
        }
        var r = TD.util.isRetina();
        switch (e) {
            case TD.vo.Column.MEDIA_PREVIEW_SIZE_SMALL:
                return this.small();
            case TD.vo.Column.MEDIA_PREVIEW_SIZE_MEDIUM:
                return r ? this.medium() : this.small();
            case TD.vo.Column.MEDIA_PREVIEW_SIZE_LARGE:
                return r ? this.large() : this.medium()
        }
    }, TD.services.TwitterMedia.prototype.getAnimatedGifForPreview = function() {
        var e = this.chooseVideoVariant();
        return {
            src: e.url,
            imageSrc: this.getTwitterPreviewUrl(),
            contentType: e.content_type
        }
    }, TD.services.TwitterMedia.prototype.renderAnimatedGifPlaceholder = function(e) {
        var t = {
            imageSrc: this.getTwitterPreviewUrl(),
            thumbSizeClass: TD.services.TwitterMedia.thumbSizeClasses[e]
        };
        return TD.ui.template.render("media/animated_gif", t)
    }, TD.services.TwitterMedia.prototype.renderThumb = function(e) {
        var t;
        if ("twitter" === this.service && "animated_gif" === this.entity.type) {
            var i = this.chooseVideoVariant();
            return t = {
                src: i.url,
                contentType: i.content_type,
                isGifActive: !0,
                imageSrc: this.getTwitterPreviewUrl(),
                thumbSizeClass: TD.services.TwitterMedia.thumbSizeClasses[e]
            }, TD.ui.template.render("media/animated_gif", t)
        }
        return t = {
            url: this.url,
            altText: this.getAltText(),
            imageSrc: this.thumb(),
            isVideo: this.isVideo,
            thumbSizeClass: TD.services.TwitterMedia.thumbSizeClasses[e]
        }, TD.ui.template.render("status/media_thumb", t)
    }, TD.services.TwitterMedia.prototype.renderGridView = function() {
        var e = {
            mediaId: this.mediaId,
            altText: this.getAltText(),
            isPossiblySensitive: this.isPossiblySensitive,
            url: this.url,
            imageSrc: this.small(),
            isVideo: this.isVideo,
            thumbClass: TD.services.TwitterMedia.IMAGE_CLASS
        };
        return TD.ui.template.render("status/media_image_container", e)
    }, TD.services.TwitterMedia.getDetailViewTemplateAndParams = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
            s = t.service,
            r = t.isAnimatedGif,
            a = void 0 !== r && r,
            o = t.isVideo,
            c = void 0 !== o && o,
            l = t.isPossiblySensitive,
            u = void 0 !== l && l,
            d = i.usingNarrowColumns,
            h = void 0 !== d && d,
            m = i.columnWidth,
            f = void 0 === m ? "medium" : m;
        if ("twitter" === s) {
            if (a) {
                var p = t.getAnimatedGifForPreview();
                return ["status/media_thumb", (0, n.default)({
                    isPossiblySensitive: u,
                    isAnimatedGif: !0,
                    isGifActive: !0,
                    withAutoplay: !0,
                    detailView: !0
                }, p)]
            }
            if (c) {
                var g = t.entity.video_info.aspect_ratio[0] / t.entity.video_info.aspect_ratio[1],
                    v = TD.services.TwitterMedia.AVAILABLE_COLUMN_SPACE[f],
                    T = t.chooseVideoVariant();
                return ["media/native_video", {
                    chirpId: e,
                    imageSrc: t.entity.media_url_https,
                    videoUrl: T.url,
                    contentType: T.content_type,
                    isPossiblySensitive: u,
                    mediaId: t.mediaId,
                    autoplay: 1,
                    width: v,
                    height: v / g
                }]
            }
        }
        return "vine" !== s || h ? "youtube" !== s || h ? ["status/media_thumb", {
            mediaId: t.mediaId,
            altText: t.entity.ext_alt_text,
            isPossiblySensitive: u,
            url: t.url,
            imageSrc: t.small(),
            isVideo: t.isVideo,
            withAutoplay: !0,
            thumbClass: TD.services.TwitterMedia.IMAGE_CLASS,
            hasTaggedUsers: t.hasTaggedUsers,
            showTaggedUsers: !0,
            renderTaggedUsers: t.renderTaggedUsers()
        }] : ["media/youtube", {
            id: t.mediaId,
            startTime: t.startTime,
            autoplay: 0,
            width: "100%",
            height: "auto"
        }] : ["media/vine", {
            id: t.mediaId,
            width: "100%",
            height: "auto"
        }]
    }, TD.services.TwitterMedia.prototype.getTaggedUsers = function() {
        var e = a.default.get(this.entity, "features.all.tags", []).filter(function(e) {
            return "user" === e.type
        }).map(function(e) {
            return {
                id: e.user_id,
                screenName: e.screen_name,
                name: e.name
            }
        });
        return a.default.uniq(e, "id")
    }, TD.services.TwitterMedia.prototype.renderTaggedUsers = function() {
        var e = this.taggedUsers.map(function(e, t, i) {
            var s = i.length;
            return (0, n.default)({}, e, {
                userLink: (0, r.linkifyUser)(e),
                isBeforeLast: t === s - 2,
                isLast: t === s - 1
            })
        });
        return TD.ui.template.render("media/tagged_users", {
            hasTwoOrMoreUsers: e.length >= 2,
            taggedUsers: e
        })
    }, TD.services.TwitterMedia.prototype.renderDetailView = function() {
        var e = this;
        return function() {
            var t;
            return (t = TD.ui.template).render.apply(t, (0, s.default)(TD.services.TwitterMedia.getDetailViewTemplateAndParams(e.chirpId, e.media, {
                usingNarrowColumns: "narrow" === TD.settings.getColumnWidth(),
                columnWidth: TD.settings.getColumnWidth()
            })))
        }
    }, TD.services.TwitterMedia.prototype.renderGallery = function() {
        var e, t, i, s = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            n = "twitter" === this.service && this.isVideo;
        if ("twitter" === this.service && "animated_gif" === this.entity.type) e = "media/animated_gif", t = {
            gifSrc: (i = this.chooseVideoVariant()).url,
            contentType: i.content_type
        };
        else if (n && this.isScheduled) e = "media/scheduled_video";
        else if (n) {
            e = "media/native_video";
            var r = 410 * (this.entity.video_info.aspect_ratio[0] / this.entity.video_info.aspect_ratio[1]);
            i = this.chooseVideoVariant(), t = {
                chirpId: s.chirpId,
                imageSrc: this.entity.media_url_https,
                videoUrl: i.url,
                contentType: i.content_type,
                mediaId: this.mediaId,
                autoplay: 1,
                height: 410,
                width: r,
                isDM: s.isDM
            }
        } else "youtube" === this.service ? (e = "media/youtube", t = {
            id: this.mediaId,
            startTime: this.startTime,
            autoplay: 1,
            width: TD.services.TwitterMedia.YOUTUBE_GALLERY_WIDTH,
            height: TD.services.TwitterMedia.YOUTUBE_GALLERY_HEIGHT
        }) : "vine" === this.service ? (e = "media/vine", t = {
            id: this.mediaId,
            width: TD.services.TwitterMedia.VINE_GALLERY_WIDTH,
            height: TD.services.TwitterMedia.VINE_GALLERY_HEIGHT
        }) : (e = "status/media_thumb", t = {
            url: this.url,
            altText: this.getAltText(),
            imageSrc: this.large(),
            thumbClass: TD.services.TwitterMedia.IMAGE_CLASS,
            needsSecureUrl: this.needsSecureUrl,
            isGalleryView: !0,
            isDM: s.isDM,
            isFromProtectedUser: s.isFromProtectedUser
        });
        return TD.ui.template.render(e, t)
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getUnifiedImageVariant = function(e) {
        for (var t = e.mediaUrl, i = e.originalInfo, n = e.isRetina, r = e.containerHeight, a = e.containerWidth, o = i.width >= i.height, c = i.width / i.height, l = void 0, u = void 0, d = void 0, h = 0; h < s.length; h++) {
            if (d = s[h], o) {
                if (d.size > i.width) {
                    l = i.width, u = i.height;
                    break
                }
                l = d.size, u = d.size / c
            } else {
                if (d.size > i.height) {
                    l = i.width, u = i.height;
                    break
                }
                l = d.size * c, u = d.size
            }
            var m = a,
                f = r;
            if (n && (m = 2 * a, f = 2 * r), l >= m && u >= f) break
        }
        return {
            width: l,
            height: u,
            url: t + "?format=jpg&name=" + d.name
        }
    };
    var s = [{
        name: "tiny",
        size: 64
    }, {
        name: "120x120",
        size: 120
    }, {
        name: "240x240",
        size: 240
    }, {
        name: "360x360",
        size: 360
    }, {
        name: "small",
        size: 680
    }, {
        name: "900x900",
        size: 900
    }, {
        name: "medium",
        size: 1200
    }, {
        name: "large",
        size: 2048
    }, {
        name: "4096x4096",
        size: 4096
    }]
}, function(e, t, i) {
    "use strict";
    var s = u(i(7)),
        n = u(i(3)),
        r = u(i(1)),
        a = u(i(0)),
        o = u(i(19)),
        c = u(i(17)),
        l = i(23);

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = TD.services.TwitterUser = function(e) {
        this.account = e
    }, TD.services.TwitterUser.MINI_SUFFIX = "_mini", TD.services.TwitterUser.NORMAL_SUFFIX = "_normal", TD.services.TwitterUser.BIGGER_SUFFIX = "_bigger", TD.services.TwitterUser.REASONABLY_SMALL_SUFFIX = "_reasonably_small", TD.services.TwitterUser.NORMAL_SUFFIX_REGEXP = new RegExp(TD.services.TwitterUser.NORMAL_SUFFIX + "(?!.*" + TD.services.TwitterUser.NORMAL_SUFFIX + ")"), TD.services.TwitterUser.BIGGER_SUFFIX_REGEXP = new RegExp(TD.services.TwitterUser.BIGGER_SUFFIX + "(?!.*" + TD.services.TwitterUser.BIGGER_SUFFIX + ")"), TD.services.TwitterUser.prototype.fromJSONObject = function(e, t) {
        return t = r.default.defaults(t || {}, {
            isContributor: !1
        }), this.id = e.id_str, this.screenName = e.screen_name ? e.screen_name.trim() : "", this.profileURL = "https://twitter.com/" + this.screenName, this.profileImageURL = e.profile_image_url_https, this.avatarSuffixRegex = TD.services.TwitterUser.NORMAL_SUFFIX_REGEXP, TD.util.isRetina() && (this.profileImageURL = this.profileImageURL.replace(this.avatarSuffixRegex, TD.services.TwitterUser.BIGGER_SUFFIX), this.avatarSuffixRegex = TD.services.TwitterUser.BIGGER_SUFFIX_REGEXP), this.name = e.name ? e.name.trim() : "", this.emojifiedName = o.default.cleanWithEmoji(e.name), this.location = e.location, this.description = e.description, this.entities = e.entities, this.joinedDate = TD.util.parseDateString(e.created_at), this.friendsCount = e.friends_count, this.listedCount = e.listed_count, this.followersCount = e.followers_count, this.statusesCount = e.statuses_count, this.listedCount = e.listed_count, this.url = e.url, this.isProtected = e.protected, this.isVerified = e.verified, this.isTranslator = e.is_translator, this.isBadged = Boolean(e.verified || e.is_translator), this.following = e.following, this.lang = e.lang, this.profileColor = e.profile_link_color, this.bannerUrl = e.profile_banner_url, this.bannerUrlSmall = this.bannerUrl ? this.bannerUrl + "/" + (TD.util.isRetina() ? "600x200" : "300x100") : null, this._profileBannerURL = e.profile_banner_url ? e.profile_banner_url + "/web" : null, TD.util.isRetina() && this._profileBannerURL && (this._profileBannerURL += "_retina"), this._profileBannerURL = this._profileBannerURL ? this._profileBannerURL : TD.assets.get("/web/assets/global/backgrounds/td_profile_empty" + (TD.util.isRetina() ? "@2x.jpg" : ".jpg")), e.status && (this.lastStatus = new TD.services.TwitterStatus(this.account).fromJSONObject(e.status), this.lastStatus.user = this), t.isContributor || TD.cache.twitterUsers.add(this), this
    }, TD.services.TwitterUser.prototype.fromGraphQLJSONObject = function(e, t) {
        var i = e.rest_id,
            n = e.legacy;
        return t = (0, s.default)({
            isContributor: !1
        }, t), this.id = i, this.screenName = n.screen_name ? n.screen_name.trim() : "", this.profileURL = "https://twitter.com/" + this.screenName, this.profileImageURL = n.profile_image_url_https, this.avatarSuffixRegex = TD.services.TwitterUser.NORMAL_SUFFIX_REGEXP, TD.util.isRetina() && (this.profileImageURL = this.profileImageURL.replace(this.avatarSuffixRegex, TD.services.TwitterUser.BIGGER_SUFFIX), this.avatarSuffixRegex = TD.services.TwitterUser.BIGGER_SUFFIX_REGEXP), this.name = n.name ? n.name.trim() : "", this.emojifiedName = o.default.cleanWithEmoji(n.name), this.location = n.location, this.description = n.description, this.entities = n.entities, this.joinedDate = TD.util.parseDateString(n.created_at), this.friendsCount = n.friends_count, this.listedCount = n.listed_count, this.followersCount = n.followers_count, this.statusesCount = n.statuses_count, this.listedCount = n.listed_count, this.url = n.url, this.isProtected = n.protected, this.isVerified = n.verified, this.isTranslator = n.is_translator, this.isBadged = Boolean(n.verified || n.is_translator), this.following = n.following, this.lang = n.lang, this.muting = n.muting, this.blocking = n.blocking, this.profileColor = n.profile_link_color, this.bannerUrl = n.profile_banner_url, this.bannerUrlSmall = this.bannerUrl ? this.bannerUrl + "/" + (TD.util.isRetina() ? "600x200" : "300x100") : null, this._profileBannerURL = n.profile_banner_url ? n.profile_banner_url + "/web" : null, TD.util.isRetina() && this._profileBannerURL && (this._profileBannerURL += "_retina"), this._profileBannerURL = this._profileBannerURL ? this._profileBannerURL : TD.assets.get("/web/assets/global/backgrounds/td_profile_empty" + (TD.util.isRetina() ? "@2x.jpg" : ".jpg")), t.isContributor || TD.cache.twitterUsers.add(this), this
    }, TD.services.TwitterUser.prototype.isSameUser = function(e) {
        var t;
        return t = e instanceof TD.services.TwitterUser ? e.screenName.toLowerCase() : e.toLowerCase(), this.screenName.toLowerCase() === t
    }, TD.services.TwitterUser.prototype.isMe = function() {
        return this.account.getUserID() == this.id
    }, TD.services.TwitterUser.prototype.isBlockingOrMuting = function() {
        return this.blocking || this.muting
    }, TD.services.TwitterUser.prototype.reasonablySmallProfileImageURL = function() {
        return this.profileImageURL.replace(this.avatarSuffixRegex, TD.services.TwitterUser.REASONABLY_SMALL_SUFFIX)
    }, TD.services.TwitterUser.prototype.biggerProfileImageURL = function() {
        return TD.util.isRetina() ? this.reasonablySmallProfileImageURL() : this.profileImageURL.replace(this.avatarSuffixRegex, TD.services.TwitterUser.BIGGER_SUFFIX)
    }, TD.services.TwitterUser.prototype.miniProfileImageURL = function() {
        return TD.util.isRetina() ? this.profileImageURL.replace(this.avatarSuffixRegex, TD.services.TwitterUser.NORMAL_SUFFIX) : this.profileImageURL.replace(this.avatarSuffixRegex, TD.services.TwitterUser.MINI_SUFFIX)
    }, TD.services.TwitterUser.prototype.prettyFollowersCount = function() {
        return TD.util.prettyNumber(this.followersCount, {
            noNegativeNumbers: !0
        })
    }, TD.services.TwitterUser.prototype.prettyFriendsCount = function() {
        return TD.util.prettyNumber(this.friendsCount, {
            noNegativeNumbers: !0
        })
    }, TD.services.TwitterUser.prototype.prettyListedCount = function() {
        return TD.util.prettyNumber(this.listedCount, {
            noNegativeNumbers: !0
        })
    }, TD.services.TwitterUser.prototype.prettyStatusesCount = function() {
        return TD.util.prettyNumber(this.statusesCount, {
            noNegativeNumbers: !0
        })
    }, TD.services.TwitterUser.prototype.prettyJoinedDate = function() {
        return TD.util.prettyDateShortString(this.joinedDate)
    }, TD.services.TwitterUser.prototype.prettyTimeDateJoinedDate = function() {
        return TD.util.prettyTimeString(this.joinedDate)
    }, TD.services.TwitterUser.prototype.follow = function(e, t, i, s) {
        var r, a = this;
        TD.controller.clients.getClient(e.getKey()).followUser(this.screenName, function(e) {
            a.following = !0, s && (r = (0, n.default)("Successfully followed @{{screenName}}", a), e.isProtected && (r = (0, n.default)("Follower request sent to @{{screenName}}", a)), (0, l.showNotification)({
                message: r
            })), t && t(e)
        }, function(e) {
            s && (r = (0, n.default)("Unable to follow @{{screenName}}", a), (0, l.showErrorNotification)({
                message: r
            })), i && i()
        })
    }, TD.services.TwitterUser.prototype.unfollow = function(e, t, i, s) {
        var r, a = this;
        TD.controller.clients.getClient(e.getKey()).unfollowUser(this.screenName, function(i) {
            a.removeFromView(e, {
                feedTypes: c.default.followingFeedTypes
            }), a.following = !1, s && (r = (0, n.default)("Successfully unfollowed @{{screenName}}", a), (0, l.showNotification)({
                message: r
            })), t && t(i)
        }, function() {
            s && (r = (0, n.default)("Unable to unfollow @{{screenName}}", a), (0, l.showErrorNotification)({
                message: r
            })), i && i()
        })
    }, TD.services.TwitterUser.prototype.unblock = function(e, t, i) {
        var s = TD.controller.clients.getClient(e.getKey()),
            n = function(e) {
                delete s.blocks[this.id], t && t(e)
            }.bind(this);
        s.unblockUser(this.screenName, n, i), a.default.publish("/user/" + this.screenName + "/unblock", [this.account])
    }, TD.services.TwitterUser.prototype.block = function(e, t, i, s) {
        var r, o = TD.controller.clients.getClient(e.getKey()),
            c = function(e) {
                (0, l.showNotification)({
                    message: r
                }), self.following = !1, a.default.publish("/user/" + this.screenName + "/blocked", [this.account]), o.addIdToBlockList(this.id), i && i(e)
            }.bind(this);
        a.default.publish("/user/" + this.screenName + "/block", [this.account]), t ? (o.blockAndReportUser(this.screenName, c, s), r = (0, n.default)("Successfully blocked and reported @{{screenName}}", {
            screenName: this.screenName
        })) : (o.blockUser(this.screenName, c, s), r = (0, n.default)("Successfully blocked @{{screenName}}", {
            screenName: this.screenName
        }))
    }, TD.services.TwitterUser.prototype.mute = function(e) {
        var t = TD.controller.clients.getClient(e.getKey());
        return t.muteUser(this.id).addCallbackWith(this, TD.util.effect(function() {
            (0, l.showNotification)({
                message: (0, n.default)("Muted @{{screenName}}", {
                    screenName: this.screenName
                })
            }), t.addIdToMuteList(this.id)
        }))
    }, TD.services.TwitterUser.prototype.unmute = function(e) {
        var t = TD.controller.clients.getClient(e.getKey());
        return t.unmuteUser(this.id).addCallbackWith(this, TD.util.effect(function() {
            (0, l.showNotification)({
                message: (0, n.default)("Unmuted @{{screenName}}", {
                    screenName: this.screenName
                })
            }), delete t.mutes[this.id]
        }))
    }, TD.services.TwitterUser.prototype.removeFromView = function(e, t) {
        a.default.publish("/user/removeTweets", [this.id, e.getUserID(), t])
    }, TD.services.TwitterUser.prototype.bio = function() {
        var e = this.entities && this.entities.description || {};
        return TD.util.transform(this.description, e)
    }, TD.services.TwitterUser.prototype.htmlLocation = function() {
        var e = this.entities && this.entities.location || {};
        return TD.util.transform(this.location, e)
    }, TD.services.TwitterUser.prototype.hasLocation = function() {
        return Boolean(this.htmlLocation())
    }, TD.services.TwitterUser.prototype.getFollowerURL = function() {
        return this.profileURL + "/followers"
    }, TD.services.TwitterUser.prototype.getFriendURL = function() {
        return this.profileURL + "/following"
    }, TD.services.TwitterUser.prototype.getProfileURL = function() {
        return this.profileURL
    }, TD.services.TwitterUser.prototype.getMediaURL = function() {
        return this.profileURL + "/media"
    }, TD.services.TwitterUser.prototype.getMediaSearchQuery = function() {
        return TD.ui.template.toHtml("from:{{screenName}} (filter:images OR filter:videos)", {
            screenName: this.screenName
        })
    }, TD.services.TwitterUser.prototype.getListedURL = function() {
        return this.profileURL + "/memberships"
    }, TD.services.TwitterUser.prototype.getDisplayURL = function() {
        var e = this.entities;
        return e && e.url && e.url.urls && e.url.urls.length && e.url.urls[0].display_url ? e.url.urls[0].display_url : this.url
    }, TD.services.TwitterUser.prototype.profileBannerURL = function() {
        return this._profileBannerURL
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.services.TwitterDeletedUser = function(e, t) {
        return this.id = t, this.isDeleted = !0, this.screenName = "", this.name = (0, r.default)("Unknown user"), this.isProtected = !1, this.isVerified = !1, this.isTranslator = !1, this.isBadged = !1, this.followersCount = 0, this.friendsCount = 0, this.listedCount = 0, this.statusesCount = 0, this.joinedDate = new Date, this
    }, TD.services.TwitterDeletedUser.prototype.isSameUser = function() {
        return !1
    }, TD.services.TwitterDeletedUser.prototype.isMe = function() {
        return !1
    }, TD.services.TwitterDeletedUser.prototype.reasonablySmallProfileImageURL = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.biggerProfileImageURL = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.miniProfileImageURL = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.follow = function() {}, TD.services.TwitterDeletedUser.prototype.unfollow = function() {}, TD.services.TwitterDeletedUser.prototype.unblock = function() {}, TD.services.TwitterDeletedUser.prototype.block = function(e, t, i, s) {}, TD.services.TwitterDeletedUser.prototype.removeFromView = function(e, t) {}, TD.services.TwitterDeletedUser.prototype.bio = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.htmlLocation = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.hasLocation = function() {
        return !1
    }, TD.services.TwitterDeletedUser.prototype.getFollowerURL = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.getFriendURL = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.getProfileURL = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.getMediaURL = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.getMediaSearchQuery = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.getListedURL = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.getDisplayURL = function() {
        return ""
    }, TD.services.TwitterDeletedUser.prototype.profileBannerURL = function() {
        return ""
    }
}, function(e, t, i) {
    "use strict";
    TD.services.TwitterList = function(e) {
        this.account = e
    }, TD.services.TwitterList.prototype.fromJSONObject = function(e) {
        return this.id = e.id_str, this.name = e.name, this.description = e.description, this.slug = e.slug, this.fullName = e.full_name, this.memberCount = e.member_count, this.isPrivate = "private" === e.mode, this.user = new TD.services.TwitterUser(this.account).fromJSONObject(e.user), this
    }, TD.services.TwitterList.prototype.isOwnList = function() {
        var e = TD.storage.Account.generateKeyFor("twitter", this.user.id),
            t = TD.storage.accountController.get(e);
        return Boolean(t)
    }
}, function(e, t, i) {
    "use strict";
    TD.services.CustomTimeline = function(e) {
        this.account = e
    }, TD.services.CustomTimeline.prototype.fromJSONObject = function(e) {
        return this.id = e.id_str || e.id, this.name = e.name, this.description = e.description, this.url = e.collection_url, this.ordering = e.timeline_order, this.user = new TD.services.TwitterUser(this.account).fromJSONObject(e.user), this
    }, TD.services.CustomTimeline.prototype.isOwnCustomTimeline = function() {
        return String(this.account.getUserID()) === this.user.id
    }, TD.services.CustomTimeline.prototype.isCurationOrdering = function() {
        return "curation_reverse_chron" === this.ordering
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.services.TwitterSearchParser = function(e) {
        this.query = e, this.terms = [], this.init()
    }, TD.services.TwitterSearchParser.PUNCT = new RegExp("[" + twttrTxt.regexen.punct.source + "]", "g"), TD.services.TwitterSearchParser.ALLOWED_CHARS = ["@", "#", '"', "-"], TD.services.TwitterSearchParser.isStreamable = function(e) {
        var t = e.match(TD.services.TwitterSearchParser.PUNCT);
        return 0 === r.default.difference(t, TD.services.TwitterSearchParser.ALLOWED_CHARS).length
    }, TD.services.TwitterSearchParser.prototype.PHRASE = "phrase", TD.services.TwitterSearchParser.prototype.NEGATIVE_PHRASE = "negPhrase", TD.services.TwitterSearchParser.prototype.AND = "and", TD.services.TwitterSearchParser.prototype.OR = "or", TD.services.TwitterSearchParser.prototype.query = "", TD.services.TwitterSearchParser.prototype.trackQuery = "", TD.services.TwitterSearchParser.prototype.thePhrase = "", TD.services.TwitterSearchParser.prototype.type = "", TD.services.TwitterSearchParser.prototype.init = function() {
        var e, t;
        if (!this.trackQuery)
            if (0 === (t = "string" == typeof this.query ? TD.services.TwitterSearchParser.extractPhrases(this.query, !1) : this.query).length);
            else if (1 === t.length) this.thePhrase = t[0].toLowerCase(), "-" === this.thePhrase.charAt(0) && -1 === this.thePhrase.indexOf(" ") ? (this.type = this.NEGATIVE_PHRASE, this.thePhrase = this.thePhrase.slice(1), this.trackQuery = "") : (this.type = this.PHRASE, this.trackQuery = this.thePhrase);
        else {
            var i, s = [
                    []
                ],
                n = !0;
            for (i = 0; i < t.length; i++) "OR" !== (e = t[i]) ? "AND" !== e && (n ? r.default.last(s).push(e) : s.push([e]), n = !1) : (r.default.last(s).push(e), n = !0);
            if ((s = r.default.reject(s, function(e) {
                    return r.default.isEmpty(e)
                })).length > 1) {
                for (this.type = this.AND, i = 0; i < s.length; i++) {
                    var a = s[i];
                    a.length > 0 && this.terms.push(new TD.services.TwitterSearchParser(a))
                }
                this.trackQuery = this.calculateANDTrackQuery(s)
            } else
                for (this.type = this.OR, i = 0; i < s[0].length; i++) "OR" != (e = s[0][i]) && (this.terms.push(new TD.services.TwitterSearchParser([e])), "-" != e.charAt(0) && (this.trackQuery && (this.trackQuery += ","), this.trackQuery += e))
        }
    }, TD.services.TwitterSearchParser.prototype.calculateANDTrackQuery = function(e) {
        for (var t = [""], i = 0; i < e.length; i++) {
            for (var s = e[i], n = [], r = 0; r < s.length; r++) {
                var a = s[r];
                if ("OR" != a)
                    if ("-" == a.charAt(0)) n = t;
                    else
                        for (var o = 0; o < t.length; o++) {
                            var c = t[o],
                                l = c ? c + " " : "";
                            l += a, n.push(l)
                        }
            }
            t = n
        }
        return t.join(",")
    }, TD.services.TwitterSearchParser.extractPhrases = function(e, t) {
        for (var i, s = [], n = e.split('"'), r = 0; r < n.length; r++)
            if (n[r])
                if (r % 2 == 1 && r < n.length - 1)(i = n[r].trim()) && (t && (i = '"' + i + '"'), s.push(i));
                else
                    for (var a = n[r].split(" "), o = 0; o < a.length; o++)(i = (i = a[o]).trim()) && s.push(i);
        return s
    }, TD.services.TwitterSearchParser.prototype.match = function(e, t) {
        var i, s = new RegExp("(^|[^\\w])" + r.default.escapeRegExp(this.thePhrase) + "($|[^\\w])");
        switch (t || (e = e.toLowerCase()), this.type) {
            case this.PHRASE:
                return -1 !== e.indexOf(this.thePhrase) && s.test(e);
            case this.NEGATIVE_PHRASE:
                return -1 === e.indexOf(this.thePhrase);
            case this.AND:
                for (i = 0; i < this.terms.length; i++)
                    if (!this.terms[i].match(e, !0)) return !1;
                return !0;
            case this.OR:
                for (i = 0; i < this.terms.length; i++)
                    if (this.terms[i].match(e, !0)) return !0;
                return !1;
            default:
                return !1
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = i(19);
    TD.services.TwitterAction = function(e) {
        this.account = e
    }, TD.services.TwitterAction.FAVORITE = "favorite", TD.services.TwitterAction.FAVORITED_RETWEET = "favorited_retweet", TD.services.TwitterAction.FAVORITED_MENTION = "favorited_mention", TD.services.TwitterAction.FAVORITED_MEDIA = "favorited_media_tagged", TD.services.TwitterAction.RETWEET = "retweet", TD.services.TwitterAction.RETWEETED_RETWEET = "retweeted_retweet", TD.services.TwitterAction.RETWEETED_MENTION = "retweeted_mention", TD.services.TwitterAction.RETWEETED_MEDIA = "retweeted_media_tagged", TD.services.TwitterAction.MENTION = "mention", TD.services.TwitterAction.REPLY = "reply", TD.services.TwitterAction.FOLLOW = "follow", TD.services.TwitterAction.LIST_MEMBER_ADDED = "list_member_added", TD.services.TwitterAction.LIST_CREATED = "list_created", TD.services.TwitterAction.UNFAVORITE = "unfavorite", TD.services.TwitterAction.LIST_MEMBER_REMOVED = "list_member_removed", TD.services.TwitterAction.LIST_DESTROYED = "list_destroyed", TD.services.TwitterAction.QUOTED_TWEET = "quoted_tweet", TD.services.TwitterAction.QUOTE = "quote", TD.services.TwitterAction.UNFOLLOW = "unfollow", TD.services.TwitterAction.processRESTAction = function(e, t) {
        var i = TD.services.TwitterAction._getActionConstructor(e.action);
        if (!i) return [];
        for (var s = e.sources, n = e.targets_size > 0 ? e.targets : [void 0], r = e.target_objects_size > 0 ? e.target_objects : [void 0], a = [], o = 0; o < s.length; o++)
            if (e.action !== TD.services.TwitterAction.RETWEET)
                for (var c = 0; c < n.length; c++)
                    for (var l = 0; l < r.length; l++) e.action === TD.services.TwitterAction.LIST_MEMBER_ADDED && s[o].id !== r[l].user.id || a.push([e, s[o], n[c], r[l]]);
            else {
                if (r[0].user.id != t.getUserID()) continue;
                a.push([e, s[o], n[o], r[0]])
            } return a.map(function(s) {
            return new i(t).fromJSONObject(e, s, !1)
        })
    }, TD.services.TwitterAction._getActionConstructor = function(e) {
        switch (e) {
            case TD.services.TwitterAction.MENTION:
            case TD.services.TwitterAction.REPLY:
                return TD.services.TwitterActionMention;
            case TD.services.TwitterAction.FAVORITE:
            case TD.services.TwitterAction.UNFAVORITE:
                return TD.services.TwitterActionFavorite;
            case TD.services.TwitterAction.FAVORITED_RETWEET:
            case TD.services.TwitterAction.FAVORITED_MENTION:
            case TD.services.TwitterAction.FAVORITED_MEDIA:
                return TD.services.TwitterActionFavoritedInteraction;
            case TD.services.TwitterAction.RETWEET:
                return TD.services.TwitterActionRetweet;
            case TD.services.TwitterAction.RETWEETED_RETWEET:
            case TD.services.TwitterAction.RETWEETED_MENTION:
            case TD.services.TwitterAction.RETWEETED_MEDIA:
                return TD.services.TwitterActionRetweetedInteraction;
            case TD.services.TwitterAction.QUOTED_TWEET:
            case TD.services.TwitterAction.QUOTE:
                return TD.services.TwitterActionQuotedTweet;
            case TD.services.TwitterAction.FOLLOW:
            case TD.services.TwitterAction.UNFOLLOW:
                return TD.services.TwitterActionFollow;
            case TD.services.TwitterAction.LIST_MEMBER_ADDED:
            case TD.services.TwitterAction.LIST_MEMBER_REMOVED:
                return TD.services.TwitterActionListMemberAdded;
            case TD.services.TwitterAction.LIST_CREATED:
            case TD.services.TwitterAction.LIST_DESTROYED:
                return TD.services.TwitterActionListCreated;
            default:
                return null
        }
    }, TD.services.TwitterAction.prototype = new TD.services.ChirpBase, TD.services.TwitterAction.prototype.getChirpType = function() {
        return this.action
    }, TD.services.TwitterAction.prototype.action = null, TD.services.TwitterAction.prototype.maxPosition = null, TD.services.TwitterAction.prototype.minPosition = null, TD.services.TwitterAction.msFudge = 0, TD.services.TwitterAction.prototype.fromJSONObject = function(e, t, i) {
        if (i) throw (0, s.metric)("action:from-json-object:from-stream"), new Error("`fromStream` is deprecated");
        return this.fromRESTData.apply(this, t), this.created = TD.util.parseDateString(e.created_at), this.maxPosition = e.max_position || this.created.getTime().toString(), this.minPosition = e.min_position || this.created.getTime().toString(), this.generateInternalID(), this.generateText(), this
    }, TD.services.TwitterAction.prototype.fromRESTData = function(e, t, i, s) {
        throw new Error("TwitterAction.fromRESTData not implemented")
    }, TD.services.TwitterAction.prototype.generateInternalID = function() {
        throw new Error("TwitterAction.generateInternalID not implemented")
    }, TD.services.TwitterAction.prototype.generateText = function() {}, TD.services.TwitterAction.prototype.render = function() {
        throw new Error("TwitterAction.render not implemented")
    }, TD.services.TwitterAction.prototype.isAboutYou = function() {
        throw new Error("TwitterAction.isAboutYou not implemented")
    }, TD.services.TwitterAction.prototype.isOwnChirp = function() {
        throw new Error("TwitterAction.isOwnChirp not implemented")
    }, TD.services.TwitterAction.prototype.getChirpURL = function() {
        return "https://twitter.com/activity"
    }, TD.services.TwitterAction.prototype.getCreator = function() {
        throw new Error("TwitterAction.getCreator not implemented")
    }, TD.services.TwitterAction.prototype.getSenders = function() {
        return [this.getCreator().screenName]
    }, TD.services.TwitterAction.prototype.isFromVerifiedUser = function() {
        return this.getCreator().isVerified
    }, TD.services.TwitterAction.prototype.getTargetUsers = function() {
        throw new Error("TwitterAction.getTargetUsers not implemented")
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.services.TwitterActionOnTweet = function(e) {
        this.account = e
    }, TD.services.TwitterActionOnTweet.prototype = new TD.services.TwitterAction, TD.services.TwitterActionOnTweet.prototype.sourceUser = null, TD.services.TwitterActionOnTweet.prototype.targetTweet = null, TD.services.TwitterActionOnTweet.prototype.generateInternalID = function() {
        this.id = [this.action, this.sourceUser.id, this.targetTweet.id].join("_")
    }, TD.services.TwitterActionOnTweet.prototype.isAboutYou = function() {
        return this.targetTweet.user.id == this.account.getUserID()
    }, TD.services.TwitterActionOnTweet.prototype.isOwnChirp = function() {
        return this.sourceUser.id == this.account.getUserID()
    }, TD.services.TwitterActionOnTweet.prototype.getRelatedTweet = function() {
        return this.targetTweet
    }, TD.services.TwitterActionOnTweet.prototype.getCreator = function() {
        return this.sourceUser
    }, TD.services.TwitterActionOnTweet.prototype.passFilters = function(e) {
        var t = TD.controller.filterManager.pass(this, e);
        return this.targetTweet && this.targetTweet.quotedTweet ? t && TD.controller.filterManager.pass(this.targetTweet.quotedTweet, e) : t
    }, TD.services.TwitterActionOnTweet.prototype.render = function(e, t) {
        e = e || {}, t = t || "status/tweet_activity_in_stream", TD.config.debug_highlight_streamed_chirps && (this.isStreamed() ? e.chirpClassnames = "is-streamed" : e.chirpClassnames = "");
        var i = TD.settings.getDisplaySensitiveMedia(),
            s = this.isAboutYou(),
            n = this.action === TD.services.TwitterAction.MENTION,
            a = this.action === TD.services.TwitterAction.FAVORITE,
            o = this.action === TD.services.TwitterAction.QUOTED_TWEET,
            c = !!this.targetTweet.quotedTweet,
            l = !!this.retweet,
            u = !s && !n,
            d = s && n,
            h = !0;
        (n || o) && (h = !1);
        var m = !0;
        u || d ? m = !1 : o && (m = !1);
        var f = !1;
        return n || o ? f = !0 : !s && a && (f = !0), TD.ui.template.render(t, r.default.extend(e, {
            chirp: this,
            sourceAvatar: s ? this.sourceUser.miniProfileImageURL() : null,
            withActivityHeader: h,
            isAboutYou: s,
            isMention: n,
            isFavorite: a,
            isRetweet: l,
            isTweetActivity: u,
            isNotification: d,
            withTweetActions: !0,
            withFooter: !0,
            withAvatar: f,
            withSourceMute: !s,
            withContentMute: m,
            withMediaPreview: !0,
            isMediaPreviewOff: e.mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_OFF,
            isMediaPreviewSmall: e.mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_SIZE_SMALL,
            isMediaPreviewLarge: e.mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_SIZE_LARGE,
            isQuotedTweet: c,
            mediaPreviewSrc: function() {
                return this.getMediaSrcForPreviewSize(e.mediaPreviewSize)
            },
            renderQuoted: function() {
                return this.renderQuotedTweet(e)
            },
            thumbSizeClass: TD.services.TwitterMedia.thumbSizeClasses[e.mediaPreviewSize],
            isPossiblySensitive: this.targetTweet.possiblySensitive && !i,
            withLinebreaks: !0,
            icon: this.iconClass,
            isFavorited: this.targetTweet.isFavorite,
            isRetweeted: this.targetTweet.isRetweet
        }))
    }, TD.services.TwitterActionOnTweet.prototype.getNotificationData = function() {
        return {
            title: this.text,
            img: this.targetTweet.user.profileImageURL,
            text: (0, r.default)("<div>" + this.targetTweet.htmlText + "</div>").text()
        }
    }, TD.services.TwitterActionOnTweet.prototype.getMedia = function() {
        return this.getRelatedTweet().getMedia()
    }, TD.services.TwitterActionOnTweet.prototype.getTargetUsers = function() {
        return [this.targetTweet.user]
    }
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(19));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.services.TwitterActionRetweet = function(e) {
        this.account = e
    }, TD.services.TwitterActionRetweet.prototype = new TD.services.TwitterActionOnTweet, TD.services.TwitterActionRetweet.prototype.action = TD.services.TwitterAction.RETWEET, TD.services.TwitterActionRetweet.prototype.iconClass = "icon-retweet-filled icon-retweet-color", TD.services.TwitterActionRetweet.prototype.retweet = null, TD.services.TwitterActionRetweet.prototype.fromRESTData = function(e, t, i, s) {
        this.sourceUser = new TD.services.TwitterUser(this.account).fromJSONObject(t), this.retweet = new TD.services.TwitterStatus(this.account).fromJSONObject(i), this.targetTweet = new TD.services.TwitterStatus(this.account).fromJSONObject(s)
    }, TD.services.TwitterActionRetweet.prototype.fromRetweet = function(e) {
        return this.sourceUser = e.user, this.retweet = e, this.targetTweet = e.retweetedStatus, this.created = new Date(e.created), this.generateInternalID(), this.generateText(), this.maxPosition = this.minPosition = this.created.getTime().toString(), this
    }, TD.services.TwitterActionRetweet.prototype.generateText = function() {
        var e = (0, s.default)("{{{user}}} Retweeted", null, !0);
        this.text = TD.ui.template.toHtml(e, {
            user: this.sourceUser.name
        }), this.htmlText = TD.ui.template.toHtml(e, {
            user: TD.ui.template.render("text/user_link_fullname", {
                name: n.default.cleanWithEmoji(this.sourceUser.name),
                profileUrl: this.sourceUser.getProfileURL(),
                withBold: this.isAboutYou()
            })
        })
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.services.TwitterActionMention = function(e) {
        this.account = e
    }, TD.services.TwitterActionMention.prototype = new TD.services.TwitterActionOnTweet, TD.services.TwitterActionMention.prototype.action = TD.services.TwitterAction.MENTION, TD.services.TwitterActionMention.prototype.iconClass = "icon-mention icon-mention-color", TD.services.TwitterActionMention.prototype.fromRESTData = function(e, t, i, s) {
        "reply" === e.action ? this.targetTweet = new TD.services.TwitterStatus(this.account).fromJSONObject(i) : this.targetTweet = new TD.services.TwitterStatus(this.account).fromJSONObject(s), this.sourceUser = new TD.services.TwitterUser(this.account).fromJSONObject(t)
    }, TD.services.TwitterActionMention.prototype.generateText = function() {
        var e = (0, r.default)("{{{user}}} mentioned you", null, !0);
        this.text = TD.ui.template.toHtml(e, {
            user: this.sourceUser.name
        }), this.htmlText = TD.ui.template.toHtml(e, {
            user: TD.ui.template.render("text/user_link_fullname", {
                name: this.sourceUser.name,
                profileUrl: this.sourceUser.getProfileURL(),
                withBold: this.isAboutYou()
            })
        })
    }, TD.services.TwitterActionMention.prototype.isAboutYou = function() {
        return !0
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.services.TwitterActionListCreated = function(e) {
        this.account = e
    }, TD.services.TwitterActionListCreated.prototype = new TD.services.TwitterAction, TD.services.TwitterActionListCreated.prototype.action = TD.services.TwitterAction.LIST_CREATED, TD.services.TwitterActionListCreated.prototype.owner = null, TD.services.TwitterActionListCreated.prototype.list = null, TD.services.TwitterActionListCreated.prototype.isListAction = !0, TD.services.TwitterActionListCreated.prototype.fromRESTData = function(e, t, i) {
        this.owner = new TD.services.TwitterUser(this.account).fromJSONObject(t), this.list = new TD.services.TwitterList(this.account).fromJSONObject(i)
    }, TD.services.TwitterActionListCreated.prototype.generateInternalID = function() {
        this.id = [this.action, this.owner.id, this.list.id].join("_")
    }, TD.services.TwitterActionListCreated.prototype.generateText = function() {
        var e = (0, r.default)("{{{owner}}} created the List {{{list}}}", null, !0);
        this.text = TD.ui.template.toHtml(e, {
            owner: this.owner.name,
            list: this.list.fullName
        }), this.htmlText = TD.ui.template.toHtml(e, {
            owner: TD.ui.template.render("text/user_link_fullname", {
                name: this.owner.name,
                profileUrl: this.owner.getProfileURL(),
                withBold: !0
            }),
            list: TD.ui.template.render("text/list_link_real_name", this.list)
        })
    }, TD.services.TwitterActionListCreated.prototype.isOwnChirp = function() {
        return this.owner.id == this.account.getUserID()
    }, TD.services.TwitterActionListCreated.prototype.isAboutYou = function() {
        return !1
    }, TD.services.TwitterActionListCreated.prototype.getCreator = function() {
        return this.owner
    }, TD.services.TwitterActionListCreated.prototype.getTargetUsers = function() {
        return []
    }, TD.services.TwitterActionListCreated.prototype.render = function() {
        var e = {
            chirp: this,
            sourceAvatar: this.owner.miniProfileImageURL()
        };
        return TD.ui.template.render("status/list_activity", e)
    }, TD.services.TwitterActionListCreated.prototype.getNotificationData = function() {
        return {
            title: this.text,
            img: null,
            text: this.list.description
        }
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(191);
    TD.services.TwitterActionListMemberAdded = function(e) {
        this.account = e
    }, TD.services.TwitterActionListMemberAdded.prototype = new TD.services.TwitterAction, TD.services.TwitterActionListMemberAdded.prototype.action = TD.services.TwitterAction.LIST_MEMBER_ADDED, TD.services.TwitterActionListMemberAdded.prototype.owner = null, TD.services.TwitterActionListMemberAdded.prototype.added = null, TD.services.TwitterActionListMemberAdded.prototype.list = null, TD.services.TwitterActionListMemberAdded.prototype.isListAction = !0, TD.services.TwitterActionListMemberAdded.prototype.fromRESTData = function(e, t, i, s) {
        this.owner = new TD.services.TwitterUser(this.account).fromJSONObject(t), this.added = new TD.services.TwitterUser(this.account).fromJSONObject(i), this.list = new TD.services.TwitterList(this.account).fromJSONObject(s)
    }, TD.services.TwitterActionListMemberAdded.prototype.generateInternalID = function() {
        this.id = [this.action, this.owner.id, this.added.id, this.list.id].join("_")
    }, TD.services.TwitterActionListMemberAdded.prototype.generateText = function() {
        var e;
        e = this.isAboutYou() ? (0, r.default)("{{{owner}}} added you to their List {{{list}}}", null, !0) : (0, r.default)("{{{owner}}} added {{{added}}} to their List {{{list}}}", null, !0), this.text = TD.ui.template.toHtml(e, {
            owner: this.owner.name,
            added: this.added.name,
            list: this.list.name
        }), this.htmlText = TD.ui.template.toHtml(e, {
            owner: (0, a.linkifyUser)(this.owner, {
                withBold: !0
            }),
            added: (0, a.linkifyUser)(this.added, {
                withBold: !0
            }),
            list: TD.ui.template.render("text/list_link_real_name", this.list)
        })
    }, TD.services.TwitterActionListMemberAdded.prototype.isOwnChirp = function() {
        return this.owner.id == this.account.getUserID()
    }, TD.services.TwitterActionListMemberAdded.prototype.isAboutYou = function() {
        return this.added.id == this.account.getUserID()
    }, TD.services.TwitterActionListMemberAdded.prototype.getCreator = function() {
        return this.owner
    }, TD.services.TwitterActionListMemberAdded.prototype.getTargetUsers = function() {
        return [this.added]
    }, TD.services.TwitterActionListMemberAdded.prototype.render = function() {
        var e = {
            chirp: this,
            sourceAvatar: this.owner.miniProfileImageURL()
        };
        return TD.ui.template.render("status/list_activity", e)
    }, TD.services.TwitterActionListMemberAdded.prototype.getNotificationData = function() {
        return {
            title: this.text,
            img: null,
            text: this.list.description
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(1));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.services.TwitterActionMultiListMemberAdded = function(e) {
        this.account = e
    }, TD.services.TwitterActionMultiListMemberAdded.prototype = new TD.services.TwitterAction, TD.services.TwitterActionMultiListMemberAdded.prototype.action = "multi_list_member_added", TD.services.TwitterActionMultiListMemberAdded.prototype.owner = null, TD.services.TwitterActionMultiListMemberAdded.prototype.added = null, TD.services.TwitterActionMultiListMemberAdded.prototype.lists = null, TD.services.TwitterActionMultiListMemberAdded.prototype.isListAction = !0, TD.services.TwitterActionMultiListMemberAdded.prototype.fromRESTData = function(e) {
        this.owner = new TD.services.TwitterUser(this.account).fromJSONObject(e.sources[0]), this.added = n.default.map(e.targets, function(e) {
            return new TD.services.TwitterUser(this.account).fromJSONObject(e)
        }.bind(this)), this.lists = n.default.map(e.target_objects, function(e) {
            return new TD.services.TwitterList(this.account).fromJSONObject(e)
        }.bind(this))
    }, TD.services.TwitterActionMultiListMemberAdded.prototype.generateInternalID = function() {
        var e = n.default.pluck(this.added, "id").sort().join("-"),
            t = n.default.pluck(this.lists, "id").sort().join("-");
        this.id = [this.action, this.owner.id, e, t].join("_")
    }, TD.services.TwitterActionMultiListMemberAdded.prototype.generateText = function() {
        var e = (0, s.default)("{{{owner}}} added {{{added}}} to the Lists {{{lists}}}", null, !0),
            t = [],
            i = [],
            r = [],
            a = [];
        n.default.each(this.added, function(e) {
            t.push(e.name), i.push(TD.ui.template.render("text/user_link_fullname", {
                name: e.name,
                profileUrl: e.getProfileURL(),
                withBold: !0
            }))
        }), n.default.each(this.lists, function(e) {
            r.push(e.fullName), a.push(TD.ui.template.render("text/list_link_real_name", e))
        }), this.text = TD.ui.template.toHtml(e, {
            owner: this.owner.name,
            added: t.join(", "),
            lists: r.join(", ")
        }), this.htmlText = TD.ui.template.toHtml(e, {
            owner: TD.ui.template.render("text/user_link_fullname", {
                name: this.owner.name,
                profileUrl: this.owner.getProfileURL(),
                withBold: this.isAboutYou()
            }),
            added: i.join(", "),
            lists: a.join(", ")
        })
    }, TD.services.TwitterActionMultiListMemberAdded.prototype.isOwnChirp = function() {
        return !1
    }, TD.services.TwitterActionMultiListMemberAdded.prototype.isAboutYou = function() {
        return !1
    }, TD.services.TwitterActionMultiListMemberAdded.prototype.getCreator = function() {
        return this.owner
    }, TD.services.TwitterActionMultiListMemberAdded.prototype.getTargetUsers = function() {
        return this.added
    }, TD.services.TwitterActionMultiListMemberAdded.prototype.render = function() {
        var e = {
            chirp: this,
            sourceAvatar: this.owner.miniProfileImageURL()
        };
        return TD.ui.template.render("status/action_list", e)
    }, TD.services.TwitterActionMultiListMemberAdded.prototype.getNotificationData = function() {
        return {
            title: null,
            img: null,
            text: this.text
        }
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(191);
    TD.services.TwitterActionFavorite = function(e) {
        this.account = e
    }, TD.services.TwitterActionFavorite.prototype = new TD.services.TwitterActionOnTweet, TD.services.TwitterActionFavorite.prototype.action = TD.services.TwitterAction.FAVORITE, TD.services.TwitterActionFavorite.prototype.iconClass = "icon-heart-filled icon-favorite-color", TD.services.TwitterActionFavorite.prototype.fromRESTData = function(e, t, i, s) {
        this.sourceUser = new TD.services.TwitterUser(this.account).fromJSONObject(t), this.targetTweet = new TD.services.TwitterStatus(this.account).fromJSONObject(i)
    }, TD.services.TwitterActionFavorite.prototype.generateText = function() {
        var e = (0, r.default)("{{{user}}} liked", null, !0);
        this.text = TD.ui.template.toHtml(e, {
            user: this.sourceUser.name
        }), this.htmlText = TD.ui.template.toHtml(e, {
            user: (0, a.linkifyUser)(this.sourceUser, {
                withBold: this.isAboutYou()
            })
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(1)),
        r = i(191);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.services.TwitterActionFavoritedInteraction = function(e) {
        this.account = e
    }, TD.services.TwitterActionFavoritedInteraction.prototype = new TD.services.TwitterActionOnTweet, TD.services.TwitterActionFavoritedInteraction.prototype.action = TD.services.TwitterAction.FAVORITED_RETWEET, TD.services.TwitterActionFavoritedInteraction.prototype.iconClass = "icon-heart-filled icon-favorite-color", TD.services.TwitterActionFavoritedInteraction.prototype.fromRESTData = function(e, t, i, s) {
        var r = i.retweeted_status,
            a = r || i,
            o = n.default.get(i, "extended_entities.media[0].features.all.tags", []),
            c = this.account.getUserID();
        if (r || (this.action = TD.services.TwitterAction.FAVORITED_MENTION), o.length) {
            var l = o.find(function(e) {
                return e.user_id === c
            });
            this.mediaTagged = l, this.action = TD.services.TwitterAction.FAVORITED_MEDIA
        }
        this.sourceUser = new TD.services.TwitterUser(this.account).fromJSONObject(t), this.targetUser = new TD.services.TwitterUser(this.account).fromJSONObject(s), this.targetTweet = new TD.services.TwitterStatus(this.account).fromJSONObject(a), this.hasRetweet = i.retweeted_status
    }, TD.services.TwitterActionFavoritedInteraction.prototype.isAboutYou = function() {
        return this.targetUser.isMe()
    }, TD.services.TwitterActionFavoritedInteraction.prototype.generateText = function() {
        var e = "{{{user}}} liked your Retweet";
        this.hasRetweet || (e = this.mediaTagged ? "{{{user}}} liked a Tweet you were tagged in" : "{{{user}}} liked a Tweet you were mentioned in");
        var t = (0, s.default)(e, null, !0);
        this.text = TD.ui.template.toHtml(t, {
            user: this.sourceUser.name
        }), this.htmlText = TD.ui.template.toHtml(t, {
            user: (0, r.linkifyUser)(this.sourceUser, {
                withBold: this.isAboutYou()
            })
        })
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(191);
    TD.services.TwitterActionFollow = function(e) {
        this.account = e
    }, TD.services.TwitterActionFollow.prototype = new TD.services.TwitterAction, TD.services.TwitterActionFollow.prototype.action = TD.services.TwitterAction.FOLLOW, TD.services.TwitterActionFollow.prototype.following = null, TD.services.TwitterActionFollow.prototype.followed = null, TD.services.TwitterActionFollow.prototype.fromRESTData = function(e, t, i, s) {
        this.following = new TD.services.TwitterUser(this.account).fromJSONObject(t), this.followed = new TD.services.TwitterUser(this.account).fromJSONObject(i)
    }, TD.services.TwitterActionFollow.prototype.generateInternalID = function() {
        this.id = [this.action, this.following.id, this.followed.id].join("_")
    }, TD.services.TwitterActionFollow.prototype.generateText = function() {
        var e;
        e = this.isAboutYou() ? (0, r.default)("{{{user}}} followed you", null, !0) : (0, r.default)("{{{user}}} followed", null, !0), this.text = TD.ui.template.toHtml(e, {
            user: this.following.name
        }), this.htmlText = TD.ui.template.toHtml(e, {
            user: (0, a.linkifyUser)(this.following, {
                withBold: this.isAboutYou()
            })
        })
    }, TD.services.TwitterActionFollow.prototype.render = function() {
        return TD.ui.template.render("status/follow_activity_in_stream", {
            data: this,
            iconClass: "icon-user-filled icon-follow-color",
            withoutAvatar: !1,
            withSourceMute: !0,
            withContentMute: this.isAboutYou(),
            withActivityHeader: !0,
            withUserMenu: !0,
            withUserBio: !0,
            isInline: !0
        })
    }, TD.services.TwitterActionFollow.prototype.isAboutYou = function() {
        return this.followed.id == this.account.getUserID()
    }, TD.services.TwitterActionFollow.prototype.isOwnChirp = function() {
        return this.following.id == this.account.getUserID()
    }, TD.services.TwitterActionFollow.prototype.getNotificationData = function() {
        var e = this.getRelatedUser(),
            t = null !== e.description ? "\n" + e.description : "";
        return {
            title: this.text,
            img: e.profileImageURL,
            text: "@" + e.screenName + t
        }
    }, TD.services.TwitterActionFollow.prototype.getTargetUsers = function() {
        return [this.followed]
    }, TD.services.TwitterActionFollow.prototype.getRelatedUser = function() {
        return this.isAboutYou() ? this.following : this.followed
    }, TD.services.TwitterActionFollow.prototype.getCreator = function() {
        return this.following
    }, TD.services.TwitterActionFollow.prototype.getFilterableText = function() {
        return this.followed.screenName
    }
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(1));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.services.TwitterActionRetweetedInteraction = function(e) {
        this.account = e
    }, TD.services.TwitterActionRetweetedInteraction.prototype = new TD.services.TwitterActionOnTweet, TD.services.TwitterActionRetweetedInteraction.prototype.action = TD.services.TwitterAction.RETWEETED_RETWEET, TD.services.TwitterActionRetweetedInteraction.prototype.iconClass = "icon-retweet-filled icon-retweet-color", TD.services.TwitterActionRetweetedInteraction.prototype.fromRESTData = function(e, t, i, s) {
        var r = i.retweeted_status,
            a = r || i,
            o = n.default.get(i, "extended_entities.media[0].features.all.tags", []),
            c = this.account.getUserID();
        if (r || (this.action = TD.services.TwitterAction.RETWEETED_MENTION), o.length) {
            var l = o.find(function(e) {
                return e.user_id === c
            });
            this.mediaTagged = l, this.action = TD.services.TwitterAction.RETWEETED_MEDIA
        }
        this.sourceUser = new TD.services.TwitterUser(this.account).fromJSONObject(t), this.targetUser = new TD.services.TwitterUser(this.account).fromJSONObject(s), this.targetTweet = new TD.services.TwitterStatus(this.account).fromJSONObject(a), this.hasRetweet = i.retweeted_status
    }, TD.services.TwitterActionRetweetedInteraction.prototype.isAboutYou = function() {
        return this.targetUser.isMe()
    }, TD.services.TwitterActionRetweetedInteraction.prototype.generateText = function() {
        var e = "{{{user}}} Retweeted your Retweet";
        this.hasRetweet || (e = this.mediaTagged ? "{{{user}}} Retweeted a Tweet you were tagged in" : "{{{user}}} Retweeted a Tweet you were mentioned in");
        var t = (0, s.default)(e, null, !0);
        this.htmlText = TD.ui.template.toHtml(t, {
            user: TD.ui.template.render("text/user_link_fullname", {
                name: this.sourceUser.name,
                profileUrl: this.sourceUser.getProfileURL(),
                withBold: this.isAboutYou()
            })
        })
    }
}, function(e, t, i) {
    "use strict";
    TD.services.TwitterActionQuotedTweet = function(e) {
        this.account = e
    }, TD.services.TwitterActionQuotedTweet.prototype = new TD.services.TwitterActionOnTweet, TD.services.TwitterActionQuotedTweet.prototype.action = TD.services.TwitterAction.QUOTED_TWEET, TD.services.TwitterActionQuotedTweet.prototype.iconClass = "icon-content color-twitter-darker-gray", TD.services.TwitterActionQuotedTweet.prototype.fromRESTData = function(e, t, i, s) {
        this.sourceUser = new TD.services.TwitterUser(this.account).fromJSONObject(t), this.targetUser = new TD.services.TwitterUser(this.account).fromJSONObject(s.user), this.targetTweet = new TD.services.TwitterStatus(this.account).fromJSONObject(i)
    }, TD.services.TwitterActionQuotedTweet.prototype.isAboutYou = function() {
        return this.targetUser.isMe()
    }
}, function(e, t, i) {
    "use strict";
    var s = a(i(32)),
        n = a(i(3)),
        r = a(i(19));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = {
        AlreadyRetweeted: (0, n.default)("Already Retweeted"),
        InvalidUrl: (0, n.default)("Contained an invalid URL"),
        UserSuspended: (0, n.default)("User has been suspended"),
        Duplicate: (0, n.default)("Status was a duplicate"),
        InvalidImage: (0, n.default)("Invalid image"),
        RateLimitExceeded: (0, n.default)("Rate limit exceeded"),
        TextTooLong: (0, n.default)("Text too long"),
        Unknown: (0, n.default)("Unknown error")
    };
    TD.services.ScheduledTweet = function() {}, TD.services.ScheduledTweet.prototype.chirpType = TD.services.ChirpBase.SCHEDULED_TWEET, TD.services.ScheduledTweet.prototype.fromJSONObject = function(e) {
        if (this.id = e.id_str, this.text = e.text, this.state = e.state, this.createdAt = new Date(e.created_at_ms), this.created = TD.util.iso8601(this.createdAt), this.executeAt = new Date(e.execute_at_ms), this.timestamp = TD.util.iso8601(this.executeAt), this.autoPopulateReplyMetadata = e.auto_populate_reply_metadata, this.inReplyToStatusId = e.in_reply_to_status_id_str, this.excludedRecipientIds = e.exclude_reply_user_ids_str, this.retweetedStatusId = e.retweeted_status_id_str, this.mediaId = e.media_id, this.tweetCreateState = e.tweet_create_state, this.attachmentUrl = e.attachment_url, "failed" === this.state) {
            var t = o[this.tweetCreateState] || o.Unknown;
            this.reasonText = (0, n.default)("Tweet cannot be sent: {{reasonText}}", {
                reasonText: t
            })
        }
        this.account = TD.storage.accountController.getAccountFromId(e.user_id_str);
        var i = e.media_entities || {},
            a = (0, s.default)(i).map(function(e) {
                var t = i[e],
                    s = t.sizes,
                    n = t.media_url_https,
                    r = t.media_type,
                    a = t.video_info,
                    o = s.find(function(e) {
                        return "Medium" === e.type
                    });
                return {
                    id_str: e,
                    url: n,
                    type: r,
                    media_url_https: n,
                    video_info: a,
                    sizes: {
                        medium: {
                            w: o.width,
                            h: o.height
                        }
                    }
                }
            });
        return this._media = TD.services.TwitterMedia.getMediaFromEntities({
            media: a
        }, {
            isScheduled: !0
        }), this.user = {
            avatar: TD.util.transformTwitterAvatar(this.account.getProfileImageURL(), "mini"),
            screenName: this.account.getUsername(),
            emojifiedName: r.default.cleanWithEmoji(this.account.getName()),
            isProtected: this.account.getIsPrivate(),
            isVerified: this.account.getIsVerified(),
            profileURL: "https://twitter.com/" + this.account.getUsername()
        }, this.token = TD.core.sha1([this.id].join(":")), this
    }
}, function(e, t, i) {
    "use strict";
    var s = l(i(1)),
        n = l(i(0)),
        r = l(i(190)),
        a = i(139),
        o = l(i(8)),
        c = i(242);

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }

    function u(e) {
        this.token = e, this.id = e, this.updates = [], this.inReplyToStatus = void 0, this.thumbSizeClass = TD.services.TwitterMedia.thumbSizeClasses.medium
    }
    TD.services.ScheduledTweetGroup = u, u.prototype = new TD.services.ChirpBase, u.prototype.chirpType = TD.services.ChirpBase.SCHEDULED_TWEET_GROUP, u.prototype.addUpdate = function(e) {
        this.time || (this.time = TD.util.parseISO8601(e.timestamp), this.created = this.time, this.sortIndex = this.sortIndex = {
            value: -this.created.getTime(),
            type: "number"
        }), this.text = this.text || e.text, this.state = this.state || e.state, this._media = this._media || e._media, this.attachmentUrl = this.attachmentUrl || e.attachmentUrl, this.htmlText = this.htmlText || TD.util.transform(this.text), this.hasText = Boolean(this.text.length), this.autoPopulateReplyMetadata = this.autoPopulateReplyMetadata || e.autoPopulateReplyMetadata, this.inReplyToStatusId = this.inReplyToStatusId || e.inReplyToStatusId, this.excludedRecipientIds = this.excludedRecipientIds || e.excludedRecipientIds, this.retweetedStatusId = this.retweetedStatusId || e.retweetedStatusId, this.avatarURL = this.avatarURL || e.user.avatar, this.reasonText = this.reasonText || e.reasonText, this.updates.push(e)
    }, u.prototype.render = function() {
        try {
            return TD.ui.template.render("status/scheduled_tweet", {
                chirp: this,
                inStream: !0
            })
        } catch (e) {
            console.error(e)
        }
    }, u.prototype.getReplyContext = function() {
        if (!this.inReplyToStatusId) return "";
        if (!this.inReplyToStatus || !this.autoPopulateReplyMetadata) return o.default.render("compose/reply_info");
        var e = this.updates.map(function(e) {
                return e.account.getKey()
            }),
            t = (0, c.recipientsWithoutSelfMention)(this.inReplyToStatus.getReplyUsers(), e),
            i = r.default.getRecipientsToDisplay(t, this.excludedRecipientIds);
        return o.default.render("compose/reply_info", {
            recipients: i,
            recipientIds: t.map(function(e) {
                return e.id
            }).join(",")
        })
    }, u.prototype.renderInMediaGallery = function() {
        return TD.ui.template.render("status/scheduled_tweet", {
            chirp: this,
            withTweetActionsVisible: !0,
            inBox: !0
        })
    }, u.prototype.edit = function() {
        (0, n.default)(document).trigger("uiEditScheduledTweetGroup", {
            scheduledTweetGroup: this
        })
    }, u.prototype.destroy = function() {
        confirm("Are you sure you wish to delete this scheduled Tweet?") && (0, n.default)(document).trigger("uiDeleteScheduledTweetGroup", {
            scheduledTweetGroup: this
        })
    }, u.prototype.prettyTime = function() {
        return TD.util.prettyTimeString(this.time)
    }, u.prototype.formattedTime = function() {
        return (0, a.getFormattedDateTime)({
            time: this.time,
            fullMonth: !0
        })
    }, u.prototype.isOwnChirp = function() {
        return !0
    }, u.prototype.getSenders = function() {
        return s.default.map(this.updates, function(e) {
            return e.user.screenName
        })
    }, u.prototype.mediaPreviewSrc = function() {
        return this.url
    }, u.prototype.canEdit = function() {
        return !this.hasMedia() && TD.decider.hasAccessLevel("scheduler", "WRITE")
    }
}, function(e, t, i) {
    "use strict";
    TD.services.TweetDeckClient = function() {
        var e = {},
            t = TD.sync.tdapi;
        return e.type = "tweetdeck", e.statusMenuTemplate = "", e.getChirpsForFeed = function() {
            return TD.core.defer.succeed([])
        }, e.forgotPassword = function(e, i, s) {
            var n = {
                    type: "DELETE",
                    headers: {
                        Authorization: "x-td-basic " + TD.core.base64.encode(e + ":junk")
                    }
                },
                r = t.drequest("/password", n);
            return r.addCallback(function(t) {
                return {
                    httpStatus: 200,
                    email: e
                }
            }), r.addErrback(function(t) {
                return {
                    httpStatus: t.number,
                    message: t.message,
                    data: t.req.responseJSON,
                    email: e
                }
            }), r
        }, e
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.services.DataminrAlert = function(e) {
        this.account = e
    }, TD.services.DataminrAlert.prototype = new TD.services.TwitterStatus, TD.services.DataminrAlert.prototype.chirpType = TD.services.ChirpBase.DATAMINR_ALERT, TD.services.DataminrAlert.prototype.dataminr = null, TD.services.DataminrAlert.prototype.fromJSONObject = function(e) {
        return TD.services.TwitterStatus.prototype.fromJSONObject.call(this, e.displayTweet), this.sortIndex = {
            value: e.eventTime,
            type: "milliseconds"
        }, this.dataminr = {}, e.alertType && (this.dataminr.alertType = e.alertType, this.dataminr.alertType.alertTypeSprite = this.getAlertTypeSpriteClass(e.alertType.id)), this.dataminr.created = new Date(e.eventTime), this.dataminr.createdAt = TD.util.prettyTimeOfDayString(this.dataminr.created), this.dataminr.eventVolume = e.eventVolume, this.dataminr.eventLocation = e.eventLocation, this.dataminr.publisherCategory = e.publisherCategory, this.dataminr.headerLabel = e.headerLabel, this.dataminr.expandAlertURL = e.expandAlertURL, this.dataminr.eventMapSmallImageURL = e.eventMapSmallURL, this.dataminr.eventMapLargeImageURL = e.eventMapLargeURL, this.dataminr.expandMapURL = e.expandMapURL, this.dataminr.relatedTerms = e.relatedTerms, this.dataminr.userTopHashtags = e.userTopHashtags, this.dataminr.userRecentImages = e.userRecentImages, this.dataminr.userTopHashtags.forEach(function(e) {
            e.text = e.text.replace(/^#?/, "#")
        }), e.publisherCategory.shortName && (this.dataminr.publisherCategory.shortName = e.publisherCategory.shortName.toLowerCase()), this.dataminr.relatedTerms.forEach(this.augmentWithQueryTermAndTwitterSearchUrl), this.dataminr.userTopHashtags.forEach(this.augmentWithQueryTermAndTwitterSearchUrl), this.dataminr.allRelatedTermsQuery = this.getQueryStringForAllRelatedTerms(), this.dataminr.anyRelatedTermsQuery = this.getQueryStringForAnyRelatedTerms(), this.dataminr.allRelatedTermsTwitterUrl = TD.net.util.addURLParam("https://twitter.com/search", "q", this.dataminr.allRelatedTermsQuery), this.dataminr.anyRelatedTermsTwitterUrl = TD.net.util.addURLParam("https://twitter.com/search", "q", this.dataminr.anyRelatedTermsQuery), this
    }, TD.services.DataminrAlert.prototype.getAlertTypeSpriteClass = function(e) {
        var t;
        switch (e) {
            case "urgentUpdate":
                t = "sprite-dataminr-plus";
                break;
            case "flash":
                t = "sprite-flash";
                break;
            case "momentum":
                t = "sprite-dataminr-momentum-dot";
                break;
            default:
                t = "sprite-dataminr-dot"
        }
        return t
    }, TD.services.DataminrAlert.prototype.augmentWithQueryTermAndTwitterSearchUrl = function(e) {
        e.query = -1 !== e.text.indexOf(" ") ? '"' + e.text + '"' : e.text, e.twitterUrl = TD.net.util.addURLParam("https://twitter.com/search", "q", e.query)
    }, TD.services.DataminrAlert.prototype.getQueryStringForAnyRelatedTerms = function() {
        return this.dataminr.relatedTerms.map(function(e) {
            return e.query
        }).join(" OR ")
    }, TD.services.DataminrAlert.prototype.getQueryStringForAllRelatedTerms = function() {
        return this.dataminr.relatedTerms.map(function(e) {
            return e.query
        }).join(" ")
    }, TD.services.DataminrAlert.prototype.render = function(e) {
        e = e || {};
        var t = TD.settings.getDisplaySensitiveMedia();
        return TD.ui.template.render("status/dataminr_in_stream", {
            chirp: this,
            withTweetActions: !0,
            withFooter: !0,
            withAvatar: !0,
            withDragHandle: !0,
            withMediaPreview: !0,
            isMediaPreviewOff: e.mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_OFF,
            isMediaPreviewSmall: e.mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_SIZE_SMALL,
            isMediaPreviewLarge: e.mediaPreviewSize === TD.vo.Column.MEDIA_PREVIEW_SIZE_LARGE,
            mediaPreviewSrc: function() {
                return this.getMediaSrcForPreviewSize(e.mediaPreviewSize)
            },
            renderQuoted: function() {
                return this.renderQuotedTweet(e)
            },
            thumbSizeClass: TD.services.TwitterMedia.thumbSizeClasses[e.mediaPreviewSize],
            isPossiblySensitive: this.getRelatedTweet().possiblySensitive && !t,
            withLinebreaks: !0
        })
    }, TD.services.DataminrAlert.prototype.getNotificationData = function() {
        var e = [TD.ui.template.toHtml("@{{username}}{{#categoryName}} ({{categoryName}}){{/categoryName}}", {
            username: this.user.screenName,
            categoryName: this.dataminr.publisherCategory && this.dataminr.publisherCategory.name
        }), (0, r.default)("{{count}} followers", {
            count: TD.util.prettyNumber(this.user.followersCount, {
                noNegativeNumbers: !0
            })
        }), (0, r.default)("{{count}} Tweets", {
            count: TD.util.prettyNumber(this.user.statusesCount, {
                noNegativeNumbers: !0
            })
        })];
        return {
            title: this.text,
            text: e.join(" • "),
            img: TD.assets.get("/web/assets/global/backgrounds/dmr_growl_icon.png")
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = f(i(234)),
        n = f(i(519)),
        r = f(i(32)),
        a = f(i(3)),
        o = f(i(0)),
        c = f(i(95)),
        l = f(i(1)),
        u = f(i(1885)),
        d = i(36),
        h = f(i(192)),
        m = f(i(605));

    function f(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.services.TwitterClient = function(e) {
        var t = this,
            i = this;
        this.type = "twitter", this.streamingActivity$ = d.activityStreaming$.subscribe(function(e) {
            t.streamActivity = e
        }), this.conversations = new TD.services.Conversations(e, this), this.friends = {}, this.blocks = {}, this.mutes = {}, this.retweetBlocks = {}, this.publishQueue = {}, this.flushPending = !1, this.searches = [], this.customTimelines = [], this.defaultRequestCount = 40, this.logoutTimeout = 5e3, this.cacheReloadPeriod = 900, this.scheduledTasks = [], this.cachedScheduledGroups = [], this.cachedScheduledLastModifiedDate = new Date(0), this.FEED_TYPES = TD.controller.FeedPoller.FEED_TYPES, this.NETWORK_ACTIVITY_EVENT_TYPES = {
            favorite: !0,
            follow: !0,
            list_member_added: !0,
            list_created: !0,
            retweet: !0,
            quoted_tweet: !0
        }, this.oauth = TD.controller.auth.create("twitter", e), this.loadCaches(), this.scheduledTasks.push(TD.controller.scheduler.schedulePeriodicTask(this.cacheReloadPeriod, function() {
            TD.decider.get("disable_twitter_cache_reload") || this.loadCaches()
        }.bind(this))), this.getChirpsForFeed = function(e, t) {
            var i = new TD.core.defer.Deferred;
            return this.refreshFeed(e, i.callback.bind(i), i.errback.bind(i), t), i
        }, this.refreshFeed = function(e, t, s, n) {
            n = n || {};
            var r, a = e.bounds.lower,
                c = e.bounds.upper,
                l = n.poller.feed,
                u = n.feedType,
                d = n.metadata,
                h = n.forceFetch;
            if (TD.controller.feedManager.isContentStreaming(l) && !(c || h)) return TD.util.metric("api:client:refresh:is-content-streaming"), TD.util.metric("api:client:refresh:is-content-streaming:" + u), s(), this;
            var m = TD.storage.accountController.get(l.getAccountKey()).getIsVerified(),
                f = TD.controller.FeedPoller.NOTIFICATION_FEED_TYPES.includes(u),
                p = e.interval.from.finite,
                g = e.interval.to.finite,
                v = p && !g,
                T = p && g,
                w = !p && g;
            switch (TD.util.metric("api:client:refresh:request"), TD.util.metric("api:client:refresh:request:" + u), v && (TD.util.metric("api:client:refresh:poll"), TD.util.metric("api:client:refresh:poll:" + u), m && f && TD.util.metric("api:client:refresh:poll:" + u + ":verified")), T && (TD.util.metric("api:client:refresh:gapfill"), TD.util.metric("api:client:refresh:gapfill:" + u)), w && (TD.util.metric("api:client:refresh:infinitescroll"), TD.util.metric("api:client:refresh:infinitescroll:" + u)), u) {
                case this.FEED_TYPES.home:
                    i.getHomeTimeline(a, c, null, t, s);
                    break;
                case this.FEED_TYPES.direct:
                    1 !== a && !c ? this.getDMUserUpdates(a, t, s) : this.getDMUserInbox(a, c, t, s);
                    break;
                case this.FEED_TYPES.favorites:
                    i.getFavoritesTimeline(a, d.id, c, 40, t, s);
                    break;
                case this.FEED_TYPES.list:
                    i.getListTimeline(d.listId, d.screenName, d.slug, a, c, null, t, s);
                    break;
                case this.FEED_TYPES.customTimeline:
                    i.get3NFTimeline({
                        id: d.id,
                        minPosition: a,
                        maxPosition: c
                    }, t, s);
                    break;
                case this.FEED_TYPES.event:
                case this.FEED_TYPES.search:
                    var b = d.baseQuery,
                        y = d.searchFilterData,
                        C = d.term,
                        _ = d.id,
                        D = b || "",
                        S = u === this.FEED_TYPES.event ? "entity_id:" + _ + " " + D : b;
                    if (S && y) {
                        var k = new TD.vo.SearchFilter(y).getQueryString();
                        r = [S, k].join(" "), (0, o.default)(document).trigger("dataSearchPoll", {
                            baseFeedQuery: S,
                            uiQuery: k
                        })
                    } else r = C;
                    TD.decider.get("universal_search_timelines") ? i.getUniversalSearchTimeline(r, a, c, null, t, s) : i.getSearchTimeline(r, a, c, null, t, s);
                    break;
                case this.FEED_TYPES.usertweets:
                    i.getProfileTimeline(d.id, 40, a, c, t, s);
                    break;
                case this.FEED_TYPES.usertimeline:
                    i.getUserTimeline(d.id, a, c, null, t, s);
                    break;
                case this.FEED_TYPES.mentions:
                    i.getMentionsTimeline({
                        sinceID: a,
                        maxID: c,
                        count: null,
                        following: d.usersIFollowFilter
                    }, t, s);
                    break;
                case this.FEED_TYPES.interactions:
                    i.getInteractionsTimeline({
                        minID: a,
                        maxID: c,
                        count: 40,
                        following: d.usersIFollowFilter
                    }, t, s);
                    break;
                case this.FEED_TYPES.networkactivity:
                    i.getNetworkActivityTimeline(a, c, 40, t, s);
                    break;
                case this.FEED_TYPES.scheduled:
                    TD.decider.hasAccessLevel("scheduler", "READ_BACKGROUND") && i.getScheduledGroups({
                        since_execute_at: c
                    }, {
                        forceFetch: h
                    }).addCallbacks(t, s);
                    break;
                case this.FEED_TYPES.dataminr:
                    i.getDataminrAlerts(a, c, n.metadata.watchlist.id, t, s);
                    break;
                case this.FEED_TYPES.livevideo:
                    i.getLiveVideoTimeline({
                        id: d.id,
                        maxID: c,
                        minID: a,
                        timelineId: d.timelineId
                    }, t, s);
                    break;
                default:
                    s()
            }
            return this
        }
    }, TD.services.TwitterClient.prototype.API_BASE_URL = [TD.config.twitter_api_base, TD.config.twitter_api_version, ""].join("/"), TD.services.TwitterClient.prototype.URT_BASE_URL = TD.config.twitter_api_base + "/2/", TD.services.TwitterClient.prototype.makeTwitterCall = function(e, t, i, s, n, r, a) {
        n = n || function() {}, r = r || function() {};
        var o = this.request(e, {
            method: i,
            params: t,
            processor: s,
            feedType: a
        });
        return o.addCallbacks(function(e) {
            n(e.data)
        }, function(e) {
            r(e.req, "", e.msg, e.req.errors)
        }), o
    }, TD.services.TwitterClient.prototype.request = function(e, t) {
        if (!e) throw Error("Request needs a URL");
        if ("string" != typeof e) throw Error("Request URL must be a string");
        var i = "DELETE" === (t = l.default.defaults(t || {}, {
            method: "GET",
            handleSuccess: !0,
            handleError: !0
        })).method ? {} : {
            cards_platform: "Web-13",
            include_entities: 1,
            include_user_entities: 1,
            include_cards: 1,
            send_error_codes: 1,
            tweet_mode: "extended",
            include_ext_alt_text: !0,
            include_reply_count: !0
        };
        if (t.params = l.default.defaults(t.params || {}, i), t.headers = l.default.defaults(t.headers || {}, {}), t.account = this.oauth.account, t.processor && "function" != typeof t.processor) throw new Error("Request processor must be a function");
        var s = TD.net.ajax.request(e, t);
        return s.addCallbacks(function(i) {
            return h.default.processSuccessResponse(e, t, i, this)
        }.bind(this), function(i) {
            h.default.processErrorResponse(e, t, i, this.oauth.account)
        }.bind(this)), s
    }, TD.services.TwitterClient.prototype.loadCaches = function() {
        this.getListOwnerships(null, function(e) {
            l.default.each(e, TD.cache.lists.add)
        }), this.getListSubscriptions(null, function(e) {
            l.default.each(e, TD.cache.lists.add)
        }), this.getSavedSearches(function(e) {
            this.searches = e
        }.bind(this)), this.getCustomTimelines(this.oauth.account.getUserID(), null, function(e) {
            this.customTimelines = e
        }.bind(this)), this.populateBlockList(), this.populateMuteList(), this.populateRetweetBlockList()
    }, TD.services.TwitterClient.prototype.processTweet = function(e) {
        try {
            return new TD.services.TwitterStatus(this.oauth.account).fromJSONObject(e)
        } catch (t) {
            return h.default.logTweetProcessingError(e, t), null
        }
    }, TD.services.TwitterClient.prototype.processDataminrAlert = function(e) {
        return new TD.services.DataminrAlert(this.oauth.account).fromJSONObject(e)
    }, TD.services.TwitterClient.prototype.deleteMessage = function(e) {
        var t = this.conversations.deleteMessageByIdAndReturnChangedConversations(e);
        this.publishChirpsInternal("publish", "direct", t)
    }, TD.services.TwitterClient.prototype.processPlaces = function(e) {
        return e.result.places
    }, TD.services.TwitterClient.prototype.processTimeline = function(e) {
        var t = this,
            i = l.default.get(e, "globalObjects.tweets"),
            s = l.default.get(e, "globalObjects.users"),
            n = l.default.get(e, "timeline.instructions"),
            r = !l.default.isEmpty(i);
        if (r && (e = l.default.values(i).map(function(e) {
                var t = s[e.user_id_str];
                return l.default.extend(e, {
                    user: t
                })
            })), !e.length) return [];
        var a = e.reduce(function(e, i) {
            var s = (0, c.default)(i.sender, function() {
                return t.processDM(i)
            }, function() {
                return t.processTweet(i)
            });
            return (0, c.default)(s, function() {
                return e.concat([s])
            }, function() {
                return e
            })
        }, []);
        return r ? {
            tweets: a,
            instructions: n
        } : a
    }, TD.services.TwitterClient.prototype.process3NFTimeline = function(e) {
        var t = e.objects || e.twitter_objects,
            i = this.hydrateTimeline(e.response.timeline, t);
        return i.length && e.response.position ? (i[0].cursor = e.response.position.max_position, i[i.length - 1].cursor = e.response.position.min_position) : i.length && e.response.cursor && (i[0].cursor = e.response.cursor.top, i[i.length - 1].cursor = e.response.cursor.bottom), i
    }, TD.services.TwitterClient.prototype.processLiveVideoEvent = function(e) {
        if (e.objects || e.twitter_objects) return e.twitter_objects.events
    }, TD.services.TwitterClient.prototype.hydrateTimeline = function(e, t) {
        return e.map(function(e) {
            try {
                var i = e.tweet.id_str || e.tweet.id,
                    s = this.hydrateTweet(t.tweets[i], t),
                    n = this.processTweet(s)
            } catch (e) {
                return null
            }
            return e.tweet.sort_index && (n.sortIndex = {
                value: e.tweet.sort_index,
                type: "numericString"
            }), n
        }, this).filter(Boolean)
    }, TD.services.TwitterClient.prototype.hydrateTweet = function(e, t) {
        if (!e || !e.id_str) return null;
        var i = e.id_str;
        return (e = l.default.clone(t.tweets[i] || e)).user = this.hydrateUser(e.user, t), ["retweeted_status", "quoted_status"].forEach(function(i) {
            e[i] = this.hydrateTweet(e[i], t)
        }, this), e
    }, TD.services.TwitterClient.prototype.hydrateUser = function(e, t) {
        if (!e || !e.id_str) return null;
        var i = e.id_str;
        return (e = l.default.clone(t.users[i] || e)).status = null, e
    }, TD.services.TwitterClient.prototype.processList = function(e) {
        return new TD.services.TwitterList(this.oauth.account).fromJSONObject(e)
    }, TD.services.TwitterClient.prototype.processCustomTimeline = function(e) {
        return new TD.services.CustomTimeline(this.oauth.account).fromJSONObject(e)
    }, TD.services.TwitterClient.prototype.process3NFCustomTimeline = function(e) {
        var t = e.objects.timelines[e.response.timeline_id];
        return t.id = e.response.timeline_id, t.user = e.objects.users[t.user_id], this.processCustomTimeline(t)
    }, TD.services.TwitterClient.prototype.process3NFCustomTimelines = function(e) {
        return e.response.results.map(function(t) {
            var i = e.objects.timelines[t.timeline_id];
            return i.id = t.timeline_id, i.user = e.objects.users[i.user_id], this.processCustomTimeline(i)
        }.bind(this))
    }, TD.services.TwitterClient.prototype.processLists = function(e) {
        return l.default.map(e, l.default.bind(this.processList, this))
    }, TD.services.TwitterClient.prototype.processUser = function(e) {
        return new TD.services.TwitterUser(this.oauth.account).fromJSONObject(e)
    }, TD.services.TwitterClient.prototype.processDeletedUser = function(e) {
        return new TD.services.TwitterDeletedUser(this.oauth.account, e)
    }, TD.services.TwitterClient.prototype.processUsers = function(e) {
        for (var t = [], i = 0; i < e.length; i++) t.push(this.processUser(e[i]));
        return t
    }, TD.services.TwitterClient.prototype.processActions = function(e) {
        for (var t = [], i = 0; i < e.length; i++) {
            var s = e[i];
            if (s.action === TD.services.TwitterAction.LIST_MEMBER_ADDED && s.targets_size > 1 && s.target_objects_size > 1) {
                var n = new TD.services.TwitterActionMultiListMemberAdded(this.oauth.account);
                n.fromJSONObject(s, [s], !1), t.push(n)
            } else {
                var r = TD.services.TwitterAction.processRESTAction(s, this.oauth.account);
                r && (t = t.concat(r))
            }
        }
        return t
    }, TD.services.TwitterClient.prototype.showUser = function(e, t, i, s) {
        var n = {};
        e ? n.user_id = e : n.screen_name = t, this.makeTwitterCall(this.API_BASE_URL + "users/show.json", n, "GET", this.processUser, i, s)
    }, TD.services.TwitterClient.prototype.getUsersByIds = function(e, t, i) {
        var s = {
            user_id: e.join(",")
        };
        this.makeTwitterCall(this.API_BASE_URL + "users/lookup.json", s, "POST", this.processUsers, t, i)
    }, TD.services.TwitterClient.prototype.followUser = function(e, t, i) {
        this.makeTwitterCall(this.API_BASE_URL + "friendships/create.json", {
            screen_name: e
        }, "POST", this.processUser, t, i)
    }, TD.services.TwitterClient.prototype.unfollowUser = function(e, t, i) {
        this.makeTwitterCall(this.API_BASE_URL + "friendships/destroy.json", {
            screen_name: e
        }, "POST", this.processUser, t, i)
    }, TD.services.TwitterClient.prototype.typeaheadSearch = function(e, t, i) {
        if (!e.query && !e.prefetch) throw new Error("Typeahead API needs a query");
        this.makeTwitterCall(this.API_BASE_URL + "search/typeahead.json", {
            q: e.query,
            count: e.count || 10,
            prefetch: !!e.prefetch
        }, "GET", null, function(i) {
            t(i, e)
        }, i)
    }, TD.services.TwitterClient.prototype.userSearch = function(e, t, i) {
        var s = this;
        this.makeTwitterCall(this.API_BASE_URL + "users/search.json", {
            q: e
        }, "GET", function(t) {
            var i, n, r = e.toLowerCase();
            for (t = s.processUsers(t), i = 0; i < t.length; i++)
                if ((n = t[i]).screenName.toLowerCase() == r && 0 !== i) {
                    t.splice(i, 1), t = [n].concat(t);
                    break
                } return t
        }, t, i)
    }, TD.services.TwitterClient.prototype.getRetweetedBy = function(e, t, i, s, n) {
        var r = {
            count: t || 12,
            page: i || 1
        };
        this.makeTwitterCall(this.API_BASE_URL + "statuses/" + e + "/retweeted_by.json", r, "GET", this.processUsers, s, n)
    }, TD.services.TwitterClient.prototype.showFriendship = function(e, t, i, s, n) {
        var r = {
            source_id: e
        };
        null !== t ? r.target_id = t : null !== i && (r.target_screen_name = i), this.makeTwitterCall(this.API_BASE_URL + "friendships/show.json", r, "GET", null, s, n)
    }, TD.services.TwitterClient.prototype.showFriendshipForScreenName = function(e, t, i, s) {
        this.makeTwitterCall(this.API_BASE_URL + "friendships/show.json", {
            source_id: e,
            target_screen_name: t
        }, "GET", null, i, s)
    }, TD.services.TwitterClient.prototype.blockUser = function(e, t, i) {
        this.makeTwitterCall(this.API_BASE_URL + "blocks/create.json", {
            screen_name: e
        }, "POST", this.processUser, t, i)
    }, TD.services.TwitterClient.prototype.unblockUser = function(e, t, i) {
        this.makeTwitterCall(this.API_BASE_URL + "blocks/destroy.json", {
            screen_name: e
        }, "POST", this.processUser, t, i)
    }, TD.services.TwitterClient.prototype.muteUser = function(e) {
        return this.request(this.API_BASE_URL + "mutes/users/create.json", {
            method: "POST",
            params: {
                user_id: e
            },
            processor: this.processUser
        })
    }, TD.services.TwitterClient.prototype.unmuteUser = function(e) {
        return this.request(this.API_BASE_URL + "mutes/users/destroy.json", {
            method: "POST",
            params: {
                user_id: e
            },
            processor: this.processUser
        })
    }, TD.services.TwitterClient.prototype.muteConversation = function(e) {
        return this.request(this.API_BASE_URL + "mutes/conversations/create.json", {
            method: "POST",
            params: {
                tweet_id: e
            }
        })
    }, TD.services.TwitterClient.prototype.unmuteConversation = function(e) {
        return this.request(this.API_BASE_URL + "mutes/conversations/destroy.json", {
            method: "POST",
            params: {
                tweet_id: e
            }
        })
    }, TD.services.TwitterClient.prototype.blockAndReportUser = function(e, t, i) {
        this.makeTwitterCall(this.API_BASE_URL + "users/report_spam.json", {
            screen_name: e
        }, "POST", this.processUser, t, i)
    }, TD.services.TwitterClient.prototype.reportDMSpam = function(e, t, i) {
        var s = e.reportType,
            n = e.blockUser,
            r = e.dmId,
            a = e.conversationId,
            o = {
                report_as: s,
                block_user: n
            };
        r ? o.dm_id = r : a && (o.conversation_id = a);
        var c = TD.net.util.addURLParameters(this.API_BASE_URL + "direct_messages/report_spam.json", o);
        this.makeTwitterCall(c, {}, "POST", null, t, i)
    }, TD.services.TwitterClient.prototype.flagTweet = function(e, t, i) {
        this.makeTwitterCall(this.API_BASE_URL + "statuses/flag_possibly_sensitive.json", {
            id: e
        }, "POST", null, t, i)
    }, TD.services.TwitterClient.prototype.getList = function(e, t, i, s, n) {
        var r = {};
        e ? r.list_id = e : (r.slug = i, r.owner_screen_name = t), this.makeTwitterCall(this.API_BASE_URL + "lists/show.json", r, "GET", this.processList, s, n)
    }, TD.services.TwitterClient.prototype.createList = function(e, t, i, s, n) {
        var r = {
            name: e,
            description: t || "",
            mode: i ? "private" : "public"
        };
        this.makeTwitterCall(this.API_BASE_URL + "lists/create.json", r, "POST", this.processList, function(e) {
            TD.cache.lists.add(e), s(e), TD.controller.stats.listCreated()
        }, n)
    }, TD.services.TwitterClient.prototype.updateList = function(e, t, i, s, n, r) {
        var a = {
            list_id: e,
            name: t,
            description: i || "",
            mode: s ? "private" : "public"
        };
        this.makeTwitterCall(this.API_BASE_URL + "lists/update.json", a, "POST", this.processList, function(e) {
            TD.cache.lists.add(e), n(e), TD.controller.stats.listUpdated()
        }, r)
    }, TD.services.TwitterClient.prototype.destroyList = function(e, t, i) {
        this.makeTwitterCall(this.API_BASE_URL + "lists/destroy.json", {
            list_id: e
        }, "POST", this.processList, function(e) {
            TD.cache.lists.purge(e.id), t(e), TD.controller.stats.listDeleted()
        }, i)
    }, TD.services.TwitterClient.prototype.getListMembers = function(e, t, i) {
        var s = this,
            n = {
                list_id: e.id,
                skip_status: 1,
                cursor: e.cursor ? e.cursor : -1,
                count: e.count || 20
            };
        this.makeTwitterCall(this.API_BASE_URL + "lists/members.json", n, "GET", null, function(e) {
            e.users = s.processUsers(e.users), t(e)
        }, i)
    }, TD.services.TwitterClient.prototype.subscribeToList = function(e, t, i) {
        this.makeTwitterCall(this.API_BASE_URL + "lists/subscribers/create.json", {
            list_id: e
        }, "POST", this.processList, function(e) {
            TD.cache.lists.add(e), t(e)
        }, i)
    }, TD.services.TwitterClient.prototype.addUserToList = function(e, t, i, s) {
        this.makeTwitterCall(this.API_BASE_URL + "lists/members/create.json", {
            screen_name: t,
            list_id: e
        }, "POST", this.processList, function(e) {
            TD.cache.lists.add(e), i(e)
        }, s)
    }, TD.services.TwitterClient.prototype.addUsersToList = function(e, t, i, s) {
        this.makeTwitterCall(this.API_BASE_URL + "lists/members/create_all.json", {
            screen_name: t.join(","),
            list_id: e
        }, "POST", this.processList, function(e) {
            TD.cache.lists.add(e), i(e)
        }, s)
    }, TD.services.TwitterClient.prototype.removeUserFromList = function(e, t, i, s) {
        this.makeTwitterCall(this.API_BASE_URL + "lists/members/destroy.json", {
            screen_name: t,
            list_id: e
        }, "POST", this.processList, function(e) {
            TD.cache.lists.add(e), i(e)
        }, s)
    }, TD.services.TwitterClient.prototype.getBlockIDs = function(e, t, i) {
        var s = {
            stringify_ids: !0,
            cursor: e || -1
        };
        this.makeTwitterCall(this.API_BASE_URL + "blocks/ids.json", s, "GET", null, t, i)
    }, TD.services.TwitterClient.prototype.getMuteIDs = function(e) {
        var t = {
            stringify_ids: !0,
            cursor: e || "-1"
        };
        return this.request(this.API_BASE_URL + "mutes/users/ids.json", {
            method: "GET",
            params: t
        })
    }, TD.services.TwitterClient.prototype.getNoRetweetIDs = function(e, t) {
        this.makeTwitterCall(this.API_BASE_URL + "friendships/no_retweets/ids.json", null, "GET", null, e, t)
    }, TD.services.TwitterClient.prototype.getTweetSummary = function(e, t, i) {
        this.makeTwitterCall(this.API_BASE_URL + "statuses/" + e + "/activity/summary.json", {
            stringify_ids: 1
        }, "GET", null, t, i)
    }, TD.services.TwitterClient.prototype.getEmbeddedTweet = function(e, t, i, s, n, r) {
        var a;
        if (!e) throw new Error("getEmbeddedTweet: tweetID is a required parameter");
        a = {
            id: e,
            partner: "tweetdeck"
        }, t && (a.hide_thread = t), i && (a.hide_media = i), s && (a.maxwidth = s), this.makeTwitterCall(this.API_BASE_URL + "statuses/oembed.json", a, "GET", null, n, r)
    }, TD.services.TwitterClient.prototype.translateTweet = function(e, t, i, s) {
        var n;
        if (!e) throw new Error("translateTweet: tweetID is a required parameter");
        if (!t) throw new Error("translateTweet: destLang is a required parameter");
        n = {
            id: e,
            dest: t,
            use_display_text: !0
        }, this.makeTwitterCall(this.API_BASE_URL + "translations/show.json", n, "GET", null, i, s)
    }, TD.services.TwitterClient.prototype.getFollowingFollowersOf = function(e, t, i) {
        var s;
        if (!e) throw new Error("getFollowingFollowersOf: screenName is a required parameter");
        s = {
            screen_name: e
        }, this.makeTwitterCall(this.API_BASE_URL + "friends/following/list.json", s, "GET", null, t, i)
    }, TD.services.TwitterClient.prototype.getHomeTimeline = function(e, t, i, s, n) {
        this.getTimeline("statuses/home_timeline.json", e, t, i, s, n, {}, this.FEED_TYPES.home)
    }, TD.services.TwitterClient.prototype.getUserTimeline = function(e, t, i, s, n, r) {
        var a = {
            user_id: e
        };
        this.getTimeline("statuses/following_timeline.json", t, i, s, n, r, a, this.FEED_TYPES.usertimeline)
    }, TD.services.TwitterClient.prototype.getMentionsTimeline = function(e, t, i) {
        var s = e.sinceID,
            n = e.maxID,
            r = e.count,
            a = {};
        e.following && (a.filters = "following"), this.getTimeline("statuses/mentions_timeline.json", s, n, r, t, i, a, this.FEED_TYPES.mentions)
    }, TD.services.TwitterClient.prototype.getInteractionsTimeline = function(e, t, i) {
        var s = e.minID,
            n = e.maxID,
            r = e.count,
            a = {
                model_version: 7
            };
        e.following && (a.filters = "following");
        this.getActivityTimeline("activity/about_me.json", s, n, r, function(e) {
            e = e.filter(function(e) {
                return !e.isListAction || !TD.decider.get("notification_disable_list_events")
            }), t(e)
        }, i, a, null)
    }, TD.services.TwitterClient.prototype.getNetworkActivityTimeline = function(e, t, i, s, n) {
        this.getActivityTimeline("activity/by_friends.json", e, t, i, s, n, {}, this.FEED_TYPES.networkactivity)
    }, TD.services.TwitterClient.prototype.getActivityTimeline = function(e, t, i, s, n, r, a, o) {
        a = a || {}, i && (a.max_id = i), Number(t) > 1 && (a.since_id = t), a.count = s || this.defaultRequestCount, a.skip_aggregation = !0, this.makeTwitterCall(this.API_BASE_URL + e, a, "GET", this.processActions, n, r, o)
    }, TD.services.TwitterClient.prototype.getDMUserInbox = function(e, t, i, s) {
        var n = {
            max_conv_count: 20,
            include_groups: !0
        };
        e && 1 !== e && (n.min_id = e), t && (n.max_id = t);
        var r = 1 === e;
        this.makeTwitterCall(this.API_BASE_URL + "dm/user_inbox.json", n, "GET", this.conversations.processUserUpdates.bind(this.conversations, r), i, s, this.FEED_TYPES.direct)
    }, TD.services.TwitterClient.prototype.getDMUserUpdates = function(e, t, i) {
        var s = {
            cursor: e,
            include_groups: !0,
            ext: "altText"
        };
        this.makeTwitterCall(this.API_BASE_URL + "dm/user_updates.json", s, "GET", this.conversations.processUserUpdates.bind(this.conversations, !1), t, i, this.FEED_TYPES.direct)
    }, TD.services.TwitterClient.prototype.getDmConversation = function(e, t) {
        var i = this.request(this.API_BASE_URL + "dm/conversation/" + e + ".json", {
            params: t
        });
        return i.addCallback(this.getDataFromDeferred), i.addCallback(this.conversations.processUserUpdates.bind(this.conversations, !1)), i
    }, TD.services.TwitterClient.prototype.getFavoritesTimeline = function(e, t, i, s, n, r) {
        var a = {};
        t && (a.user_id = t), this.getTimeline("favorites/list.json", e, i, s, n, r, a, this.FEED_TYPES.favorites)
    }, TD.services.TwitterClient.prototype.getListTimeline = function(e, t, i, s, n, r, a, o) {
        var c = {
            include_rts: 1
        };
        e ? c.list_id = e : (c.owner_screen_name = t, c.slug = i), this.getTimeline("lists/statuses.json", s, n, r, a, o, c, this.FEED_TYPES.list)
    }, TD.services.TwitterClient.prototype.getProfileTimeline = function(e, t, i, s, n, r) {
        var a = {
            include_rts: 1
        };
        e && e !== this.oauth.account.getUserID() && (a.user_id = e), this.getTimeline("statuses/user_timeline.json", i, s, t, n, r, a, this.FEED_TYPES.usertweets)
    }, TD.services.TwitterClient.prototype.getSearchTimeline = function(e, t, i, s, n, r) {
        var a, o = {
                count: s || this.defaultRequestCount,
                q: e,
                result_type: "recent"
            },
            c = this;
        a = c.API_BASE_URL + "search/tweets.json";
        i && (o.max_id = i), t && 1 != t && (o.since_id = t), this.makeTwitterCall(a, o, "GET", function(e) {
            return c.processTimeline(e.statuses)
        }, n, function(e, t, i) {
            e && e.errors && e.errors[0] === m.default.INVALID_SEARCH_QUERY ? n([]) : r.apply(null, arguments)
        }, this.FEED_TYPES.search)
    }, TD.services.TwitterClient.prototype.getUniversalSearchTimeline = function(e, t, i, s, n, r) {
        var a, o = {
                q: e,
                count: s || this.defaultRequestCount,
                modules: "status",
                result_type: "recent",
                pc: !1,
                ui_lang: TD.languages.getSystemLanguageCode()
            },
            c = this;
        a = c.API_BASE_URL + "search/universal.json";
        i && (TD.decider.get("universal_search_timelines_by_id") ? o.q += " max_id:" + i : o.until_time = i), t && 1 != t && (TD.decider.get("universal_search_timelines_by_id") ? o.q += " since_id:" + t : o.since_time = t), this.makeTwitterCall(a, o, "GET", function(e) {
            var t = [];
            return e.modules.forEach(function(e) {
                e.status && t.push(e.status.data)
            }), c.processTimeline(t)
        }, n, function(e, t, i) {
            e && e.errors && e.errors[0] === m.default.INVALID_SEARCH_QUERY ? n([]) : r.apply(null, arguments)
        }, this.FEED_TYPES.search)
    }, TD.services.TwitterClient.prototype.getDataminrAlerts = function(e, t, i, s, n) {
        (0, o.default)(document).trigger("uiNeedsDataminrAlerts", {
            params: {
                start_time: e,
                end_time: t,
                lists: [i]
            },
            success: function(e) {
                this.inflateDataminrAlerts(e, s, n)
            }.bind(this),
            error: n
        })
    }, TD.services.TwitterClient.prototype.inflateDataminrAlerts = function(e, t, i) {
        var s = e.map(function(e) {
            return e.displayTweet.id_str
        });
        this.lookupTweets(s, function(i) {
            var s = i.reduce(function(e, t) {
                    return e[t.id_str] = t, e
                }, {}),
                n = e.filter(function(e) {
                    return !!s[e.displayTweet.id_str]
                }).map(function(e) {
                    return e.displayTweet = s[e.displayTweet.id_str], this.processDataminrAlert(e)
                }.bind(this));
            t(n)
        }.bind(this), i, null)
    }, TD.services.TwitterClient.prototype.getTimeline = function(e, t, i, s, n, r, a, o) {
        var c = {
                count: s || this.defaultRequestCount,
                include_my_retweet: 1
            },
            u = "";
        u = l.default.startsWith(e, "https://") ? e : this.API_BASE_URL + e, t && (c.since_id = t), i && (c.max_id = i), a && l.default.extend(c, a), this.makeTwitterCall(u, c, "GET", this.processTimeline, n, r, o)
    }, TD.services.TwitterClient.prototype.pendingConversation = {}, TD.services.TwitterClient.prototype.getConversation = function(e) {
        var t = this;
        if (!this.pendingConversation[e]) {
            this.pendingConversation[e] = !0;
            var i = this.URT_BASE_URL + "timeline/conversation/" + e + ".json";
            this.makeTwitterCall(i, {
                include_reply_count: !0
            }, "GET", this.processTimeline, function(i) {
                delete t.pendingConversation[e];
                var s = {
                        ancestors: [],
                        descendants: [],
                        root: null
                    },
                    n = i.instructions[0],
                    r = l.default.get(n, "addEntries.entries", []),
                    c = !1;
                r.forEach(function(t, n) {
                    var o = t.entryId,
                        u = [];
                    if (o.includes("conversationThread-")) {
                        var d = l.default.get(t, "content.item.content.conversationThread.conversationComponents", []),
                            h = l.default.get(t, "content.item.content.conversationThread.showMoreCursor", null);
                        if (u = d.map(function(t, s) {
                                var n = l.default.get(t, "conversationTweetComponent.tweet.id"),
                                    r = l.default.find(i.tweets, {
                                        id: n
                                    });
                                if (!r) return null;
                                if (r.setPositionInConversation(s), r.setNumberOfTweetsInConversation(d), r.setConversationRootId(e), r.setShowMoreCursor(h), r.isQuoteStatus) {
                                    var a = l.default.find(i.tweets, {
                                        id: r.quotedStatusId
                                    });
                                    r.setQuotedStatus(a)
                                }
                                return r
                            }), h) {
                            var m = l.default.get(h, "displayTreatment.actionText", "");
                            u.push({
                                showMore: !0,
                                actionText: (0, a.default)(m)
                            })
                        }
                    } else if (o.includes("tweet-")) {
                        var f = o.replace("tweet-", ""),
                            p = l.default.find(i.tweets, {
                                id: f
                            });
                        if (!p) return null;
                        if ("SelfThread" === l.default.get(t, "content.item.content.tweet.displayType") && p.setIsSelfThreadEnd(r, e), r.length > 2 && (p.setPositionInConversation(n), p.setNumberOfTweetsInConversation(r), p.setConversationRootId(e)), p.isQuoteStatus) {
                            var g = l.default.find(i.tweets, {
                                id: p.quotedStatusId
                            });
                            p.setQuotedStatus(g)
                        }
                        u = [p]
                    } else o.includes("cursor-top-") && u.push({
                        topCursor: !0
                    });
                    u.forEach(function(t) {
                        t && (t.topCursor ? s.ancestors.unshift(t) : c ? s.descendants.push(t) : t.id === e ? (c = !0, s.root = t) : s.ancestors.push(t))
                    })
                }), o.default.publish("/tweets/conversation/" + e, [s])
            }, function() {
                delete t.pendingConversation[e];
                o.default.publish("/tweets/conversation/" + e, [{
                    ancestors: [],
                    descendants: [],
                    root: null
                }])
            })
        }
    }, TD.services.TwitterClient.prototype.destroy = function(e, t, i) {
        this.makeTwitterCall(this.API_BASE_URL + "statuses/destroy/:id.json".replace(":id", e), {}, "POST", this.processTweet, t, i)
    }, TD.services.TwitterClient.prototype.show = function(e, t, i) {
        this.makeTwitterCall(this.API_BASE_URL + "statuses/show.json", {
            id: e
        }, "GET", this.processTweet, t, i)
    }, TD.services.TwitterClient.prototype.lookupTweets = function(e, t, i, s) {
        this.makeTwitterCall(this.API_BASE_URL + "statuses/lookup.json", {
            id: e.join(",")
        }, "POST", void 0 !== s ? s : this.processTimeline, t, i)
    }, TD.services.TwitterClient.prototype.createCustomTimeline = function(e, t, i) {
        var s = {
                name: (e = e || {}).name || "New Collection",
                description: e.description || "",
                url: e.url || ""
            },
            n = function(e) {
                this.customTimelines.push(e), t(e), (0, o.default)(document).trigger("dataCustomTimelineCreateSuccess")
            }.bind(this);
        this.makeTwitterCall(this.API_BASE_URL + "collections/create.json", s, "POST", this.process3NFCustomTimeline, n, i)
    }, TD.services.TwitterClient.prototype.updateCustomTimeline = function(e, t, i, s) {
        var n = {
            id: e
        };
        "string" == typeof(t = t || {}).name && (n.name = t.name || "New Collection"), "string" == typeof t.description && (n.description = t.description || ""), "string" == typeof t.url && (n.url = t.url || "");
        var r = function(t) {
            TD.cache.names.updateCustomTimelineName(t.id, t.name), this.customTimelines = this.customTimelines.filter(function(t) {
                return t.id !== e
            }), this.customTimelines.push(t), i(t), (0, o.default)(document).trigger("dataCustomTimelineUpdateSuccess")
        }.bind(this);
        this.makeTwitterCall(this.API_BASE_URL + "collections/update.json", n, "POST", this.process3NFCustomTimeline, r, s)
    }, TD.services.TwitterClient.prototype.deleteCustomTimeline = function(e, t, i) {
        var s = {
                id: e
            },
            n = function(i) {
                this.customTimelines = this.customTimelines.filter(function(t) {
                    return t.id !== e
                }), t(i), (0, o.default)(document).trigger("dataCustomTimelineDeleteSuccess")
            }.bind(this);
        this.makeTwitterCall(this.API_BASE_URL + "collections/destroy.json", s, "POST", null, n, i)
    }, TD.services.TwitterClient.prototype.getCustomTimelines = function(e, t, i, s) {
        var n = {
            count: 200
        };
        e && (n.user_id = e), t && (n.tweet_id = t), this.makeTwitterCall(this.API_BASE_URL + "collections/list.json", n, "GET", this.process3NFCustomTimelines, i, s)
    }, TD.services.TwitterClient.prototype.getCustomTimeline = function(e, t, i) {
        var s = {
            id: e
        };
        this.makeTwitterCall(this.API_BASE_URL + "collections/show.json", s, "GET", this.process3NFCustomTimeline, t, i)
    }, TD.services.TwitterClient.prototype.addOrMoveTweetToCustomTimeline = function() {
        var e, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            i = this,
            s = arguments[1],
            n = arguments[2];
        if (!t.customTimelineId || !t.tweetId) throw Error("Required fields are missing");
        s = s || function() {}, n = n || function() {}, "move" === t.actionType ? e = this.moveTweetWithinCustomTimeline(t) : (e = this.addTweetToCustomTimeline(t)).addCallback(function(e) {
            if (i.didAddReturnDuplicateResponse(e)) throw Error("duplicate");
            return e
        }), e.addCallbacks(s, n)
    }, TD.services.TwitterClient.prototype.addTweetToCustomTimeline = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        arguments[1], arguments[2];
        if (!e.customTimelineId || !e.tweetId) throw Error("Required fields are missing");
        var t = {
            id: e.customTimelineId,
            tweet_id: e.tweetId
        };
        return e.relativeToId && !e.above && (t.relative_to = e.relativeToId, t.above = !1), this.request(this.API_BASE_URL + "collections/entries/add.json", {
            method: "POST",
            params: t
        }).addCallback(function(e) {
            return e.data
        })
    }, TD.services.TwitterClient.prototype.didAddReturnDuplicateResponse = function(e) {
        return !!l.default.get(e, "response.errors") && e.response.errors.map(function(e) {
            return e.reason
        }).includes("duplicate")
    }, TD.services.TwitterClient.prototype.moveTweetWithinCustomTimeline = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        if (!e.customTimelineId || !e.relativeToId || !e.relativeToId) throw Error("Required fields are missing");
        var t = {
            id: e.customTimelineId,
            tweet_id: e.tweetId,
            relative_to: e.relativeToId,
            above: e.above
        };
        return this.request(this.API_BASE_URL + "collections/entries/move.json", {
            method: "POST",
            params: t
        })
    }, TD.services.TwitterClient.prototype.removeTweetFromCustomTimeline = function(e, t, i, s) {
        i = i || function() {}, s = s || function() {};
        var n = {
            id: e,
            tweet_id: t
        };
        this.makeTwitterCall(this.API_BASE_URL + "collections/entries/remove.json", n, "POST", null, i, s)
    }, TD.services.TwitterClient.prototype.bulkAddToCustomTimeline = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            t = arguments[1],
            i = arguments[2],
            s = e.tweetIdsToAdd.map(function(e) {
                return {
                    op: "add",
                    tweet_id: e
                }
            }),
            n = {
                id: e.customTimelineId,
                changes: s
            },
            r = this.API_BASE_URL + "collections/entries/curate.json",
            a = {
                params: n,
                headers: {
                    "content-type": "application/json"
                },
                handleSuccess: !0,
                method: "POST",
                account: this.oauth.account
            },
            o = TD.net.ajax.request(r, a);
        return o.addCallbacks(function(e) {
            t(e.data)
        }, function(e) {
            i(e.req, "", e.msg, e.req.errors)
        }), o
    }, TD.services.TwitterClient.prototype.get3NFTimeline = function(e, t, i) {
        var s = {
            id: (e = e || {}).id
        };
        e.maxCount && (s.max_count = e.maxCount), e.minPosition && (s.min_position = e.minPosition), e.maxPosition && (s.max_position = e.maxPosition), this.makeTwitterCall(this.API_BASE_URL + "collections/entries.json", s, "GET", this.process3NFTimeline, t, i)
    }, TD.services.TwitterClient.prototype.getLiveEvents = function() {
        return this.request(this.API_BASE_URL + "live_video/1/events.json", {
            method: "GET"
        })
    }, TD.services.TwitterClient.prototype.getLiveVideoTimeline = function(e, t, i) {
        var s = {
            up_cursor: e.minID,
            down_cursor: e.maxID
        };
        e.timelineId && (s.timeline_id = e.timelineId), this.makeTwitterCall(this.API_BASE_URL + "live_video/1/" + e.id + "/timeline.json", s, "GET", this.process3NFTimeline, t, i)
    }, TD.services.TwitterClient.prototype.getScheduledTweets = function(e, t) {
        if (e = e || {}, l.default.defaults(e, {
                count: 200,
                state: "scheduled,failed",
                since_execute_at: void 0,
                ascending: 1
            }), t = t || {}, l.default.defaults(t, {
                isPoll: !1,
                forceFetch: !1
            }), t.forceFetch && (this.cachedScheduledLastModifiedDate = new Date(0)), !e.since_execute_at) {
            var i = new Date;
            i.setMonth(i.getMonth() - 1), e.since_execute_at = ~~(i.getTime() / 1e3)
        }
        e = (0, r.default)(e).reduce(function(t, i) {
            return void 0 !== e[i] && null !== e[i] && (t[i] = e[i]), t
        }, {});
        var s = {};
        t.isPoll && (s["if-modified-since"] = this.cachedScheduledLastModifiedDate.toUTCString());
        var n = this.request(this.API_BASE_URL + "schedule/status/list.json", {
            method: "GET",
            params: e,
            processor: this.processScheduledTweets,
            headers: s
        });
        return t.isPoll && n.addCallbackWith(this, this.cacheScheduledLastModifiedDate), n.addCallbackWith(this, this.getResultsFromDeferred), n
    }, TD.services.TwitterClient.prototype.getScheduledGroups = function(e, t) {
        var i = this;
        e = e || {}, t = t || {}, l.default.defaults(t, {
            forceFetch: !1,
            isPoll: !e.since_execute_at
        });
        var s = this.getScheduledTweets(e, t);
        return s.addCallbackWith(this, this.groupScheduledTweets), s.addCallbackWith(this, function(e) {
            var t = 0 === e.length;
            return (0, o.default)(document).trigger("dataThrottleFeed", {
                feedType: "scheduled",
                accountKey: this.oauth.account.getKey(),
                doThrottle: t
            }), TD.decider.hasAccessLevel("scheduler", "READ_VISIBLE") ? e : (e.forEach(function(e) {
                TD.controller.feedManager.deleteChirp(e.token)
            }), [])
        }), s.addCallback(TD.util.effect(function(e) {
            TD.decider.get("scheduler_hydrate_replies") && i.hydrateScheduledTweetReplyStatus(e)
        })), s
    }, TD.services.TwitterClient.prototype.hydrateScheduledTweetReplyStatus = function() {
        for (var e = this, t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], i = t.filter(function(e) {
                return e.autoPopulateReplyMetadata
            }).map(function(e) {
                return e.inReplyToStatusId
            }).filter(Boolean), r = (0, n.default)(new s.default(i)); r.length;) {
            var a = r.slice(0, 100);
            r = r.slice(100), this.lookupTweets(a, function(i) {
                var s = l.default.indexBy(i, "id"),
                    n = t.filter(function(e) {
                        var t = s[e.inReplyToStatusId],
                            i = e.inReplyToStatus !== t;
                        return e.inReplyToStatus = t, i
                    });
                e.publishChirpsInternal("publish", "scheduled", n)
            })
        }
    }, TD.services.TwitterClient.prototype.cacheScheduledLastModifiedDate = function(e) {
        var t = e.xhr.getResponseHeader("last-modified");
        return t && (this.cachedScheduledLastModifiedDate = new Date(t)), e
    }, TD.services.TwitterClient.prototype.processScheduledTweets = function(e) {
        return (e = e || {}).results = e.results || [], {
            results: e.results.map(this.processScheduledTweet, this)
        }
    }, TD.services.TwitterClient.prototype.processScheduledTweet = function(e) {
        return (new TD.services.ScheduledTweet).fromJSONObject(e)
    }, TD.services.TwitterClient.prototype.groupScheduledTweets = function(e) {
        if (!e) return [];
        var t = Date.now(),
            i = function(e) {
                return e instanceof TD.services.ScheduledTweetGroup && "scheduled" === e.state && e.time < t
            };
        TD.storage.feedController.getAll().filter(function(e) {
            return "twitter" === e.getService() && "scheduled" === e.getType()
        }).forEach(function(e) {
            TD.controller.feedManager.getPoller(e.getKey()).removeWhere(i)
        });
        var s = {
                canceled: !0,
                completed: !0,
                dismissed: !0
            },
            n = e.reduce(function(e, t) {
                if (t.retweetedStatusId) return e;
                try {
                    e[t.token] || (e[t.token] = new TD.services.ScheduledTweetGroup(t.token)), e[t.token].addUpdate(t)
                } catch (e) {
                    console.log("Error processing scheduled update", t, e)
                }
                return e
            }, {});
        return l.default.values(n).filter(function(e) {
            var t = !s[e.state];
            return t || TD.controller.feedManager.deleteChirp(e.token), t
        })
    }, TD.services.TwitterClient.prototype.update = function(e, t, i, s, n, r, a) {
        var o = {
            status: e
        };
        o.in_reply_to_status_id = t, o.lat = i, o.long = s, o.place_id = n, this.makeTwitterCall(this.API_BASE_URL + "statuses/update.json", o, "POST", this.processTweet, r, a)
    }, TD.services.TwitterClient.prototype.getLists = function(e, t, i) {
        var s = {
            reverse: !0
        };
        e && (s.screen_name = e), this.makeTwitterCall(this.API_BASE_URL + "lists/list.json", s, "GET", this.processLists, t, i)
    }, TD.services.TwitterClient.prototype.getListMemberships = function(e, t, i, s) {
        var n = {},
            r = this;
        e && (n.screen_name = e), t && (n.filter_to_owned_lists = 1);
        this.makeTwitterCall(this.API_BASE_URL + "lists/memberships.json", n, "GET", function(e) {
            return r.processLists(e.lists)
        }, i, s)
    }, TD.services.TwitterClient.prototype.getListOwnerships = function(e, t, i) {
        var s = {
                count: 1e3
            },
            n = this;
        e && (s.screen_name = e), this.makeTwitterCall(this.API_BASE_URL + "lists/ownerships.json", s, "GET", function(e) {
            return n.processLists(e.lists)
        }, t, i)
    }, TD.services.TwitterClient.prototype.getListSubscriptions = function(e, t, i) {
        var s = {
                count: 1e3
            },
            n = this;
        e && (s.screen_name = e), this.makeTwitterCall(this.API_BASE_URL + "lists/subscriptions.json", s, "GET", function(e) {
            return n.processLists(e.lists)
        }, t, i)
    }, TD.services.TwitterClient.prototype.getSavedSearches = function(e, t) {
        this.makeTwitterCall(this.API_BASE_URL + "saved_searches/list.json", {}, "GET", null, e, t)
    }, TD.services.TwitterClient.prototype.favorite = function(e, t, i) {
        var s = this;
        this.makeTwitterCall(this.API_BASE_URL + "favorites/create.json", {
            id: e
        }, "POST", this.processTweet, function(e) {
            s.updateFavoriteInternal(e, !0), t(e)
        }, i)
    }, TD.services.TwitterClient.prototype.unfavorite = function(e, t, i) {
        var s = this;
        this.makeTwitterCall(this.API_BASE_URL + "favorites/destroy.json", {
            id: e
        }, "POST", this.processTweet, function(e) {
            s.updateFavoriteInternal(e, !1), t(e)
        }, i)
    }, TD.services.TwitterClient.prototype.destroyDM = function(e, t, i) {
        (0, o.default)(document).trigger("uiDeleteDm", {
            id: e,
            accountKey: this.oauth.account.getKey(),
            success: t,
            error: i
        })
    }, TD.services.TwitterClient.prototype.markMessagesAsRead = function(e, t, i, s) {
        var n = {
            last_message_id: e
        };
        t && (n.sender_id = t), this.makeTwitterCall(this.API_BASE_URL + "direct_messages/read.json", n, "POST", null, i, s)
    }, TD.services.TwitterClient.prototype.geoSearch = function(e, t, i, s, n, r, a) {
        var o = {};
        t && (o.lat = t), i && (o.long = i), s && (o.accuracy = s), e && (o.query = e), o.granularity = n || "neighborhood", this.makeTwitterCall(this.API_BASE_URL + "geo/search.json", o, "GET", this.processPlaces, r, a)
    }, TD.services.TwitterClient.prototype.updateFavoriteInternal = function(e, t) {
        (e = e.retweetedStatus ? e.retweetedStatus : e).setFavorite(t);
        var i = t ? "publish" : "remove";
        this.publishChirpsInternal(i, "favorites", [e])
    }, TD.services.TwitterClient.prototype.queueChirpsForDispatch = function(e, t) {
        this.publishQueue[e] = (this.publishQueue[e] || []).concat(t), this.flushPending || (this.flushPending = !0, l.default.defer(function() {
            this.flushPending = !1, (0, r.default)(this.publishQueue).forEach(function(e) {
                var t = void 0,
                    i = [];
                try {
                    if (!(t = TD.controller.feedManager.getPoller(e))) return;
                    var s = t.feed.getType(),
                        n = "interactions" === s || "mentions" === s;
                    if (n) return;
                    i = this.publishQueue[e].filter(u.default.chirpPasses.bind(u.default, this.blocks)).filter(u.default.chirpPasses.bind(u.default, this.mutes)).filter(function(e) {
                        return !(n && e.isListAction && TD.decider.get("notification_disable_list_events"))
                    }), t.acceptStreamChirps(i)
                } catch (e) {
                    var r = t ? t.feed.getType() : "unknown_feed_type",
                        a = l.default.uniq(i.map(function(e) {
                            return e.getChirpType()
                        })),
                        c = 1 === a.length ? a[0] : "unknown_chirp_type";
                    (0, o.default)(document).trigger("metric", {
                        key: "client:publish:error:" + r + ":" + c
                    })
                } finally {
                    delete this.publishQueue[e]
                }
            }.bind(this))
        }.bind(this)))
    }, TD.services.TwitterClient.prototype.publishChirpsInternal = function(e, t, i, s) {
        var n = TD.storage.Feed.generateKeyFor(this.oauth.account.getKey(), t, s);
        if ("publish" === e) this.queueChirpsForDispatch(n, i);
        else if ("remove" === e) {
            var r = TD.controller.feedManager.getPoller(n);
            r && l.default.each(i, function(e) {
                r.removeChirp(e.id)
            })
        }
    }, TD.services.TwitterClient.prototype.addIdToBlockList = function(e) {
        this.blocks[e] || (this.blocks[e] = !0, o.default.publish("/user/removeTweets", [e, this.oauth.account.getUserID()]))
    }, TD.services.TwitterClient.prototype.blockListNextCursor = -1, TD.services.TwitterClient.prototype.populateBlockList = function() {
        var e = function(t) {
            var i, s = t.ids;
            for (-1 === this.blockListNextCursor && (this.blocks = {}), i = 0; i < s.length; i++) this.addIdToBlockList(s[i]);
            t.next_cursor_str && "0" !== t.next_cursor_str ? this.blockListNextCursor = t.next_cursor_str : this.blockListNextCursor = -1, TD.decider.get("fetch_entire_blocklist") && -1 !== this.blockListNextCursor && this.getBlockIDs(this.blockListNextCursor, e)
        }.bind(this);
        this.getBlockIDs(this.blockListNextCursor, e)
    }, TD.services.TwitterClient.prototype.addIdToMuteList = function(e) {
        this.mutes[e] || (this.mutes[e] = !0, o.default.publish("/user/removeTweets", [e, this.oauth.account.getUserID()]))
    }, TD.services.TwitterClient.prototype.populateMuteList = function(e) {
        e = e || "-1";
        this.getMuteIDs(e).addCallbackWith(this, function(t) {
            var i = t.data;
            if ("-1" === e && (this.mutes = {}), i.ids.forEach(this.addIdToMuteList, this), i.next_cursor_str && "0" !== i.next_cursor_str) return this.populateMuteList(i.next_cursor_str)
        })
    }, TD.services.TwitterClient.prototype.populateRetweetBlockList = function() {
        this.getNoRetweetIDs(function(e) {
            var t;
            for (this.retweetBlocks = {}, t = 0; t < e.length; t++) this.retweetBlocks[e[t]] = !0
        }.bind(this))
    }, TD.services.TwitterClient.prototype.processDeleteChirpEvent = function(e) {
        e.status ? TD.controller.feedManager.deleteChirp(e.status.id_str) : e.direct_message ? this.deleteMessage(e.direct_message.id_str) : e.conversationId && this.conversations.deleteConversation(e.conversationId)
    }, TD.services.TwitterClient.prototype.getResultsFromDeferred = function(e) {
        var t = this.getDataFromDeferred(e);
        if (t && void 0 !== t.results) return t.results
    }, TD.services.TwitterClient.prototype.getDataFromDeferred = function(e) {
        if (e && void 0 !== e.data) return e.data;
        throw TypeError("deferred result is missing data")
    }, TD.services.TwitterClient.prototype.cleanUp = function() {
        this.scheduledTasks.forEach(function(e) {
            TD.controller.scheduler.removePeriodicTask(e)
        }), this.streamingActivity$ && this.streamingActivity$.unsubscribe()
    }
}, function(e, t, i) {
    "use strict";
    var s = {
        chirpPasses: function(e, t) {
            return t instanceof TD.services.TwitterStatus ? s.tweetPasses(e, t) : !(t instanceof TD.services.TwitterAction) || s.actionPasses(e, t)
        },
        userPasses: function(e, t) {
            return !t || !e[t.id]
        },
        tweetPasses: function(e, t) {
            return !t || s.userPasses(e, t.user) && s.tweetPasses(e, t.retweetedStatus) && s.tweetPasses(e, t.quotedTweet)
        },
        actionPasses: function(e, t) {
            return !t || s.userPasses(e, t.getCreator()) && t.getTargetUsers().every(s.userPasses.bind(s, e))
        }
    };
    e.exports = s
}, function(e, t, i) {
    "use strict";
    var s, n = l(i(3)),
        r = l(i(1)),
        a = l(i(0)),
        o = i(36),
        c = i(155);

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.ui.main = ((s = {}).init = function() {
        var e = (0, a.default)("body"),
            t = (0, a.default)(TD.ui.template.render("topbar/app_header", {
                searchInputClassName: "js-app-search-input app-search-input",
                searchInputPlaceholder: (0, n.default)("Search Twitter")
            })),
            i = (0, a.default)(TD.ui.template.render("app_container", {
                isMac: "osx" === TD.util.getOSName()
            })),
            c = t.find(".js-logo"),
            l = t.find(".js-beta-logo");
        o.tweetdeckBeta$.subscribe(function(e) {
            c.toggleClass("is-hidden", e), l.toggleClass("is-hidden", !e)
        }), (0, a.default)(".js-app").append(t), (0, a.default)(".js-app").append(i), TD.util.isTouchDevice() && window.navigator.standalone && t.on("touchmove", function(e) {
            0 === (0, a.default)(e.target).closest(".js-column-nav-scroller").length && e.preventDefault()
        }), TD.util.isWrapperApp() && deck.closeLoadingScreen && deck.closeLoadingScreen(), e.on("click", "a", function(e) {
            TD.util.maybeOpenClickExternally(e)
        }), TD.ui.columns.init(), TD.ui.updates.init(), TD.ui.openColumn.init(), TD.util.isTouchDevice() || e.tooltip({
            selector: ".js-show-tip",
            container: "body",
            delay: {
                show: 500
            },
            suppressFadeOut: !0
        }), e.on("click", "a", function(e) {
            var t = (0, a.default)(e.currentTarget),
                i = t.attr("rel"),
                s = !1;
            switch (i) {
                case "tweets":
                    TD.storage.notification.notify(TD.components.OpenColumn.GO_EVENT, {
                        data: TD.components.OpenColumnHome.URL_BASE + "/" + i + "?screenName=" + t.attr("data-screen-name")
                    }), s = !0;
                    break;
                case "user":
                    var n = t.data("user-name") || r.default.last(t.attr("href").split("/"));
                    n = "" + n, (0, a.default)(document).trigger("uiShowProfile", {
                        id: n
                    }), s = !0;
                    break;
                case "hashtag":
                    (0, a.default)(document).trigger("uiPerformSearch", {
                        query: t.text(),
                        columnKey: t.closest(".column").data("column")
                    }), s = !0;
                    break;
                case "search":
                    (0, a.default)(document).trigger("uiPerformSearch", {
                        query: t.attr("data-search-term")
                    }), s = !0
            }
            s && e.preventDefault(), !1 === e.isDefaultPrevented() && (TD.util.openURL(t.attr("href")), e.preventDefault())
        }), e.on("submit", function(e) {
            e.preventDefault()
        }), a.default.subscribe("/storage/client/settings/column_width", s.updateColumnSize), s.updateColumnSize(), a.default.subscribe("/storage/client/settings/font_size", s.updateFontSize), s.updateFontSize(), a.default.subscribe("/storage/client/settings/theme", s.updateTheme), s.updateTheme();
        var u = r.default.debounce(function(e) {
            (0, a.default)(document).trigger("uiMainWindowResized")
        }, 50);
        (0, a.default)(window).on("resize", u), (0, a.default)(document).on("uiColumnNavSizeOverflow", function(e, t) {
            (0, a.default)(".js-app-add-column").removeClass("is-hidden")
        }.bind(this)), (0, a.default)(document).on("uiColumnNavSizeNormal", function(e, t) {
            (0, a.default)(".js-app-add-column").addClass("is-hidden")
        }.bind(this))
    }, s.updateColumnSize = function() {
        var e = TD.settings.getColumnWidth(),
            t = (0, a.default)(document.body);
        switch (t.removeClass("is-narrow-columns is-medium-columns is-wide-columns"), e) {
            case "narrow":
                t.addClass("is-narrow-columns");
                break;
            case "medium":
                t.addClass("is-medium-columns");
                break;
            case "wide":
                t.addClass("is-wide-columns")
        }(0, a.default)(document).trigger("uiColumnWidthChange", {
            columnWidth: e
        })
    }, s.updateFontSize = function() {
        var e = TD.settings.getFontSize(),
            t = (0, a.default)("html");
        switch (c.StyleSheet.setScale(TD.settings.getHorizonWebFontSize(e)), t.removeClass("txt-size--12 txt-size--13 txt-size--14 txt-size--15 txt-size--16"), e) {
            case "smallest":
                t.addClass("txt-size--12");
                break;
            case "small":
                t.addClass("txt-size--13");
                break;
            case "medium":
                t.addClass("txt-size--14");
                break;
            case "large":
                t.addClass("txt-size--15");
                break;
            case "largest":
                t.addClass("txt-size--16")
        }
    }, s.updateTheme = function() {
        var e = TD.settings.getTheme(),
            t = (0, a.default)("html");
        c.StyleSheet.setTheme(e), t.toggleClass("dark", "dark" === e)
    }, s)
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    TD.ui.openColumn = function() {
        var e, t = {};

        function i(t, i) {
            var s = t.split("?"),
                n = s[0].split("/").slice(1),
                a = s[1] || "",
                o = TD.net.util.formDecode(a),
                c = n.shift();
            switch (c) {
                case "add":
                    if ("search" !== n[0]) {
                        var l = TD.components.OpenColumn.instance;
                        l && !l.canGo(c, n) && (l.destroy(), l = null), l || (l = new TD.components.OpenColumn), l.go(c, n, o, i), l.setAndShowContainer(e, !1)
                    } else(0, r.default)(document).trigger("uiAppSearchFocus")
            }
        }
        return t.init = function() {
            e = (0, r.default)("#open-modal"), r.default.subscribe(TD.components.OpenColumn.GO_EVENT, function(e) {
                i(e.data, e.history)
            })
        }, t.showOpenColumn = function() {
            i("/add/home")
        }, t.showTwitterProfile = function(e) {
            i("/profile/twitter/" + e)
        }, t.showLists = function() {
            i("/add/lists")
        }, t.showSearch = function(e) {
            i("/search?q=" + e)
        }, t.showCustomTimelines = function(e, t) {
            2 === arguments.length ? i("/add/customtimelines?screenName=" + TD.util.deMentionify(e) + "&slug=" + t) : i("/add/customtimelines")
        }, t.showList = function(e, t) {
            i("/add/lists?screenName=" + TD.util.deMentionify(e) + "&slug=" + t)
        }, t
    }()
}, function(e, t, i) {
    "use strict";
    var s = o(i(0)),
        n = i(188),
        r = i(23),
        a = o(i(17));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.ui.updates = function() {
        var e = {
            allowRetweetsAndReplies: !0,
            init: function() {
                (0, s.default)(document).on("click", ".js-show-detail", function(t) {
                    var i = window.getSelection(),
                        n = 0 !== i.rangeCount && i.getRangeAt(0);
                    if (!n || n.endOffset === n.startOffset) {
                        var r = e.findParentArticle((0, s.default)(this)),
                            a = TD.controller.columnManager.get(r.column);
                        if (a) {
                            var o = a.findMostInterestingChirp(r.statusKey),
                                c = a.findChirp(r.statusKey);
                            e.showDetailView(a, o, c)
                        }
                    }
                    return !1
                }), (0, s.default)(document).on("uiDockedComposeSendingVideoInProgress", function() {
                    e.allowRetweetsAndReplies = !1
                }), (0, s.default)(document).on("uiDockedComposeSendingVideoComplete", function() {
                    e.allowRetweetsAndReplies = !0
                }), (0, s.default)(document).on("click", ".js-expand-gap", function(t) {
                    var i = e.findParentArticle((0, s.default)(this));
                    e.trackGapClick(), i.element.addClass("gap-chirp--loading"), TD.controller.columnManager.get(i.column).fillGap(i.statusKey)
                }), (0, s.default)("body").delegate(".js-stream-item a, .js-stream-item button, .js-detail-view-inline, .js-quote-detail", "click", t), s.default.subscribe("chirp/click", function(e, i, s) {
                    t(e, i, s)
                }), s.default.subscribe("chirp/action", i), TD.controller.scheduler.schedulePeriodicTask(30, TD.ui.updates.refreshTimestamps)
            },
            trackGapClick: function() {
                TD.util.metric("column:ui:gap:click"), (0, s.default)(document).trigger("scribeEvent", {
                    terms: {
                        page: "main",
                        component: "column",
                        element: "gap",
                        action: "click"
                    }
                })
            }
        };
        return e.refreshTimestamps = (0, n.makeDOMMutator)(function() {
            (0, s.default)(".js-timestamp").each(function() {
                var e = (0, s.default)(this),
                    t = e.attr("data-time"),
                    i = new Date(Number(t)),
                    n = TD.util.prettyDate(i);
                e.find("a,span").text(n)
            })
        }), e.findParentArticle = function(e) {
            var t = e.closest(".js-stream-item,.js-tweet-box");
            return {
                element: t,
                statusKey: t.attr("data-key"),
                column: t.closest(".js-chirp-container, .js-column").data("column")
            }
        }, e.showDetailView = function(e, t, i) {
            var s = e.model.getKey(),
                n = TD.ui.columns.getColumnElementByKey(s);
            n.trigger("uiExitSettings"), e.detailViewComponent && e.detailViewComponent.destroy(), i instanceof TD.services.TwitterConversationMessageEvent && t.quotedTweet ? TD.controller.stats.sharedTweetDM() : t instanceof TD.services.DataminrAlert ? e.detailViewComponent = new TD.components.DataminrDetailView(e, n) : t instanceof TD.services.TwitterStatus ? e.detailViewComponent = new TD.components.TweetDetailView(e, n) : t instanceof TD.services.TwitterConversation && (e.detailViewComponent = new TD.components.ConversationDetailView(e, n)), e.detailViewComponent.showChirp(t, i)
        }, e.showSensitiveMedia = function(e) {
            var t = e.getDOMChirps();
            t.find(".js-media-sensitive-overlay").addClass("is-hidden"), t.find(".js-media-preview-container").removeClass("media-size-medium media-sensitive-detail"), t.find(".js-media-image-link, .js-media-native-video, .js-media-gif").removeClass("is-invisible"), e.possiblySensitive = !1
        }, e.alwaysShowSensitiveMedia = function(e) {
            TD.settings.setDisplaySensitiveMedia(!0)
        }, e;

        function t(t, n, a, o) {
            var c, l, u, d, h, m, f = (0, s.default)(t.target),
                p = !1;
            if (!((0, s.default)(".js-stream-item", t.target).length > 0) && (f.attr("rel") || (f = f.closest("a,button,[data-tweet-id]")), l = f.attr("rel"), c = e.findParentArticle(f), n || (a || (a = TD.controller.columnManager.get(c.column)), a && (o = a.findChirp(c.statusKey), ((n = a.findMostInterestingChirp(c.statusKey)) instanceof TD.services.TwitterStatus || n instanceof TD.services.TwitterConversationMessageEvent) && (m = !0), (d = f.closest(".js-quote-detail")).length && m && (h = d.attr("data-tweet-id"), n.quotedTweet && n.quotedTweet.id === h ? n = n.quotedTweet : (l = "tweet", f = d)))), n)) {
                switch (t.shiftKey && "favorite" === l && (l = "favoriteFromAccounts"), l) {
                    case "skipToReplies":
                        (0, s.default)(document).trigger("uiSkipToReplies", {
                            columnKey: a.model.getKey()
                        });
                        break;
                    case "viewCustomTimeline":
                        TD.ui.openColumn.showCustomTimelines(f.attr("data-screen-name"), f.attr("data-slug"));
                        break;
                    case "list":
                        TD.ui.openColumn.showList(f.attr("data-screen-name"), f.attr("data-slug"));
                        break;
                    case "actionsMenu":
                        f.trigger("uiShowActionsMenu");
                        break;
                    case "mediaPreview":
                        p = function(e, t, i, s) {
                            if (s.temporary) return TD.util.openURL(t), !0;
                            return new TD.components.MediaGallery(e, t, i, s), !1
                        }(n, f.attr("href"), f.attr("data-media-entity-id"), a);
                        break;
                    case "retweet":
                    case "like":
                    case "favorite":
                    case "destroy":
                    case "edit":
                    case "reply":
                    case "viewDetails":
                    case "followStatus":
                    case "dm":
                    case "showSensitiveMedia":
                    case "alwaysShowSensitiveMedia":
                    case "customTimeline":
                    case "removeFromCustomTimeline":
                        if (("retweet" === l || "reply" === l) && !e.allowRetweetsAndReplies) {
                            (0, r.showNotification)({
                                title: "Hang on a minute...",
                                message: "Please wait for your video to finish uploading"
                            });
                            break
                        }
                        i(l, n, o, a, c);
                        break;
                    case "globalSettings":
                        (0, s.default)(document).trigger("uiShowGlobalSettings");
                        break;
                    case "tweet":
                        u = f.attr("data-tweet-id"), TD.controller.clients.getClient(n.account.getKey()).show(u, function(e) {
                            i("viewDetails", e, o, a, c)
                        }, function() {
                            TD.util.openURL(f.attr("href"))
                        });
                        break;
                    case "pause":
                        f.closest(".js-media-preview-container").addClass("is-paused is-manually-paused").removeClass("is-manually-played").find(".js-media-gif").get(0).pause();
                        break;
                    case "play":
                        f.closest(".js-media-preview-container").removeClass("is-paused is-manually-paused").addClass("is-manually-played").find(".js-media-gif").get(0).play();
                        break;
                    case "viewConversationParticipants":
                        (0, s.default)(document).trigger("uiShowDmParticipants", {
                            columnKey: a.model.getKey(),
                            conversationId: n.conversationId,
                            accountKey: n.account.getKey()
                        });
                        break;
                    case "favoriteFromAccounts":
                        (0, s.default)(document).trigger("uiShowFavoriteFromOptions", {
                            tweet: n
                        });
                        break;
                    default:
                        p = !0
                }
                return p || (t.preventDefault(), t.stopPropagation()), !1
            }
        }

        function i(t, i, n, r, o) {
            if (t.match(/favorite|retweet|reply/)) {
                var c = t;
                "favorite" === t && (c = i.isFavorite ? "unfavorite" : "favorite"), TD.controller.stats.scribeChirpAction({
                    action: c,
                    columnType: a.default.getColumnType(r)
                })
            }
            switch (t) {
                case "retweet":
                case "like":
                case "favorite":
                case "destroy":
                case "edit":
                    t in i && i[t](o);
                    break;
                case "reply":
                    var l = i.getMainTweet();
                    (0, s.default)(document).trigger("uiComposeTweet", {
                        type: "reply",
                        from: [i.account.getKey()],
                        inReplyTo: {
                            id: i.id,
                            htmlText: l.htmlText,
                            user: {
                                screenName: l.user.screenName,
                                name: l.user.name,
                                profileImageURL: l.user.profileImageURL
                            },
                            chirp: l
                        },
                        mentions: i.getReplyUsers(),
                        element: o && o.element
                    });
                    break;
                case "viewDetails":
                    e.showDetailView(r, i, n);
                    break;
                case "followStatus":
                    (0, s.default)(document).trigger("uiShowFollowFromOptions", {
                        userToFollow: i
                    });
                    break;
                case "dm":
                    var u = i.getMainUser(),
                        d = u.account;
                    (0, s.default)(document).trigger("uiComposeTweet", {
                        type: "message",
                        from: [d.getKey()],
                        messageRecipients: [u],
                        conversationId: i.conversationId
                    });
                    break;
                case "showSensitiveMedia":
                    e.showSensitiveMedia(i);
                    break;
                case "alwaysShowSensitiveMedia":
                    e.alwaysShowSensitiveMedia(i);
                    break;
                case "customTimeline":
                    new TD.components.AddToCustomTimelineDialog(i.getMainTweet());
                    break;
                case "removeFromCustomTimeline":
                    var h = o.element;
                    if (!h) break;
                    (0, s.default)(h).trigger("uiRemoveTweetFromCustomTimeline", {
                        tweetId: i.getMainTweet().id
                    })
            }
        }
    }()
}, function(e, t, i) {
    "use strict";
    var s, n = o(i(1)),
        r = o(i(0)),
        a = o(i(94));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.globalRenderOptions = (s = {
        styledScrollbar: TD.util.hasFixedScrollBars(),
        isTouchDevice: TD.util.isTouchDevice(),
        asset: function() {
            return function(e) {
                return TD.assets.get(e)
            }
        },
        decider: {},
        featureFlag: {}
    }, (0, r.default)(document).on("dataDeciderUpdated", function() {
        s.decider = TD.decider.getAllWithOverlay()
    }), (0, a.default)().subscribe(function(e) {
        n.default.forEach(e.config, function(e, t) {
            t.includes("tweetdeck") && (s.featureFlag[t] = e.value)
        })
    }), s)
}, function(e, t, i) {
    "use strict";
    var s = T(i(7)),
        n = T(i(83)),
        r = T(i(6)),
        a = function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(341)),
        o = T(i(3)),
        c = T(i(1)),
        l = T(i(0)),
        u = T(i(352)),
        d = T(i(29)),
        h = i(64),
        m = i(94),
        f = T(i(17)),
        p = i(188),
        g = i(138),
        v = T(i(586));

    function T(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    TD.ui.Column = function(e) {
        this.chirpContainerSelector = '.js-chirp-container[data-column="' + e + '"]', this.infiniteSpinnerSelector = ".js-infinitespinner", this.globalTpmAnimationLimit = 2e3, this.columnTpmAnimationLimit = 120, this.queuedAnimationLimit = 15, this.chirpStaggeringInterval = 400, this.chirpDelayMaximum = 3e4, this.moreTweetsThreshold = 0, this.moreTweetsAnimationTime = 500, this.$moreTweetsButtonContainer = null, this.fadeInClass = "column-opacity-transition", this.state = {
            columnKey: e,
            $noResults: null,
            animating: !1,
            animationQueue: []
        }, this.newTweetsTemplates = {
            default: (0, o.default)("New Tweets", null, !0),
            "plural tweet": (0, o.default)("{{numberNew}} New Tweets", null, !0),
            "singular tweet": (0, o.default)("1 New Tweet", null, !0),
            "plural notification": (0, o.default)("{{numberNew}} New Notifications", null, !0),
            "singular notification": (0, o.default)("1 New Notification", null, !0),
            "plural activity": (0, o.default)("New Activity", null, !0),
            "singular activity": (0, o.default)("New Activity", null, !0),
            "plural follower": (0, o.default)("{{numberNew}} New Followers", null, !0),
            "singular follower": (0, o.default)("1 New Follower", null, !0),
            "plural message": (0, o.default)("New Messages", null, !0),
            "singular message": (0, o.default)("New Messages", null, !0)
        }, this.setupMoreTweets()
    }, TD.ui.Column.prototype.setupMoreTweets = function() {
        var e = this;

        function t(t, i) {
            return function() {
                e.getMoreTweetsButtonContainer().toggleClass(t, i)
            }
        }

        function i(t, i, s) {
            if ("hidden" === s) return window.requestAnimationFrame(function() {
                e.getMoreTweetsButtonContainer().addClass("more-tweets-btn-container--out"), e.getMoreTweetsButtonContainer().find(".js-more-tweets-glow").width(0), setTimeout(e.moreTweetsState.transition.bind(e.moreTweetsState), 550)
            }), StateMachine.ASYNC
        }
        this.moreTweetsState = StateMachine.create({
            initial: "hidden",
            error: function() {},
            events: [{
                from: "hidden",
                name: "unread",
                to: "visible"
            }, {
                from: "hidden",
                name: "mouseScrollToTop",
                to: "mouseReleaseToRefresh"
            }, {
                from: "visible",
                name: "unread",
                to: "visible"
            }, {
                from: "visible",
                name: "trackingRealtime",
                to: "hidden"
            }, {
                from: "visible",
                name: "read",
                to: "hidden"
            }, {
                from: "visible",
                name: "mouseScrollToTop",
                to: "mouseReleaseToRefresh"
            }, {
                from: "mouseReleaseToRefresh",
                name: "mouseScrollAwayFromTop",
                to: "hidden"
            }, {
                from: "mouseReleaseToRefresh",
                name: "upwardScroll",
                to: "hidden"
            }, {
                from: "mouseReleaseToRefresh",
                name: "trackingRealtime",
                to: "hidden"
            }],
            callbacks: {
                onenterhidden: (0, p.makeDOMMutator)(function() {
                    t("more-tweets-btn-container--hidden", !0)(), t("more-tweets-btn-container--out", !1)(), t("more-tweets-btn-container--visible", !1)(), t("more-tweets-btn-container--mouse-release", !1)()
                }),
                onleavehidden: (0, p.makeDOMMutator)(t("more-tweets-btn-container--hidden", !1)),
                onentervisible: (0, p.makeDOMMutator)(function() {
                    t("more-tweets-btn-container--visible", !0)(), TD.util.metric("column:ui:more-tweets:impression")
                }),
                onleavevisible: i,
                onunread: (0, p.makeDOMMutator)(function(t, i, s, n) {
                    e.getMoreTweetsButtonContainer().find(".js-more-tweets-btn-text").text(e.getMoreTweetsButtonText(n)), e.getMoreTweetsButtonContainer().find(".js-more-tweets-glow").width(50 + 8 * n.numUnseenChirps)
                }),
                onbeforemouseScrollToTop: function() {
                    if (!TD.decider.get("column_release_to_refresh")) return !1
                },
                onentermouseReleaseToRefresh: (0, p.makeDOMMutator)(t("more-tweets-btn-container--mouse-release", !0)),
                onleavemouseReleaseToRefresh: i
            }
        })
    }, TD.ui.Column.prototype.getChirpContainer = function() {
        return this._$chirpContainer && 0 !== this._$chirpContainer.length || (this._$chirpContainer = (0, l.default)(this.chirpContainerSelector)), this._$chirpContainer
    }, TD.ui.Column.prototype.getChirpScroller = function() {
        return this._$columnScroller && 0 !== this._$columnScroller.length || (this._$columnScroller = this.getChirpContainer().closest(".js-column-scroller")), this._$columnScroller
    }, TD.ui.Column.prototype.getChirpById = function(e) {
        return this.getChirpContainer().find('[data-key="' + e + '"]')
    }, TD.ui.Column.prototype.pause = function() {
        return this.getChirpScroller().scrollTop(1)
    }, TD.ui.Column.prototype.unpause = function() {
        return this.getChirpScroller().scrollTop(0)
    }, TD.ui.Column.prototype.removeChirp = function(e, t) {
        var i = this.getChirpById(e);
        this.unloadVideos(i), this.teardownCard(e), TD.ui.columns.alterColumnContents(this.state.columnKey, i, function(e) {
            e.remove()
        }, t)
    }, TD.ui.Column.prototype.removeChirps = function(e, t) {
        var i = this,
            s = this.getChirpContainer().find(".js-stream-item").filter(function() {
                return e.indexOf((0, l.default)(this).attr("data-key")) > -1
            });
        this.unloadVideos(s), e.forEach(function(e) {
            return i.teardownCard(e)
        }), TD.ui.columns.alterColumnContents(this.state.columnKey, s.eq(0), function() {
            s.remove()
        }, t)
    }, TD.ui.Column.prototype.unloadVideos = function(e) {
        e.find("video, video source").attr("src", "")
    }, TD.ui.Column.prototype.loadGif = function(e) {
        var t = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).mediaPreviewSize;
        if (!1 !== e.hasMedia()) {
            var i = this.getChirpById(e.id).find(".js-media-gif-container");
            if (!(i.find(".js-media-gif").length > 0)) {
                var s = e.getMedia()[0].renderThumb(t);
                i.replaceWith(s)
            }
        }
    }, TD.ui.Column.prototype.unloadGif = function(e) {
        var t = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).mediaPreviewSize;
        if (!1 !== e.hasMedia()) {
            var i = this.getChirpById(e.id),
                s = i.find(".js-media-gif-container"),
                n = e.getMedia()[0].renderAnimatedGifPlaceholder(t);
            i.find(".js-media-preview-container").removeClass("is-manually-played"), this.unloadVideos(s), s.replaceWith(n)
        }
    }, TD.ui.Column.prototype.pauseGif = function(e) {
        var t = this.getChirpById(e.id),
            i = t.find(".js-media-preview-container"),
            s = t.find(".js-media-gif").get(0);
        i.hasClass("is-manually-played") || (s && !s.paused && s.pause(), i.addClass("is-paused"))
    }, TD.ui.Column.prototype.playGifIfNotManuallyPaused = function(e) {
        var t = this.getChirpById(e.id).find(".js-media-preview-container"),
            i = void 0;
        if (TD.settings.getAutoPlayGifs() && !t.hasClass("is-manually-paused") && t.removeClass("is-paused"), (i = t.not(".is-paused").find(".js-media-gif").get(0)) && i.paused) {
            var s = i.play();
            s && void 0 !== n.default && s instanceof n.default && s.catch(function(e) {
                e.name
            })
        }
    }, TD.ui.Column.prototype.loadCard = function(e, t) {
        var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        if (e.hasCard() && !e.isQuoteStatus && (!i || (0, g.hasPoll)(e.card))) {
            var n = this.getChirpById(e.id).find(".js-card-container"),
                o = c.default.get(h.columnNamespaces, [t, "namespace"], {}),
                l = e.possiblySensitive && !TD.settings.getDisplaySensitiveMedia(),
                u = !!n.closest(".is-inverted-dark").length;
            a.render(r.default.createElement(v.default, {
                card: e.card,
                cardContext: {
                    tweetId: e.id,
                    tweetPermalink: e.getChirpURL(),
                    tweetUserId: e.getMainUser().id
                },
                legacyCardParams: {
                    id: e.getMainTweet ? e.getMainTweet().id : e.id,
                    isContributorAccount: e.account.isContributor(),
                    accountUserId: e.account.getUserID(),
                    isPossiblySensitive: l,
                    isInvertedDark: u
                },
                context: "column",
                scribeNamespace: (0, s.default)({
                    page: "column"
                }, o)
            }), n[0])
        }
    }, TD.ui.Column.prototype.teardownCard = function(e) {
        var t = this.getChirpById(e).find(".js-card-container");
        0 !== t.length && a.unmountComponentAtNode(t[0])
    }, TD.ui.Column.prototype.slideInChirps = function(e, t, i, s, n) {
        var r = this,
            a = TD.ui.columns.isScrolledToTop(this.state.columnKey),
            o = !(t && this.getChirpContainer().closest(".is-hidden").length) && i < this.globalTpmAnimationLimit && s < this.columnTpmAnimationLimit;
        if (e && !n.insertAtBottom) {
            var l = e.concat();
            l.reverse(), l.forEach(function(e) {
                e.$node.addClass("is-animating")
            });
            var u = !a || TD.ui.columns.columnIsLockedToElement(this.state.columnKey) || !n.containsNewChirps;
            n && n.insertAtTop && u ? l.forEach(function(e) {
                this.shortcircuitChirpSlide(e.$node, !0)
            }, this) : this.state.animationQueue = this.state.animationQueue.concat(l).slice(-this.queuedAnimationLimit)
        }
        if (!this.state.animating) {
            var h;
            a || (this.state.animationQueue = this.processOffScreenAnimationQueue(this.state.animationQueue)), this.state.animationQueue = this.state.animationQueue.filter(function(e) {
                var t = n && !n.insertAtTop;
                return t && this.slideInChirp(e.$node, o), !t
            }, this);
            do {
                h = this.state.animationQueue.shift()
            } while (this.state.animationQueue.length && !this.elementIsInDOM(h.$node));
            if (h) {
                this.slideInChirp(h.$node, o);
                var f = Date.now() + this.chirpStaggeringInterval,
                    p = c.default.get(this.state.animationQueue, [0, "deliverAtTime"], Date.now()),
                    g = (0, m.getStreamForFeatureFlag)("tweetdeck_dogfood").switchMap(function(e) {
                        var t = e ? p : f;
                        return d.default.Observable.timer(new Date(t))
                    }),
                    v = d.default.Observable.timer(this.chirpDelayMaximum);
                this.state.animating = !0, d.default.Observable.merge(g, v).take(1).subscribe(function() {
                    r.state.animating = !1, r.slideInChirps(null, t, i, s)
                })
            }
        }
    }, TD.ui.Column.prototype.elementIsInDOM = function(e) {
        return e && e.length && l.default.contains(document.documentElement, e[0])
    }, TD.ui.Column.prototype.processOffScreenAnimationQueue = function(e) {
        return e.filter(function(e) {
            var t = e.$node.position().top < 0;
            return t && this.shortcircuitChirpSlide(e.$node, t), !t
        }.bind(this))
    }, TD.ui.Column.prototype.shortcircuitChirpSlide = function(e, t) {
        TD.ui.columns.alterColumnContents(this.state.columnKey, e, function(e) {
            e.removeClass("is-animating")
        }, {
            willBreakScrollPosition: t
        })
    }, TD.ui.Column.prototype.slideInChirp = function(e, t) {
        var i = this;
        (0, l.default)(document).trigger("incrementTpmCounter", {
            columnKey: this.state.columnKey
        });
        var s = function() {
            e.removeClass("is-animating"), e.removeAttr("style"), (0, l.default)(document).trigger("uiColumnChirpsChanged", {
                id: i.state.columnKey
            })
        };
        (t = !document.hidden && t) ? u.default.mutate(function() {
            e.css({
                "max-height": "500px"
            }), setTimeout(s, 150)
        }): s()
    }, TD.ui.Column.prototype.renderChirps = function(e, t) {
        var i, s, n, r, a = [];
        for (s = 0; s < e.length; s++) {
            r = (n = e[s]).getMainUser && n.getMainUser().isProtected;
            try {
                i = e[s].render({
                    isTemporaryColumn: t.isTemporaryColumn,
                    mediaPreviewSize: t.mediaPreviewSize,
                    isMinimalist: t.doRenderMinimalist,
                    withShowVerified: t.showVerifiedBadge,
                    withRemove: t.isOwnCustomTimeline,
                    withDragHandle: this.shouldRenderDragHandle(c.default.extend({}, t, {
                        isProtectedUser: r
                    }))
                }), a.push(i)
            } catch (e) {
                TD.util.metric("column:ui:chirp-render:error")
            }
        }
        return a.join("")
    }, TD.ui.Column.prototype.shouldRenderDragHandle = function(e) {
        if (TD.controller.stats.isInExperimentBucket("live_engagement_in_column_8020", "live_engagement_enabled") && "narrow" === TD.settings.getColumnWidth()) return !1;
        var t = !e.isTemporaryColumn,
            i = !e.isOwnCustomTimeline,
            s = e.isOwnReorderableCustomTimeline,
            n = !e.isProtectedUser;
        return t && (i || s) && n
    }, TD.ui.Column.prototype.hideChirpContainer = function() {
        var e = this.getChirpContainer();
        e.css("opacity", 0), c.default.defer(function() {
            e.addClass(this.fadeInClass)
        }.bind(this))
    }, TD.ui.Column.prototype.fadeInChirpContainer = function() {
        var e = this.getChirpContainer(),
            t = c.default.once(function() {
                e.removeClass(this.fadeInClass).removeAttr("style"), (0, l.default)(document).trigger("uiColumnChirpsChanged", {
                    id: this.state.columnKey
                })
            }.bind(this));
        c.default.defer(function() {
            e.css("opacity", 1), e.one("transitionend", t), setTimeout(t, 350)
        })
    }, TD.ui.Column.prototype.addInfiniteScrollSpinner = function() {
        this.getChirpContainer().append(TD.ui.template.render("spinner_large"))
    }, TD.ui.Column.prototype.removeInfiniteScrollSpinner = function() {
        (0, l.default)(this.infiniteSpinnerSelector, this.getChirpContainer()).remove()
    }, TD.ui.Column.prototype.showIsUpdatingMessage = function() {
        var e = (0, l.default)(TD.ui.template.render("column_loading_placeholder", {
            isUpdating: !0
        }));
        this.getChirpContainer().html(e)
    }, TD.ui.Column.prototype.hideIsUpdatingMessage = function() {
        this.getChirpContainer().find(".js-column-loading-placeholder").remove()
    }, TD.ui.Column.prototype.showNoResultsMessage = function(e, t) {
        var i = this.getChirpContainer();
        i.css("opacity", 1).removeClass(this.fadeInClass), this.state.$noResults = (0, l.default)(TD.ui.template.render("search_no_tweets_placeholder", {
            isDropTarget: !e && t,
            withAddByUrl: !e && t
        })), i.html(this.state.$noResults)
    }, TD.ui.Column.prototype.hideNoResultsMessage = function() {
        this.state.$noResults && this.state.$noResults.remove()
    }, TD.ui.Column.prototype.getMoreTweetsButtonContainer = function() {
        if (this.$moreTweetsButtonContainer && this.$moreTweetsButtonContainer.length) return this.$moreTweetsButtonContainer;
        var e = this.getChirpContainer().closest(".js-column").find(".js-more-tweets-btn-container");
        return e.length ? (this.$moreTweetsButtonContainer = e, this.$moreTweetsButtonContainer) : e
    }, TD.ui.Column.prototype.getMoreTweetsButtonText = function(e) {
        return TD.ui.template.toHtml(this.getMoreTweetsTemplate(e), {
            numberNew: TD.util.truncateNumber(e.numUnseenChirps) + (e.gappy ? "+" : "")
        })
    }, TD.ui.Column.prototype.getMoreTweetsTemplate = function(e) {
        var t = TD.controller.columnManager.get(e.columnKey);
        if (!t) return this.newTweetsTemplates.default;
        var i = "tweet",
            s = f.default.getColumnType(t);
        f.default.isDataminr(t) || s === f.default.columnMetaTypes.INTERACTIONS ? i = "notification" : s === f.default.columnMetaTypes.ACTIVITY ? i = "activity" : s === f.default.columnMetaTypes.FOLLOWERS ? i = "follower" : s !== f.default.columnMetaTypes.MESSAGES && s !== f.default.columnMetaTypes.INBOX || (i = "message");
        var n = [1 === e.numUnseenChirps ? "singular" : "plural", i].join(" ");
        return this.newTweetsTemplates[n] || this.newTweetsTemplates.default
    }, TD.ui.Column.prototype.updateUnreadIndicators = function(e) {
        "number" != typeof(e = e || {}).numUnseenChirps && (e.numUnseenChirps = 0), "boolean" != typeof e.gappy && (e.gappy = !1);
        var t = e.numUnseenChirps > 0;
        this.getChirpContainer().trigger("uiReadStateChange", {
            read: !t,
            columnKey: this.state.columnKey
        }), t ? this.moreTweetsState.unread({
            numUnseenChirps: e.numUnseenChirps,
            gappy: e.gappy,
            columnKey: this.state.columnKey
        }) : this.moreTweetsState.read()
    }
}, function(e, t, i) {
    "use strict";
    TD.debug = {
        spoof_data: null
    }
}, function(e, t, i) {
    "use strict";
    TD.minWrapperVersionMac = "2.8.0", TD.minWrapperVersionWin = "2.8.0"
}, , function(e, t, i) {
    "use strict";
    var s = i(0),
        n = i(1895);
    s(document).ready(function() {
        TD.config.disable_metrics_error || TD.metrics.error.attach(), TD.config.disable_metrics_event || TD.metrics.event.attach(), TD.controller.init.preload(), TD.util.checkAPIRoot(), n.attachTo(document), TD.controller.init.start()
    })
}, function(e, t, i) {
    "use strict";
    var s = l(i(0)),
        n = l(i(12)),
        r = l(i(140)),
        a = l(i(1897)),
        o = l(i(1909)),
        c = l(i(1910));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var u = i(5).registry,
        d = i(5).compose,
        h = i(5).advice,
        m = i(5).debug,
        f = i(1912),
        p = i(1993),
        g = i(1994),
        v = i(1995),
        T = i(1997),
        w = i(1998),
        b = i(2075),
        y = i(2076),
        C = i(2077),
        _ = i(2078),
        D = i(2079),
        S = i(2105),
        k = i(2108),
        E = i(2109),
        I = i(2111),
        A = i(2112),
        M = i(2113),
        x = i(364),
        R = i(2115),
        F = i(2117),
        O = i(2118),
        L = i(2120),
        U = i(2121),
        P = i(2130),
        N = i(2131),
        j = i(2132),
        B = i(2133),
        $ = i(2134),
        K = i(2158),
        z = i(2159);
    e.exports = n.default.mixin(function() {
        this.attributes({
            modal: "#open-modal",
            appHeader: ".js-app-header",
            searchResults: ".js-search-form",
            message: ".js-message-banner",
            appSearchSourceId: "appSearch",
            searchPopoverSourceId: "searchPopover",
            isHiddenClass: "is-hidden",
            gridFocusId: "grid_focus",
            modalsContainerSelector: ".js-modals-container",
            columnScrollContainerSelector: ".js-app-columns-container"
        }), this.initSearchInPopover = function() {
            M.attachTo(".js-search-in-popover", {
                popoverPosition: "rt",
                closeModals: !0,
                appSearchSourceId: this.attr.appSearchSourceId,
                searchPopoverSourceId: this.attr.searchPopoverSourceId,
                isHiddenClass: this.attr.isHiddenClass
            }), v.attachTo(".js-search-in-popover", {
                sourceId: this.attr.searchPopoverSourceId
            }), x.attachTo(".js-search-in-popover"), R.attachTo(".js-search-in-popover")
        }, this.attachLoggedInComponents = function() {
            L.attachTo(this.$node), C.attachTo(this.$node), P.attachTo(this.$node), S.attachTo(this.$node), g.attachTo(this.select("message")), _.attachTo(this.$node), j.attachTo(this.$node), B.attachTo(this.$node), w.attachTo(this.$node, {
                focusId: this.attr.gridFocusId
            }), A.attachTo(this.select("columnScrollContainerSelector")), b.attachTo(this.$node, {
                focusId: this.attr.gridFocusId
            }), y.attachTo(this.$node), k.attachTo("#compose-modal"), O.attachTo(".js-app-header"), U.attachTo(".js-app"), $.attachTo(this.$node), a.default.attachTo(".js-app"), I.attachTo("#column-navigator"), v.attachTo(".js-search-form", {
                sourceId: this.attr.appSearchSourceId
            }), this.initSearchInPopover(), F.attachTo(this.$node), p.attachTo(this.$node), K.attachTo(this.$node), z.attachTo(this.$node), this.attachChild(o.default, ".js-send-feedback", {
                props: {
                    showSendFeedbackModal: this.showSendFeedbackModal.bind(this)
                }
            })
        }, this.showSendFeedbackModal = function() {
            this.showModal(c.default, {
                props: {
                    closeModal: this.closeSendFeedbackModal.bind(this)
                }
            }, {
                withFooter: !1,
                withDismissButton: !0,
                withBorder: !1
            })
        }, this.closeSendFeedbackModal = function() {
            this.trigger("uiCloseModal")
        }, this.handleLoggedIn = function() {
            this.$node.find(".js-app").removeClass(this.attr.isHiddenClass), (0, s.default)("body", "html").removeClass("scroll-v"), this.attachLoggedInComponents()
        }, this.attachLoggedOutComponents = function() {
            f.attachTo(this.$node), T.attachTo(this.$node), N.attachTo(this.attr.modalsContainerSelector), E.attachTo(".js-app-loading", {
                teardownOn: "TD.ready"
            })
        }, this.componentDidInitialize = function() {
            TD.config.flight_debug && (console.info("Flight debug mode enabled."), m.enable(!0), d.mixin(u, [h.withAdvice])), this.attachLoggedOutComponents(), this.on(document, "TD.ready", this.handleLoggedIn)
        }
    }, D, r.default)
}, function(e, t, i) {
    "use strict";
    e.exports = function() {
        this.attributes({
            isNonDismissible: !1
        }), this.after("initialize", function() {
            this.trigger("uiModalShowing"), this.trigger("uiCloseModal"), this.on(document, "uiModalShowing", this.teardown), this.attr.isNonDismissible || (this.on(document, "uiCloseModal", this.teardown), this.on(document, "uiCloseTopModal", this.teardown))
        }), this.before("teardown", function() {
            this.trigger("uiModalHiding")
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = p(i(7)),
        n = p(i(3)),
        r = p(i(0)),
        a = p(i(8)),
        o = p(i(12)),
        c = p(i(1898)),
        l = function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(109)),
        u = p(i(20)),
        d = i(36),
        h = i(53),
        m = i(64),
        f = p(i(1899));

    function p(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var g = l.makeCommandBag(),
        v = {
            label: "Show insights",
            apply: function() {
                return (0, r.default)(document).trigger("uiShowDataDrawer", {
                    insightTerm: "otters"
                })
            }
        },
        T = function(e) {
            return g[e]([v])
        },
        w = function(e) {
            return (0, m.generic)((0, s.default)({
                page: "insights_panel"
            }, e))
        };
    e.exports = o.default.mixin(u.default, function() {
        this.attributes({
            template: "data_drawer",
            drawerBodySelector: ".js-drawer-body",
            drawerFooterSelector: ".js-drawer-footer",
            insightsPanelSelector: ".js-insights-panel"
        }), this.initialState({
            enabled: !1,
            insightTerm: ""
        }), this.componentDidInitialize = function() {
            this.subscribeDataDrawerFeatureFlag()
        }, this.handleButtonClick = function() {
            var e = this.state.insightTerm;
            this.trigger(document, "uiComposeTweet", {
                text: e + " "
            }), this.trigger(document, "scribeEvent", {
                terms: {
                    page: "insights_panel",
                    section: "footer",
                    element: "tweet_button",
                    action: "click"
                }
            }), this.drawer.close()
        }, this.render = function() {
            var e = this;
            if (this.state.enabled) {
                this.drawer || this.createDrawer();
                var t = (0, r.default)(a.default.render(this.attr.template)).filter(this.attr.drawerBodySelector)[0],
                    i = (0, r.default)(a.default.render(this.attr.template, {
                        insightTerm: this.state.insightTerm
                    })).filter(this.attr.drawerFooterSelector)[0];
                this.drawer.render({
                    titleText: (0, n.default)("Insights"),
                    bodyEl: t,
                    footerEl: i
                }), this.createContents();
                var s = (0, r.default)(i).find(".js-drawer-action");
                s.on("click", function() {
                    return e.handleButtonClick()
                })
            } else this.drawer && (this.getPanel().empty(), this.drawer.close(), this.destroyContents())
        }, this.makeContents = function() {
            if (this.state.drawerIsOpen) {
                var e = (0, h.attach)(f.default, this.getPanel(), {
                        insightTerm: this.state.insightTerm
                    }),
                    t = e.teardownEvent;
                return t
            }
        }, this.createContents = function() {
            this.innerPanelTeardownEvent || (this.innerPanelTeardownEvent = this.makeContents())
        }, this.destroyContents = function() {
            this.innerPanelTeardownEvent && (this.trigger(this.innerPanelTeardownEvent), this.innerPanelTeardownEvent = null)
        }, this.getPanel = function() {
            if (this.drawer) return (0, r.default)(this.drawer.el).find(this.attr.insightsPanelSelector)
        }, this.componentWillTeardown = function() {
            this.drawer && this.drawer.remove(), this.destroyContents()
        }, this.subscribeDataDrawerFeatureFlag = function() {
            var e = this;
            this.observe(d.betaAndInsights$).subscribe(function(t) {
                var i = t.betaEnabled,
                    s = t.insightsEnabled,
                    n = Boolean(i || s);
                e.mergeState({
                    enabled: n
                }), T(n ? "add" : "remove")
            })
        }, this.panelParent = function() {
            if (this.drawer) return (0, r.default)(this.drawer.el).find(this.attr.drawerBodySelector).parent()
        }, this.scrollHandler = function() {
            w({
                action: "scroll"
            }), (0, r.default)(this).off("scroll", this.scrollHandler)
        }, this.createDrawer = function() {
            var e = this;
            this.drawer = new c.default, this.on(document, "uiShowDataDrawer", function(t, i) {
                var s = i.insightTerm;
                e.mergeState({
                    insightTerm: s
                }), e.drawer.open()
            }), this.drawer.on(c.default.events.BEFORE_OPEN, function() {
                e.panelParent().on("scroll", e.scrollHandler), e.mergeState({
                    drawerIsOpen: !0
                })
            }), this.drawer.on(c.default.events.AFTER_CLOSE, function() {
                e.panelParent().off("scroll", e.scrollHandler), e.destroyContents(), e.mergeState({
                    drawerIsOpen: !1
                })
            })
        }
    })
}, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = v(i(83)),
        n = v(i(43)),
        r = v(i(7)),
        a = v(i(3)),
        o = v(i(0)),
        c = v(i(1)),
        l = v(i(8)),
        u = v(i(12)),
        d = v(i(107)),
        h = v(i(1900)),
        m = v(i(1901)),
        f = v(i(1908)),
        p = i(139),
        g = i(612);

    function v(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.default = u.default.mixin(function() {
        this.attributes({
            template: "insights/insights_panel",
            noDataTemplate: "insights/no_data",
            mainChartSelector: ".js-insights-main-chart",
            demographicsAgeSelector: ".js-demographics-age",
            topRelatedSelector: ".js-top-related",
            insightTerm: null,
            noDataSelector: ".js-no-data"
        }), this.initialState({
            demographics: null,
            relatedWords: null,
            mainChartData: [],
            terms: [],
            endTime: new Date,
            startTime: new Date(new Date - (0, p.daysAgoInMilliseconds)(1))
        }), this.addChartDataForTerm = function(e) {
            var t = this,
                i = e.term,
                s = e.startTime,
                n = e.endTime,
                a = (0, p.convertDateToSeconds)(s),
                c = (0, p.convertDateToSeconds)(n);
            return this.getTimeseries({
                search_term: i,
                start_time: a,
                end_time: c,
                granularity: this.getGranularity(a, c)
            }).then(function(e) {
                var s = t.state.mainChartData.some(function(e) {
                    return e.label === i
                });
                s ? t.replaceData((0, r.default)({
                    term: i
                }, {
                    data: e.data
                })) : t.addData(e.data)
            }).catch(function(e) {
                (0, o.default)(document).trigger("metric", {
                    key: "insights-panel:timeseries-failure:" + e.message
                })
            })
        }, this.getGranularity = function(e, t) {
            var i = (t - e) / 60 / 60;
            return i <= 12 ? "minutes" : i <= 48 ? "hours" : "days"
        }, this.addData = function(e) {
            this.mergeState({
                mainChartData: [].concat((0, n.default)(this.state.mainChartData), [e])
            })
        }, this.replaceData = function(e) {
            var t = e.term,
                i = e.data,
                s = this.state.mainChartData.map(function(e) {
                    return e.label === t ? i : e
                });
            this.mergeState({
                mainChartData: s
            })
        }, this.removeChartDataForTerm = function(e) {
            var t = this.state.mainChartData.filter(function(t) {
                return t.label !== e
            });
            return this.mergeState({
                mainChartData: t
            }), t
        }, this.updateChartTerms = function(e) {
            if (e.length > this.state.terms.length) {
                var t = c.default.difference(e, this.state.terms)[0];
                this.addChartDataForTerm({
                    term: t,
                    startTime: this.state.startTime,
                    endTime: this.state.endTime
                }), this.trigger("scribeEvent", {
                    terms: {
                        page: "insights_panel",
                        section: "input",
                        element: "token",
                        action: "add"
                    }
                })
            } else {
                var i = c.default.difference(this.state.terms, e)[0];
                this.removeChartDataForTerm(i), this.trigger("scribeEvent", {
                    terms: {
                        page: "insights_panel",
                        section: "input",
                        element: "token",
                        action: "remove"
                    }
                })
            }
            this.mergeState({
                terms: e
            })
        }, this.updateChartDateRange = function(e) {
            var t = this,
                i = e.startDate,
                s = e.endDate;
            this.state.terms.forEach(function(e) {
                t.addChartDataForTerm({
                    term: e,
                    startTime: i,
                    endTime: s
                })
            }), this.mergeState({
                startTime: i,
                endTime: s
            })
        }, this.componentDidInitialize = function() {
            this.initialRender(), this.fetchRelatedWordsData(this.attr.insightTerm), this.fetchDemographics({
                term: this.attr.insightTerm
            }), this.setupChildComponents(), this.updateChartTerms([this.attr.insightTerm]), this.trigger("scribeEvent", {
                terms: {
                    page: "insights_panel",
                    action: "impression"
                }
            })
        }, this.setupChildComponents = function() {
            this.setupChartWithControls(), this.setupDemographics(), this.setupRelatedWords()
        }, this.setupChartWithControls = function() {
            var e = this,
                t = this.connect(m.default, {
                    mapStateToProps: function(t) {
                        return {
                            chartData: t.mainChartData,
                            updateChartTerms: function(t) {
                                e.updateChartTerms(t)
                            },
                            updateChartDateRange: function(t) {
                                e.updateChartDateRange(t)
                            }
                        }
                    }
                });
            this.attachChild(t, this.select("mainChartSelector"), {
                title: (0, a.default)("Tweet volume for") + " " + this.attr.insightTerm,
                initialTerms: [this.attr.insightTerm],
                minDate: new Date(this.state.startTime - (0, p.daysAgoInMilliseconds)(30)),
                maxDate: this.state.endTime
            })
        }, this.setupDemographics = function() {
            var e = this.connect(h.default, {
                mapStateToProps: function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        t = e.demographics;
                    return t
                }
            });
            this.attachChild(e, this.select("demographicsAgeSelector"), {
                title: (0, a.default)("Age")
            })
        }, this.setupRelatedWords = function() {
            var e = this.connect(f.default, {
                mapStateToProps: function(e) {
                    var t = e.relatedWords;
                    return t || {}
                }
            });
            this.attachChild(e, this.select("topRelatedSelector"))
        }, this.getTimeseries = function(e) {
            if (!e) return s.default.reject(new Error("getTimeseries requires params"));
            var t = g.insights + "/timeseries.json";
            return d.default.promised(t, {
                params: e
            })
        }, this.fetchRelatedWordsData = function(e) {
            var t = this;
            d.default.request(g.insights + "/related_keywords.json", {
                params: {
                    seed_keyword: e,
                    num_related_keywords: 5
                }
            }).addCallbacks(function(e) {
                t.mergeState({
                    relatedWords: e.data
                })
            }, function(e) {
                t.mergeState({
                    relatedWords: {}
                })
            })
        }, this.fetchDemographics = function(e) {
            var t = this,
                i = e.term;
            e.startTime, e.endTime;
            d.default.request(g.insights + "/demographics.json", {
                params: {
                    search_term: i
                }
            }).addCallbacks(function(e) {
                t.mergeState({
                    demographics: e.data
                })
            }, function(e) {
                t.mergeState({
                    demographics: {}
                })
            })
        }, this.initialRender = function() {
            var e = l.default.render(this.attr.template);
            this.$node.html(e)
        }, this.render = function() {
            if (this.state.demographics && this.state.relatedWords) {
                var e = 0 === c.default.get(this.state.demographics, "age.length", 0) && 0 === c.default.get(this.state.relatedWords, "keywords.length", 0);
                if (e) {
                    var t = l.default.render(this.attr.noDataTemplate, {
                        insightTerm: this.attr.insightTerm
                    });
                    this.select("noDataSelector").html(t)
                } else this.select("noDataSelector").empty()
            }
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = l(i(84)),
        n = l(i(32)),
        r = l(i(3)),
        a = l(i(1)),
        o = l(i(8)),
        c = l(i(12));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = c.default.mixin(function() {
        this.attributes({
            template: "insights/demographics",
            title: null
        }), this.shouldComponentUpdate = function(e) {
            return !1 === a.default.isEqual(this.props, e)
        }, this.getPrettyAgeName = function(e) {
            var t = {
                Age13To17: (0, r.default)("13 to 17"),
                Age18To24: (0, r.default)("18 to 24"),
                Age25To34: (0, r.default)("25 to 34"),
                Age35To44: (0, r.default)("35 to 44"),
                Age45To54: (0, r.default)("45 to 54"),
                Age55To64: (0, r.default)("55 to 64"),
                AgeOver65: (0, r.default)("Over 65")
            };
            return t[e] || ""
        }, this.getAgeInsights = function() {
            var e = this,
                t = a.default.get(this.props, "age", []);
            return t.map(function(t, i) {
                var r = e.getPrettyAgeName((0, n.default)(t)[0]),
                    a = (0, s.default)(t)[0];
                return {
                    name: r,
                    percentage: a,
                    ordinal: i + 1
                }
            })
        }, this.render = function() {
            var e = this.getAgeInsights();
            if (e.length) {
                var t = this.attr.title,
                    i = o.default.render(this.attr.template, {
                        ageInsights: e,
                        title: t
                    });
                this.$node.html(i)
            } else this.$node.empty()
        }
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = f(i(7)),
        n = f(i(3)),
        r = f(i(12)),
        a = f(i(8)),
        o = f(i(358)),
        c = f(i(1903)),
        l = f(i(70)),
        u = f(i(1905)),
        d = i(243),
        h = f(i(610)),
        m = i(139);

    function f(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.default = r.default.mixin(function() {
        this.attributes({
            template: "chart_with_controls",
            gridChartSelector: ".js-insights-grid-chart",
            datePickerSelector: ".js-insights-date-picker",
            title: void 0,
            chartTermsSelector: ".js-chart-terms",
            initialTerms: void 0,
            minDate: void 0,
            maxDate: void 0
        }), this.componentDidInitialize = function() {
            this.initialRender(), this.attachDatePicker(), this.attachTermsInput(), this.attachChart()
        }, this.initialRender = function() {
            var e = a.default.render(this.attr.template, {
                title: this.attr.title
            });
            this.$node.html(e)
        }, this.render = function() {}, this.attachChart = function() {
            var e = this,
                t = this.connect(o.default, {
                    mapStateToProps: function() {
                        return {
                            chartData: e.props.chartData
                        }
                    }
                });
            this.attachChild(t, this.select("gridChartSelector"))
        }, this.createDatePicker = function(e) {
            var t = e.minDate,
                i = e.maxDate;
            return new c.default({
                dateRangeOptions: {
                    datePickerOptions: {
                        minDate: t,
                        maxDate: i
                    },
                    customPresetText: "Custom",
                    defaultPresetFunction: this.lastDay.bind(this),
                    presets: [{
                        text: (0, n.default)("Last hour"),
                        fn: this.lastHour.bind(this)
                    }, {
                        text: (0, n.default)("Last 3 hours"),
                        fn: this.last3Hours.bind(this)
                    }, {
                        text: (0, n.default)("Last 24 hours"),
                        fn: this.lastDay.bind(this)
                    }, {
                        text: (0, n.default)("Last 48 hours"),
                        fn: this.last2Days.bind(this)
                    }, {
                        text: (0, n.default)("Last 7 days"),
                        fn: this.last7Days.bind(this)
                    }, {
                        text: (0, n.default)("Last 30 days"),
                        fn: this.last30Days.bind(this)
                    }]
                },
                targetLabelText: function(e, t, i) {
                    return i || (0, l.default)(e).format("ll") + " - " + (0, l.default)(t).format("ll")
                }
            })
        }, this.attachDatePicker = function() {
            var e = this,
                t = this.attr,
                i = t.minDate,
                s = t.maxDate;
            this.datePicker = this.createDatePicker({
                minDate: i,
                maxDate: s
            }), this.datePicker.$el.addClass("Button--small"), this.select("datePickerSelector").append(this.datePicker.$el), this.datePicker.dateRange.on(h.default.events.CHANGE, function(t, i) {
                e.props.updateChartDateRange(i), e.scribeEvent({
                    section: "date_picker",
                    element: "date_range",
                    action: "change"
                })
            }), this.datePicker.dateRange.on(h.default.events.PRESET_SELECT, function(t, i) {
                e.scribeEvent({
                    section: "date_picker",
                    element: "preset",
                    action: "click"
                }, {
                    value: i.text
                })
            })
        }, this.attachTermsInput = function() {
            var e = this,
                t = this.select("chartTermsSelector");
            this.tokenInput = new u.default({
                placeholderText: (0, n.default)("Add terms to compare"),
                tokenSelected: function() {
                    return !0
                },
                value: this.attr.initialTerms,
                maxLength: 4,
                tokenColor: d.getNamedChartColor
            }), this.tokenInput.on(u.default.events.CHANGE, function(t) {
                e.props.updateChartTerms(t.detail), e.scribeEvent({
                    section: "input",
                    element: "token",
                    action: "change"
                })
            }), t.append(this.tokenInput.el)
        }, this.lastHour = function() {
            var e = this.attr.maxDate,
                t = new Date(this.attr.maxDate - (0, m.hoursAgoInMilliseconds)(1));
            return {
                endDate: e,
                startDate: t
            }
        }, this.last3Hours = function() {
            var e = this.attr.maxDate,
                t = new Date(this.attr.maxDate - (0, m.hoursAgoInMilliseconds)(3));
            return {
                endDate: e,
                startDate: t
            }
        }, this.lastDay = function() {
            var e = this.attr.maxDate,
                t = new Date(this.attr.maxDate - (0, m.daysAgoInMilliseconds)(1));
            return {
                endDate: e,
                startDate: t
            }
        }, this.last2Days = function() {
            var e = this.attr.maxDate,
                t = new Date(this.attr.maxDate - (0, m.daysAgoInMilliseconds)(2));
            return {
                endDate: e,
                startDate: t
            }
        }, this.last7Days = function() {
            var e = this.attr.maxDate,
                t = new Date(this.attr.maxDate - (0, m.daysAgoInMilliseconds)(7));
            return {
                endDate: e,
                startDate: t
            }
        }, this.last30Days = function() {
            var e = this.attr.maxDate,
                t = new Date(this.attr.maxDate - (0, m.daysAgoInMilliseconds)(30));
            return {
                endDate: e,
                startDate: t
            }
        }, this.scribeEvent = function(e, t) {
            this.trigger("scribeEvent", {
                terms: (0, s.default)({
                    page: "insights_panel"
                }, e),
                data: (0, s.default)({}, t)
            })
        }
    })
}, , , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = c(i(13)),
        n = c(i(10)),
        r = c(i(11)),
        a = c(i(14)),
        o = c(i(15));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var l = function(e) {
        function t() {
            return (0, n.default)(this, t), (0, a.default)(this, (t.__proto__ || (0, s.default)(t)).apply(this, arguments))
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "_deleteLastToken",
            value: function() {
                var e = this._getState().value,
                    t = e.length - 1,
                    i = e[t];
                if (void 0 !== i && 0 !== t) {
                    var s = this._tokenIdAccessor(i, t);
                    this._deleteTokensWithIds([s])
                }
            }
        }, {
            key: "_deleteFocusedTokens",
            value: function(e) {
                var t = this._getState(),
                    i = t.focusedTokenIds,
                    s = t.value[0],
                    n = i.filter(function(e) {
                        return e !== s
                    });
                this._deleteTokensWithIds(n, e)
            }
        }]), t
    }(c(i(1906)).default);
    t.default = l
}, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = c(i(1)),
        n = c(i(12)),
        r = c(i(8)),
        a = c(i(358)),
        o = i(243);

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.default = n.default.mixin(function() {
        this.attributes({
            template: "insights/related_words",
            limit: 12
        }), this.shouldComponentUpdate = function(e) {
            return !1 === s.default.isEqual(this.props, e)
        }, this.render = function() {
            var e = s.default.get(this.props, "keywords", []);
            if (e.length) {
                var t = this.buildRows(e),
                    i = r.default.render(this.attr.template, {
                        rows: t
                    });
                this.$node.html(i), this.attachSparklines(t)
            } else this.$node.empty()
        }, this.buildRows = function(e) {
            return e.slice(0, this.attr.limit).map(function(e, t) {
                return {
                    key: "sparkline-related-" + t,
                    word: e.label,
                    ordinal: t + 1,
                    volume: TD.util.truncateNumber(e.total_tweet_volume),
                    chartData: {
                        label: e.label,
                        data: e.data
                    }
                }
            })
        }, this.attachSparklines = function(e) {
            var t = this;
            e.forEach(function(e, i) {
                var s = "sparkline-related-" + i,
                    n = "#js-sparkline-" + s,
                    r = t.connect(a.default, {
                        mapStateToProps: function() {
                            return {
                                chartData: [e.chartData]
                            }
                        }
                    });
                t.attachChild(r, t.$node.find(n), {
                    props: {
                        chartOptions: (0, o.makeSparklineDefaults)(),
                        displayLegend: !1,
                        chartHeight: "32px"
                    }
                })
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SendFeedbackButtonReact = void 0;
    var s = T(i(7)),
        n = T(i(13)),
        r = T(i(10)),
        a = T(i(11)),
        o = T(i(14)),
        c = T(i(15)),
        l = i(6),
        u = T(l),
        d = T(i(244)),
        h = i(155),
        m = i(36),
        f = i(159),
        p = T(i(3)),
        g = i(12),
        v = i(58);

    function T(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var w = function(e) {
        function t() {
            return (0, r.default)(this, t), (0, o.default)(this, (t.__proto__ || (0, n.default)(t)).apply(this, arguments))
        }
        return (0, c.default)(t, e), (0, a.default)(t, [{
            key: "render",
            value: function() {
                var e = this;
                return u.default.createElement(f.Observe, {
                    observable: m.tweetdeckBeta$
                }, function(t) {
                    return t ? (0, v.getTwitterLoginAccount)().isProtected ? null : u.default.createElement(d.default, null, function(t) {
                        var i = "light" === t,
                            n = {
                                borderBottomLeftRadius: 20,
                                borderBottomRightRadius: 20,
                                borderTopLeftRadius: 0,
                                borderTopRightRadius: 0,
                                position: "absolute",
                                bottom: "20%",
                                zIndex: 1,
                                right: 0,
                                transform: [{
                                    translateX: 51
                                }, {
                                    rotate: "90deg"
                                }],
                                height: "auto",
                                minHeight: "auto",
                                padding: "0.6em 1em"
                            };
                        n = i ? (0, s.default)({}, n, {
                            borderWidth: 1
                        }) : n;
                        var r = (0, p.default)("Send feedback");
                        return u.default.createElement(h.FloatingActionButton, {
                            accessibilityLabel: r,
                            label: r,
                            icon: u.default.createElement(l.Fragment, null),
                            color: i ? "blue" : "white",
                            backgroundColor: i ? "white" : "blue",
                            style: n,
                            testID: "sendFeedbackButton",
                            onPress: e.props.showSendFeedbackModal
                        })
                    }) : null
                })
            }
        }]), t
    }(l.Component);
    t.default = (0, g.reactToUiBase)(w);
    t.SendFeedbackButtonReact = w
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SendFeedbackReact = void 0;
    var s = p(i(13)),
        n = p(i(10)),
        r = p(i(11)),
        a = p(i(14)),
        o = p(i(15)),
        c = i(6),
        l = p(c),
        u = p(i(3)),
        d = i(12),
        h = i(155),
        m = p(i(161)),
        f = i(1911);

    function p(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var g = function(e) {
        function t() {
            var e, i, r, o;
            (0, n.default)(this, t);
            for (var c = arguments.length, l = Array(c), u = 0; u < c; u++) l[u] = arguments[u];
            return i = r = (0, a.default)(this, (e = t.__proto__ || (0, s.default)(t)).call.apply(e, [this].concat(l))), r.state = {
                canSend: !1,
                feedback: "",
                feedbackSent: !1
            }, o = i, (0, a.default)(r, o)
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "handleChange",
            value: function(e) {
                this.setState({
                    feedback: e.target.value
                })
            }
        }, {
            key: "canSend",
            value: function() {
                return this.state.feedback.trim().length > 0
            }
        }, {
            key: "sendFeedback",
            value: function() {
                var e = this;
                return (0, f.send)(this.state.feedback).then(function(t) {
                    e.setState({
                        feedbackSent: !0,
                        feedbackError: !1
                    })
                }).catch(function(t) {
                    e.setState({
                        feedbackError: !0
                    })
                })
            }
        }, {
            key: "render",
            value: function() {
                return l.default.createElement("div", {
                    className: "padding-v--10 txt-center padding-h--50 width--430"
                }, l.default.createElement("div", {
                    className: "padding-b--20"
                }, l.default.createElement(m.default, {
                    "data-testid": "icon",
                    name: "twitter-bird",
                    fontSize: 24,
                    color: "twitter-blue"
                })), l.default.createElement("p", {
                    "data-testid": "text",
                    className: "padding-b--20 txt-size--18 txt-bold"
                }, this.state.feedbackSent ? (0, u.default)("Thanks for your feedback!") : l.default.createElement(c.Fragment, null, (0, u.default)("Tell us about your experience"), l.default.createElement("br", null), (0, u.default)("using TweetDeck"))), this.state.feedbackError ? l.default.createElement("p", {
                    "data-testid": "errorText",
                    className: "padding-v--10 margin-v--10 txt-size--12 bg-color-twitter-red color-twitter-white br--4"
                }, " ", (0, u.default)("Looks like your feedback wasn't sent. Please try again.")) : null, this.state.feedbackSent ? null : l.default.createElement("textarea", {
                    onChange: this.handleChange.bind(this),
                    className: "margin-b--10 height--180",
                    placeholder: (0, u.default)("Enter your feedback here"),
                    maxLength: 1e3,
                    "data-testid": "textarea"
                }), l.default.createElement("div", {
                    className: "flex flex-justify-content--flex-center padding-v--10"
                }, this.state.feedbackSent ? l.default.createElement(h.Button, {
                    type: "primary",
                    size: "large",
                    onPress: this.props.closeModal,
                    label: (0, u.default)("Close"),
                    "data-testid": "closeButton"
                }, (0, u.default)("Close")) : l.default.createElement(h.Button, {
                    type: "primary",
                    size: "large",
                    onPress: this.sendFeedback.bind(this),
                    disabled: !this.canSend(),
                    label: (0, u.default)("Send"),
                    "data-testid": "sendButton"
                }, (0, u.default)("Send"))))
            }
        }]), t
    }(l.default.Component);
    t.default = (0, d.reactToUiBase)(g);
    t.SendFeedbackReact = g
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.send = void 0;
    var s = r(i(47)),
        n = r(i(107));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.send = function(e) {
        var t = TD.config,
            i = t.twitter_api_base + "/" + t.twitter_api_version;
        return n.default.promised(i + "/strato/column/None//tweetdeck/sendFeedback", {
            method: "POST",
            params: (0, s.default)(e)
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(5));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = [i(1913), i(1914), i(1915), i(1918), i(1919), i(1920), i(1922), i(1923), i(1924), i(1925), i(1926), i(1927), i(1928), i(1929), i(1931), i(1933), i(1934), i(1936), i(1937), i(1938), i(1939), i(1940), i(1941), i(1942), i(1943), i(1944), i(1945), i(1946), i(1947), i(1955), i(1956), i(1957), i(1958), i(1959), i(1960), i(1961), i(1962), i(1963), i(1964), i(1965), i(1966), i(1967), i(1973), i(1975), i(1976), i(1977), i(1979), i(1980), i(1981), i(1982), i(1983), i(1984), i(1985), i(1986), i(1987), i(1988), i(1989), i(1990), i(1991), i(1992)];
    e.exports = n.default.component(function() {
        this.after("initialize", function() {
            s.default.invoke(a, "attachTo", this.$node)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component,
        n = i(598).store;
    e.exports = s(function() {
        function e(e) {
            var t;
            try {
                t = n.getJSON(e)
            } catch (t) {
                return void TD.sync.util.stateLog("Error parsing JSON for storage key", e)
            }
            this.trigger(document, "dataStorageItem", {
                name: e,
                value: t
            })
        }
        this.get = function(t, i) {
            i.names && i.names.forEach(e.bind(this)), i.name && e.call(this, i.name)
        }, this.set = function(e, t) {
            for (var i in t)
                if (t.hasOwnProperty(i)) try {
                    n.setJSON(i, t[i])
                } catch (e) {
                    e.code === DOMException.QUOTA_EXCEEDED_ERR ? this.trigger(document, "dataStorageFull", {
                        name: i,
                        value: t[i]
                    }) : this.trigger(document, "dataStorageSetError", {
                        name: i,
                        value: t[i]
                    })
                }
        }, this.after("initialize", function() {
            this.on("dataStorageSet", this.set), this.on("dataStorageGet", this.get)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(94),
        n = o(s),
        r = i(5),
        a = o(i(37));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, r.component)(a.default, function() {
        this.after("initialize", function() {
            (0, s.startPollingForSettings)(), this.on("ddgImpression", this.handleImpression), this.provideResource("/1.1/help/settings.json", (0, n.default)())
        }), this.handleImpression = function(e, t) {
            TD.controller.stats.experimentImpression(t.name, t.bucket)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5),
        n = c(i(37)),
        r = c(i(142)),
        a = c(i(1916)),
        o = c(i(1917));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, s.component)(function() {
        this.after("initialize", function() {
            this.provideResource("advanced_filters", a.default), this.provideResource("account.settings", o.default)
        })
    }, n.default, r.default)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s, n = i(613),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = TD.config.twitter_api_base + "/1.1/mutes/advanced_filters.json",
        o = (0, r.default)(a);
    t.default = o
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s, n = i(613),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = TD.config.twitter_api_base + "/1.1/account/settings.json",
        o = (0, r.default)(a);
    t.default = o
}, function(e, t, i) {
    "use strict";
    var s = a(i(85)),
        n = a(i(20)),
        r = i(64);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = s.default.mixin(n.default, function() {
        this.attributes({
            experimentId: "tweetdeck_uiv_7739"
        }), this.after("initialize", function() {
            this.observe(this.requestResource("/1.1/help/settings.json")).pluck("config", this.attr.experimentId, "value").filter(function(e) {
                return void 0 !== e
            }).take(1).subscribe(this.setupExperiment.bind(this))
        }), this.setupExperiment = function() {
            this.on(document, "imageInVisibleColumn", this.ddgImpression)
        }, this.ddgImpression = function() {
            this.trigger("ddgImpression", {
                name: this.attr.experimentId,
                bucket: (0, r.getExperimentBucket)(this.attr.experimentId)
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(85)),
        n = a(i(20)),
        r = i(64);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = s.default.mixin(n.default, function() {
        this.attributes({
            experimentId: "live_engagement_in_column_8020"
        }), this.after("initialize", function() {
            this.observe(this.requestResource("/1.1/help/settings.json")).pluck("config", this.attr.experimentId, "value").filter(function(e) {
                return void 0 !== e
            }).take(1).subscribe(this.setupExperiment.bind(this))
        }), this.setupExperiment = function() {
            this.on(document, "columnWithTweetsInView", this.ddgImpression)
        }, this.ddgImpression = function() {
            this.trigger("ddgImpression", {
                name: this.attr.experimentId,
                bucket: (0, r.getExperimentBucket)(this.attr.experimentId)
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5),
        n = i(38),
        r = i(96),
        a = i(1921);
    e.exports = (0, s.component)(r, function() {
        this.attributes({
            logoutTimeout: 1e4
        }), this.initialState(a.fromJS.bind(a, {
            badAccounts: {}
        })), this.after("initialize", function() {
            this.on(document, "dataTwitterAccountAccessSuccess", this.handleAccessSuccess), this.on(document, "dataTwitterAccountAccessDenied", this.handleAccessDenied), this.after("stateChanged", this.handleStateChanged)
        }), this.handleAccessSuccess = function(e, t) {
            var i = t.account.getKey();
            this.state.hasIn(["badAccounts", i]) && (clearTimeout(this.state.getIn(["badAccounts", i, "logoutTimeoutId"])), this.replaceState(this.state.deleteIn(["badAccounts", i])))
        }, this.handleAccessDenied = function(e, t) {
            var i = t.account.getKey();
            if (!this.state.hasIn(["badAccounts", i])) {
                var s = this.addBadAccountFromEventData(this.state, t);
                this.replaceState(s), (0, n.getClientByAccountKey)(i).getHomeTimeline(null, null, 1)
            }
        }, this.handleStateChanged = function(e) {
            var t = this.getBadAccount(e);
            t ? this.trigger("uiShowAccountAccessDeniedBanner", t.get("eventData").toJS()) : this.trigger("uiHideAccountAccessDeniedBanner")
        }, this.addBadAccountFromEventData = function(e, t) {
            var i = t.account.getKey(),
                s = {
                    eventData: t,
                    logoutTimeoutId: t.isLoginAccount ? setTimeout(this.signOut.bind(this), this.attr.logoutTimeout) : null
                };
            return e.mergeDeepIn(["badAccounts", i], s)
        }, this.getBadAccount = function(e) {
            return e.get("badAccounts").reduce(function(e, t) {
                return t.getIn(["eventData", "isLoginAccount"]) ? t : e
            })
        }, this.signOut = function() {
            TD.storage.accountController.getCookieAccount() ? this.trigger(document, "uiReload") : this.trigger(document, "uiLogout", {
                allSessions: !0
            })
        }
    })
}, , function(e, t, i) {
    "use strict";
    var s = h(i(0)),
        n = h(i(1)),
        r = i(5),
        a = h(i(37)),
        o = h(i(20)),
        c = h(i(29)),
        l = h(i(49)),
        u = i(58),
        d = i(38);

    function h(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, r.component)(o.default, a.default, function() {
        this.attributes({
            accountUpdateDebounce: 50
        }), this.after("initialize", function() {
            this.on(document, "TD.ready", this.initializeAccountsState), this.on(document, "uiNeedsSingleAccountStatus", this.handleNeedsSingleAccountStatus), this.accountsStream = new c.default.BehaviorSubject((0, u.getTwitterAccounts)()), this.stateStream = this.accountsStream.map(u.filterAccountsWithClient).distinctUntilChanged(n.default.isEqual).map(function(e) {
                return {
                    accounts: e,
                    defaultAccount: e.find(function(e) {
                        return e.isDefault
                    }),
                    loginAccount: e.find(function(e) {
                        return e.isTwoginAccount
                    })
                }
            }), this.provideResource("accounts.state", this.stateStream), this.observe(this.stateStream).pluck("defaultAccount").filter(Boolean).distinctUntilChanged(l.default.shallowEquals()).subscribe(this.broadcastClient.bind(this)), this.subscription = s.default.subscribe("/storage/client/default_account_changed", this.pushAccounts.bind(this)), this.subscriptionToAccountChange = s.default.subscribe("/storage/account/change", this.pushAccounts.bind(this)), this.on(document, "dataAccountWhitelist dataContributeeInviteSuccess dataClientsUpdated", this.pushAccounts.bind(this)), this.on(document, "uiAccountAction", this.handleAccountAction), this.on(document, "dataContributorActionSuccess", this.handleContributorActionSuccess), this.on(document, "dataTwitterAccountAccessDenied", this.handleTwitterAccountAccessDenied), this.on(document, "dataTwitterAccountAccessSuccess", this.handleTwitterAccountAccessSuccess)
        }), this.before("teardown", function() {
            s.default.unsubscribe(this.subscription), s.default.unsubscribe(this.subscriptionToAccountChange), this.accountsStream.unsubscribe()
        }), this.initializeAccountsState = function() {
            this.pushAccounts()
        }, this.getAndSendAccount = function(e) {
            var t = (0, u.getAccount)(e);
            this.sendAccount(t)
        }, this.pushAccounts = function() {
            this.accountsStream.next((0, u.getTwitterAccounts)())
        }, this.broadcastClient = function() {
            this.trigger("dataTwitterClientChanged", {
                client: (0, d.getTwitterClient)()
            })
        }, this.handleAccountAction = function(e, t) {
            switch (t.action) {
                case "rewriteColumns":
                    if (!TD.decider.get("enable_rewrite_columns")) break;
                    var i = this.chooseNextAvailableAccount((0, u.getAccountsForService)("twitter"), t.accountKey);
                    (0, u.getDefaultAccount)().accountKey === t.accountKey && (0, u.setDefaultAccount)(i.accountKey), this.rewriteColumns(t.accountKey, i.accountKey), (0, u.removeAccount)(t.accountKey);
                    break;
                case "remove":
                    (0, u.removeAccount)(t.accountKey);
                    break;
                case "setDefault":
                    (0, u.setDefaultAccount)(t.accountKey)
            }
        }, this.handleContributorActionSuccess = function(e, t) {
            var i = (0, u.getTwitterLoginAccount)();
            if (i) switch (t.request.action) {
                case "remove":
                    t.request.userId === i.userId && (0, u.removeAccount)(t.request.accountKey);
                    break;
                case "update":
                    t.request.userId === i.userId && (0, u.setIsAdmin)(t.request.accountKey, t.request.isAdmin)
            }
        }, this.handleNeedsSingleAccountStatus = function() {
            this.trigger("dataSingleAccountStatus", {
                isSingleAccount: 1 === (0, u.getTwitterAccounts)().length
            })
        }, this.handleTwitterAccountAccessDenied = function(e, t) {
            var i = t.account;
            i && i.setPrivate("isAccessDenied", !0)
        }, this.handleTwitterAccountAccessSuccess = function(e, t) {
            var i = t.account;
            i && i.getPrivate("isAccessDenied") && (i.setPrivate("isAccessDenied", !1), this.trigger("dataTwitterAccountAccessEnabled", {
                accountKey: i.getKey()
            }))
        }, this.rewriteColumns = function(e, t) {
            this.trigger("dataAccountsRewriteColumns", {
                sourceAccountKey: e,
                targetAccountKey: t
            })
        }, this.chooseNextAvailableAccount = function(e, t) {
            return e.find(function(e) {
                return e.accountKey !== t
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = d(i(1)),
        n = i(5),
        r = d(i(20)),
        a = d(i(96)),
        o = d(i(37)),
        c = d(i(49)),
        l = i(58),
        u = i(38);

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, n.component)(a.default, function() {
        this.initialState({}), this.after("initialize", function() {
            var e = this;
            this.observe(this.requestResource("accounts.state")).pluck("accounts").flatMap(s.default.identity).filter(this.shouldFetchAccount.bind(this)).do(this.makeSetStateFetchingAccount(!0).bind(this)).flatMap(c.default.makeFromDeferred(function(t) {
                return e.fixAccount(t)
            })).do(this.makeSetStateFetchingAccount(!1).bind(this)).publish().connect()
        }), this.fixAccount = function(e) {
            var t = (0, l.getTwitterLoginAccount)(),
                i = TD.core.defer.succeed();
            return i.addCallbackWith(this, function() {
                return this.fetchUser(e.userId, t.accountKey)
            }), i.addCallbackWith(this, function(t) {
                (0, l.updateAccount)(e.accountKey, t)
            }), i.addBoth(s.default.constant(e)), i
        }, this.fetchUser = function(e, t) {
            var i = new TD.core.defer.Deferred,
                s = (0, u.getClientByAccountKey)(t);
            return s.showUser(e, null, i.callback.bind(i), i.errback.bind(i)), i
        }, this.shouldFetchAccount = function(e) {
            var t = this.state;
            return e.isMissingUserData && !t[e.userId]
        }, this.makeSetStateFetchingAccount = function(e) {
            return function(t) {
                var i = {};
                i[t.userId] = e, this.mergeState(i)
            }
        }
    }, r.default, o.default)
}, function(e, t, i) {
    "use strict";
    var s = c(i(3)),
        n = c(i(1)),
        r = c(i(0)),
        a = c(i(20)),
        o = i(23);

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var l = i(29),
        u = i(5).component,
        d = i(37),
        h = i(96);
    e.exports = u(h, function() {
        this.attributes({
            collectionUrlRegex: /twitter.com\/([a-z0-9_]+)\/timelines\/(\d+)/i
        }), this.initialState({}), this.after("initialize", function() {
            this.on(document, "dataCustomTimelineSuccess", this.handleCollection), this.on(document, "dataCustomTimelineError", this.handleCollectionError);
            var e = this.observe(this.requestResource("accounts.state")),
                t = l.Observable.fromEvent((0, r.default)(document), "uiAddColumnsByUrl", function(e, t) {
                    return t
                }).flatMap(function(e) {
                    return e.urls
                }).map(this.matchCollectionUrl, this).filter(Boolean).map(this.makeCollectionFromRegexMatch, this).filter(this.isNewCollection, this).share();
            this.stateUpdater = t.map(function(e) {
                var t = {};
                return t[e.id] = e, t
            }).subscribe(this.mergeState.bind(this)), this.fetcher = t.withLatestFrom(e, function(e, t) {
                return {
                    collection: e,
                    accountsState: t
                }
            }).subscribe(this.fetchCollection.bind(this))
        }), this.after("teardown", function() {
            this.stateUpdater.unsubscribe(), this.fetcher.unsubscribe()
        }), this.matchCollectionUrl = function(e) {
            return e.match(this.attr.collectionUrlRegex)
        }, this.makeCollectionFromRegexMatch = function(e) {
            return {
                id: "custom-" + e[2],
                screenName: e[1].toLowerCase()
            }
        }, this.isNewCollection = function(e) {
            return !this.state[e.id]
        }, this.fetchCollection = function(e) {
            var t = this.bestAccountForCollection(e.collection, e.accountsState);
            this.trigger(document, "uiNeedsCustomTimeline", {
                id: e.collection.id,
                account: t.accountKey
            })
        }, this.bestAccountForCollection = function(e, t) {
            var i = t.accounts.filter(function(t) {
                return e.screenName === t.screenName.toLowerCase()
            })[0];
            return i || t.defaultAccount
        }, this.handleCollection = function(e, t) {
            var i = t.result.id;
            this.state[i] && (this.addCollectionColumn(t.result), this.removeCollection(i))
        }, this.handleCollectionError = function(e, t) {
            var i = t.action.id;
            this.state[i] && ((0, o.showErrorNotification)({
                message: (0, s.default)("Could not add Collection")
            }), this.removeCollection(i))
        }, this.removeCollection = function(e) {
            this.replaceState(n.default.omit(this.state, e))
        }, this.addCollectionColumn = function(e) {
            var t = new TD.components.TemporaryColumn;
            t.customTimeline(e), t.populate(), t.makePermanent(), setTimeout(function() {
                t.destroy()
            }, 0)
        }
    }, a.default, d)
}, function(e, t, i) {
    "use strict";
    var s = r(i(47)),
        n = r(i(1));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).component;
    e.exports = a(function() {
        this.deleteColumn = function(e, t) {
            var i = t.columnId;
            i && TD.controller.columnManager.deleteColumn(i)
        }, this.moveColumn = function(e, t) {
            var i = t.columnId,
                s = t.action;
            i && s && TD.controller.columnManager.move(i, s)
        }, this.handleUiNeedsSerializedColumn = function(e, t) {
            var i = TD.controller.columnManager.get(t.columnId),
                r = {
                    feeds: n.default.map(i.getFeeds(), function(e) {
                        return e.state
                    }),
                    filters: i.getSearchFilter().toJSONObject()
                };
            this.trigger("dataSerializedColumn", {
                columnId: t.columnId,
                column: r,
                url: "https://tweetdeck.twitter.com/#column=" + TD.core.base64.encode((0, s.default)(r))
            })
        }, this.after("initialize", function() {
            this.on(document, "uiDeleteColumnAction", this.deleteColumn), this.on(document, "uiMoveColumnAction", this.moveColumn), this.on(document, "uiNeedsSerializedColumn", this.handleUiNeedsSerializedColumn)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(1)),
        n = i(162),
        r = a(i(20));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = i(5).component,
        c = i(37),
        l = i(29),
        u = i(49);
    e.exports = o(c, function() {
        this.attributes({
            pollIntervalMs: 9e5
        }), this.after("initialize", function() {
            var e = this,
                t = l.Observable.combineLatest([this.observe(l.Observable.timer(0, this.attr.pollIntervalMs)), this.observe(this.requestResource("accounts.state")).pluck("defaultAccount").filter(Boolean).distinctUntilKeyChanged("accountKey"), u.fromEventOnce(this.$node, "TD.ready")], function(e, t) {
                    return t
                }).flatMap(function(t) {
                    return u.fromDeferred(e.getConfiguration(t)).catch(function(e) {
                        return l.Observable.empty()
                    })
                }).startWith({
                    dm_text_character_limit: 1e4,
                    characters_reserved_per_media: 23,
                    max_media_per_upload: 1,
                    non_username_paths: ["about", "account", "accounts", "activity", "all", "announcements", "anywhere", "api_rules", "api_terms", "apirules", "apps", "auth", "badges", "blog", "business", "buttons", "contacts", "devices", "direct_messages", "download", "downloads", "edit_announcements", "faq", "favorites", "find_sources", "find_users", "followers", "following", "friend_request", "friendrequest", "friends", "goodies", "help", "home", "i", "im_account", "inbox", "invitations", "invite", "jobs", "list", "login", "logo", "logout", "me", "mentions", "messages", "mockview", "newtwitter", "notifications", "nudge", "oauth", "phoenix_search", "positions", "privacy", "public_timeline", "related_tweets", "replies", "retweeted_of_mine", "retweets", "retweets_by_others", "rules", "saved_searches", "search", "sent", "sessions", "settings", "share", "signup", "signin", "similar_to", "statistics", "terms", "tos", "translate", "trends", "tweetbutton", "twttr", "update_discoverability", "users", "welcome", "who_to_follow", "widgets", "zendesk_auth", "media_signup"],
                    photo_size_limit: 3145728,
                    photo_sizes: {
                        thumb: {
                            h: 150,
                            resize: "crop",
                            w: 150
                        },
                        small: {
                            h: 480,
                            resize: "fit",
                            w: 340
                        },
                        medium: {
                            h: 1200,
                            resize: "fit",
                            w: 600
                        },
                        large: {
                            h: 2048,
                            resize: "fit",
                            w: 1024
                        }
                    },
                    short_url_length: 23,
                    transformedURLLength: 23,
                    client_event_url: "https://twitter.com/scribe"
                }).publishReplay(1).refCount().map(function(e) {
                    return "help_configuration_overlay" in TD.config ? s.default.merge(e, TD.config.help_configuration_overlay || {}) : e
                });
            this.provideResource("/1.1/help/configuration.json", t), this.observe(l.Observable.fromEvent(this.$node, "uiNeedsHelpConfiguration")).withLatestFrom(t, function(e, t) {
                return t
            }).subscribe(function(e) {
                this.trigger("dataHelpConfiguration", e)
            }.bind(this))
        }), this.getConfiguration = function(e) {
            return (0, n.makeTwitterRequest)(e.accountKey, "help/configuration.json").addCallback(function(e) {
                return e.data
            })
        }
    }, r.default)
}, function(e, t, i) {
    "use strict";
    var s, n = i(119),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(162);
    var o = i(5).component;
    e.exports = o(function() {
        this.attributes({}), this.after("initialize", function() {
            this.on(document, "uiNeedsContributees", this.handleUiNeedsContributees), this.on(document, "uiAcceptContributeeInvite", this.handleUiAcceptContributeeInvite), this.on(document, "uiRemoveContributee", this.handleUiRemoveContributee), this.on(document, "uiNeedsContributors", this.handleUiNeedsContributors), this.on(document, "uiContributorAction", this.handleUiContributorAction)
        }), this.triggerResult = function(e, t, i) {
            this.trigger(e, {
                request: t,
                response: i
            })
        };
        var e = function(e) {
            return {
                id: e.user.id_str,
                isAdmin: !!e.admin
            }
        };
        this.handleUiNeedsContributees = function(t, i) {
            var s = (0, a.makeTwitterRequest)(i.accountKey, "users/contributees/pending.json", {}),
                n = (0, a.makeTwitterRequest)(i.accountKey, "users/contributees.json", {}),
                o = TD.core.defer.gatherResults([s, n]);
            o.addCallback(function(t) {
                var s = (0, r.default)(t, 2),
                    n = s[0],
                    a = s[1],
                    o = a.data.map(e),
                    c = n.data.map(e);
                this.trigger("dataContributees", {
                    accountKey: i.accountKey,
                    contributees: o,
                    pending: c
                })
            }.bind(this))
        }, this.handleUiRemoveContributee = function(e, t) {
            var i = (0, a.makeTwitterRequest)(t.accountKey, "users/contributees/destroy.json", {
                method: "POST",
                params: {
                    user_id: t.userId
                }
            });
            i.addCallbacks(this.triggerResult.bind(this, "dataContributeeRemoveSuccess", t), this.triggerResult.bind(this, "dataContributeeRemoveError", t))
        }, this.handleUiAcceptContributeeInvite = function(e, t) {
            var i = this,
                s = (0, a.makeTwitterRequest)(t.accountKey, "users/contributees/accept.json", {
                    method: "POST",
                    params: {
                        user_id: t.userId
                    }
                });
            s.addCallbacks(function() {
                return i.trigger("dataContributeeAcceptSuccess", t)
            }, function() {
                return i.triggerResult("dataContributeeAcceptError", t)
            })
        }, this.handleUiNeedsContributors = function(e, t) {
            var i = (0, a.makeTwitterRequest)(t.accountKey, "users/contributors/pending.json", {}),
                s = (0, a.makeTwitterRequest)(t.accountKey, "users/contributors.json", {}),
                n = TD.core.defer.gatherResults([i, s]);
            n.addCallback(function(e) {
                var i = (0, r.default)(e, 2),
                    s = i[0],
                    n = i[1],
                    a = this.processContributorsData(n.data, t.accountKey),
                    o = this.processContributorsData(s.data, t.accountKey);
                this.trigger("dataContributors", {
                    accountKey: t.accountKey,
                    contributors: a,
                    pending: o
                })
            }.bind(this)), n.addErrback(this.triggerResult.bind(this, "dataContributorsError", t))
        }, this.processContributorsData = function(e, t) {
            var i = TD.storage.accountController.get(t);
            return e.map(function(e) {
                return {
                    user: new TD.services.TwitterUser(i).fromJSONObject(e.user, {
                        isContributor: !0
                    }),
                    isAdmin: e.admin
                }
            })
        }, this.handleUiContributorAction = function(e, t) {
            var i;
            t.userId ? i = TD.core.defer.succeed() : (i = TD.cache.twitterUsers.getByScreenName(t.screenName)).addCallback(function(e) {
                t.userId = e.id
            }), i.addCallback(this.performContributorAction.bind(this, t)), i.addCallbacks(this.triggerResult.bind(this, "dataContributorActionSuccess", t), this.triggerResult.bind(this, "dataContributorActionError", t))
        }, this.updateContributor = function(e) {
            var t = (0, a.makeTwitterRequest)(e.accountKey, "users/contributors/update.json", {
                method: "POST",
                params: {
                    user_id: e.userId,
                    admin: !!e.isAdmin
                }
            });
            return t
        }, this.removeContributor = function(e) {
            return (0, a.makeTwitterRequest)(e.accountKey, "users/contributors/destroy.json", {
                method: "POST",
                params: {
                    user_id: e.userId
                }
            })
        }, this.performContributorAction = function(e) {
            var t;
            switch (e.action && this.trigger("metric", {
                key: "contributors:data:action:" + e.action
            }), e.action) {
                case "add":
                case "update":
                    t = this.updateContributor(e);
                    break;
                case "remove":
                    t = this.removeContributor(e);
                    break;
                default:
                    t = TD.core.defer.fail()
            }
            return t
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(20));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(85),
        o = i(29);
    e.exports = a.mixin(function() {
        this.attributes({
            pollMs: 18e5
        }), this.after("initialize", function() {
            this.observe(o.Observable.timer(0, this.attr.pollMs)).subscribe(this.metricCookieSize.bind(this))
        }), this.metricCookieSize = function() {
            TD.util.metric("cookie-size:all:size", [document.cookie.length], "metric"), TD.util.metric("cookie-size:all:count", [document.cookie.split("; ").length], "metric");
            var e = document.cookie.match(/mp_.+?;/g);
            if (e) {
                var t = e.map(TD.util.pluck("length")),
                    i = t.reduce(s.default.add, 0);
                TD.util.metric("cookie-size:mixpanel:sizes", t, "metric"), TD.util.metric("cookie-size:mixpanel:count", [e.length], "metric"), TD.util.metric("cookie-size:mixpanel:total-size", [i], "metric")
            }
        }
    }, n.default)
}, function(e, t, i) {
    "use strict";
    var s = o(i(1930)),
        n = o(i(17)),
        r = i(38),
        a = i(5);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, a.component)(function() {
        this.attributes({
            widgetBaseURL: (0, s.default)("https://twitter.com/settings/widgets/new/{type}"),
            publishBaseURL: (0, s.default)("https://publish.twitter.com/"),
            collectionURL: (0, s.default)("https://twitter.com/{username}/timelines/{id}")
        }), this.openEmbedTimeline = function(e, t) {
            var i, s, a, o, c = {
                partner: "tweetdeck"
            };
            if (t && t.column && n.default.isEmbeddable(t.column)) {
                switch (s = t.column.getFeeds()[0], a = s.getMetadata(), n.default.getColumnType(t.column)) {
                    case n.default.columnMetaTypes.USERTWEETS:
                        i = this.attr.widgetBaseURL.expand({
                            type: "user"
                        }), a.id ? c.user_id = a.id : c.user_id = TD.storage.accountController.get(s.getAccountKey()).getUserID();
                        break;
                    case n.default.columnMetaTypes.FAVORITES:
                        i = this.attr.widgetBaseURL.expand({
                            type: "favorites"
                        }), a.id ? c.user_id = a.id : c.user_id = TD.storage.accountController.get(s.getAccountKey()).getUserID();
                        break;
                    case n.default.columnMetaTypes.LIST:
                        return i = this.attr.widgetBaseURL.expand({
                            type: "list"
                        }), c.list_id = a.listId, void TD.util.openURL(i, c);
                    case n.default.columnMetaTypes.SEARCH:
                        i = this.attr.widgetBaseURL.expand({
                            type: "search"
                        }), a.baseQuery && a.searchFilterData ? (o = new TD.vo.SearchFilter(a.searchFilterData), c.query = [a.baseQuery, o.getQueryString()].join(" ").trim()) : c.query = a.term;
                        break;
                    case n.default.columnMetaTypes.CUSTOMTIMELINE:
                        i = this.attr.publishBaseURL.expand(), c.query = this.attr.collectionURL.expand({
                            username: (0, r.getAccountData)().screenName,
                            id: a.id.replace(/[^\d]*/, "")
                        })
                }
                TD.util.openURL(i, c)
            }
        }, this.after("initialize", function() {
            this.on(document, "uiEmbedTimelineAction", this.openEmbedTimeline)
        })
    })
}, , function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = i(5),
        r = o(i(1932)),
        a = i(23);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, n.component)(function() {
        this.createMoment = function(e, t) {
            var i = t.collection,
                n = i.id,
                o = i.name,
                c = i.description,
                l = i.user,
                u = r.default.create({
                    title: o,
                    curatorId: l.id,
                    collectionId: n,
                    description: c
                });
            u.addCallbacks(function(e) {
                var t = e.moment.id;
                TD.util.openURL("https://momentmaker.twitter.com/moment-maker/" + t)
            }, function(e) {
                (0, a.showErrorNotification)({
                    message: (0, s.default)("Error creating Moment")
                })
            })
        }, this.after("initialize", function() {
            this.on(document, "uiCreateMomentAction", this.createMoment)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(192));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = TD.config,
        o = a.twitter_api_base + "/" + a.twitter_api_version;
    e.exports = {
        create: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                t = o + "/moments/create.json",
                i = e.title,
                r = e.description,
                a = e.collectionId,
                c = e.curatorId,
                l = TD.storage.accountController.getAccountFromId(c);
            if (!e.collectionId || !e.curatorId) throw Error("Required field is missing");
            var u = {
                    params: {
                        title: i || (0, s.default)("New Moment"),
                        description: r || (0, s.default)("Add a description"),
                        scratch_buffer_timeline_id: a.replace("custom-", ""),
                        curator_id: c,
                        is_production_only: !1
                    },
                    headers: {
                        "content-type": "application/json",
                        "X-Twitter-UTCOffset": "+0400"
                    },
                    handleSuccess: !0,
                    method: "POST",
                    account: l
                },
                d = TD.net.ajax.request(t, u);
            return d.addCallbacks(function(e) {
                return {
                    moment: e.data.created_moment.moment
                }
            }, function(e) {
                return n.default.processErrorResponse(t, u, e, l)
            }), d
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = i(38),
        n = i(5).component;
    e.exports = n(function() {
        this.handleEmbeddedTweetFactory = function(e) {
            return function(t) {
                t.request = e, this.trigger(document, "dataEmbeddedTweet", t)
            }
        }, this.handleErrorFactory = function(e) {
            return function() {
                var t = {
                    request: e
                };
                this.trigger(document, "dataEmbeddedTweetError", t)
            }
        }, this.getEmbeddedTweet = function(e, t) {
            t && t.tweetID && (0, s.getTwitterClient)().getEmbeddedTweet(t.tweetID, t.hideThread, t.hideMedia, t.maxWidth, this.handleEmbeddedTweetFactory(t).bind(this), this.handleErrorFactory(t).bind(this))
        }, this.after("initialize", function() {
            this.on(document, "uiNeedsEmbeddedTweet", this.getEmbeddedTweet)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(5),
        o = i(1935);
    e.exports = (0, a.component)(function() {
        this.after("initialize", function() {
            this.on(document, "uiHidingMessageBanner", this.dismissMessage), this.on(document, "dataMessages", this.handleMessages)
        }), this.handleMessages = function(e, t) {
            var i = t.messages;
            i && (i = (i = (i = i.filter(this.satisfiesPlatformRequirements, this)).filter(this.satisfiesVersionRequirements, this)).filter(this.hasNotBeenDismissed, this)).length && this.trigger("dataMessage", i[0])
        }, this.dismissMessage = function(e, t) {
            this.updateIdsForSeenMessages(), this.idsForSeenMessages.push(t.id), TD.settings.setIdsForSeenMessages(this.idsForSeenMessages)
        }, this.satisfiesPlatformRequirements = function(e) {
            if (e.target && e.target.platform) {
                var t = TD.util.getAppEnv();
                return r.default.include(e.target.platform, t)
            }
            return !0
        }, this.satisfiesVersionRequirements = function(e) {
            return !e.target || !e.target.version || (0, o.appSatisfiesVersionRequirements)(e.target.version)
        }, this.hasNotBeenDismissed = function(e) {
            if (e.message) {
                this.updateIdsForSeenMessages();
                var t = this.idsForSeenMessages.every(function(t) {
                    return e.message.id !== t
                });
                return t
            }
            return !1
        }, this.updateIdsForSeenMessages = function() {
            var e = TD.settings.getIdsForSeenMessages();
            this.idsForSeenMessages = r.default.union(this.idsForSeenMessages, e)
        }
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.appSatisfiesVersionRequirements = function(e) {
        var t = TD.version,
            i = e.split(" ");
        return r.default.all(i, function(e) {
            var i = e.match(/[<=>]*/)[0],
                s = e.substr(i.length),
                n = [];
            r.default.contains(i, ">") ? n.push(1) : r.default.contains(i, "<") && n.push(-1), (r.default.contains(i, "=") || 0 === i.length) && n.push(0);
            var a = TD.util.versionComparator(t, s);
            return r.default.contains(n, a)
        })
    };
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        }
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.send = function(e) {
            this.trigger(document, "dataPreferredAccount", {
                account: e
            })
        }, this.getPreferredTwitterAccount = function() {
            this.ready && this.send(TD.storage.accountController.getPreferredAccount("twitter"))
        }, this.tdReady = function() {
            this.ready = !0, this.getPreferredTwitterAccount(), this.off(document, "TD.ready", this.tdReady)
        }, this.after("initialize", function() {
            this.on(document, "uiNeedsPreferredAccount", this.getPreferredTwitterAccount), this.on(document, "TD.ready", this.tdReady), r.default.subscribe("/storage/account/new", this.getPreferredTwitterAccount.bind(this)), r.default.subscribe("/storage/client/default_account_changed", this.getPreferredTwitterAccount.bind(this))
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5),
        n = i(38);
    e.exports = (0, s.component)(function() {
        this.handleRelationship = function(e) {
            this.trigger(document, "dataRelationship", e)
        }, this.handleError = function(e) {
            return function() {
                this.trigger(document, "dataRelationshipError", e)
            }
        }, this.getRelationship = function(e, t) {
            t && t.account && t.screenName && (0, n.getClientByAccount)(t.account).showFriendship(t.account.getUserID(), null, t.screenName, this.handleRelationship.bind(this), this.handleError(t).bind(this))
        }, this.after("initialize", function() {
            this.on(document, "uiNeedsRelationship", this.getRelationship)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5),
        n = i(38);
    e.exports = (0, s.component)(function() {
        this.after("initialize", function() {
            this.on("uiNeedsFavoriteState", this.getFavoriteState), this.on("uiFavoriteTweet", this.handleFavoriteTweet), this.on("uiUnfavoriteTweet", this.handleUnfavoriteTweet)
        }), this.handleErrorFactory = function(e, t) {
            return function(i) {
                this.trigger(document, t, {
                    request: e,
                    error: i
                })
            }.bind(this)
        }, this.handleFavoriteState = function(e) {
            this.trigger("dataFavoriteState", {
                tweetId: e.id,
                isFavorite: e.isFavorite,
                accountKey: e.account.getKey()
            })
        }, this.handleFavoriteTweet = function(e, t) {
            (0, n.getClientByAccountKey)(t.accountKey).favorite(t.tweetId, this.handleFavoriteSuccessFactory(t, !0), this.handleErrorFactory(t, "dataFavoriteError"))
        }, this.handleUnfavoriteTweet = function(e, t) {
            (0, n.getClientByAccountKey)(t.accountKey).unfavorite(t.tweetId, this.handleFavoriteSuccessFactory(t, !1), this.handleErrorFactory(t, "dataFavoriteError"))
        }, this.handleFavoriteSuccessFactory = function(e, t) {
            return function() {
                this.trigger("dataFavoriteState", {
                    tweetId: e.tweetId,
                    accountKey: e.accountKey,
                    isFavorite: t
                })
            }.bind(this)
        }, this.getFavoriteState = function(e, t) {
            (0, n.getClientByAccountKey)(t.accountKey).show(t.tweetId, this.handleFavoriteState.bind(this), this.handleErrorFactory(t, "dataFavoriteStateError").bind(this))
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = d(i(0)),
        n = d(i(1)),
        r = d(i(29)),
        a = d(i(85)),
        o = d(i(20)),
        c = d(i(142)),
        l = d(i(19)),
        u = i(356);

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = a.default.mixin(o.default, c.default, function() {
        this.attributes({
            streamImpressionScribeQuery: "deck:*:*:stream:*:results"
        }), this.initialState({
            jsExecutionTime: Date.now(),
            interactiveTime: 0,
            firstTweetTime: 0,
            isUsingGraphQL: !1
        }), this.after("initialize", function() {
            var e = this;
            this.on(document, "dataUsingGraphQL", function(t, i) {
                e.mergeState({
                    isUsingGraphQL: i.isUsingGraphQL
                })
            }), this.observe(this.getInteractiveObservable()).subscribe(function() {
                e.mergeState({
                    interactiveTime: Date.now()
                })
            }), this.observe(this.getFirstTweetObservable()).subscribe(function() {
                e.mergeState({
                    firstTweetTime: Date.now()
                })
            }), this.observableState.map(this.stateToResult).filter(this.resultLooksOk).do(this.triggerResult.bind(this)).subscribe(this.done.bind(this))
        }), this.getInteractiveObservable = function() {
            return r.default.Observable.fromEvent((0, s.default)(document), "TD.ready").first()
        }, this.getFirstTweetObservable = function() {
            return r.default.Observable.fromEvent((0, s.default)(document), "scribing", function(e, t) {
                return t
            }).pluck("terms").filter(u.scribeQueryMatch.bind(null, this.attr.streamImpressionScribeQuery)).first()
        }, this.stateToResult = function(e) {
            return {
                timeToInteractive: e.interactiveTime - e.jsExecutionTime,
                timeToFirstTweet: e.firstTweetTime - e.jsExecutionTime
            }
        }, this.resultLooksOk = function(e) {
            return e.timeToInteractive > 0 && e.timeToFirstTweet > 0
        }, this.triggerResult = function(e) {
            var t = this.state.isUsingGraphQL ? "graphql" : "non-graphql";
            l.default.metric("time-to-interactive", [e.timeToInteractive], "metric"), l.default.metric("time-to-interactive:" + t, [e.timeToInteractive], "metric"), l.default.metric("time-to-first-tweet", [e.timeToFirstTweet], "metric"), l.default.metric("time-to-first-tweet:" + t, [e.timeToFirstTweet], "metric")
        }, this.done = function() {
            n.default.defer(this.teardown.bind(this))
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(23);
    var o = i(5).component;
    e.exports = o(function() {
        this.getTwitterUser = function(e, t) {
            t && (t.id ? TD.cache.twitterUsers.getById(t.id) : TD.cache.twitterUsers.getByScreenName(t.screenName)).addCallbacks(this.handleTwitterUser, this.errorHandlerFactory(t.screenName), null, null, this, this)
        }, this.errorHandlerFactory = function(e) {
            return function(t) {
                var i = t.req.errors,
                    s = (0, r.default)("Sorry, we couldn't retrieve user @{{1}}", {
                        1: e
                    }),
                    n = !1;
                i && i.forEach(function(e) {
                    63 === e.twitterErrorCode ? n = !0 : e.message && (s += " - " + e.message)
                }), n || (0, a.showErrorNotification)({
                    message: s
                }), this.trigger("dataTwitterUserError", {
                    screenName: e
                })
            }.bind(this)
        }, this.handleTwitterUser = function(e) {
            e && e.account && this.trigger(document, "dataTwitterUser", e)
        }, this.after("initialize", function() {
            this.on(document, "uiNeedsTwitterUser", this.getTwitterUser)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.attributes({
            actions: {
                follow: {
                    userAction: "follow",
                    errorEvent: "dataFollowActionError"
                },
                unfollow: {
                    userAction: "unfollow",
                    errorEvent: "dataUnfollowActionError"
                },
                block: {
                    userAction: "block",
                    errorEvent: "dataBlockActionError"
                },
                unblock: {
                    userAction: "unblock",
                    errorEvent: "dataUnblockActionError"
                },
                mute: {
                    userAction: "mute",
                    errorEvent: "dataMuteActionError"
                },
                unmute: {
                    userAction: "unmute",
                    errorEvent: "dataUnmuteActionError"
                },
                report: {
                    userAction: "report",
                    errorEvent: "dataReportActionError"
                },
                reportSpam: {
                    userAction: "reportSpam",
                    errorEvent: "dataReportSpamActionError"
                },
                reportCompromised: {
                    userAction: "reportCompromised",
                    errorEvent: "dataReportCompromisedActionError"
                }
            }
        }), this.error = function(e, t) {
            return function(i) {
                var s;
                s = {
                    request: t,
                    response: i
                }, this.trigger(document, e.errorEvent, s)
            }
        }, this.success = function(e, t) {
            return function(i) {
                this.trigger("dataFollowStateChange", {
                    action: e,
                    request: t,
                    response: i
                })
            }
        }, this.takeAction = function(e, t, i) {
            var s = this.success(e, i).bind(this),
                n = this.error(e, i).bind(this),
                r = e.userAction;
            try {
                switch (r) {
                    case "block":
                        i.twitterUser.block(i.account, !1, s, n);
                        break;
                    case "unblock":
                        i.twitterUser.unblock(i.account, s, n);
                        break;
                    case "follow":
                        i.twitterUser.follow(i.account, s, n, !0);
                        break;
                    case "unfollow":
                        i.twitterUser.unfollow(i.account, s, n, !1);
                        break;
                    case "mute":
                        i.twitterUser.mute(i.account).addCallbacks(s, n);
                        break;
                    case "unmute":
                        i.twitterUser.unmute(i.account).addCallbacks(s, n);
                        break;
                    case "reportSpam":
                        i.twitterUser.block(i.account, !0, s, n, !1)
                }
            } catch (e) {
                this.error()
            }
        }, this.bindAction = function(e) {
            return this.takeAction.bind(this, e)
        }, this.after("initialize", function() {
            this.on(document, "uiFollowAction uiFollowProtectedUserAction", this.bindAction(this.attr.actions.follow)), this.on(document, "uiUnfollowAction", this.bindAction(this.attr.actions.unfollow)), this.on(document, "uiBlockAction", this.bindAction(this.attr.actions.block)), this.on(document, "uiUnblockAction", this.bindAction(this.attr.actions.unblock)), this.on(document, "uiMuteAction", this.bindAction(this.attr.actions.mute)), this.on(document, "uiUnmuteAction", this.bindAction(this.attr.actions.unmute)), this.on(document, "uiReportSpamAction", this.bindAction(this.attr.actions.reportSpam)), this.on(document, "uiReportCompromisedAction", this.bindAction(this.attr.actions.reportCompromised))
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(1)),
        n = a(i(85)),
        r = i(356);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = n.default.mixin(function() {
        this.attributes({
            typedFilterRegex: /OR|".*\s.*"|(^|\s)-\w|\w:\w/,
            aggregationPeriod: 18e5,
            searchInitiatedScribeQuery: "deck:main::search_box:*:search",
            engagementScribeQueries: ["deck:column:twitter:search:favorite:click", "deck:column:twitter:search:reply:click", "deck:column:twitter:search:retweet:click", "deck:column:twitter:search:tweet_to_user:click", "deck:column:twitter:search:send_a_dm_to_user:click", "deck:column:twitter:search:add_or_remove_from_lists:click", "deck:column:twitter:search:follow_or_unfollow_from_accounts:click", "deck:column:twitter:search:like_or_unlike_from_accounts:click", "deck:column:twitter:search:follow:click", "deck:column:twitter:search:link_to_this_tweet:click", "deck:column:twitter:search:share_via_dm:click", "deck:column:twitter:search:share_via_email:click", "deck:column:twitter:search:add_to_collection:click", "deck:column:twitter:search:embed_this_tweet:click", "deck:column:twitter:search:permalink:click"]
        }), this.initialState({
            isRecording: !1,
            engagementCount: 0,
            usesTypedFilters: !1,
            usesUIFilters: !1
        }), this.after("initialize", function() {
            var e = this,
                t = s.default.throttle(this.recordResult.bind(this), this.attr.aggregationPeriod, {
                    leading: !1,
                    trailing: !0
                });
            this.on(document, "dataSearchPoll", this.handleSearchPoll), this.on(document, "scribing", function(i, s) {
                (0, r.scribeTermsMatch)(s.terms, e.attr.searchInitiatedScribeQuery) && (e.startRecording(), t())
            }), this.on(document, "scribing", function(t, i) {
                if (e.state.isRecording) {
                    var s = e.attr.engagementScribeQueries.some(r.scribeTermsMatch.bind(null, i.terms));
                    s && e.incrementCounter()
                }
            })
        }), this.startRecording = function() {
            this.mergeState({
                isRecording: !0
            })
        }, this.stopRecording = function() {
            this.mergeState({
                isRecording: !1
            })
        }, this.resetCounter = function() {
            this.mergeState({
                engagementCount: 0
            })
        }, this.incrementCounter = function() {
            this.mergeState({
                engagementCount: this.state.engagementCount + 1
            })
        }, this.handleSearchPoll = function(e, t) {
            var i = t.baseQuery,
                s = t.uiQuery;
            this.mergeState({
                usesTypedFilters: this.state.usesTypedFilters || this.attr.typedFilterRegex.test(i),
                usesUIFilters: this.state.usesUIFilters || Boolean(s)
            })
        }, this.recordResult = function() {
            var e = this.state.engagementCount;
            this.resetCounter(), this.stopRecording(), TD.decider.get("track_search_engagement") && this.trigger("metric", {
                type: "metric",
                key: ["search", "engagements", this.state.usesUIFilters ? "filter-ui" : "basic", this.state.usesTypedFilters ? "filter-typed" : "basic"].join(":"),
                value: [e]
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(142),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component,
        o = i(37);
    e.exports = a(o, r.default, function() {
        this.after("initialize", function() {
            this.on(document, "dataSettingsValues", this.handleDataSettingsValues), this.on(document, "uiNeedsSettings", this.handleUiNeedsSettings), this.on(document, "uiNavbarWidthChangeAction", this.handleNavbarWidthChange), this.provideResource("settings.state", this.observableState)
        }), this.handleDataSettingsValues = function(e, t) {
            this.mergeState(t)
        }, this.handleUiNeedsSettings = function() {
            this.settings = {
                navbarWidth: TD.settings.getNavbarWidth()
            }, this.trigger(document, "dataSettings", this.settings)
        }, this.handleNavbarWidthChange = function(e, t) {
            TD.settings.setNavbarWidth(t.navbarWidth), this.settings.navbarWidth = t.navbarWidth, this.trigger(document, "dataSettings", this.settings)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.attributes({
            updatePeriod: 500,
            aggregationPeriod: 1e4
        }), this.updateStreamCount = function(e, t) {
            this.streamCounter.incrementCounter(t.numStreamItems)
        }, this.after("initialize", function() {
            this.on(document, "dataReceivedStreamData", this.updateStreamCount), this.streamCounter = new TD.util.TpmCounter(this.attr.updatePeriod, this.attr.aggregationPeriod, "dataStreamRate")
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5),
        n = i(38);
    e.exports = (0, s.component)(function() {
        this.handleResponseFactory = function(e, t) {
            return function(i) {
                this.trigger(document, e, {
                    request: t,
                    result: i
                })
            }.bind(this)
        }, this.doUserSearch = function(e, t) {
            var i = (0, n.getTwitterClient)(),
                s = t.query;
            i ? i.userSearch(s, this.handleResponseFactory("dataUserSearch", t), this.handleResponseFactory("dataUserSearchError", t)) : this.handleResponseFactory("dataUserSearchError", t)()
        }, this.after("initialize", function() {
            this.on(document, "uiNeedsUserSearch", this.doUserSearch)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.saveRecentSearch = function(e, t) {
            TD.storage.clientController.client.addRecentSearch(t.query)
        }, this.getRecentSearches = function(e) {
            var t = {
                recentSearches: TD.storage.clientController.client.getRecentSearches()
            };
            this.trigger("dataRecentSearches", t)
        }, this.clearRecentSearches = function(e) {
            TD.storage.clientController.client.clearRecentSearches()
        }, this.removeRecentSearch = function(e, t) {
            TD.storage.clientController.client.removeRecentSearch(t.query)
        }, this.after("initialize", function() {
            this.on(document, "uiSearch uiSearchNoTemporaryColumn", this.saveRecentSearch), this.on(document, "uiRecentSearchClearAction", this.clearRecentSearches), this.on(document, "uiRecentSearchClearItem", this.removeRecentSearch), this.on(document, "uiNeedsRecentSearches", this.getRecentSearches)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = o(i(83)),
        n = o(i(1)),
        r = o(i(0)),
        a = i(38);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var c = i(5).component,
        l = i(1948),
        u = i(1949),
        d = i(1950),
        h = i(1951),
        m = i(1952),
        f = i(1953),
        p = i(1954);
    e.exports = c(function() {
        this.attributes({
            count: 5,
            limits: {
                default: 5,
                lists: 2
            },
            timing: {
                default: 150,
                search: 150,
                compose: 300
            },
            dataSourceToClient: {
                locations: p
            }
        }), this.after("initialize", function() {
            this.currentRequest = {}, this.datasources = {}, this.suggestions = {}, this.userPrefetchComplete = !1, this.getRemoteSuggestionsByType = n.default.reduce(this.attr.timing, function(e, t, i) {
                return e[i] = n.default.throttle(this._getRemoteSuggestions.bind(this), t, {
                    leading: !1
                }), e
            }, {}, this), this.on("uiNeedsTypeaheadSuggestions", this.getSuggestions), this.on("uiRecentSearchClearAction", this.updateSuggestions), this.on("uiRecentSearchClearItem", this.updateSuggestions), this.on("dataTypeaheadQueryReset", this.queryReset), this.on("dataTypeaheadUserPrefetchComplete", this.handleUserPrefetchComplete)
        }), this.handleUserPrefetchComplete = function() {
            this.userPrefetchComplete = !0
        }, this.getLimit = function(e) {
            return this.currentRequest.limits[e] || this.currentRequest.limits.default
        }, this.sendSuggestions = function(e) {
            this.trigger("dataTypeaheadSuggestions", {
                query: this.currentRequest.query,
                suggestions: e || this.dedupeSuggestions(this.suggestions),
                datasources: this.currentRequest.datasources,
                dropdownId: this.currentRequest.dropdownId
            })
        }, this.dedupeSuggestions = function(e) {
            var t = {};
            return (e = n.default.clone(e)).recentSearches = this.dedupeArray(e.recentSearches, null, t), e.savedSearches = this.dedupeArray(e.savedSearches, "query", t), e.topics = this.dedupeArray(e.topics, "topic", t), e
        }, this.dedupeArray = function(e, t, i) {
            return e && 0 !== e.length ? n.default.filter(e, function(e) {
                var s = t ? e[t] : e,
                    n = s.toLowerCase(),
                    r = !i[n];
                return i[n] = !0, r
            }) : e
        }, this.processTypeaheadData = function(e, t) {
            t.query === this.currentRequest.query && (t.datasources.forEach(function(t) {
                var i = this.datasources[t],
                    s = e[t],
                    n = this.getLimit(t);
                i && s && (i.processData(s), this.suggestions[t] = i.getSuggestions(this.currentRequest, n))
            }, this), this.sendSuggestions())
        }, this.updateSuggestions = function() {
            var e = new s.default(function(e) {
                this.userPrefetchComplete ? e() : this.$node.one("dataTypeaheadUserPrefetchComplete", e)
            }.bind(this));
            this.currentRequest && this.currentRequest.datasources && e.then(this.actuallyUpdateSuggestions.bind(this))
        }, this.actuallyUpdateSuggestions = function() {
            this.currentRequest.datasources && (this.currentRequest.datasources.forEach(function(e) {
                var t = this.datasources[e],
                    i = this.getLimit(e);
                if (t) {
                    var s = t.getSuggestions(this.currentRequest, i);
                    s && s.length > 0 && (this.suggestions[e] = s)
                }
            }, this), this.sendSuggestions())
        }, this.handleGetSuggestionsError = function() {
            this.trigger("dataTypeaheadSuggestionsError")
        }, this._getRemoteSuggestions = function() {
            var e = this.currentRequest,
                t = e.datasources,
                i = e.query,
                s = e.limits,
                n = !i || "" === i.trim();
            if (!n) {
                var r = 1 === t.length,
                    a = this.attr.dataSourceToClient.hasOwnProperty(t[0]);
                r && a ? this.getRemoteSuggestionsFromClient(t[0], i, s) : this.getRemoteSuggestionsFromTwitterClient()
            }
        }, this.getRemoteSuggestionsFromClient = function(e, t, i) {
            var s = this.attr.dataSourceToClient[e],
                n = s.search({
                    query: t,
                    maxResults: i[e]
                });
            n.addCallback(this.sendSuggestions.bind(this), this.handleGetSuggestionsError.bind(this))
        }, this.getRemoteSuggestionsFromTwitterClient = function() {
            var e = (0, a.getTwitterClient)();
            e.typeaheadSearch(this.currentRequest, this.processTypeaheadData.bind(this), this.handleGetSuggestionsError.bind(this))
        }, this.getSuggestions = function(e, t) {
            if (t.query !== this.currentRequest.query) {
                var i = r.default.extend({}, this.attr.limits, t.limits);
                this.currentRequest = {
                    accountKey: t.accountKey,
                    query: t.query,
                    datasources: t.datasources,
                    count: this.attr.count,
                    dropdownId: t.dropdownId,
                    limits: i
                }, this.suggestions = {}, this.updateSuggestions(), t.onlyLocalData || this.getRemoteSuggestions(t.type)
            }
        }, this.queryReset = function() {
            this.currentRequest = {}
        }, this.getRemoteSuggestions = function(e) {
            e = e || "default", this.attr.timing[e] || (e = "default");
            var t = this.getRemoteSuggestionsByType[e];
            if (!t) throw new Error("No matching remote suggestion debounce type.");
            return t()
        }
    }, l, u, d, h, m, f)
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(38);
    e.exports = function(e) {
        this.attributes({
            usersStorageLimit: 2500,
            storageUserHash: "typeaheadUserHash",
            storageUserLastPrefetch: "typeaheadUserLastPrefetch"
        }), this.after("initialize", function() {
            this.userAdjacencyList = {}, this.userHash = {}, this.blockedUserIds = {}, this.datasources = this.datasources || {}, this.datasources.users = {
                processData: this.processUserData.bind(this),
                getSuggestions: this.getUserSuggestions.bind(this)
            }, this.on(document, "dataStorageItem", this.processUserStorageItem), this.on(document, "TD.ready", this.loadUserData), this.on(document, "dataTwitterClientChanged", this.resetUserData), this.on(document, "dataStorageFull", this.pruneUsers)
        }), this.tokenize = function(e) {
            return e.trim().toLowerCase().split(TD.constants.regexps.tokenSeparator)
        }, this.overwriteUserdata = function(e) {
            this.userHash = {}, this.userAdjacencyList = {}, this.processUserData(e)
        }, this.processUserData = function(e) {
            r.default.each(e, function(e) {
                e.tokens = e.tokens.map(function(e) {
                    return (e = "string" == typeof e ? e : e.token).toLowerCase()
                }), 0 === e.tokens.length && (e.tokens = this.tokenize(e.name), e.tokens.push(e.screen_name), e.tokens.push(TD.util.atMentionify(e.screen_name)), e.tokens = e.tokens.map(function(e) {
                    return e.toLowerCase()
                })), delete e.location, delete e.connecting_user_ids, this.userHash[e.id_str] = e, e.tokens.forEach(function(t) {
                    var i = t.charAt(0);
                    void 0 === this.userAdjacencyList[i] && (this.userAdjacencyList[i] = []), -1 === this.userAdjacencyList[i].indexOf(e.id_str) && this.userAdjacencyList[i].push(e.id_str)
                }, this)
            }, this);
            var t = {};
            t[this.attr.storageUserHash] = this.userHash, this.trigger("dataStorageSet", t)
        }, this.processPrefetchUserData = function(e) {
            this.processUserData(e.users);
            var t = {};
            t[this.attr.storageUserLastPrefetch] = Date.now(), this.trigger("dataStorageSet", t), this.trigger("dataTypeaheadUserPrefetchComplete")
        }, this.prefetchUserSuggestions = function() {
            var e = (0, a.getTwitterClient)();
            e && e.typeaheadSearch({
                prefetch: !0,
                count: this.attr.usersStorageLimit
            }, this.processPrefetchUserData.bind(this), this.handleGetSuggestionsError.bind(this))
        }, this.pruneUsers = function() {
            var e = r.default.values(this.userHash);
            e.sort(this.userSortComparator), e = e.slice(0, Math.floor(e.length / 2)), this.overwriteUserdata(e)
        }, this.getUserSuggestions = function(e, t) {
            var i, s, n, r = [];
            return i = this.tokenize(e.query), s = this.getPotentiallyMatchingUserIds(i), n = this.getUsersFromIds(s), (r = n.filter(this.matchUsers(i))).sort(this.userSortComparator), r = r.slice(0, t)
        }, this.getPotentiallyMatchingUserIds = function(e) {
            var t = [];
            return e.map(function(e) {
                var i = this.userAdjacencyList[e.charAt(0)];
                i && (t = t.concat(i))
            }, this), t = r.default.uniq(t)
        }, this.getUsersFromIds = function(e) {
            var t = [];
            return e.forEach(function(e) {
                var i = this.userHash[e];
                i && !this.isUserBlocked(e) && t.push(i)
            }, this), t
        }, this.matchUsers = function(e) {
            return function(t) {
                var i = t.tokens,
                    s = e.every(function(e) {
                        var t = i.filter(function(t) {
                            return 0 === t.indexOf(e)
                        });
                        return t.length
                    });
                if (s) return t
            }
        }, this.userSortComparator = function(e, t) {
            var i = 0 !== e.rounded_graph_weight,
                s = 0 !== t.rounded_graph_weight;
            return i && !s ? -1 : s && !i ? 1 : i && s ? t.rounded_graph_weight - e.rounded_graph_weight : t.rounded_score - e.rounded_score
        }, this.isUserBlocked = function(e) {
            return !!this.blockedUserIds[e]
        }, this.processUserStorageItem = function(e, t) {
            switch (t.name) {
                case this.attr.storageUserHash:
                    this.processUserData(t.value);
                    break;
                case this.attr.storageUserLastPrefetch:
                    ("number" != typeof t.value || Date.now() - t.value > TD.constants.time.oneDay) && this.prefetchUserSuggestions()
            }
        }, this.loadUserData = function() {
            this.trigger("dataStorageGet", {
                names: [this.attr.storageUserHash, this.attr.storageUserLastPrefetch]
            });
            var e = (0, a.getTwitterClient)();
            e && (this.blockedUserIds = e.blocks)
        }, this.resetUserData = function(e, t) {
            t.client && (this.overwriteUserdata([]), this.blockedUserIds = t.client.blocks, this.prefetchUserSuggestions())
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = a(i(43)),
        n = a(i(1)),
        r = i(38);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = function() {
        this.attributes({
            storageTopicsHash: "typeaheadTopicsHash",
            storageTopicsLastPrefetch: "typeaheadTopicsLastPrefetch"
        }), this.tokenize = function(e) {
            return e.trim().toLowerCase().split(TD.constants.regexps.tokenSeparator)
        }, this.topicSortComparator = function(e, t) {
            return t.rounded_score - e.rounded_score
        }, this.overwriteTopics = function(e) {
            this.topicsHash = {}, this.topicsAdjacencyList = {}, this.processTopicData(e)
        }, this.processTopicData = function(e) {
            n.default.each(e, function(e) {
                var t, i = e.topic;
                this.topicsHash[i] = e, 0 === e.tokens.length && (t = this.tokenize(e.topic), e.tokens = t.map(function(e) {
                    return {
                        token: e.toLowerCase()
                    }
                })), e.tokens.forEach(function(e) {
                    var t = e.token.charAt(0).toLowerCase(),
                        s = this.topicsAdjacencyList[t] || []; - 1 === s.indexOf(i) && s.push(i), this.topicsAdjacencyList[t] = s
                }, this)
            }, this);
            var t = {};
            t[this.attr.storageTopicsHash] = this.topicsHash, this.trigger("dataStorageSet", t)
        }, this.processPrefetchTopicData = function(e) {
            this.processTopicData(e.topics), this.topicsLastPrefetch = Date.now();
            var t = {};
            t[this.attr.storageTopicsLastPrefetch] = this.topicsLastPrefetch, this.trigger("dataStorageSet", t)
        }, this.pruneTopics = function() {
            var e = n.default.values(this.topicsHash);
            e.sort(this.topicSortComparator), e = e.slice(0, Math.floor(e.length / 2)), this.overwriteTopics(e)
        }, this.getTopicSuggestions = function(e, t) {
            var i = e.query.toLowerCase(),
                r = [].concat((0, s.default)(this.topicsAdjacencyList[i.charAt(0)] || []), (0, s.default)(this.topicsAdjacencyList["#"] || [])).filter(function(e) {
                    var t = e.toLowerCase();
                    return 0 === t.indexOf(i) || 0 === t.indexOf("#" + i)
                }),
                a = this.getTopicObjectsFromStrings(n.default.uniq(r));
            return a.sort(this.topicSortComparator), a.slice(0, t)
        }, this.getTopicObjectsFromStrings = function(e) {
            var t = [];
            return e.forEach(function(e) {
                var i = this.topicsHash[e];
                i && t.push(i)
            }, this), t
        }, this.prefetchTopicsSuggestions = function() {
            (0, r.getTwitterClient)().typeaheadSearch({
                query: "",
                prefetch: !0,
                limit: 200,
                datasources: ["topics"]
            }, this.processPrefetchTopicData.bind(this), this.trigger.bind(this, "dataTypeaheadSuggestionsError"))
        }, this.processTopicStorageItem = function(e, t) {
            switch (t.name) {
                case this.attr.storageTopicsHash:
                    this.processTopicData(t.value);
                    break;
                case this.attr.storageTopicsLastPrefetch:
                    this.topicsLastPrefetch = t.value, (!this.topicsLastPrefetch || Date.now() - this.topicsLastPrefetch > TD.constants.time.oneDay) && this.prefetchTopicsSuggestions()
            }
        }, this.loadTopicsData = function() {
            this.trigger("dataStorageGet", {
                names: [this.attr.storageTopicsHash, this.attr.storageTopicsLastPrefetch]
            })
        }, this.resetTopicData = function(e, t) {
            t.client && (this.overwriteTopics([]), this.prefetchTopicsSuggestions())
        }, this.after("initialize", function() {
            this.topicsHash = {}, this.topicsAdjacencyList = {}, this.datasources = this.datasources || {}, this.datasources.topics = {
                getSuggestions: this.getTopicSuggestions.bind(this),
                processData: this.processTopicData.bind(this)
            }, this.on(document, "dataStorageItem", this.processTopicStorageItem), this.on(document, "TD.ready", this.loadTopicsData), this.on(document, "dataTwitterClientChanged", this.resetTopicData), this.on(document, "dataStorageFull", this.pruneTopics)
        })
    }
}, function(e, t, i) {
    "use strict";
    e.exports = function() {
        this.tokenize = function(e) {
            return e.trim().toLowerCase().split(TD.constants.regexps.tokenSeparator)
        }, this.getRecentSearchSuggestions = function(e, t) {
            if (this.trigger("uiNeedsRecentSearches"), !this.recentSearches) return [];
            var i = this.recentSearches,
                s = this.tokenize(e.query);
            return i.filter(function(e) {
                var t = this.tokenize(e);
                return this.recentSearchMatchesQuery(t, s)
            }, this).slice(0, t)
        }, this.recentSearchMatchesQuery = function(e, t) {
            return t.every(function(t) {
                return e.some(function(e) {
                    return 0 === e.indexOf(t)
                })
            })
        }, this.handleRecentSearches = function(e, t) {
            t && t.recentSearches && (this.recentSearches = t.recentSearches)
        }, this.processRecentSearchData = function() {}, this.after("initialize", function() {
            this.datasources = this.datasources || {}, this.datasources.recentSearches = {
                getSuggestions: this.getRecentSearchSuggestions.bind(this),
                processData: this.processRecentSearchData.bind(this)
            }, this.on(document, "dataRecentSearches", this.handleRecentSearches)
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = i(38);
    e.exports = function() {
        this.tokenize = function(e) {
            return e.trim().toLowerCase().split(TD.constants.regexps.tokenSeparator)
        }, this.savedSearchesComparator = function(e, t) {
            var i = e.query.toLowerCase(),
                s = t.query.toLowerCase();
            return (i > s) - (i < s)
        }, this.updateSavedSearches = function() {
            var e = Date.now() - TD.constants.time.oneHour;
            if (!this.savedSearchesLastFetch || this.savedSearchesLastFetch < e) {
                var t = (0, s.getClientsByService)("twitter");
                this.savedSearches = [], t.forEach(function(e) {
                    this.savedSearches = this.savedSearches.concat(e.searches)
                }, this), this.savedSearchesLastFetch = Date.now()
            }
        }, this.getSavedSearchSuggestions = function(e) {
            if ("" === e.query.trim()) return [];
            if (!e.datasources || !e.datasources.some(function(e) {
                    return "savedSearches" === e
                })) return [];
            var t = [],
                i = this.tokenize(e.query);
            return this.updateSavedSearches(), this.savedSearches.forEach(function(e) {
                var s = this.tokenize(e.query);
                this.savedSearchMatchesQuery(s, i) && t.push(e)
            }, this), t.sort(this.savedSearchesComparator), t.splice(this.attr.limit), t
        }, this.savedSearchMatchesQuery = function(e, t) {
            return t.every(function(t) {
                return e.some(function(e) {
                    return 0 === e.indexOf(t)
                })
            })
        }, this.processSavedSearchData = function() {}, this.after("initialize", function() {
            this.savedSearches = [], this.savedSearchesLastFetch = !1, this.datasources = this.datasources || {}, this.datasources.savedSearches = {
                getSuggestions: this.getSavedSearchSuggestions.bind(this),
                processData: this.processSavedSearchData.bind(this)
            }
        })
    }
}, function(e, t, i) {
    "use strict";
    e.exports = function() {
        this.getListSuggestions = function(e, t) {
            var i = e.query.trim().toLowerCase();
            return this.trigger("uiNeedsSubscribedLists"), this.lists ? this.lists.filter(function(e) {
                return -1 !== e.user.screenName.toLowerCase().indexOf(i) || -1 !== e.name.toLowerCase().indexOf(i)
            }, this).slice(0, t) : []
        }, this.handleSubscribedLists = function(e, t) {
            t && t.lists && (this.lists = t.lists)
        }, this.processListData = function() {}, this.after("initialize", function() {
            this.datasources = this.datasources || {}, this.datasources.lists = {
                getSuggestions: this.getListSuggestions.bind(this),
                processData: this.processListData.bind(this)
            }, this.on(document, "dataSubscribedLists", this.handleSubscribedLists)
        })
    }
}, function(e, t, i) {
    "use strict";
    e.exports = function() {
        this.getConversationsSuggestions = function(e, t) {
            if (e.accountKey) {
                var i = TD.controller.clients.getClient(e.accountKey).conversations.getAllConversations(),
                    s = new RegExp(TD.util.quotedForRegExp(e.query.trim()), "i"),
                    n = i.filter(function(e) {
                        return "GROUP_DM" === e.type && (s.test(e.name || "") || e.participants.some(r) || e.participants.some(a))
                    }, this);
                return n.sort(function(e, t) {
                    var i = e.participants.some(r),
                        s = e.participants.some(a),
                        n = t.participants.some(r),
                        o = t.participants.some(a),
                        c = !!e.name && r(e),
                        l = !!t.name && r(t);
                    return i && !n ? -1 : !i && n ? 1 : s && !o ? -1 : !s && o ? 1 : c && !l ? -1 : !c && l ? 1 : 0
                }).slice(0, t)
            }

            function r(e) {
                return s.test(e.name)
            }

            function a(e) {
                return s.test(e.screenName)
            }
        }, this.processConversationsData = function() {}, this.after("initialize", function() {
            this.datasources = this.datasources || {}, this.datasources.conversations = {
                getSuggestions: this.getConversationsSuggestions.bind(this),
                processData: this.processConversationsData.bind(this)
            }
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = r(i(119)),
        n = r(i(192));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = TD.config,
        o = a.twitter_api_base + "/" + a.twitter_api_version;

    function c(e) {
        return e.result.places.map(function(e) {
            var t = e.full_name,
                i = e.centroid,
                n = (0, s.default)(i, 2),
                r = n[0];
            return {
                fullName: t,
                lat: n[1],
                lng: r
            }
        })
    }
    e.exports = {
        search: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                t = o + "/geo/search.json",
                i = TD.storage.accountController.getDefault();
            if (!e.query) throw Error("Required field is missing");
            var s = {
                    params: {
                        query: e.query,
                        max_results: e.maxResults || 4,
                        granularity: e.granularity || "city"
                    },
                    handleSuccess: !0,
                    processor: c
                },
                r = TD.net.ajax.request(t, s);
            return r.addCallbacks(function(e) {
                return {
                    locations: n.default.processSuccessResponse(t, s, e, {
                        oauth: {
                            account: i
                        }
                    }).data
                }
            }, function(e) {
                return n.default.processErrorResponse(t, s, e, i)
            }), r
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = i(38),
        n = i(5).component;
    e.exports = n(function() {
        this.handleUserProfileSocialProofFactory = function(e) {
            return function(t) {
                t.request = e, this.trigger(document, "dataUserProfileSocialProof", t)
            }
        }, this.handleErrorFactory = function(e) {
            return function() {
                var t = {
                    request: e
                };
                this.trigger(document, "dataUserProfileSocialProofError", t)
            }
        }, this.getUserProfileSocialProofData = function(e, t) {
            t && t.screenName && (0, s.getTwitterClient)().getFollowingFollowersOf(t.screenName, this.handleUserProfileSocialProofFactory(t).bind(this), this.handleErrorFactory(t).bind(this))
        }, this.after("initialize", function() {
            this.on(document, "uiNeedsUserProfileSocialProof", this.getUserProfileSocialProofData)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(38),
        n = i(5).component;
    e.exports = n(function() {
        this.handleTwitterUsersFactory = function(e) {
            return function(t) {
                this.trigger("dataTwitterUsers", {
                    requestId: e,
                    users: t
                })
            }.bind(this)
        }, this.handleTwitterUsersErrorFactory = function(e) {
            return function() {
                this.trigger("dataTwitterUsersError", {
                    requestId: e
                })
            }.bind(this)
        }, this.getTwitterUsers = function(e, t) {
            this.twitterClient = this.twitterClient || (0, s.getTwitterClient)(), this.twitterClient.getUsersByIds(t.userIds, this.handleTwitterUsersFactory(t.requestId), this.handleTwitterUsersErrorFactory(t.requestId))
        }, this.after("initialize", function() {
            this.on("uiNeedsTwitterUsers", this.getTwitterUsers)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.getLists = function(e) {
            var t = TD.cache.lists.getAll();
            this.trigger(document, "dataSubscribedLists", {
                lists: t
            })
        }, this.after("initialize", function() {
            this.on(document, "uiNeedsSubscribedLists", this.getLists)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(0)),
        n = i(162),
        r = a(i(1));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = i(5).component;
    e.exports = o(function() {
        this.attributes({
            resources: {
                show: {
                    method: "GET",
                    url: "statuses/show/:id.json"
                },
                destroy: {
                    method: "POST",
                    url: "statuses/destroy/:id.json"
                },
                message: {
                    method: "POST",
                    url: "direct_messages/new.json"
                },
                reply: {
                    method: "POST",
                    url: "statuses/update.json"
                },
                tweet: {
                    method: "POST",
                    url: "statuses/update.json"
                },
                retweet: {
                    method: "POST",
                    url: "statuses/retweet/:id.json"
                }
            }
        }), this.after("initialize", function() {
            this.on(document, "uiSendTweet", this.handleSendTweet), this.on(document, "uiRetweet", this.handleRetweet), this.on(document, "uiUndoRetweet", this.handleUndoRetweet)
        }), this.getTweet = function(e) {
            var t, i = new TD.core.defer.Deferred;
            try {
                t = this.attr.resources.show, (0, n.makeTwitterApiCall)({
                    request: {
                        accountKey: e.accountKey
                    },
                    params: e.params,
                    resource: t.url.replace(":id", e.id),
                    method: t.method,
                    success: function(e) {
                        i.callback(e)
                    },
                    error: function(e) {
                        i.errback(e)
                    }
                })
            } catch (t) {
                i.errback({
                    request: e
                })
            }
            return i
        }, this.sendTweet = function(e) {
            var t, i, s;
            try {
                switch (t = this.attr.resources[e.type], e.type) {
                    case "message":
                        var a = e.messageRecipients && e.messageRecipients[0] && e.messageRecipients[0].id;
                        i = {
                            text: e.text,
                            user_id: a
                        }, s = function(e) {
                            return {
                                direct_message: e
                            }
                        };
                        break;
                    case "reply":
                        i = {
                            status: e.text,
                            in_reply_to_status_id: e.inReplyToStatusId,
                            auto_populate_reply_metadata: !!e.autoPopulateReplyMetadata,
                            batch_mode: r.default.get(e, "batchMode", "off")
                        }, e.autoPopulateReplyMetadata && e.excludeReplyUserIds && (i.exclude_reply_user_ids = e.excludeReplyUserIds.toString());
                        break;
                    case "tweet":
                        i = {
                            status: e.text
                        }
                }
                var o = "message" === e.type ? "media_id" : "media_ids";
                e.mediaId && (i[o] = e.mediaId), e.attachmentUrl && TD.decider.get("compose_quoted_tweet_as_attachment") && (i.attachment_url = e.attachmentUrl), (0, n.makeTwitterApiCall)({
                    request: e,
                    resource: t.url,
                    method: t.method,
                    params: i,
                    success: "dataTweetSent",
                    error: "dataTweetError",
                    dataProcessor: s,
                    processAsStreamData: !0
                })
            } catch (t) {
                this.trigger("dataTweetError", {
                    request: e
                })
            }
        }, this.sendRetweet = function(e, t) {
            var i;
            try {
                i = this.attr.resources.retweet, (0, n.makeTwitterApiCall)({
                    request: {
                        accountKey: e
                    },
                    resource: i.url.replace(":id", t.id),
                    method: i.method,
                    success: "dataRetweetSuccess",
                    error: "dataRetweetError",
                    processAsStreamData: !0
                })
            } catch (e) {
                this.trigger("dataRetweetError", {
                    request: t
                })
            }
        }, this.handleRetweet = function(e, t) {
            t.from.forEach(function(e) {
                this.sendRetweet(e, t)
            }.bind(this))
        }, this.handleUndoRetweet = function(e, t) {
            var i = t.tweetId,
                n = t.from,
                r = this.getTweet({
                    id: i,
                    accountKey: n,
                    params: {
                        include_my_retweet: !0
                    }
                });
            r.addCallback(function(e) {
                return e.response.current_user_retweet ? this.destroyTweet({
                    accountKey: n,
                    tweetId: e.response.current_user_retweet.id_str
                }) : TD.core.defer.succeed()
            }.bind(this)), r.addCallbacks(function() {
                (0, s.default)(document).trigger("dataUndoRetweetSuccess", {
                    tweetId: i,
                    from: n
                })
            }, function() {
                (0, s.default)(document).trigger("dataUndoRetweetError", {
                    tweetId: i,
                    from: n
                })
            })
        }, this.destroyTweet = function(e) {
            var t, i = new TD.core.defer.Deferred;
            try {
                t = this.attr.resources.destroy, (0, n.makeTwitterApiCall)({
                    request: {
                        accountKey: e.accountKey
                    },
                    resource: t.url.replace(":id", e.tweetId),
                    method: t.method,
                    success: function(e) {
                        i.callback(e)
                    },
                    error: function(e) {
                        i.errback(e)
                    }
                })
            } catch (t) {
                i.errback({
                    request: e
                })
            }
            return i
        }, this.handleSendTweet = function(e, t) {
            t.files && t.files.length || this.sendTweet(t)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(162),
        o = i(23);
    var c = i(1),
        l = i(5).component,
        u = i(8);
    e.exports = l(function() {
        this.attributes({
            resources: {
                tweet: {
                    method: "POST",
                    url: "schedule/status/tweet.json",
                    metricsKey: "status:tweet"
                },
                delete: {
                    method: "DELETE",
                    url: "schedule/status/{{id}}.json",
                    metricsKey: "status:delete"
                },
                dismiss: {
                    method: "POST",
                    url: "schedule/status/dismiss/{{id}}.json",
                    metricsKey: "status:dismiss"
                },
                edit: {
                    method: "PUT",
                    url: "schedule/status/{{id}}.json",
                    metricsKey: "status:edit"
                }
            }
        }), this.after("initialize", function() {
            this.on(document, "uiSendScheduledTweets", this.handleSendScheduleTweets), this.on(document, "uiDeleteScheduledTweetGroup", this.handleDeleteScheduledTweets), this.on(document, "uiEditScheduledTweetGroup", this.handleEditScheduleTweets)
        }), this.handleSendScheduleTweets = function(e, t) {
            if (t && t.requests) {
                t.metadata = t.metadata || {};
                var i = t.requests,
                    s = i.filter(function(e) {
                        return this.shouldSchedule(e.type)
                    }, this),
                    n = [],
                    a = [],
                    o = t.metadata.originalUpdates || [];
                if (s.length || o.length) {
                    this.trigger("metric", {
                        key: "scheduler:ui:send"
                    });
                    var c = s.map(function(e) {
                        return e.accountKey
                    });
                    this.trigger("metric", {
                        key: "scheduler:data:selected-accounts-to-nearest-hundred:" + ~~(100 * Math.round(c.length / 100))
                    }), this.trigger("metric", {
                        type: "metric",
                        key: "scheduler:data:selected-accounts",
                        value: [c.length]
                    }), t.tokenToDelete && (o = []), o.forEach(function(e, t) {
                        var i = c.indexOf(e.account.getKey());
                        if (i < 0) return a.push(e);
                        var r = s.splice(i, 1)[0];
                        r.id = e.id, n.push(r)
                    });
                    var l = TD.core.defer.succeed();
                    c.length > 200 && (this.trigger("metric", {
                        key: "scheduler:data:force-failure"
                    }), l.addCallback(function() {
                        throw new Error((0, r.default)("Failed to schedule tweets."))
                    })), l.addCallbackWith(this, function() {
                        return TD.core.defer.gatherResults(s.map(this.waitForUploads, this))
                    }), l.addCallbackWith(this, function(e) {
                        var t = TD.core.defer.gatherResults(n.map(this.waitForUploads, this));
                        return t.addCallbackWith(this, function(t) {
                            return {
                                toCreate: e,
                                toEdit: t
                            }
                        }), t
                    }), l.addErrbackWith(this, function(e) {
                        return i.forEach(function(t) {
                            this.trigger("dataTweetError", {
                                request: t,
                                response: e
                            })
                        }, this), e
                    }), l.addCallbackWith(this, function(e) {
                        var t = [].concat(e.toCreate.map(this.makeApiCallToResource.bind(this, this.attr.resources.tweet)), e.toEdit.map(this.makeApiCallToResource.bind(this, this.attr.resources.edit)));
                        return TD.core.defer.gatherResults(t)
                    }), l.addCallbackWith(this, function(e) {
                        return TD.core.defer.gatherResults(a.map(function(e) {
                            return this.deleteScheduledTweet({
                                id: e.id,
                                token: e.token,
                                accountKey: e.account.getKey()
                            })
                        }, this))
                    }), l.addBothWith(this, this.addOrRefreshScheduledColumn)
                }
            }
        }, this.handleDeleteScheduledTweets = function(e, t) {
            if (!this.isVisibilityOff()) {
                this.trigger("metric", {
                    key: "scheduler:ui:delete"
                }), TD.controller.stats.deleteScheduledTweet();
                var i = new TD.core.defer.DeferredList(t.scheduledTweetGroup.updates.map(function(e) {
                    return this.deleteScheduledTweet({
                        id: e.id,
                        token: e.token,
                        state: e.state,
                        accountKey: e.account.getKey()
                    })
                }, this));
                i.addBoth(this.refreshScheduledColumn.bind(this))
            }
        }, this.handleEditScheduleTweets = function(e, t) {
            if (this.isWriteOff()) return alert((0, r.default)("Sorry – editing scheduled tweets is currently unavailable."));
            this.trigger("metric", {
                key: "scheduler:ui:edit"
            }), TD.controller.stats.editScheduledTweet();
            var i = t.scheduledTweetGroup;
            this.trigger("uiComposeTweet", {
                type: i.inReplyToStatusId ? "reply" : "tweet",
                popFromInline: !0,
                schedule: {
                    time: i.time
                },
                text: i.text,
                from: i.updates.map(function(e) {
                    return e.account.getKey()
                }),
                autoPopulateReplyMetadata: Boolean(i.autoPopulateReplyMetadata),
                inReplyTo: i.inReplyToStatus,
                mentions: i.inReplyToStatus ? i.inReplyToStatus.getReplyUsers() : [],
                excludedRecipientsIds: i.excludedRecipientIds,
                metadata: {
                    originalUpdates: i.updates
                }
            })
        }, this.makeApiCallToResource = function(e, t) {
            this.trigger("metric", {
                key: "scheduler:data:" + e.metricsKey
            });
            var i = {
                status: t.text,
                execute_at: Math.round(t.scheduledDate.getTime() / 1e3)
            };
            return t.inReplyToStatusId && (i.in_reply_to_status_id = t.inReplyToStatusId), t.autoPopulateReplyMetadata && (i.auto_populate_reply_metadata = t.autoPopulateReplyMetadata), t.autoPopulateReplyMetadata && t.excludeReplyUserIds && (i.exclude_reply_user_ids = t.excludeReplyUserIds.toString() || "0"), t.mediaId && (i.media_ids = t.mediaId), t.attachmentUrl && TD.decider.get("compose_quoted_tweet_as_attachment") && (i.attachment_url = t.attachmentUrl), (0, a.makeTwitterApiCall)({
                resource: u.toURLFromRaw(e.url, t),
                method: e.method,
                request: t,
                params: i,
                success: "dataTweetSent",
                error: "dataTweetError"
            })
        }, this.deleteScheduledTweet = function(e) {
            var t = this.attr.resources["failed" === e.state ? "dismiss" : "delete"];
            this.trigger("metric", {
                key: "scheduler:data:" + t.metricsKey
            });
            var i = (0, a.makeTwitterApiCall)({
                resource: u.toURLFromRaw(t.url, {
                    id: e.id
                }),
                request: e,
                method: t.method
            });
            return i.addCallback(function() {
                TD.controller.feedManager.deleteChirp(e.token)
            }), i.addErrbackWith(this, function(e) {
                return (0, o.showErrorNotification)({
                    message: (0, r.default)("Failed to delete scheduled tweet.")
                }), e
            }), i
        }, this.waitForUploads = function(e) {
            if (!e.files || !e.files.length) return TD.core.defer.succeed(e);
            var t = e.mediaIds;
            return t.addCallbackWith(this, function(t) {
                return delete e.file, delete e.files, e.mediaId = t.map(c.last).join(","), e
            }), t
        }, this.refreshScheduledColumn = function(e) {
            this.trigger("uiNeedsScheduledColumnVisible", e || {})
        }, this.handleDeciderChange = function() {
            this.refreshScheduledColumn()
        }, this.addOrRefreshScheduledColumn = function() {
            this.refreshScheduledColumn({
                allowAdd: !0
            })
        }, this.isWriteOff = function() {
            var e = !TD.decider.hasAccessLevel("scheduler", "WRITE");
            return e
        }, this.isVisibilityOff = function() {
            var e = !TD.decider.hasAccessLevel("scheduler", "READ_VISIBLE");
            return e
        }, this.shouldSchedule = function(e) {
            var t = !this.isWriteOff(),
                i = {
                    message: !1,
                    tweet: t,
                    reply: t
                };
            return i[e]
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(162),
        r = i(8),
        a = (s = r) && s.__esModule ? s : {
            default: s
        },
        o = i(19);
    var c = i(5).component;
    e.exports = c(function() {
        this.attributes({
            resources: {
                delete: {
                    method: "POST",
                    resource: "dm/destroy.json",
                    metricsKey: "status:delete"
                },
                read: {
                    method: "POST",
                    resource: "dm/conversation/{{conversationId}}/mark_read.json",
                    metricsKey: "conversation:read-one"
                },
                readAll: {
                    method: "POST",
                    resource: "dm/conversation/mark_read.json",
                    metricsKey: "conversation:read-all"
                },
                new: {
                    method: "POST",
                    resource: "dm/new.json",
                    metricsKey: "status:new"
                },
                addParticipants: {
                    method: "POST",
                    resource: "dm/conversation/{{conversationId}}/add_participants.json",
                    metricsKey: "conversation:add-participants"
                },
                deleteConversation: {
                    method: "POST",
                    resource: "dm/conversation/{{conversationId}}/delete.json",
                    metricsKey: "conversation:delete"
                },
                updateConversationName: {
                    method: "POST",
                    resource: "dm/conversation/{{conversationId}}/update_name.json",
                    metricsKey: "conversation:rename"
                },
                disableNotifications: {
                    method: "POST",
                    resource: "dm/conversation/{{conversationId}}/disable_notifications.json",
                    metricsKey: "conversation:disable_notifications"
                },
                enableNotifications: {
                    method: "POST",
                    resource: "dm/conversation/{{conversationId}}/enable_notifications.json",
                    metricsKey: "conversation:enable_notifications"
                }
            }
        }), this.after("initialize", function() {
            this.on(document, "uiDeleteDm", this.handleDeleteDm), this.on(document, "uiDeleteConversation", this.handleDeleteConversation), this.on(document, "uiMarkDmAsRead", this.handleMarkDmAsRead), this.on(document, "uiMarkAllDmsAsRead", this.handleMarkAllDmsAsRead), this.on(document, "uiSendDm", this.handleSendDm), this.on(document, "uiAddConversationParticipants", this.handleAddConversationParticipants), this.on(document, "uiUpdateConversationName", this.handleUpdateConversationName), this.on(document, "uiConversationsDisableNotifications", this.handleConversationsDisableNotifications), this.on(document, "uiConversationsEnableNotifications", this.handleConversationsEnableNotifications)
        }), this.handleMarkDmAsRead = function(e, t) {
            var i = this.attr.resources.read;
            this.trigger("metric", {
                key: "dm:data:" + i.metricsKey
            }), (0, n.makeTwitterApiCall)({
                request: t,
                method: i.method,
                resource: a.default.toURLFromRaw(i.resource, t),
                params: {
                    last_read_event_id: t.lastReadEventId
                },
                error: t.error
            })
        }, this.handleMarkAllDmsAsRead = function(e, t) {
            var i = this.attr.resources.readAll;
            this.trigger("metric", {
                key: "dm:data:" + i.metricsKey
            }), (0, n.makeTwitterApiCall)({
                request: t,
                method: i.method,
                resource: i.resource,
                params: {
                    last_read_event_id: t.lastReadEventId
                },
                error: t.error,
                success: t.success
            })
        }, this.handleSendDm = function(e, t) {
            if (!t.files || !t.files.length) {
                var i = this.attr.resources.new,
                    s = {
                        text: t.text,
                        ext: "altText"
                    };
                t.tweetId && (s.tweet_id = t.tweetId), !t.tweetId && t.attachmentUrl && TD.decider.get("compose_quoted_tweet_as_attachment") && (s.tweet_id = (0, o.extractTweetIdFromPermalink)(t.attachmentUrl)), t.conversationId && (s.conversation_id = t.conversationId), t.messageRecipientIds && t.messageRecipientIds.length > 0 && (s.recipient_ids = t.messageRecipientIds), s.conversation_id || s.recipient_ids ? (this.trigger("metric", {
                    key: "dm:data:" + i.metricsKey
                }), t.mediaId && (s.media_id = t.mediaId), (0, n.makeTwitterApiCall)({
                    request: t,
                    resource: i.resource,
                    method: i.method,
                    params: s,
                    success: "dataDmSent",
                    error: "dataDmError",
                    dataProcessor: function(e) {
                        return {
                            user_events: e
                        }
                    },
                    processAsStreamData: !0
                })) : this.trigger("dataDmError", {
                    request: t
                })
            }
        }, this.handleDeleteDm = function(e, t) {
            var i = this.attr.resources.delete;
            this.trigger("metric", {
                key: "dm:data:" + i.metricsKey
            }), (0, n.makeTwitterApiCall)({
                request: t,
                method: i.method,
                resource: i.resource,
                params: {
                    dm_id: t.id
                },
                success: t.success,
                error: t.error
            })
        }, this.handleAddConversationParticipants = function(e, t) {
            var i = this.attr.resources.addParticipants;
            this.trigger("metric", {
                key: "dm:data:" + i.metricsKey
            }), (0, n.makeTwitterApiCall)({
                request: t,
                method: i.method,
                resource: a.default.toHtmlFromRaw(i.resource, t),
                params: {
                    participant_ids: t.participantIds.join(",")
                },
                success: t.success,
                error: t.error,
                dataProcessor: function(e) {
                    return {
                        participantAdded: {
                            user_events: e
                        }
                    }
                },
                processAsStreamData: !0
            })
        }, this.handleDeleteConversation = function(e, t) {
            var i = this.attr.resources.deleteConversation;
            this.trigger("metric", {
                key: "dm:data:" + i.metricsKey
            }), (0, n.makeTwitterApiCall)({
                request: t,
                method: i.method,
                resource: a.default.toHtmlFromRaw(i.resource, t),
                success: t.success,
                error: t.error,
                dataProcessor: function(e) {
                    return {
                        delete: {
                            conversationId: t.conversationId
                        }
                    }
                },
                processAsStreamData: !0
            })
        }, this.handleUpdateConversationName = function(e, t) {
            var i = this.attr.resources.updateConversationName;
            this.trigger("metric", {
                key: "dm:data" + i.metricsKey
            }), (0, n.makeTwitterApiCall)({
                request: t,
                method: i.method,
                resource: a.default.toHtmlFromRaw(i.resource, t),
                params: {
                    name: t.name
                },
                success: t.success,
                error: t.error,
                dataProcessor: function(e) {
                    return {
                        conversationRenamed: {
                            conversationId: t.conversationId,
                            name: t.name
                        }
                    }
                },
                processAsStreamData: !0
            })
        }, this.handleConversationsDisableNotifications = function(e, t) {
            var i = this.attr.resources.disableNotifications;
            this.trigger("metric", {
                key: "dm:data:" + i.metricsKey
            }), (0, n.makeTwitterApiCall)({
                request: t,
                method: i.method,
                resource: a.default.toHtmlFromRaw(i.resource, t),
                success: t.success,
                error: t.error
            })
        }, this.handleConversationsEnableNotifications = function(e, t) {
            var i = this.attr.resources.enableNotifications;
            this.trigger("metric", {
                key: "dm:data:" + i.metricsKey
            }), (0, n.makeTwitterApiCall)({
                request: t,
                method: i.method,
                resource: a.default.toHtmlFromRaw(i.resource, t),
                success: t.success,
                error: t.error
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.after("initialize", function() {
            this.on(document, "uiSendDm", this.handleSendTweet), this.on(document, "uiSendTweet", this.handleSendTweet)
        }), this.responseFactory = function(e, t) {
            return function(i) {
                this.trigger(e, {
                    response: i,
                    request: t
                })
            }.bind(this)
        }, this.handleSendTweet = function(e, t) {
            var i = this;
            if (t.files && t.files.length) {
                var s = this.responseFactory("dataTweetError", t);
                t.mediaIds.addCallbacks(function(n) {
                    var a = !1,
                        o = !1;
                    delete t.file, delete t.files, delete t.mediaIds, t.mediaId = n.map(function(e) {
                        return e[0] || (a = !0), e[0] && void 0 === e[1] && (o = !0), e[1]
                    }).join(","), a ? s({
                        errors: [{
                            message: (0, r.default)("We could not upload all images, please try again.")
                        }]
                    }) : o || i.trigger(document, e, t)
                }, s)
            }
        }, this.isTweetSchedulerOn = function() {
            return TD.decider.hasAccessLevel("scheduler", "WRITE")
        }, this.shouldSchedule = function(e) {
            var t = this.isTweetSchedulerOn(),
                i = {
                    message: !0,
                    tweet: !t,
                    reply: !t
                };
            return i[e]
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(1)),
        n = a(i(0)),
        r = i(162);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = i(5).component,
        c = i(614);
    e.exports = o(function() {
        this.attributes({
            resources: {
                watchlists: {
                    resource: "account/1/get_lists",
                    method: "GET",
                    metricsKey: "watchlists"
                },
                alerts: {
                    resource: "alerts/1/get_alert",
                    method: "GET",
                    metricsKey: "alerts"
                }
            },
            dataminrBaseUrl: "https://gateway.dataminr.com",
            proxiedAuth: {
                resource: "tweetdeck/dataminr/authtoken",
                method: "GET",
                metricsKey: "authtoken:proxy"
            },
            httpStatusCodes: {
                ok: 200,
                badRequest: 400,
                unauthorized: 401,
                tooManyRequests: 429,
                internalServerError: 500
            },
            dataminrErrorCodes: {
                invalidApiCall: 101,
                oauthAuthenticationError: 102,
                invalidDMToken: 103,
                twitterAccountNotLinked: 104,
                rateLimitExceeded: 105
            }
        }), this.after("initialize", function() {
            this.on(document, "uiNeedsDataminrAuth", this.handleUiNeedsDataminrAuth), this.on(document, "uiNeedsDataminrWatchlists", this.handleUiNeedsDataminrWatchlists), this.on(document, "uiNeedsDataminrAlerts", this.handleUiNeedsDataminrAlerts)
        }), this.makeDataminrRequestForAuthToken = function() {
            return this.proxiedAuthFlow().addCallbacksWith(this, this.handleAuthSuccess, this.handleAuthError)
        }, this.handleUiNeedsDataminrAuth = function() {
            if (this.dataminrIsEnabled()) {
                var e = TD.settings.getDataminrAuthToken();
                (e ? TD.core.defer.succeed() : this.makeDataminrRequestForAuthToken()).addCallback(this.trigger.bind(this, "dataDataminrAuthenticated"))
            }
        }, this.makeDataminrRequest = function(e, t) {
            var i = this.withDataminrApiUrl(e, t);
            return this.trigger("metric", {
                key: "dataminr:data:" + e.metricsKey
            }), TD.controller.stats.dataminrApiRequest(e.metricsKey), TD.net.ajax.sendRequest(e.method, i, {
                Authorization: "DmAuth " + TD.settings.getDataminrAuthToken()
            }).addErrback(this.dataminrRequestError.bind(this, i, e))
        }, this.dataminrRequestError = function(e, t, i) {
            if (i.number === this.attr.httpStatusCodes.unauthorized) return this.makeDataminrRequestForAuthToken().addCallbacks(function() {
                return TD.net.ajax.sendRequest(t.method, e, {
                    Authorization: "DmAuth " + TD.settings.getDataminrAuthToken()
                })
            }, function() {
                TD.settings.setDataminrAuthToken(null), (0, n.default)(document).trigger("dataMessage", {
                    message: this.getDataminrAccountAccessDeniedMessageData()
                })
            }.bind(this))
        }, this.proxiedAuthFlow = function() {
            var e = this.attr.proxiedAuth;
            return this.trigger("metric", {
                key: "dataminr:data:" + e.metricsKey
            }), TD.controller.stats.dataminrAuthRequest(), (0, r.makeTwitterRequest)(TD.storage.store.getTwitterLoginAccount().getKey(), e.resource, {
                method: e.method
            })
        }, this.handleAuthSuccess = function(e) {
            e.data.dmaToken && (TD.settings.setDataminrAuthToken(e.data.dmaToken), this.trigger("metric", {
                key: "dataminr:auth:success"
            }))
        }, this.handleAuthError = function(e) {
            throw this.trigger("metric", {
                key: "dataminr:auth:error:" + e.number
            }), e
        }, this.withDataminrApiUrl = function(e, t) {
            var i = e.baseUrl,
                s = e.resource,
                n = e.method,
                r = (i || this.attr.dataminrBaseUrl) + "/" + s;
            return t && "GET" === n && (r = TD.net.util.addURLParameters(r, t)), r
        }, this.handleUiNeedsDataminrWatchlists = function() {
            this.dataminrIsEnabled() && this.makeDataminrRequest(this.attr.resources.watchlists).addCallback(this.getEventDataFromResponse.bind(this)).addCallbacks(this.trigger.bind(this, "dataDataminrWatchlists"), this.trigger.bind(this, "dataDataminrWatchlistsError"))
        }, this.handleUiNeedsDataminrAlerts = function(e, t) {
            if (this.dataminrIsEnabled()) {
                var i = s.default.defaults(t.params, {
                    pagesize: 200
                });
                this.makeDataminrRequest(this.attr.resources.alerts, i).addCallback(this.getEventDataFromResponse.bind(this)).addCallbacks(this.handleAlertsSuccess.bind(this, t.success), this.handleAlertsError.bind(this, t.error))
            }
        }, this.handleAlertsSuccess = function(e, t) {
            if ("function" == typeof e) return e(t);
            this.trigger("dataDataminrAlerts", t)
        }, this.handleAlertsError = function(e, t) {
            if ("function" == typeof e) return e(t);
            this.trigger("dataDataminrAlertsError", t)
        }, this.getEventDataFromResponse = function(e) {
            return e.data
        }, this.dataminrIsEnabled = function() {
            return TD.decider.get("dataminr")
        }
    }, c)
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.attributes({
            isTouchComposeClass: "is-touch-compose",
            isTouchSearchClass: "is-touch-search",
            isTouchTweetContainer: "is-touch-tweet-container",
            withTouchFontSizeClass: "with-touch-font-size"
        }), this.handleUpdateCompose = function() {
            TD.util.isTouchDevice() && TD.decider.get("touchdeck_compose_v2") ? (0, r.default)(".js-docked-compose").addClass(this.attr.isTouchComposeClass) : (0, r.default)(".js-docked-compose").removeClass(this.attr.isTouchComposeClass)
        }, this.handleUpdateFontSize = function() {
            TD.util.isTouchDevice() && TD.decider.get("touchdeck_font_size_v2") ? (0, r.default)("html").addClass(this.attr.withTouchFontSizeClass) : (0, r.default)("html").removeClass(this.attr.withTouchFontSizeClass)
        }, this.handleUpdateSearch = function() {
            TD.util.isTouchDevice() && TD.decider.get("touchdeck_search_v2") ? (0, r.default)(".js-search").addClass(this.attr.isTouchSearchClass) : (0, r.default)(".js-search").removeClass(this.attr.isTouchSearchClass)
        }, this.handleUpdateTweetControls = function() {
            TD.util.isTouchDevice() && TD.decider.get("touchdeck_tweet_controls_v3") ? (0, r.default)(".js-chirp-container").addClass(this.attr.isTouchTweetContainer) : (0, r.default)(".js-chirp-container").removeClass(this.attr.isTouchTweetContainer)
        }, this.after("initialize", function() {
            this.on(document, "dataDeciderUpdated", this.handleUpdateCompose), this.on(document, "dataDeciderUpdated", this.handleUpdateFontSize), this.on(document, "dataDeciderUpdated", this.handleUpdateSearch), this.on(document, "dataDeciderUpdated", this.handleUpdateTweetControls)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(5),
        o = i(23),
        c = i(38);
    e.exports = (0, a.component)(function() {
        this.after("initialize", function() {
            this.on(document, "uiRemoveTweetFromCustomTimeline", this.checkData(this.removeTweetFromCustomTimeline)), this.on(document, "uiAddOrMoveTweetToCustomTimeline", this.checkData(this.addOrMoveTweetToCustomTimeline)), this.on(document, "uiAddMultipleTweetsToCustomTimeline", this.bulkAddTweetsToCustomTimeline), this.on(document, "uiNeedsCustomTimeline", this.fetchCustomTimeline), this.on(document, "uiUpdateCustomTimeline", this.updateCustomTimeline), this.on(document, "dataAddOrMoveTweetToCustomTimelineError", function(e, t) {
                var i = "duplicate" === t.result.message ? "You've already added that Tweet to this Collection" : "Problem adding or moving Tweet: please try again";
                (0, o.showErrorNotification)({
                    message: (0, r.default)(i)
                })
            }), this.on(document, "dataRemoveTweetToCustomTimelineError", function() {
                (0, o.showErrorNotification)({
                    message: (0, r.default)("Problem removing Tweet: please try again")
                })
            })
        }), this.removeTweetFromCustomTimeline = function(e, t) {
            var i = (0, c.getClientByAccountKey)(t.account);
            i.removeTweetFromCustomTimeline(t.id, t.tweetId, this.callbackFactory("dataRemoveTweetFromCustomTimelineSuccess", t), this.callbackFactory("dataRemoveTweetFromCustomTimelineError", t))
        }, this.addOrMoveTweetToCustomTimeline = function(e, t) {
            var i = (0, c.getClientByAccountKey)(t.account);
            i.addOrMoveTweetToCustomTimeline({
                customTimelineId: t.id,
                tweetId: t.tweetId,
                relativeToId: t.relativeToId,
                above: t.above,
                actionType: t.actionType
            }, this.callbackFactory("dataAddOrMoveTweetToCustomTimelineSuccess", t), this.callbackFactory("dataAddOrMoveTweetToCustomTimelineError", t))
        }, this.bulkAddTweetsToCustomTimeline = function(e, t) {
            var i = (0, c.getClientByAccountKey)(t.account);
            i.bulkAddToCustomTimeline({
                customTimelineId: t.id,
                tweetIdsToAdd: t.ids
            }, this.callbackFactory("dataAddOrMoveTweetToCustomTimelineSuccess", t), this.callbackFactory("dataAddOrMoveTweetToCustomTimelineError", t))
        }, this.fetchCustomTimeline = function(e, t) {
            var i = (0, c.getClientByAccountKey)(t.account);
            i.getCustomTimeline(t.id, this.callbackFactory("dataCustomTimelineSuccess", t), this.callbackFactory("dataCustomTimelineError", t))
        }, this.updateCustomTimeline = function(e, t) {
            var i = (0, c.getClientByAccountKey)(t.account);
            i.getCustomTimeline(t.id, function(e) {
                var s = {
                    name: void 0 !== t.name ? t.name : e.name,
                    description: void 0 !== t.description ? t.description : e.description,
                    url: void 0 !== t.url ? t.url : e.url
                };
                i.updateCustomTimeline(t.id, s, this.callbackFactory("dataCustomTimelineSuccess", t), this.callbackFactory("dataCustomTimelineUpdateError", t))
            }.bind(this), this.callbackFactory("dataCustomTimelineUpdateError", t))
        }, this.callbackFactory = function(e, t) {
            return function(i) {
                this.trigger(document, e, {
                    action: t,
                    result: i
                })
            }.bind(this)
        }, this.checkData = function(e) {
            return function(t, i) {
                if (!i.id || !i.tweetId || !i.account) throw new Error("data needs id, tweetId, and account");
                e.apply(this, [].slice.call(arguments))
            }
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).component,
        o = i(240);
    e.exports = a(function() {
        this.attributes({
            needsSecureUrlSelector: ".js-needs-secure-url",
            needsSecureUrlClass: "js-needs-secure-url",
            orignalUrlAttribute: "data-original-url",
            cacheSize: 200,
            cacheExpiryMinutes: 15
        }), this.after("initialize", function() {
            this.on(document, "uiNeedsSecureImageUrl", this.queueSignedImage), this.signedUrlCache = new o(this.attr.cacheSize), this.imageQueue = [], this.debouncedProcessQueue = s.default.debounce(this.processQueue, 100)
        }), this.queueSignedImage = function(e, t) {
            this.imageQueue.push({
                event: e,
                data: t
            }), this.debouncedProcessQueue()
        }, this.processQueue = function() {
            var e = this.$node.find(this.attr.needsSecureUrlSelector);
            this.imageQueue.forEach(function(t) {
                this.findAndSignImage(e, t.event, t.data)
            }.bind(this)), this.imageQueue = []
        }, this.findAndSignImage = function(e, t, i) {
            var s = TD.storage.accountController.get(i.accountKey),
                r = this.getSignedImage(s, i.url);
            r.addCallbackWith(this, function(t) {
                var s = this.attr.orignalUrlAttribute,
                    r = this.attr.needsSecureUrlClass;
                e.each(function() {
                    var e = (0, n.default)(this);
                    if (e.attr(s) === i.url) {
                        var a = e.find("img");
                        a.length ? a.attr("src", t.data.url) : e.css({
                            "background-image": "url(" + t.data.url + ")"
                        }), e.removeClass(r).attr(s, "")
                    }
                })
            })
        }, this.getSignedImage = function(e, t) {
            return TD.core.defer.succeed({
                data: {
                    url: t
                }
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(5),
        o = i(38);
    e.exports = (0, a.component)(function() {
        this.after("initialize", function() {
            this.on(document, "uiNeedsDMReport", this.handleDMReport)
        }), this.handleDMReport = function(e, t) {
            TD.sync.util.assert(t.account, "Source account for report must be specified."), TD.sync.util.assert(t.dmId || t.conversationId, "dmId or conversationId must be specified"), TD.sync.util.assert(r.default.contains(["spam", "abuse"], t.reportType), "reportType must be one of {spam, abuse}");
            var i = (0, o.getClientByAccount)(t.account),
                s = {
                    dmId: t.dmId,
                    conversationId: t.conversationId,
                    reportType: t.reportType,
                    blockUser: Boolean(t.blockUser)
                };
            i.reportDMSpam(s, this.handleSuccessFactory(t).bind(this), this.handleErrorFactory(t))
        }, this.handleSuccessFactory = function(e) {
            return function() {
                var t = (0, o.getClientByAccount)(e.account);
                e.dmId ? this.handleMessageReportSuccess(t, e) : e.conversationId && this.handleConversationReportSuccess(t, e)
            }
        }, this.handleMessageReportSuccess = function(e, t) {
            e.destroyDM(t.dmId), e.deleteMessage(t.dmId)
        }, this.handleConversationReportSuccess = function(e, t) {
            e.processDeleteChirpEvent({
                conversationId: t.conversationId
            })
        }, this.handleErrorFactory = function(e) {
            return function(t) {
                this.trigger("dMReportError", {
                    error: t || {},
                    request: e
                })
            }.bind(this)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = u(i(12)),
        n = u(i(140)),
        r = u(i(1968)),
        a = u(i(1971)),
        o = u(i(1972)),
        c = i(58),
        l = i(36);

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var d = i(69);
    e.exports = s.default.mixin(n.default, function() {
        this.componentDidInitialize = function() {
            var e = this;
            this.initialHref = window.location.href, this.on(document, "TD.ready", this.handleTDReady), l.gdprUpdates$.subscribe(function(t) {
                e.showGdprUpdates = t
            }), l.tweetdeckBeta$.subscribe(function(t) {
                e.isInBeta = t
            })
        }, this.handleTDReady = function() {
            this.processQueryParams(this.initialHref), this.maybeShowWelcomeModal(), this.cleanUrl()
        }, this.maybeShowWelcomeModal = function() {
            var e = (0, c.getTwitterLoginAccount)();
            if (e.requireConsent) {
                return this.showModal(r.default, {}, {
                    withNonDismissible: !0,
                    withHeader: !1,
                    withFooter: !1,
                    withDismissButton: !1,
                    withBorder: !1,
                    withOverlayClasses: ["overlay-opaque"]
                }), void TD.util.metric("gdpr:logged-in:requires-consent")
            }
            if (TD.components.NewFeaturesSplash.shouldShow()) new TD.components.NewFeaturesSplash;
            else if (!this.isInBeta || TD.settings.getPremiumHasSeenWelcomeModal())
                if (this.showGdprUpdates) {
                    this.showModal(a.default, {}, {
                        withHeader: !1,
                        withFooter: !1,
                        withDismissButton: !0,
                        withBorder: !1
                    })
                } else;
            else {
                this.showModal(o.default, {}, {
                    withFooter: !1,
                    withDismissButton: !0,
                    withBorder: !1,
                    withClasses: ["mdl-bottom-right"],
                    withClickTrap: !1,
                    withDraggable: !1,
                    withDragHandle: !1,
                    withOverlayClasses: ["bg-color-transparent"]
                })
            }
        }, this.processQueryParams = function(e) {
            if (e) {
                var t = d(e).search(!0),
                    i = [].concat(t.add_by_url || []);
                i && i.length && TD.decider.get("add_column_by_url_query_param") && this.trigger(document, "uiAddColumnsByUrl", {
                    urls: i
                }), this.trigger("dataQueryParams", {
                    params: t
                })
            }
        }, this.cleanUrl = function() {
            window.history && "function" == typeof window.history.replaceState ? history.replaceState({}, "", window.location.pathname) : window.location.hash = ""
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = c(i(12)),
        n = c(i(8)),
        r = i(1969),
        a = i(615),
        o = c(i(69));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = s.default.mixin(function() {
        this.attributes({
            template: "terms_privacy_update",
            nextSelector: ".js-next"
        }), this.componentDidInitialize = function() {
            this.on("click", {
                nextSelector: this.nextClick
            })
        }, this.nextClick = function() {
            var e = (0, o.default)(window.location.href).path("/web/success.html").toString(),
                t = {
                    queryParams: {
                        return_url: e
                    },
                    baseUrl: "https://twitter.com/i/flow/consent_flow",
                    callbackUrl: e
                };
            (0, a.observedPopup)(t).then(function(e) {
                e.complete && (0, r.reload)()
            }, function(e) {
                console.log("error: ", e)
            })
        }, this.render = function() {
            var e = n.default.render(this.attr.template);
            this.$node.html(e)
        }
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.reload = function() {
        window.location.reload()
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.default = function(e) {
        if (!r.default.get(window, "deck.authenticateOn")) return null;
        var t = deck.authenticateOn(e),
            i = {
                closed: !1,
                close: function() {
                    i.closed = !0, t.hide(), t.deleteLater()
                },
                location: {
                    href: e
                }
            };
        return t.loadedUrl.connect(function(e) {
            i.location.href = e, 0 === e.indexOf("file://") && (i.closed = !0)
        }), t.show(), i
    };
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        }
}, function(e, t, i) {
    "use strict";
    var s = r(i(12)),
        n = r(i(8));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = s.default.mixin(function() {
        this.attributes({
            template: "important_update"
        }), this.initialState({
            showImportantUpdates: function() {
                return TD.settings.getShowGdprImportantUpdates()
            }
        }), this.render = function() {
            if (this.state.showImportantUpdates) {
                var e = n.default.render(this.attr.template);
                this.$node.html(e)
            } else this.teardown()
        }, this.componentWillTeardown = function() {
            TD.settings.setShowGdprImportantUpdates(!1)
        }
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.WelcomeModalReact = void 0;
    var s = f(i(13)),
        n = f(i(10)),
        r = f(i(11)),
        a = f(i(14)),
        o = f(i(15)),
        c = i(6),
        l = f(c),
        u = f(i(3)),
        d = i(12),
        h = i(155),
        m = f(i(161));

    function f(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var p = function(e) {
        function t() {
            return (0, n.default)(this, t), (0, a.default)(this, (t.__proto__ || (0, s.default)(t)).apply(this, arguments))
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "openColumnPicker",
            value: function() {
                TD.ui.openColumn.showOpenColumn()
            }
        }, {
            key: "render",
            value: function() {
                return l.default.createElement("div", {
                    "data-testid": "betaModal",
                    className: "padding-v--10 txt-center width--430"
                }, l.default.createElement("div", {
                    className: "padding-b--20"
                }, l.default.createElement(m.default, {
                    "data-testid": "icon",
                    name: "twitter-bird",
                    fontSize: 24,
                    color: "twitter-blue"
                })), l.default.createElement("p", {
                    "data-testid": "heading",
                    className: "padding-b--20 txt-size--18 txt-bold"
                }, l.default.createElement(c.Fragment, null, (0, u.default)("Welcome on board"))), l.default.createElement("p", {
                    "data-testid": "text",
                    className: "color-twitter-darker-gray width--300 padding-b--20 margin-a-auto"
                }, (0, u.default)("We’re glad to have you here. We’ve added new functionality to this\n          version of TweetDeck to help you get ahead. Your feedback will help us\n          to improve it.")), l.default.createElement("div", {
                    className: "flex flex-justify-content--flex-center padding-v--10 padding-b--20"
                }, l.default.createElement(h.Button, {
                    type: "primary",
                    onPress: this.openColumnPicker.bind(this),
                    label: (0, u.default)("Let’s go"),
                    "data-testid": "confirmButton"
                }, (0, u.default)("Let’s go"))))
            }
        }, {
            key: "componentWillUnmount",
            value: function() {
                TD.settings.setPremiumHasSeenWelcomeModal(!0)
            }
        }]), t
    }(l.default.Component);
    t.default = (0, d.reactToUiBase)(p);
    t.WelcomeModalReact = p
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(23);
    var o = i(5).component,
        c = i(1974);
    e.exports = o(function() {
        this.after("initialize", function() {
            this.on(document, "dataAccountsRewriteColumns", function(e, t) {
                var i = this.rewriteFeeds(t.sourceAccountKey, t.targetAccountKey);
                (0, a.showNotification)({
                    message: this.getRewriteResultMessage(i)
                })
            })
        }), this.rewriteFeeds = c, this.getRewriteResultMessage = function(e) {
            var t = {
                    kept: e.newFeeds.length,
                    lost: e.lostFeeds.length,
                    total: e.initialCount
                },
                i = (0, r.default)("Kept {{kept}} columns.", t);
            1 === t.kept && (i = (0, r.default)("Kept 1 column."));
            var s = (0, r.default)("{{lost}} columns could not be kept.", t);
            return 1 === t.lost && (s = (0, r.default)("1 column could not be kept.")), 0 === t.lost ? s = "" : i = (0, r.default)("Kept {{kept}} out of {{total}} columns.", t), (i + " " + s).trim()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(17));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = {};

    function o(e) {
        var t = n.default.getColumnType(e);
        return !n.default.combinedColumnTypes[t]
    }

    function c(e) {
        return e.model.getKey()
    }
    a.shouldRewrite = {
        home: !0,
        search: !0,
        list: !0,
        customtimeline: !0,
        usertimeline: !0,
        favorites: !0,
        usertweets: !0
    }, a.type = {}, a.type = {
        home: "usertimeline"
    }, a.toDefault = {}, a.toDefault = {
        search: !0
    }, a.metadata = {}, a.metadata.id = {
        home: !0,
        usertimeline: !0,
        favorites: !0,
        usertweets: !0
    }, e.exports = function(e, t) {
        var i, n = TD.storage.accountController.get(e),
            r = TD.controller.columnManager.getAllOrdered().filter(o).map(c),
            l = TD.storage.feedController.getAll().filter((i = e, function(e) {
                return e.getAccountKey() === i
            })),
            u = {
                initialCount: l.length,
                newFeeds: [],
                lostFeeds: []
            };
        return l.reduce(function(e, i) {
            var o = i.getType();
            if (!a.shouldRewrite[o]) return e.lostFeeds.push(i), e;
            var c = o,
                l = i.getMetadata(),
                u = t;
            void 0 !== a.type[o] && (c = a.type[o]), a.toDefault[o] && (u = TD.storage.accountController.getDefault().getKey()), a.metadata.id[o] && void 0 === l.id && (l = s.default.extend({}, l, {
                id: n.getUserID()
            }));
            var d = TD.storage.feedController.getOrCreateFeed(c, i.getService(), u, l);
            return TD.controller.feedManager.replaceFeed(i, d, r), e.newFeeds.push(d), e
        }, u)
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(118),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component,
        o = i(69);
    e.exports = a(function() {
        this.attributes({
            paths: ["/1.1/account/settings.json", "/1.1/account/verify_credentials.json", "/1.1/activity/about_me.json", "/1.1/activity/by_friends.json", "/1.1/activity/by_me.json", "/1.1/beta/timelines/custom/add.json", "/1.1/beta/timelines/custom/create.json", "/1.1/beta/timelines/custom/destroy.json", "/1.1/beta/timelines/custom/list.json", "/1.1/beta/timelines/custom/remove.json", "/1.1/beta/timelines/custom/show.json", "/1.1/beta/timelines/custom/update.json", "/1.1/beta/timelines/custom/whitelisted.json", "/1.1/beta/timelines/timeline.json", "/1.1/blocks/create.json", "/1.1/blocks/destroy.json", "/1.1/blocks/ids.json", "/1.1/collections/create.json", "/1.1/collections/entries/curate.json", "/1.1/collections/entries.json", "/1.1/collections/entries/add.json", "/1.1/collections/entries/move.json", "/1.1/collections/entries/remove.json", "/1.1/collections/list.json", "/1.1/collections/show.json", "/1.1/collections/update.json", "/1.1/conversation/show.json", "/1.1/direct_messages.json", "/1.1/direct_messages/destroy.json", "/1.1/direct_messages/new.json", "/1.1/direct_messages/read.json", "/1.1/direct_messages/report_spam.json", "/1.1/direct_messages/sent.json", "/1.1/dm/conversation/mark_read.json", "/1.1/dm/destroy.json", "/1.1/dm/mark_read.json", "/1.1/dm/new.json", "/1.1/dm/user_inbox.json", "/1.1/dm/user_updates.json", "/1.1/favorites/create.json", "/1.1/favorites/destroy.json", "/1.1/favorites/list.json", "/1.1/friends/following/list.json", "/1.1/friendships/create.json", "/1.1/friendships/destroy.json", "/1.1/friendships/no_retweets/ids.json", "/1.1/friendships/show.json", "/1.1/geo/search.json", "/1.1/help/configuration.json", "/1.1/help/settings.json", "/1.1/lists/create.json", "/1.1/lists/destroy.json", "/1.1/lists/list.json", "/1.1/lists/members.json", "/1.1/lists/members/create.json", "/1.1/lists/members/create_all.json", "/1.1/lists/members/destroy.json", "/1.1/lists/memberships.json", "/1.1/lists/ownerships.json", "/1.1/lists/show.json", "/1.1/lists/statuses.json", "/1.1/lists/subscriptions.json", "/1.1/lists/update.json", "/1.1/live_pipeline/events", "/1.1/live_pipeline/update_subscriptions", "/1.1/media/metadata/create.json", "/1.1/media/upload.json", "/1.1/mutes/advanced_filters.json", "/1.1/mutes/conversations/create.json", "/1.1/mutes/conversations/destroy.json", "/1.1/mutes/users/create.json", "/1.1/mutes/users/destroy.json", "/1.1/mutes/users/ids.json", "/1.1/saved_searches/list.json", "/1.1/schedule/status/list.json", "/1.1/schedule/status/lookup.json", "/1.1/schedule/status/tweet.json", "/1.1/search/tweets.json", "/1.1/search/typeahead.json", "/1.1/search/universal.json", "/1.1/statuses/flag_possibly_sensitive.json", "/1.1/statuses/following_timeline.json", "/1.1/statuses/home_timeline.json", "/1.1/statuses/lookup.json", "/1.1/statuses/mentions_timeline.json", "/1.1/statuses/oembed.json", "/1.1/statuses/show.json", "/1.1/statuses/update.json", "/1.1/statuses/user_timeline.json", "/1.1/strato/column/None/tweetdeck/sendFeedback", "/1.1/translations/show.json", "/1.1/trends/available.json", "/1.1/trends/place.json", "/1.1/trends/plus.json", "/1.1/tweetdeck/clients", "/1.1/tweetdeck/columns", "/1.1/tweetdeck/dataminr/authtoken", "/1.1/tweetdeck/feeds", "/1.1/tweetdeck/insights/timeseries.json", "/1.1/tweetdeck/insights/related_keywords.json", "/1.1/tweetdeck/insights/demographics.json", "/1.1/users/contributees.json", "/1.1/users/contributees/accept.json", "/1.1/users/contributees/destroy.json", "/1.1/users/contributees/pending.json", "/1.1/users/contributees/update.json", "/1.1/users/contributors.json", "/1.1/users/contributors/destroy.json", "/1.1/users/contributors/pending.json", "/1.1/users/contributors/update.json", "/1.1/users/lookup.json", "/1.1/users/report_spam.json", "/1.1/users/search.json", "/1.1/users/show.json", "/1/statuses/following_timeline.json", "/graphql", "/i/activity/about_me.json", "/i/activity/by_friends.json", "/i/search/typeahead.json", "/users/following_followers_of.json"].reduce(function(e, t) {
                return e[t] = t, e
            }, {}),
            pathMatchers: [{
                regex: "/1.1/statuses/\\d*/activity/summary.json",
                key: "/1.1/statuses/.../activity/summary.json"
            }, {
                regex: "/2/timeline/conversation/\\d*.json",
                key: "/2/timeline/conversation/....json"
            }, {
                regex: "/i/statuses/\\d*/activity/summary.json",
                key: "/i/statuses/.../activity/summary.json"
            }, {
                regex: "/1.1/strato/column/None/fromTime=\\d*,toTime=\\d*,numEntities=\\d*/eventdetection/hydratedTopClusters",
                key: "/1.1/strato/column/None/fromTime=...,toTime=...,numEntities=.../eventdetection/hydratedTopClusters"
            }, {
                regex: "/1.1/schedule/status/dismiss/\\d*.json",
                key: "/1.1/schedule/status/dismiss/....json"
            }, {
                regex: "/1.1/schedule/status/retweet/\\d*.json",
                key: "/1.1/schedule/status/retweet/....json"
            }, {
                regex: "/1.1/schedule/status/\\d*.json",
                key: "/1.1/schedule/status/....json"
            }, {
                regex: "/1.1/statuses/destroy/\\d*.json",
                key: "/1.1/statuses/destroy/....json"
            }, {
                regex: "/1.1/statuses/retweet/\\d*.json",
                key: "/1.1/statuses/retweet/....json"
            }, {
                regex: "/1.1/statuses/show/\\d*.json",
                key: "/1.1/statuses/show/....json"
            }, {
                regex: "/1.1/dm/conversation/(\\d*|\\d*-\\d*).json",
                key: "/1.1/dm/conversation/....json"
            }, {
                regex: "/1.1/dm/conversation/(\\d*|\\d*-\\d*)/add_participants.json",
                key: "/1.1/dm/conversation/.../add_participants.json"
            }, {
                regex: "/1.1/dm/conversation/(\\d*|\\d*-\\d*)/delete.json",
                key: "/1.1/dm/conversation/.../delete.json"
            }, {
                regex: "/1.1/dm/conversation/(\\d*|\\d*-\\d*)/update_name.json",
                key: "/1.1/dm/conversation/.../update_name.json"
            }, {
                regex: "/1.1/dm/conversation/(\\d*|\\d*-\\d*)/mark_read.json",
                key: "/1.1/dm/conversation/.../mark_read.json"
            }, {
                regex: "/1.1/tweetdeck/clients(.+)",
                key: "/1.1/tweetdeck/clients/..."
            }, {
                regex: "/1.1/tweetdeck/columns(.+)",
                key: "/1.1/tweetdeck/columns/..."
            }, {
                regex: "/1.1/tweetdeck/feeds(.+)",
                key: "/1.1/tweetdeck/feeds/..."
            }].map(function(e) {
                return {
                    regex: new RegExp(e.regex || e.key + "$"),
                    key: e.key
                }
            })
        }), this.after("initialize", function() {
            this.on(document, "dataApiResponse", function(e, t) {
                this.sendApiResponseMetrics(t)
            })
        }), this.sendApiResponseMetrics = TD.util.catch(function(e) {
            if ("number" != typeof(e = e || {}).status || (0, r.default)(e.status) < 0) return TD.util.metric("api:other:status-wrong-type");
            if ("string" != typeof e.url) return TD.util.metric("api:other:url-wrong-type");
            var t = o(e.url).normalize(),
                i = t.pathname(),
                s = t.host();
            if (!s) return TD.util.metric("api:other:host-missing");
            var n = this.getKeyForPathname(i);
            TD.util.metric(["api:host", s, e.status, n].join(":"));
            var a = ("" + e.status).charAt(0) + "XX";
            TD.util.metric(["api:host:aggregate", s, a, n].join(":"))
        }, !0), this.getKeyForPathname = function(e) {
            var t = this.attr.paths[e];
            if (!t) {
                var i = this.attr.pathMatchers.find(function(t) {
                    return null !== e.match(t.regex)
                });
                i && (t = i.key)
            }
            return t || "other"
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = o(i(1)),
        n = o(i(69)),
        r = i(5),
        a = i(58);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var c = i(616);
    e.exports = (0, r.component)(function() {
        this.after("initialize", function() {
            this.on(document, "uiLogout", this.logout), this.on(document, "uiLogin", this.login), this.on(document, "uiReload", this.handleReload)
        }), this.logout = function(e) {
            this.wipeStorage(), this.redirect(c.getLogoutUrl())
        }, this.login = function(e, t) {
            var i = (t = t || {}).id,
                s = (0, a.getTwitterLoginAccount)(),
                n = (0, a.getAccountFromId)(i) || {},
                r = c.getLoginUrl({
                    usernameOrEmail: n.screenName
                }),
                o = TD.util.getTwitterCookieUserId(),
                l = s && s.userId;
            return s ? s.isCookieUser ? (i !== l && this.wipeStorage(), void(o ? i !== o ? this.logout() : i === o && (i === l || this.reload()) : this.redirect(r))) : this.logout() : this.redirect(r)
        }, this.handleReload = function(e, t) {
            var i = s.default.get(t, "params", {}),
                r = (0, n.default)(window.location.href).addQuery(i).href();
            if (r !== window.location.href) return this.redirect(r);
            this.reload()
        }, this.wipeStorage = function() {
            TD.storage.Store.flushWebstorage()
        }, this.teardownNativeApi = function() {
            TD.util.isWrapperApp() && deck.tearDown()
        }, this.redirect = function(e) {
            this.teardownNativeApi(), window.location.href = e
        }, this.reload = function() {
            this.teardownNativeApi(), window.location.reload()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(20),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component,
        o = i(37),
        c = i(1978),
        l = i(29),
        u = i(49);
    e.exports = a(o, function() {
        this.attributes({
            pollIntervalMs: 3e5
        }), this.after("initialize", function() {
            var e = this,
                t = u.fromEventOnce(document, "dataDeciderUpdated").exhaustMap(function() {
                    return e.getTimer()
                }),
                i = this.observe(t).flatMap(function() {
                    return u.fromDeferred(e.getVersion()).catch(function(e) {
                        return l.Observable.empty()
                    })
                }).map(this.processVersion).do(this.sendMetrics);
            this.provideResource("version", i.publishReplay(1).refCount())
        }), this.getTimer = function() {
            return l.Observable.timer(0, this.attr.pollIntervalMs)
        }, this.getVersion = function() {
            return TD.decider.get("version_poll") ? (TD.util.metric("version:poll"), TD.net.ajax.sendRequest("GET", TD.config.api_root + "/web/dist/version.json?t=" + Date.now()).addCallback(function(e) {
                return e.data
            })) : TD.core.defer.succeed(!1)
        }, this.processVersion = function(e) {
            return {
                isOutOfDate: c.lt(TD.version, e.version),
                isAboveLatest: c.gt(TD.version, e.version),
                isBelowMinimum: c.lt(TD.version, e.minimum)
            }
        }, this.sendMetrics = function(e) {
            e.isOutOfDate && TD.util.metric("version:out-of-date"), e.isBelowMinimum && TD.util.metric("version:is-below-minimum"), e.isAboveLatest && TD.util.metric("version:is-above-latest")
        }
    }, r.default)
}, , function(e, t, i) {
    "use strict";
    var s, n = i(20),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(85);
    e.exports = a.mixin(function() {
        this.attributes({
            refreshPauseTime: 3e5
        }), this.after("initialize", function() {
            this.observe(this.requestResource("version")).filter(this.shouldRefresh, this).subscribe(this.refresh)
        }), this.shouldRefresh = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                t = e.isAboveLatest,
                i = void 0 !== t && t,
                s = e.isBelowMinimum,
                n = void 0 !== s && s,
                r = TD.storage.store.getLastVersionRefreshTimestamp(),
                a = Date.now() - r,
                o = a < this.attr.refreshPauseTime;
            if (o) return !1;
            var c = i && TD.decider.get("version_poll_force_downgrade"),
                l = n && TD.decider.get("version_poll_force_upgrade");
            return c && TD.util.metric("version:force-downgrade"), l && TD.util.metric("version:force-upgrade"), c || l
        }, this.refresh = function() {
            TD.util.metric("version:force-refresh"), TD.storage.store.setLastVersionRefreshTimestamp(Date.now()), window.location.reload()
        }
    }, r.default)
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(20));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(85),
        o = i(49);
    e.exports = a.mixin(function() {
        this.after("initialize", function() {
            var e = this.observe(o.fromEventOnce(document, "TD.ready")),
                t = this.observe(o.fromEventOnce(document, "uiMessageBannerReady"));
            e.combineLatest(t, function() {}).subscribe(this.trigger.bind(this, "uiCheckNotificationPermission")), this.on(document, "uiCheckNotificationPermission", this.checkPermission), this.on(document, "uiRequestBrowserNotificationPermission", this.requestPermission)
        }), this.requestPermission = function() {
            TD.controller.notifications.getPermission()
        }, this.checkPermission = function() {
            this.needsPermission() && TD.controller.notifications.canPermissionBeRequested() ? this.showRequestMessage() : this.hideRequestMessage()
        }, this.needsPermission = function() {
            return TD.storage.columnController.getAll().some(function(e) {
                return e.getHasNotification()
            })
        }, this.showRequestMessage = function() {
            this.trigger(document, "dataMessage", {
                message: this.getMessageData()
            })
        }, this.hideRequestMessage = function() {
            this.trigger(document, "dataMessageRemove", {
                id: this.getMessageData().id
            })
        }, this.getMessageData = function() {
            return {
                id: "web-notification-permission-banner",
                text: (0, s.default)("TweetDeck needs permission to show your desktop notifications in this browser"),
                colors: {
                    background: "#b2d5ed",
                    foreground: "#555"
                },
                actions: [{
                    class: "Button--primary",
                    id: "yes-button",
                    action: "trigger-event",
                    label: (0, s.default)("Let's go!"),
                    event: {
                        type: "uiRequestBrowserNotificationPermission",
                        data: {}
                    }
                }]
            }
        }
    }, n.default)
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.trackSelectDefaultAccount = function() {
            TD.controller.stats.defaultAccountSelected()
        }, this.after("initialize", function() {
            this.on(document, "uiSelectDefaultAccount", this.trackSelectDefaultAccount)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(17),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.trackClear = function() {
            TD.controller.stats.columnActionClick("clear")
        }, this.trackMoveColumn = function(e, t) {
            TD.controller.stats.columnActionClick(t.action)
        }, this.trackEmbedTimeline = function(e, t) {
            TD.controller.stats.columnActionClick("embed", {
                type: r.default.getColumnType(t.column)
            })
        }, this.trackActionFilterError = function(e, t) {
            TD.controller.stats.actionFilterError()
        }, this.after("initialize", function() {
            this.on(document, "uiClearColumnAction", this.trackClear), this.on(document, "uiMoveColumnAction", this.trackMoveColumn), this.on(document, "uiEmbedTimelineAction", this.trackEmbedTimeline), this.on(document, "uiActionFilterError", this.trackActionFilterError)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(5),
        o = i(361),
        c = i(38);
    e.exports = (0, a.component)(function() {
        this.after("initialize", function() {
            this.on(document, "dataTweetSent", this.handleTweetSent), this.on(document, "dataDmSent", this.handleDmSent), this.on(document, "dataScheduledTweetsSent", this.handleScheduledTweetSent), this.on(document, "uiRemoveInReplyTo", this.handleClearReply), this.on(document, "uiComposeStackReply", this.handleStackReply), this.on(document, "uiDockedComposeTweet", this.handleDockedTweet)
        }), this.handleTweetSent = function(e, t) {
            if ("message" === t.request.type) return this.handleDmSent(e, t);
            var i = r.default.get(t, "request.files", null) || r.default.get(t, "request.tweetData.files", null),
                s = i || [],
                n = s.length,
                a = 1 === n,
                l = Boolean(a && (0, o.isVideo)(s[0])),
                u = Boolean(a && (0, o.isGif)(s[0])),
                d = Boolean(n && !u && !l),
                h = (0, c.getAccountData)(t.request.accountKey),
                m = h ? h.id : null,
                f = Boolean(t.request.scheduledDate),
                p = t.request.inline || !1;
            switch (t.request.type) {
                case "tweet":
                    TD.controller.stats.postTweet({
                        twitterId: m,
                        withImage: d,
                        withGIF: u,
                        withVideo: l,
                        isScheduled: f
                    });
                    break;
                case "reply":
                    TD.controller.stats.postReply({
                        twitterId: m,
                        withImage: d,
                        withGIF: u,
                        withVideo: l,
                        isScheduled: f,
                        inline: p
                    })
            }
        }, this.handleDmSent = function(e, t) {
            var i = (0, c.getAccountData)(t.request.accountKey),
                s = i ? i.id : null,
                n = Boolean(t.request.files && t.request.files.length),
                r = t.request.isReplyBar || !1,
                a = "GROUP_DM" === t.request.messageType;
            TD.controller.stats.postMessage({
                twitterId: s,
                withImage: n,
                isReplyBar: r,
                isGroupDm: a
            })
        }, this.handleScheduledTweetSent = function(e, t) {
            (t = t || {}).request = t.request || {}, t.request.requests = t.request.requests || [], t.request.requests.forEach(function(t) {
                this.handleTweetSent(e, {
                    request: t
                })
            }.bind(this))
        }, this.handleClearReply = function() {
            TD.controller.stats.composeClearReply()
        }, this.handleStackReply = function() {
            TD.controller.stats.composeStackReply()
        }, this.handleDockedTweet = function(e, t) {
            t.popFromInline && TD.controller.stats.composePopFromInline(), t.contextMenu && TD.controller.stats.composeFromContextMenu(t.contextMenu)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.after("initialize", function() {
            this.on(document, "dataCustomTimelineCreateSuccess", this.handleTimelineCreated), this.on(document, "dataCustomTimelineUpdateSuccess", this.handleTimelineUpdated), this.on(document, "dataCustomTimelineDeleteSuccess", this.handleTimelineDeleted), this.on(document, "dataAddOrMoveTweetToCustomTimelineSuccess", this.handleTweetAddedOrMoved), this.on(document, "dataRemoveTweetFromCustomTimelineSuccess", this.handleTweetRemoved)
        }), this.handleTimelineCreated = function(e, t) {
            TD.controller.stats.customTimelineCreated()
        }, this.handleTimelineUpdated = function(e, t) {
            TD.controller.stats.customTimelineUpdated()
        }, this.handleTimelineDeleted = function(e, t) {
            TD.controller.stats.customTimelineDeleted()
        }, this.handleTweetAddedOrMoved = function(e, t) {
            TD.controller.stats.tweetAddedOrMovedToCustomTimeline(t.action.actionType)
        }, this.handleTweetRemoved = function(e, t) {
            TD.controller.stats.tweetRemovedFromCustomTimeline()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component,
        o = i(96),
        c = i(29);
    e.exports = a(o, function() {
        this.initialState({
            viaLoginForm: !1
        }), this.after("initialize", function() {
            this.on(document, "dataAppStart", this.start), this.on(document, "uiLoginFormImpression", this.loginImpression);
            var e = c.Observable.fromEvent((0, r.default)(document), "TD.ready"),
                t = c.Observable.fromEvent((0, r.default)(document), "dataQueryParams", function(e, t) {
                    return t.params
                });
            this.readyStream = c.Observable.combineLatest(e, t, function(e, t) {
                return t
            }).take(1).subscribe(this.complete.bind(this))
        }), this.before("teardown", function() {
            this.readyStream.unsubscribe()
        }), this.start = function() {
            var e = !!TD.util.getTwitterCookieUserId();
            this.trigger("metric", {
                key: "login:start:" + (e ? "has-twitter-session" : "no-session")
            })
        }, this.loginImpression = function() {
            this.mergeState({
                viaLoginForm: !0
            }), this.trigger("metric", {
                key: "login:login-form-impression:twitter"
            })
        }, this.complete = function(e) {
            e.via_twitter_login && this.mergeState({
                viaLoginForm: !0
            });
            var t = TD.storage.store.getTwitterLoginAccount(),
                i = t.isCookieUser() ? "twitter" : "tweetdeck",
                s = "returning-user";
            this.state.viaLoginForm && (s = "via-login-form"), this.trigger("metric", {
                key: "login:complete:" + i + ":" + s
            }), this.teardown()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.trackImpression = function(e, t) {
            TD.controller.stats.messageBannerImpression(t.id), this.trigger("metric", {
                key: "message_banner:" + t.id + ":impression"
            })
        }, this.trackDismiss = function(e, t) {
            TD.controller.stats.messageBannerDismiss(t.id), this.trigger("metric", {
                key: "message_banner:" + t.id + ":dismiss"
            })
        }, this.trackAction = function(e, t) {
            TD.controller.stats.messageBannerClick(t.messageId, t.actionId), this.trigger("metric", {
                key: "message_banner:" + t.messageId + ":click:" + t.actionId
            })
        }, this.after("initialize", function() {
            this.on(document, "uiShowMessageBanner", this.trackImpression), this.on(document, "uiDismissMessageAction", this.trackDismiss), this.on(document, "uiClickMessageButtonAction", this.trackAction)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.trackOpen = function(e, t) {
            TD.controller.stats.embedTweetDialogOpen(t.tweet.id)
        }, this.after("initialize", function() {
            this.on(document, "uiShowEmbedTweet", this.trackOpen)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.trackInvocation = function() {
            TD.controller.stats.typeaheadInvoked()
        }, this.trackSelection = function(e, t) {
            var i = t.query || t.input;
            "recent-search" === t.searchType ? TD.controller.stats.typeaheadRecentItemSelected(i, t.searchType, t.index) : TD.controller.stats.typeaheadItemSelected(i, t.searchType, t.index)
        }, this.after("initialize", function() {
            this.on(document, "uiTypeaheadDropdownInvoked", this.trackInvocation), this.on(document, "uiTypeaheadItemSelected", this.trackSelection)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.trackViews = function(e, t) {
            TD.controller.stats.viewedTweetSocialProof(t.type)
        }, this.after("initialize", function() {
            this.on(document, "uiShowSocialProof", this.trackViews)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.after("initialize", function() {
            this.on(document, "uiShowReportOptions", function(e, t) {
                t.isMessage || TD.controller.stats.reportUser("impression")
            }), this.on(document, "uiShowReportTweetCancel", function() {
                TD.controller.stats.reportUser("cancel")
            }), this.on(document, "uiReportSpamAction", function(e, t) {
                TD.controller.stats.reportUser("report_as_spam", "spam")
            }), this.on(document, "uiReportCompromisedAction", function(e, t) {
                t && t.block ? TD.controller.stats.reportUser("block", "compromised") : TD.controller.stats.reportUser("report_as_spam", "compromised")
            }), this.on(document, "uiReportAbusiveAction", function(e, t) {
                TD.controller.stats.reportUserAbusive("impression"), t && t.block ? TD.controller.stats.reportUser("block", "abusive") : TD.controller.stats.reportUser("report_as_spam", "abusive")
            }), this.on(document, "uiReportAbusiveOption", function(e, t) {
                TD.controller.stats.reportUserAbusive("click", t.option)
            })
        })
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.after("initialize", function() {
            this.on(document, "uiShowReportOptions", function(e, t) {
                t.isMessage && TD.controller.stats.reportDM("impression")
            });
            r.default.each({
                uiShowReportMessageCancel: "cancel",
                uiShowReportMessageError: "error",
                uiNeedsDMReport: function(e) {
                    return "report_as_" + e.reportType
                }
            }, function(e, t) {
                this.on(document, t, function(t, i) {
                    TD.controller.stats.reportDM(r.default.isFunction(e) ? e(i) : e)
                })
            }.bind(this))
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.after("initialize", function() {
            this.on(document, "scribing", function(e, t) {
                var i;
                t && t.terms && TD.decider.get("convert_scribe_to_metrics_v2") && this.trigger("metric", {
                    key: (i = t.terms, ["scribe"].concat(["page", "section", "component", "element", "action"].map(function(e) {
                        return i[e] || ""
                    })).join(":"))
                })
            })
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = c(i(3)),
        n = c(i(1)),
        r = c(i(0)),
        a = i(5),
        o = i(109);

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, a.component)(function() {
        this.activeSequences = {}, this.sequenceStarters = {}, this.singleKeys = {}, this.combos = {}, this.attributes({
            shortcuts: {
                ";": [{
                    event: "uiShowCommandPalette"
                }],
                esc: [{
                    event: "uiKeyEscape"
                }, {
                    event: "uiInputEscape",
                    selector: ".js-escapable-input"
                }, {
                    event: "uiInputBlur",
                    selector: "input:not(.js-non-escapable-input),textarea:not(.js-non-escapable-input),select:not(.js-non-escapable-input)"
                }, {
                    event: "uiCloseModal"
                }, {
                    event: "uiCloseDropdown"
                }, {
                    event: "uiGridClearSelection"
                }, {
                    event: "uiComposeClose"
                }],
                "CMD+ret": [{
                    event: "uiSendRetweetAction"
                }, {
                    event: "uiComposeSendTweet",
                    selector: ".js-compose-text"
                }],
                "CTRL+ret": [{
                    event: "uiSendRetweetAction"
                }, {
                    event: "uiComposeSendTweet",
                    selector: ".js-compose-text"
                }],
                bksp: [{
                    event: "uiGridBack"
                }],
                ret: [{
                    event: "uiKeyEnter"
                }, {
                    event: "uiInputSubmit",
                    selector: ".js-submittable-input"
                }],
                space: [{
                    event: "uiKeySpace",
                    throttle: !0
                }, {
                    event: "uiGridPageDown",
                    throttle: !0
                }],
                n: [{
                    label: (0, s.default)("Compose — New Tweet"),
                    shortcut: {
                        key: "n"
                    },
                    event: "uiComposeTweet"
                }],
                "/": [{
                    event: "uiAppSearchFocus"
                }],
                s: [{
                    event: "uiAppSearchFocus"
                }],
                a: [{
                    event: "uiShowAddColumn"
                }],
                x: [{
                    event: "uiToggleNavbarWidth"
                }],
                "?": [{
                    event: "uiShowKeyboardShortcutList"
                }],
                left: [{
                    event: "uiKeyLeft",
                    throttle: !0
                }],
                h: [{
                    event: "uiKeyLeft",
                    throttle: !0
                }],
                right: [{
                    event: "uiKeyRight",
                    throttle: !0
                }],
                l: [{
                    event: "uiKeyRight",
                    throttle: !0
                }],
                up: [{
                    event: "uiKeyUp",
                    throttle: !0
                }],
                k: [{
                    event: "uiKeyUp",
                    throttle: !0
                }],
                down: [{
                    event: "uiKeyDown",
                    throttle: !0
                }],
                j: [{
                    event: "uiKeyDown",
                    throttle: !0
                }],
                r: [{
                    event: "uiGridReply"
                }],
                f: [{
                    event: "uiGridFavorite"
                }],
                "SHIFT+f": [{
                    event: "uiGridFavoriteFromAccounts"
                }],
                t: [{
                    event: "uiGridRetweet"
                }],
                d: [{
                    label: (0, s.default)("Compose — New Direct Message"),
                    shortcut: {
                        key: "d"
                    },
                    event: "uiGridDirectMessage"
                }],
                m: [{
                    event: "uiGridDirectMessage"
                }],
                p: [{
                    event: "uiGridProfile"
                }],
                c: [{
                    event: "uiGridCustomTimeline"
                }],
                "SHIFT+ ": [{
                    event: "uiGridPageUp",
                    throttle: !0
                }],
                pageup: [{
                    event: "uiGridPageUp",
                    throttle: !0
                }],
                pagedown: [{
                    event: "uiGridPageDown",
                    throttle: !0
                }],
                home: [{
                    event: "uiGridHome",
                    throttle: !0
                }],
                end: [{
                    event: "uiGridEnd",
                    throttle: !0
                }],
                ",": [{
                    event: "uiShowGlobalSettings"
                }],
                ".": [{
                    event: "uiGridContextMenu"
                }]
            },
            charCodes: {
                bksp: 8,
                ret: 13,
                esc: 27,
                space: 32,
                pageup: 33,
                pagedown: 34,
                end: 35,
                home: 36,
                left: 37,
                up: 38,
                right: 39,
                down: 40
            },
            defaultKeyEvent: "keypress",
            keySequenceTimeoutDelay: 1e3,
            modifiers: {
                ctrl: "ctrlKey",
                alt: "altKey",
                cmd: "metaKey",
                shift: "shiftKey"
            }
        }), this.after("initialize", function() {
            var e = this;
            this.on(document, "uiInputBlur", this.blurInput), this.on(window, "keypress", this.handleKeyPress), this.on(window, "keydown", this.handleKeyDown);
            for (var t = 0; t < 10; t++) this.addShortcut(t + "", this.columnFocusFactory(t));
            n.default.each(this.attr.shortcuts, function(t, i) {
                t.forEach(function(t) {
                    var s = e.shortcutEventHandlerFactory(t);
                    e.addShortcut(i, s, t.selector), e.addCommands([{
                        label: t.label,
                        shortcut: t.shortcut,
                        apply: function() {
                            return e.trigger(t.event, {
                                keyboardShortcut: !0
                            })
                        }
                    }])
                })
            })
        }), this.blurInput = function(e, t) {
            (0, r.default)(e.target).blur()
        }, this.shortcutEventHandlerFactory = function(e) {
            var t = function(t) {
                t.preventDefault(), t.stopPropagation(), this.trigger(t.target, e.event, {
                    keyboardShortcut: !0
                })
            }.bind(this);
            return e.throttle ? n.default.throttle(t, 100) : n.default.debounce(t, 200, !0)
        }, this.columnFocusFactory = function(e) {
            return function(t) {
                t.preventDefault(), t.stopPropagation(), 0 === e ? this.trigger("uiColumnFocus", {
                    last: !0
                }) : this.trigger("uiColumnFocus", {
                    index: e - 1
                })
            }.bind(this)
        }, this.getShortcutForEvent = function(e) {
            var t, i = e.which;
            return this.eventHasModifier(e) && (t = this.combos[i]), t || this.eventHasFunctionModifier(e) || (t = this.activeSequences[i] || this.singleKeys[i] || this.sequenceStarters[i]), t
        }, this.clearActiveSequences = function() {
            this.activeSequences = {}
        }, this.eventHasModifier = function(e) {
            return e.ctrlKey || e.altKey || e.metaKey || e.shiftKey
        }, this.eventHasFunctionModifier = function(e) {
            return e.ctrlKey || e.metaKey
        }, this.getModifiedKeyEvent = function(e, t) {
            var i;
            return this.eventHasModifier(e) && t.modifiers && n.default.each(t.modifiers, function(t, s) {
                e[s] && (i = t)
            }, this), i
        }, this.handleKeyPress = function(e) {
            var t = (0, r.default)(".DrawerModal").hasClass("is-visible");
            if (!t || e.which === this.attr.charCodes.esc) {
                var i;
                e.which >= 65 && e.which <= 90 && (e.which += 32), (i = this.getShortcutForEvent(e)) ? i.sequences ? (n.default.each(i.sequences, function(e, t) {
                    this.addSequenceEnd(t, e)
                }, this), setTimeout(function() {
                    this.clearActiveSequences()
                }.bind(this), this.attr.keySequenceTimeoutDelay)) : ((i.shortcuts || [i]).map(function(t) {
                    return t.modifiers && (t = this.getModifiedKeyEvent(e, t)), t
                }, this).filter(function(e) {
                    return void 0 !== e
                }).forEach(function(t) {
                    var i = t.selector || ":not(input):not(textarea):not(select)",
                        s = (0, r.default)(e.target);
                    (s.is(i) || s.is(":radio,:checkbox")) && t.callback(e, t.data)
                }), this.clearActiveSequences()) : this.clearActiveSequences()
            }
        }, this.getCharCodeForKey = function(e) {
            var t, i = !1;
            if ("string" != typeof e) throw new Error("Key must be a string");
            return 1 === (e = e.toLowerCase()).length ? (t = e.charCodeAt(0), [
                [32, 64],
                [91, 126]
            ].forEach(function(e) {
                if (t >= e[0] && t <= e[1]) return i = !0, !1
            }), i || (t = void 0)) : t = this.attr.charCodes[e], t
        }, this.addSingleKey = function(e, t, i, s) {
            var n;
            if ("function" != typeof t) throw new Error("addSingleKey: no callback");
            if (void 0 === (n = this.getCharCodeForKey(e))) throw new Error("addSingleKey: invalid key string");
            if (this.singleKeys[n]) {
                var r = this.singleKeys[n].shortcuts.every(function(e) {
                    return t !== e.callback || i !== e.selector
                }, this);
                if (!r) throw new Error("addSingleKey: attempted to add identical shortcut")
            } else this.singleKeys[n] = {
                shortcuts: []
            };
            this.singleKeys[n].shortcuts.push({
                shortcut: e,
                callback: t,
                selector: i,
                data: s
            })
        }, this.addSequence = function(e, t, i, s) {
            var n, r;
            if ("function" != typeof t) throw new Error("addSequence: no callback");
            if ("string" != typeof e) throw new Error("addSequence: sequence must be a string");
            if (2 !== (n = e.split(" ")).length) throw new Error('addSequence: sequence should be in format "g a"');
            if (void 0 === (r = this.getCharCodeForKey(n[0]))) throw new Error('addSequence: sequence should be in format "g a"');
            if (void 0 === this.getCharCodeForKey(n[1])) throw new Error('addSequence: sequence should be in format "g a"');
            this.sequenceStarters[r] || (this.sequenceStarters[r] = {
                sequences: {}
            }), this.sequenceStarters[r].sequences[n[1]] = {
                shortcut: e,
                callback: t,
                selector: i,
                data: s
            }
        }, this.addSequenceEnd = function(e, t) {
            var i;
            if ("function" != typeof t.callback) throw new Error("addSequenceEnd: no callback");
            if ("string" != typeof e) throw new Error("addSequenceEnd: invalid shortcut key");
            if (void 0 === (i = this.getCharCodeForKey(e))) throw new Error("addSequenceEnd: invalid shortcut key");
            this.activeSequences[i] = {
                shortcut: t.shortcut,
                callback: t.callback,
                selector: t.selector,
                data: t.data
            }
        }, this.addCombo = function(e, t, i, s) {
            var n, r, a;
            if ("function" != typeof t) throw new Error("addCombo: no callback");
            if ("string" != typeof e) throw new Error("addCombo: invalid combo string");
            if (2 !== (n = e.split("+")).length) throw new Error('addCombo: invalid combo "' + e + '"');
            if (void 0 === (r = this.attr.modifiers[n[0].toLowerCase()])) throw new Error("addCombo: invalid modifier");
            if (void 0 === (a = this.getCharCodeForKey(n[1]))) throw new Error("addCombo: invalid shortcut key");
            var o = {
                modifiers: {}
            };
            o.modifiers[r] = {
                shortcut: e,
                callback: t,
                selector: i,
                data: s
            }, this.combos[a] || (this.combos[a] = {
                shortcuts: []
            }), this.combos[a].shortcuts.push(o)
        }, this.isSequence = function(e) {
            return "string" == typeof e && e.indexOf(" ") > 0
        }, this.isCombo = function(e) {
            return "string" == typeof e && e.indexOf("+") > 0
        }, this.addShortcut = function(e, t, i, s) {
            3 === arguments.length && "string" != typeof i && (s = i, i = void 0), this.isCombo(e) ? this.addCombo(e, t, i, s) : this.isSequence(e) ? this.addSequence(e, t, i, s) : this.addSingleKey(e, t, i, s)
        }, this.removeSingleKey = function(e) {
            var t = this.getCharCodeForKey(e);
            this.singleKeys[t] && delete this.singleKeys[t]
        }, this.removeCombo = function(e) {
            var t = this.getCharCodeForKey(e.split("+")[1]);
            this.combos[t] && delete this.combos[t]
        }, this.removeSequence = function(e) {
            var t = this.getCharCodeForKey(e.split(" ")[0]);
            this.sequenceStarters[t] && delete this.sequenceStarters[t]
        }, this.removeShortcut = function(e) {
            this.isCombo(e) ? this.removeCombo(e) : this.isSequence(e) ? this.removeSequence(e) : this.removeSingleKey(e)
        }, this.handleKeyDown = function(e) {
            var t = [this.attr.charCodes.bksp, this.attr.charCodes.esc, this.attr.charCodes.ret, this.attr.charCodes.left, this.attr.charCodes.right, this.attr.charCodes.up, this.attr.charCodes.down, this.attr.charCodes.pagedown, this.attr.charCodes.pageup, this.attr.charCodes.home, this.attr.charCodes.end],
                i = t.some(function(t) {
                    return t === e.which
                });
            i && this.handleKeyPress(e)
        }
    }, o.flightWithCommands)
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(0)),
        r = o(i(8)),
        a = i(58);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var c = i(5).component;
    e.exports = c(function() {
        this.attributes({
            dismissButton: ".js-dismiss",
            actions: {
                triggerEvent: "trigger-event",
                dismiss: "dismiss",
                openUrl: "url-ext"
            },
            buttonClasses: {
                "trigger-event": "Button--primary",
                "url-ext": "Button--primary",
                dismiss: "btn-alt"
            }
        }), this.eventHandlerFactory = function(e) {
            return function() {
                switch (e.action) {
                    case "trigger-event":
                        this.trigger(e.event.type, e.event.data)
                }
                this.trigger("uiClickMessageButtonAction", {
                    messageId: this.message.id,
                    actionId: e.id
                }), this.message.isUndismissable || this.hide()
            }.bind(this)
        }, this.dismiss = function() {
            this.message && (this.trigger("uiDismissMessageAction", this.message), this.hide())
        }, this.revokeMessage = function(e, t) {
            this.message && this.message.id === t.id && this.hide()
        }, this.hide = function() {
            window.clearInterval(this.resizeBannerCheckInterval), this.trigger("uiHidingMessageBanner", this.message), this.message = null
        }, this.handleMessageData = function(e, t) {
            this.message && this.message.id === t.message.id || (this.message = t.message, this.showMessage({
                data: t
            }))
        }, this.handleMessageContainerHidden = function() {
            this.$node.addClass("is-hidden")
        }, this.showMessage = function(e) {
            var t, i, s, n = e.data.message,
                a = {
                    text: n.text,
                    bannerClasses: e.data.bannerClasses,
                    actions: [],
                    isUndismissable: n.isUndismissable
                };
            for (this.trigger("uiShowMessageBanner", n), i = 0; n.actions && i < n.actions.length; i++) switch (t = n.actions[i], s = t.class, t.action) {
                case this.attr.actions.openUrl:
                    a.actions.push({
                        label: t.label,
                        action: t.action,
                        actionId: t.id,
                        url: t.url,
                        isExternalUrl: !0,
                        boundEventHandler: this.eventHandlerFactory(t),
                        buttonClass: s || this.attr.buttonClasses[t.action]
                    });
                    break;
                case this.attr.actions.triggerEvent:
                case this.attr.actions.dismiss:
                    a.actions.push({
                        label: t.label,
                        action: t.action,
                        actionId: t.id,
                        boundEventHandler: this.eventHandlerFactory(t),
                        buttonClass: s || this.attr.buttonClasses[t.action]
                    })
            }
            var o = r.default.render("topbar/message_banner", a);
            this.$node.html(o), n.colors && this.$node.css({
                "background-color": n.colors.background,
                color: n.colors.foreground
            }), this.on(this.select("dismissButton"), "click", this.dismiss), a.actions.forEach(function(e) {
                this.on('[data-action-id="' + e.actionId + '"]', "click", e.boundEventHandler)
            }.bind(this)), this.resizeBannerCheckInterval = window.setInterval(function() {
                this.currentBannerHeight && this.currentBannerHeight !== this.$node.outerHeight() && this.trigger("uiMessageBannerResized"), this.currentBannerHeight = this.$node.outerHeight()
            }.bind(this), 200), this.$node.removeClass("is-hidden"), this.trigger("uiMessageBannerShown", n)
        }, this.maybeDisplayGDPRNotice = function() {
            var e = (0, a.getTwitterAccounts)();
            e.some(function(e) {
                return e.requireConsent
            }) && (0, n.default)(document).trigger("dataMessage", {
                bannerClasses: "txt-bold color-twitter-white",
                message: {
                    id: "gdpr-consent-banner",
                    isUndismissable: !0,
                    text: (0, s.default)("Every account you’re using in TweetDeck will need to agree to the\n                        updated Terms and Privacy Policy on {{{twitterLink}}}. Only people\n                        with account passwords can complete the process.", {
                        twitterLink: '<a class="color-twitter-white link-current-color link-underline" href="https://twitter.com">Twitter.com</a>'
                    })
                }
            })
        }, this.after("initialize", function() {
            this.on(document, "dataMessage", this.handleMessageData), this.on(document, "uiMessageBannerContainerHidden", this.handleMessageContainerHidden), this.on(document, "dataMessageRemove", this.revokeMessage), this.trigger("uiMessageBannerReady"), this.maybeDisplayGDPRNotice()
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5),
        n = a(i(362)),
        r = a(i(1));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, s.component)(function() {
        this.attributes({
            sourceId: "appSearch",
            appSearchInputSelector: ".js-app-search-input",
            searchButtonSelector: ".js-perform-search",
            clearButtonSelector: ".js-clear-search",
            KEY_CODE_MAP: {
                13: {
                    name: "ENTER",
                    event: "uiSearchInputSubmit",
                    on: "keypress",
                    preventDefault: !0
                },
                27: {
                    name: "ESC",
                    event: "uiSearchInputEscaped",
                    on: "keydown"
                },
                9: {
                    name: "TAB",
                    event: "uiSearchInputTab",
                    on: "keydown",
                    preventDefault: !0
                },
                37: {
                    name: "LEFT",
                    event: "uiSearchInputLeft",
                    on: "keydown"
                },
                39: {
                    name: "RIGHT",
                    event: "uiSearchInputRight",
                    on: "keydown"
                },
                38: {
                    name: "UP",
                    event: "uiSearchInputMoveUp",
                    on: "keydown",
                    preventDefault: !0
                },
                40: {
                    name: "DOWN",
                    event: "uiSearchInputMoveDown",
                    on: "keydown",
                    preventDefault: !0
                }
            }
        }), this.after("initialize", function() {
            n.default.attachTo(this.$node, {
                source: "appSearch"
            }), this.$input = this.select("appSearchInputSelector"), this.on(this.$input, "keyup keydown keypress paste", this.modifierKeyPressed), this.on(this.$input, "focus", this.handleFocus), this.on(this.$input, "uiInputBlur", function(e) {
                this.$input.blur()
            }), this.on(this.$input, "click", function(e) {
                e.stopPropagation()
            }), this.on(this.select("searchButtonSelector"), "click", function(e) {
                this.trigger(this.$input, "uiSearchInputSubmit", {
                    query: this.$input.val()
                })
            }), this.on(this.select("clearButtonSelector"), "click", this.handleClearSearchAction), this.on("uiAppSearchSetPreventDefault", this.setPreventKeyDefault), this.on("uiAppSearchSubmit", this.handleAppSearchSubmit), this.on(document, "uiNewSearchQuery uiSearchInputChanged", this.handleSearchInputChanged), this.on("uiSearchInPopoverHidden", this.handleResetState)
        }), this.handleSearchInputChanged = function(e, t) {
            t.source !== this.attr.sourceId && (this.$input.val(t.query), this.currentQuery = t.query)
        }, this.handleAppSearchSubmit = r.default.debounce(function(e, t) {
            this.trigger(this.$input, "uiSearchInputSubmit", {
                query: t.query,
                columnKey: t.columnKey
            })
        }, 100), this.around("trigger", function() {
            var e, t = [].slice.call(arguments),
                i = t.shift();
            "string" != typeof t[t.length - 1] && (e = t.pop()), void 0 === e ? e = {
                source: this.attr.sourceId
            } : e.source = this.attr.sourceId, t.push(e), i.apply(this, t)
        }), this.setPreventKeyDefault = function(e, t) {
            this.attr.KEY_CODE_MAP[t.key].preventDefault = t.preventDefault
        }, this.handleFocus = function(e) {
            r.default.defer(this.$input.select.bind(this.$input)), this.trigger(this.$input, "uiSearchInputFocus", {
                query: this.$input.val()
            })
        }, this.modifierKeyPressed = function(e) {
            var t = this.$input.val();
            t = "" === t.trim() ? "" : t;
            var i = this.attr.KEY_CODE_MAP[e.which || e.keyCode];
            if (i) {
                if (e.type !== i.on) return;
                i.preventDefault && e.preventDefault(), this.trigger(this.$input, i.event, {
                    query: t,
                    cursorPosition: this.$input[0].selectionStart
                })
            } else this.setQueryAndTriggerUpdateEvent(t)
        }, this.setQueryAndTriggerUpdateEvent = function(e) {
            this.currentQuery && this.currentQuery === e || (this.currentQuery = e, this.trigger(this.$input, "uiSearchInputChanged", {
                query: this.currentQuery
            }))
        }, this.focusInput = function() {
            this.$input.focus()
        }, this.handleClearSearchAction = function() {
            this.focusInput()
        }, this.handleResetState = function() {
            this.currentQuery = null, this.$input.val("")
        }, this.before("teardown", function() {
            this.trigger("uiDestroyAsynchronousForm")
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.attributes({
            clearButtonSelector: ".js-clear-search",
            textInputSelector: 'input[type="text"]',
            hasValueClass: "has-value",
            isWaitingForResponseClass: "is-waiting-for-response"
        }), this.handleClearAction = function() {
            this.$textInput.val(""), this.$node.removeClass(this.attr.hasValueClass), this.$textInput.trigger("change")
        }, this.handleAsyncFormReceivedResponse = function() {
            var e = this.$textInput.val();
            this.$node.removeClass(this.attr.isWaitingForResponseClass), "" !== e ? this.$node.addClass(this.attr.hasValueClass) : this.$node.removeClass(this.attr.hasValueClass), this.value = e
        }, this.handleAsyncFormWaitingForResponse = function() {
            var e = this.$textInput.val();
            void 0 !== this.value && this.value !== e && this.$node.addClass(this.attr.isWaitingForResponseClass), this.value = e
        }, this.after("initialize", function() {
            this.$textInput = this.select("textInputSelector"), this.value = this.$textInput.val().trim(), "" !== this.value && this.$node.addClass(this.attr.hasValueClass), this.on("click", {
                clearButtonSelector: this.handleClearAction
            }), this.on("uiAsyncFormWaitingForResponse", this.handleAsyncFormWaitingForResponse), this.on("uiAsyncFormReceivedResponse", this.handleAsyncFormReceivedResponse), this.on("uiSearchInputDestroy", this.teardown)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = o(i(1)),
        n = o(i(94)),
        r = o(i(12)),
        a = o(i(20));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            develFeatureFlag: "tweetdeck_devel",
            dogfoodFeatureFlag: "tweetdeck_dogfood"
        }), this.initialState({
            originalTitle: function() {
                return document.title
            },
            isDevel: !1,
            isDogfood: !1
        }), this.componentDidInitialize = function() {
            this.watchFeatureFlags()
        }, this.watchFeatureFlags = function() {
            var e = this;
            this.observe((0, n.default)()).map(function(t) {
                return {
                    isDevel: s.default.get(t, ["config", e.attr.develFeatureFlag, "value"], !1),
                    isDogfood: s.default.get(t, ["config", e.attr.dogfoodFeatureFlag, "value"], !1)
                }
            }).subscribe(function(t) {
                return e.mergeState(t)
            })
        }, this.shouldComponentUpdate = function(e, t) {
            return !s.default.isEqual(t, this.state)
        }, this.render = function() {
            document.title = this.getTitleFromState(this.state)
        }, this.getTitleFromState = function(e) {
            var t = e.isDevel ? "Dev" : "",
                i = e.isDogfood ? "Dogfood" : "",
                s = [t, i].filter(Boolean).join(" + ").trim();
            return s ? s + " :: " + e.originalTitle : e.originalTitle
        }
    }, a.default)
}, function(e, t, i) {
    "use strict";
    var s = m(i(1)),
        n = m(i(0)),
        r = i(12),
        a = m(r),
        o = m(i(1999)),
        c = m(i(2050)),
        l = m(i(110)),
        u = m(i(2072)),
        d = i(2073),
        h = m(i(17));

    function m(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    i(2074), e.exports = a.default.mixin(function() {
        this.attributes({
            hideTweetDragHandlesClass: "without-tweet-drag-handles",
            scrollDebounceTime: 200,
            focusId: null,
            dragScrollActivationOffset: {
                left: 500,
                right: 800
            },
            dragScrollActivationResponseDamping: 10,
            appColumnsContainerSelector: ".js-app-columns-container",
            columnsContainerSelector: ".js-app-columns",
            columnSelector: ".js-app-columns .js-column"
        }), this.componentDidInitialize = function() {
            var e = this;
            this.$scrollContainer = this.select("appColumnsContainerSelector"), this.on(document, "dataColumnOrder", this.setTweetDragHandleState), this.on(document, "uiColumnRender", function(t, i) {
                return e.handleColumnRender(i.column, {
                    detached: i.detached,
                    getCreatedEl: i.getCreatedEl
                })
            }), TD.controller.columnManager.getAllOrdered().forEach(function(t) {
                e.handleColumnRender(t)
            }), this.setupDragScroll("appColumnsContainerSelector", {
                deltaFn: function(e, t, i, s) {
                    if (!this.attr.dragScrollActivationOffset[t]) return e;
                    var n = this.attr.dragScrollActivationOffset[t] / 10,
                        r = this.attr.dragScrollActivationResponseDamping,
                        a = 1 / (1 + Math.pow(Math.E, n - s / r));
                    return parseFloat((e * a).toFixed(4))
                }
            });
            this.on(document, ["dataColumnOrder", "uiToggleNavBarWidth", "uiDrawerTransitionComplete", "uiCalculateColumnVisibilities"].join(" "), this.calculateColumnVisibilities), this.on(this.$scrollContainer, "scroll", s.default.debounce(this.calculateColumnVisibilities.bind(this), this.attr.scrollDebounceTime)), this.on(window, "resize", this.calculateColumnVisibilities), this.trigger("uiNeedsColumnOrder")
        }, this.handleColumnRender = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                i = t.detached,
                s = t.getCreatedEl,
                r = this.connectColumn(e, {
                    detached: i
                });
            s && s(r), (0, n.default)(document).trigger("uiColumnRendered", {
                column: e,
                $column: r
            })
        }, this.connectColumn = function(e, t) {
            var i = t.detached,
                s = e.model.getKey(),
                a = d.columnStates$.filter(function(e) {
                    return s === e.columnKey
                }).map(function(e) {
                    return e.state
                }),
                l = e instanceof TD.vo.Column ? o.default : c.default,
                u = (0, r.connect)(a)(l),
                h = document.createElement("section");
            return i || this.select("columnsContainerSelector").append(h), u.attachTo(h, {
                focusId: this.attr.focusId,
                column: e
            }), (0, n.default)(h)
        }, this.calculateColumnVisibilities = function() {
            var e = this.select("columnSelector"),
                t = this.$scrollContainer.width(),
                i = {};
            e.each(function(e) {
                var s, r = (0, n.default)(this),
                    a = r.position(),
                    o = r.width();
                a.right = a.left + o, a.left = Math.max(0, a.left), a.right = Math.max(0, a.right), a.left = Math.min(t, a.left), a.right = Math.min(t, a.right), (s = {
                    columnWidth: o,
                    visibleWidth: a.right - a.left,
                    visibleHeight: r.height()
                }).visibleFraction = s.visibleWidth / s.columnWidth, i[r.data("column")] = s
            }), this.trigger("uiColumnVisibilities", i)
        }, this.setTweetDragHandleState = function(e, t) {
            var i = t.columnOrder.some(function(e) {
                    var t = TD.controller.columnManager.get(e);
                    return h.default.isOwnCustomTimeline(t)
                }),
                s = !i;
            this.select("columnsContainerSelector").toggleClass(this.attr.hideTweetDragHandlesClass, s)
        }
    }, l.default, u.default)
}, function(e, t, i) {
    "use strict";
    var s = S(i(32)),
        n = S(i(7)),
        r = S(i(0)),
        a = S(i(12)),
        o = S(i(20)),
        c = S(i(53)),
        l = S(i(8)),
        u = S(i(98)),
        d = S(i(17)),
        h = S(i(2e3)),
        m = S(i(617)),
        f = i(64),
        p = S(i(94)),
        g = S(i(2005)),
        v = S(i(2007)),
        T = i(36),
        w = i(2008),
        b = i(618),
        y = S(i(3)),
        C = S(i(2009)),
        _ = S(i(602)),
        D = i(603);

    function S(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var k = i(1),
        E = i(352),
        I = i(240),
        A = i(362),
        M = i(2010),
        x = i(2011),
        R = i(2012),
        F = i(110),
        O = i(246),
        L = i(247),
        U = i(2013),
        P = i(140),
        N = i(2014),
        j = i(621),
        B = i(354),
        $ = i(158),
        K = i(190),
        z = i(189).TRANSITION_END;
    e.exports = a.default.mixin(function() {
        this.attributes({
            columnMessageSelector: ".js-column-message",
            columnDragDropOverlayText: ".js-drag-drop-overlay-text",
            columnDragDropOverlaySpinner: ".js-drag-drop-overlay-spinner",
            filterErrorTemplate: "column/column_filter_error",
            filterErrorClass: "filter-error",
            showDetailViewClass: "is-shifted-1",
            showSocialProofClass: "is-shifted-2",
            socialProofSelector: ".js-column-social-proof",
            columnStateDefault: "default",
            columnStateDetailView: "detailView",
            columnStateSocialProof: "socialProof",
            moreTweetsButtonContainerSelector: ".more-tweets-btn-container",
            moreTweetsButton: ".js-more-tweets-btn",
            moreTweetsGlow: ".js-more-tweets-glow",
            tweetTextSelector: ".tweet-text",
            tweetDragHandleSelector: ".tweet-drag-handle",
            columnScrollerIsAnimatingClass: "is-column-scroller-animating",
            isNewClass: "is-new",
            chirpSelector: ".js-chirp-container .js-stream-item",
            tweetActionsSelector: ".js-tweet-actions",
            tweetActionsVisibleClass: "is-visible",
            animateInClass: "anim-rotate-in",
            animateOutClass: "anim-rotate-out",
            customTimelineDescriptionSelector: ".js-customtimeline-description",
            shareColumnSelector: ".js-share-column",
            otherRepliesStreamLinkSelector: ".js-other-replies-link",
            focusId: null,
            column: null,
            tweetImpressionTrackingPeriod: 250,
            scribeElementSelector: "[data-scribe-element]",
            userSelectorInputSelector: ".js-username-input",
            isOptionsOpenClass: "is-options-open",
            headerActionButtonSelector: ".js-action-header-button",
            dropIndicatorId: "custom-timeline-drop-indicator",
            dropIndicatorClassName: "drop-indicator",
            insightsEntryPoint: ".js-insights-entry-point",
            searchFilterCalloutSelector: ".js-search-filter-callout",
            liveVideoSelector: ".js-live-video",
            searchFilterSelector: ".js-search-filter",
            addToCustomTimelineSelector: ".js-add-to-customtimeline",
            addToCustomTimelineInputSelector: ".js-add-to-customtimeline-input",
            customTimelineIdDataAttr: "customtimeline-id",
            columnStateDetailViewClass: "js-column-state-detail-view",
            columnStateSocialProofClass: "js-column-state-social-proof",
            scrollContainerSelector: ".js-column-scroller",
            columnOptionsSelector: ".js-column-options",
            columnOptionsContainerSelector: ".js-column-options-container",
            columnUnreadCountSelector: ".js-column-header .js-unread-count",
            columnContentSelector: ".js-column-content"
        }), this.initialState({
            isRebroadCasting: !1,
            searchFilter: function() {
                return this.attr.column.getSearchFilter()
            },
            columnVisibility: function() {
                return this.attr.column.visibility
            }
        }), this._maybeUpdateCount = function(e) {
            var t = e.$el,
                i = e.newCount,
                s = e.oldCount,
                n = (0, D.getHumanFormatOptions)(),
                r = parseInt(i, 10),
                a = r ? (0, _.default)(r, n) : "";
            a !== s && t.text(a)
        }, this.onLiveEngagement = function(e, t) {
            var i = this.$node.find("[data-tweet-id=" + t + "]");
            if (e.like_count) {
                var s = i.find(".js-like-count");
                this._maybeUpdateCount({
                    $el: s,
                    newCount: e.like_count,
                    oldCount: s.text()
                })
            } else if (e.retweet_count) {
                var n = i.find(".js-retweet-count");
                this._maybeUpdateCount({
                    $el: n,
                    newCount: e.retweet_count,
                    oldCount: n.text()
                })
            } else if (e.reply_count) {
                var r = i.find(".js-reply-count");
                this._maybeUpdateCount({
                    $el: r,
                    newCount: e.reply_count,
                    oldCount: r.text()
                })
            }
        }, this.componentDidInitialize = function() {
            var e = this;
            this.column = this.attr.column, this.tweetEngagementSubscriptions = {}, this.tweetEngagementsManager = new C.default(this.onLiveEngagement.bind(this)), this.initialRender(), this.attachChild(N, this.$node), (0, w.browserNeedsWillAnimateFix)() && (0, r.default)(this.$node).addClass("will-animate"), this.columnKey = this.column.model.getKey(), this.visibleChirpsTierTwo = {}, this.visibleChirpsTierThree = {};
            var t, i, s, a = this.column.getCustomTimelineFeed(),
                o = d.default.isOwnCustomTimeline(this.column);
            if (o && (t = a.getMetadata(), i = t.id, s = TD.storage.Account.generateKeyFor("twitter", t.ownerId)), this.targetTopPosition = 0, this.$socialProofContainer = this.select("socialProofSelector"), this.$columnOptions = this.select("columnOptionsSelector"), this.$scrollContainer = this.select("scrollContainerSelector"), this.createNewHeightCache(), this.renderColumnMessage(), "col_customtimeline" === d.default.getColumnType(this.column)) {
                var l = this.getMomentMakerProStream();
                this.observe(l).subscribe(function(t) {
                    e.column.hasMomentMakerProAccess = t
                })
            }
            this.attr.tweetImpressionTrackingPeriod > 0 && (this.scribeTweetImpressions = k.throttle(this.scribeTweetImpressions.bind(this), this.attr.tweetImpressionTrackingPeriod)), this.setupDragDrop({
                type: "tweet",
                indicateDrop: !1,
                predrag: function(e, t) {
                    (0, r.default)(t.el).closest(this.attr.tweetActionsSelector).addClass(this.attr.tweetActionsVisibleClass)
                },
                dragend: function(e, t) {
                    (0, r.default)(t.el).closest(this.attr.tweetActionsSelector).removeClass(this.attr.tweetActionsVisibleClass)
                }
            }), this.on("click", {
                shareColumnSelector: this.handleShareColumnButtonClick,
                scribeElementSelector: this.handleScribeElementClick,
                headerActionButtonSelector: k.throttle(this.handleHeaderClick.bind(this), 300)
            }), this.on("click", {
                otherRepliesStreamLinkSelector: function(t, i) {
                    var s = (0, r.default)(t.target).closest("[data-recipient-ids]").attr("data-recipient-ids");
                    if (s) {
                        var n = s.split(",").map(function(e) {
                            return {
                                id: e
                            }
                        });
                        e.recipientUsersRequestId = K.requestUsers(n)
                    }
                }
            }), this.on("mediaGalleryRequestTwitterUsersForReplyModal", function(t, i) {
                var s = K.getImplicitMentions(i.userMentions);
                e.recipientUsersRequestId = K.requestUsers(s)
            }), this.on(document, "dataTwitterUsers", function(t, i) {
                if (i.requestId === e.recipientUsersRequestId) {
                    var s = K.getDefaultModalOptions();
                    e.showModal(B, {
                        replies: i.users,
                        withUserBio: !0,
                        withComposeContext: !1
                    }, (0, n.default)({}, s, {
                        title: (0, y.default)("People in conversation")
                    }))
                }
            }), this.on("uiViewTimeline", this.handleViewTimeline), this.on("uiReferenceTimeline", this.handleReferenceTimeline), this.on("uiDetailViewActive", this.handleDetailViewActive), this.on("uiDetailViewClosed", this.handleDetailViewClosed), this.on("uiCloseDetailView", this.handleCloseDetailView), this.on("uiSocialProofForTweetClosed", this.handleSocialProofClosed), this.on("uiShowSocialProof", this.handleShowSocialProof), this.on("uiCloseSocialProof", this.handleCloseSocialProof), this.on(document, "uiShowDmParticipants", this.handleShowDmParticipants), this.on("uiDmParticipantsClosed", this.handleCloseDmParticipants), this.on("uiUpdateLiveVideoTimeline", this.handleLiveVideoTimelineUpdate), this.on("uiMarkAllMessagesRead", this.handleMarkAllRead), this.on("uiReadStateChange", this.handleColumnReadStatus), this.on(document, "uiMessageThreadRead", this.handleMessageThreadRead), this.on(document, "uiMessageUnreadCount", this.handleMessageCount), this.on("uiColumnUpdateMediaPreview", this.handleUpdateMediaPreview), this.on("dataColumnUpdatingFilters dataColumnUpdatingFeed", this.handleColumnUpdating), this.on("dataColumnFiltersUpdated dataColumnFeedUpdated", this.handleColumnUpdated), this.on("uiColumnTitleUpdate", this.handleColumnTitleUpdate), this.on("uiRemoveColumn", this.handleUiRemoveColumn), this.on("uiExitSettings", this.exitEditMode), this.on("uiEnterSettings", this.enterEditMode), this.on("mouseover", {
                tweetDragHandleSelector: function(e, t) {
                    var i = t.el;
                    $.makeTweetDraggable(i)
                }
            }), this.on("mouseout", {
                tweetDragHandleSelector: k.debounce(function(e, t) {
                    var i = t.el;
                    $.makeTweetUnDraggable(i)
                }, 50)
            }), this.on(document, "dataSerializedColumn", this.handleSerializedColumn), this.on(document, "dataSettingsValues", this.handleSettingsChange), this.on(document, "uiColumnUpdateMediaPreview", this.handleMediaPreviewChange), this.on(document, "uiFocus", function(e, t) {
                this.hasFocus = t.id === this.attr.focusId, this.hasFocus && this.scribeTweetImpressions()
            }), this.on(this.$scrollContainer, "scroll", function() {
                this.scribeTweetImpressions();
                var e = 1 === this.column.visibility.visibleFraction;
                this._checkUivExperiment(e)
            }), this.on(document, "uiColumnVisibilities", this.handleColumnVisibilities), this.on(document, "uiColumnChirpsChanged", function(e, t) {
                t.id === this.columnKey && this.scribeTweetImpressions()
            }), this.on("uiTransitionExpandEnd", this.scribeTweetImpressions), this.on(window, "resize", k.debounce(this.handleWindowResize.bind(this), 300)), this.on(document, TD.util.visibilityChangeEventName(), function(e) {
                this.scribeTweetImpressions()
            }), this.on(window, "beforeunload", this.scribeAllChirpsHidden), this.setMoreTweetsDesign(), this.attachChild(U, this.$node), o && (this.setupDragDrop({
                type: "tweet",
                indicateDrop: !0,
                dragstart: this.onDragStart,
                dragleave: this.onDragLeave,
                dragover: this.onDragOver,
                dragend: this.onDragEnd,
                drop: this.onDrop
            }), this.attachChild(v.default, this.select("addToCustomTimelineSelector"), {
                accountKey: s,
                customTimelineId: i
            }), this.on(document, "dataAddOrMoveTweetToCustomTimelineSuccess", this.boundedRefreshCustomTimelineFeed.bind(this)), this.on(document, "dataAddOrMoveTweetToCustomTimelineError", this.onDragLeave), this.on(document, "dataRemoveTweetFromCustomTimelineSuccess", this.removeChripFromCustomTimelineFeed.bind(this)), this.on("uiRemoveTweetFromCustomTimeline", this.rebroadcast(this.transformRemoveTweetFromCustomTimeline))), a && this.attachChild(M, this.select("customTimelineDescriptionSelector"), {
                withAutoComplete: !1,
                customTimelineId: a.getMetadata().id,
                isOwnCustomTimeline: d.default.isOwnCustomTimeline(this.column),
                columnKey: this.columnKey,
                readOnly: this.column.temporary,
                accountKey: a.getAccountKey(),
                maxCharCount: 160
            });
            var u = d.default.isSearchColumn(this.column) && !this.column.temporary && "awaiting_backfill" === this.column.state;
            u && this.attachChild(m.default, this.select("searchFilterCalloutSelector"), {
                content: (0, y.default)("Filter your search for better results"),
                getSetting: function() {
                    return TD.settings.getShowSearchFilterCallout
                },
                setSetting: function() {
                    return function(e) {
                        TD.settings.setShowSearchFilterCallout(e)
                    }
                },
                scribeComponent: "search"
            });
            var f = "col_livevideo" === d.default.getColumnType(this.column);
            if (f) {
                var p = this.column.getFeeds()[0].getMetadata();
                this.attachChild(g.default, this.select("liveVideoSelector"), (0, n.default)({}, p, {
                    isTemporaryColumn: this.column.temporary
                }))
            }
            if (this.on("uiCardDidResize", this.handleCardResized), d.default.isSearchColumn(this.column)) {
                var b = c.default.nextTeardownEvent();
                this.observe(T.betaAndInsights$).subscribe(function(t) {
                    var i = t.betaEnabled,
                        s = t.insightsEnabled;
                    if (i || s) {
                        var n = e.connect(h.default, {
                            mapStateToProps: function(t) {
                                return {
                                    matching: k.get(e.props, "matching", null),
                                    isColumnVisible: t.columnVisibility.visibleFraction > 0
                                }
                            }
                        });
                        e.attachChild(n, e.select("insightsEntryPoint"), {
                            teardownOn: b + " " + e.childTeardownEvent
                        })
                    } else e.trigger(b)
                })
            }
            TD.ui.columns.setupColumnScrollListeners(this.column)
        }, this.initialRender = function() {
            var e = this.column,
                t = e.temporary ? function(e) {
                    return {
                        columnkey: e.model.getKey(),
                        columntitle: d.default.getColumnTitleHTML(e),
                        columniconclass: d.default.getColumnIconClassByColumn(e),
                        isTemporary: !0
                    }
                }(e) : function(e) {
                    var t = d.default.isMessageColumn(e),
                        i = null;
                    e.hasActiveSearchFilters() && (i = {
                        content: e.hasActiveContentFilters(),
                        user: e.hasActiveUserFilters(),
                        action: e.hasActiveActionFilters() && !e.isSingleActionTypeColumn(),
                        engagement: e.hasActiveEngagementFilters(),
                        filterError: e.hasFilterError()
                    });
                    var s = d.default.isSearchColumn(e);
                    return {
                        columnkey: e.model.getKey(),
                        columntitle: d.default.getColumnHeaderTitleHTML(e),
                        columnclass: d.default.getColumnClassByColumn(e),
                        columniconclass: d.default.getColumnIconClassByColumn(e),
                        columnfilter: i,
                        filterError: e.hasFilterError(),
                        withEditableTitle: s,
                        withMarkAllRead: t,
                        withDMComposeButton: t,
                        isTouchColumnOptions: d.default.isTouchColumnOptions(),
                        isSearch: d.default.isSearchColumn(e)
                    }
                }(e);
            this.$node.attr("data-column", t.columnkey).addClass((0, u.default)("js-column", e.temporary ? "column-temp is-inverted-dark" : "column", t.columnclass)).html((0, r.default)(l.default.render("column", t)))
        }, this.render = function() {}, this.handleCardResized = function(e, t) {
            var i = this,
                s = t.height,
                n = (0, r.default)(e.target).closest(".js-card-container"),
                a = (0, r.default)(e.target).closest(".js-stream-item"),
                o = a.attr("data-key");
            TD.ui.columns.alterColumnContents(this.columnKey, a, function() {
                n.removeClass("height--0"), null == s ? (n.height("auto"), i.chirpHeightCache.put(o, void 0)) : (n.height(s), i.chirpHeightCache.put(o, a.height()))
            })
        }, this.handleScribeElementClick = function(e) {
            var t = (0, r.default)(e.target);
            if (d.default.isDataminr(this.column) && (this.$scrollContainer.find(t).length || this.column.detailViewComponent)) {
                var i = t.closest(this.attr.scribeElementSelector).attr("data-scribe-element"),
                    s = this.column.detailViewComponent ? "dataminr_alert_detail" : "dataminr_alert";
                TD.controller.stats.dataminrClickImpression(s, i)
            }
        }, this.handleHeaderClick = function(e) {
            return e.preventDefault(), e.stopPropagation(), this.handleHeaderAction((0, r.default)(e.target).closest("[data-action]").attr("data-action"), e)
        }, this.toggleEditMode = function(e) {
            var t = this.$node;
            t.hasClass(this.attr.isOptionsOpenClass) ? this.exitEditMode() : (this.enterEditMode(), (0, r.default)(document).trigger("scribeEvent", {
                terms: (0, n.default)({}, e, {
                    element: "options",
                    action: "click"
                })
            }))
        }, this.handleHeaderAction = function(e, t) {
            var i = this.$node,
                s = i.attr("data-column");
            switch (e) {
                case "options":
                    this.toggleEditMode((0, f.getElementNamespace)((0, r.default)(t.currentTarget)));
                    break;
                case "mark-all-read":
                    TD.controller.stats.messagesColumnHeaderClick("mark_all_read"), this.trigger("uiMarkAllMessagesRead", {
                        columnKey: s
                    });
                    break;
                case "compose-dm":
                    TD.controller.stats.messagesColumnHeaderClick("compose"), this.trigger("uiComposeTweet", {
                        type: "message",
                        columnKey: s
                    });
                    break;
                case "message-menu":
                    var n = (0, r.default)(t.target).closest("[data-action]"),
                        a = n.data("conversation-id"),
                        o = n.data("account-key");
                    i.trigger("uiShowConversationMenu", {
                        conversationId: a,
                        accountKey: o,
                        columnKey: s,
                        $targetElement: n
                    })
            }
        }, this.setColumnState = function(e) {
            switch (this.$node.removeClass([this.attr.showDetailViewClass, this.attr.columnStateDetailViewClass, this.attr.showSocialProofClass, this.attr.columnStateSocialProofClass].join(" ")), e) {
                case this.attr.columnStateDetailView:
                    this.$node.addClass(this.attr.showDetailViewClass), this.$node.addClass(this.attr.columnStateDetailViewClass);
                    break;
                case this.attr.columnStateSocialProof:
                    this.$node.addClass(this.attr.showSocialProofClass), this.$node.addClass(this.attr.columnStateSocialProofClass), this.$node.one(z, function() {
                        this.select("userSelectorInputSelector").focus()
                    }.bind(this))
            }
        }, this.handleDetailViewActive = function() {
            this.closingDetailViewTimer ? (clearTimeout(this.closingDetailViewTimer), delete this.closingDetailViewTimer) : (this.setColumnState(this.attr.columnStateDetailView), this.scribeAllChirpsHidden(), this.pause())
        }, this.handleDetailViewClosed = function() {
            var e = this;
            this.closingDetailViewTimer = k.defer(function() {
                delete e.closingDetailViewTimer, e.setColumnState(e.attr.columnStateDefault), e.column.detailViewComponent = null, e.unpause(), e.scribeTweetImpressions()
            })
        }, this.handleCloseDetailView = function() {
            this.column.detailViewComponent.destroy()
        }, this.handleShowSocialProof = function(e, t) {
            this.attachChild(R, this.$socialProofContainer, {
                type: t.type,
                tweetSummary: t.tweetSummary
            }), this.setColumnState(this.attr.columnStateSocialProof)
        }, this.handleSocialProofClosed = function() {
            this.setColumnState(this.attr.columnStateDetailView)
        }, this.handleCloseSocialProof = function() {
            this.trigger(this.$socialProofContainer, "uiSocialProofForTweetClose")
        }, this.handleColumnTitleUpdate = function(e, t) {
            d.default.isSearchColumn(this.column) && (this.column.setMatchingFilter(t.title), this.mergeState({
                searchFilter: this.column.getSearchFilter()
            }), TD.controller.stats.columnHeaderSearchUpdate(t.title))
        }, this.handleShowDmParticipants = function(e, t) {
            t.columnKey === this.columnKey && (this.attachChild(x, this.$socialProofContainer, t), this.setColumnState(this.attr.columnStateSocialProof))
        }, this.handleCloseDmParticipants = function(e, t) {
            this.setColumnState(this.attr.columnStateDetailView)
        }, this.pause = function() {
            this.column.isTrackingRealtime && (this.paused = !0, this.column.isTrackingRealtime = !1, this.column.ui.pause())
        }, this.unpause = function() {
            this.paused && 0 === this.column.getNumUnseenChirps() && (this.column.isTrackingRealtime = !0, this.column.ui.unpause()), this.paused = !1
        }, this.handleUiRemoveColumn = function() {
            this.column.detailViewComponent && this.column.detailViewComponent.destroy();
            var e = (0, s.default)(this.column.updateIndex);
            this.column.ui.removeChirps(e, {
                willBreakScrollPosition: !1
            }), this.scribeAllChirpsHidden(), this.tweetEngagementsManager.clearAllSubscriptions(), this.teardown()
        }, this.handleShareColumnButtonClick = function(e, t) {
            var i = (0, r.default)(t.el);
            this.toggleShareMenu(e, i)
        }, this.getMomentMakerProStream = function() {
            var e = (0, p.default)().map(function(e) {
                return k.get(e, "config.tweetdeck_create_moment_pro.value", !1)
            }).startWith(!1);
            return e
        }, this.toggleShareMenu = function(e, t) {
            e.preventDefault(), e.stopPropagation();
            var i = this.attr.dropdownPositions,
                s = {
                    position: [i.offsetRight, i.underLeftIcon].join(" "),
                    toggle: !0
                },
                n = {
                    isEmbeddable: d.default.isEmbeddable(this.column),
                    isSearchColumn: d.default.isSearchColumn(this.column),
                    isCustomTimeline: d.default.isCustomTimeline(this.column),
                    isShareable: d.default.isShareable(this.column),
                    isViewable: d.default.isViewable(this.column),
                    canCreateMoment: TD.decider.get("create_moment") && this.column.hasMomentMakerProAccess && d.default.isCustomTimeline(this.column)
                };
            this.renderDropdown(t, "menus/column_share", n, s)
        }, this.getCustomTimelineDataForPermalink = function() {
            var e = this.column.getCustomTimelineFeed(),
                t = e.getMetadata(),
                i = TD.util.deMentionify(TD.cache.names.getScreenName(t.ownerId)),
                s = TD.cache.names.getCustomTimelineName(t.id, t.ownerId);
            if (!i) throw new Error("Could not get username from name cache.");
            return {
                username: i,
                name: s,
                id: t.id.replace(/[^\d]*/, "")
            }
        }, this.getCustomTimelinePermalinkURL = function() {
            var e = this.getCustomTimelineDataForPermalink(),
                t = l.default.toURLFromRaw("https://twitter.com/{{username}}/timelines/{{id}}", {
                    username: e.username,
                    id: e.id
                });
            return t
        }, this.getCustomTimelinePermalinkURLWithDescription = function() {
            var e = this.getCustomTimelineDataForPermalink(),
                t = l.default.toHtmlFromRaw("“{{name}}” - @{{username}} “https://twitter.com/{{username}}/timelines/{{id}}”", {
                    name: e.name,
                    username: e.username,
                    id: e.id
                });
            return t
        }, this.handleViewTimeline = function() {
            var e = this.getCustomTimelinePermalinkURL();
            TD.util.openURL(e)
        }, this.handleReferenceTimeline = function() {
            var e = d.default.getColumnType(this.column);
            "col_customtimeline" === e ? this.trigger("uiComposeTweet", {
                appendText: this.getCustomTimelinePermalinkURLWithDescription()
            }) : this.trigger("uiNeedsSerializedColumn", {
                columnId: this.columnKey
            })
        }, this.handleShowingColumnOptions = function() {
            var e = this.select("columnMessageSelector");
            e.css({
                opacity: 0,
                height: 0
            })
        }, this.handleColumnOptionsShown = function() {
            this.attachChild(A, this.$columnOptions)
        }, this.handleHidingColumnOptions = function() {
            this.trigger(this.$columnOptions, "uiDestroyAsynchronousForm"), this.renderColumnMessage()
        }, this.handleColumnOptionsHidden = function() {
            var e = this.select("columnMessageSelector");
            e.animate({
                opacity: 1
            }, 150, "easeInOutQuad")
        }, this.renderColumnMessage = function() {
            var e, t = this,
                i = this.select("columnMessageSelector");
            if (this.tearDownFilterMessageEvent && (this.trigger(this.tearDownFilterMessageEvent), delete this.tearDownFilterMessageEvent), this.column.hasActiveSearchFilters()) {
                if (this.column.hasFilterError()) e = (0, r.default)(l.default.render(this.attr.filterErrorTemplate)), i.addClass(this.attr.filterErrorClass);
                else {
                    e = (0, r.default)("<div />");
                    var s = !this.column.isSingleActionTypeColumn() && !d.default.isSearchColumn(this.column) && this.column.hasActiveActionFilters(),
                        n = this.column.hasActiveContentFilters(),
                        a = this.column.hasActiveLocationFilters(),
                        o = this.column.hasActiveUserFilters(),
                        u = this.column.hasActiveEngagementFilters(),
                        h = c.default.nextTeardownEvent();
                    this.attachChild(b.FilterMessageUiBase, e, {
                        teardownOn: h + " " + this.childTeardownEvent,
                        props: {
                            title: (0, y.default)("Filtering by"),
                            filters: [s && {
                                name: "action-filter",
                                icon: "check"
                            }, a && {
                                name: "location-filter",
                                icon: "geo"
                            }, n && {
                                name: "content-filter",
                                icon: "content"
                            }, o && {
                                name: "user-filter",
                                icon: "user"
                            }, u && {
                                name: "engagement-filter",
                                icon: "retweet"
                            }].filter(Boolean),
                            onClick: function(i) {
                                i ? t.enterEditMode(i) : t.toggleEditMode((0, f.getElementNamespace)(e))
                            }
                        }
                    }), this.tearDownFilterMessageEvent = h, i.removeClass(this.attr.filterErrorClass)
                }
                i.height("").html(e)
            } else i.height("").html("")
        }, this.handleSettingsChange = function(e, t) {
            (t.font_size || t.column_width) && (this.createNewHeightCache(), this.scribeTweetImpressions())
        }, this.handleMediaPreviewChange = function(e, t) {
            this.createNewHeightCache(), this.scribeTweetImpressions()
        }, this.createNewHeightCache = function() {
            this.chirpHeightCache = new I(200)
        }, this.getColumnTopError = function() {
            var e, t = this.select("scrollContainerSelector"),
                i = 0;
            return t.hasClass(this.attr.columnScrollerIsAnimatingClass) || (e = this.select("columnOptionsContainerSelector").height(), i = e - this.targetTopPosition), i
        }, this.handleShowUserFilter = function() {
            this.trigger(this.$columnOptions, "uiShowUserFilter")
        }, this.handleShowContentFilter = function() {
            this.trigger(this.$columnOptions, "uiShowContentFilter")
        }, this.handleUpdateMediaPreview = function(e, t) {
            this.column.setMediaPreviewSize(t.value)
        }, this.handleColumnUpdating = function() {
            this.trigger(this.$columnOptions, "uiWaitingForAsyncResponse")
        }, this.handleColumnUpdated = function() {
            this.trigger(this.$columnOptions, "uiReceivedAsyncResponse")
        }, this.handleMarkAllRead = function() {
            this.column.markAllMessagesAsRead()
        }, this.handleSerializedColumn = function(e, t) {
            if (t.columnId === this.columnKey) {
                var i = l.default.toHtmlFromRaw("Check out this TweetDeck column: “{{url}}”", {
                    name: this.column.model.getTitle(),
                    url: t.url
                });
                this.trigger("uiComposeTweet", {
                    appendText: i
                })
            }
        }, this.handleMessageCount = function(e, t) {
            if (this.columnKey === t.columnKey) {
                var i = this.select("columnUnreadCountSelector"),
                    s = i.text() || "0",
                    n = "0" === s && "0" !== t.count,
                    r = "0" !== s && "0" === t.count;
                i.text(t.count), n && (this.stopAnimation(i, this.attr.animateOutClass), i.addClass("is-visible"), this.addAnimateClass(i, this.attr.animateInClass)), r && (this.stopAnimation(i, this.attr.animateInClass), this.addAnimateClass(i, this.attr.animateOutClass, function() {
                    i.removeClass("is-visible")
                }))
            }
        }, this.handleColumnReadStatus = function(e, t) {
            d.default.isMessageColumn(this.column) || (t.columnKey = this.columnKey, this.$node.toggleClass(this.attr.isNewClass, !t.read))
        }, this.handleMessageThreadRead = function(e, t) {
            d.default.isMessageColumn(this.column) && this.trigger(document, "uiMessageUnreadCount", {
                columnKey: this.columnKey,
                count: this.column.unreadMessageCount()
            })
        }, this.handleColumnVisibilities = function(e, t) {
            var i = this.column.visibility,
                s = t[this.columnKey];
            if (s) {
                if (this.column.visibility = s, this.mergeState({
                        columnVisibility: s
                    }), i.visibleFraction !== s.visibleFraction && this.scribeTweetImpressions(), TD.decider.get("dev_hide_offscreen_columns")) {
                    var n = 0 === this.column.visibility.visibleFraction;
                    this.select("columnContentSelector").toggleClass("is-hidden", n)
                }
                var r = 1 === this.column.visibility.visibleFraction;
                this._checkUivExperiment(r)
            }
        }, this._checkUivExperiment = function(e) {
            var t = this,
                i = TD.controller.stats.isInExperimentBucket("tweetdeck_uiv_7739", "uiv_images"),
                s = TD.controller.stats.isInExperimentBucket("tweetdeck_uiv_7739", "control");
            if ((i || s) && e) {
                var n = this.column.getMediaPreviewSize() !== TD.vo.Column.MEDIA_PREVIEW_OFF;
                if (n) {
                    var a = "col_scheduled" === d.default.getColumnType(this.column) || "col_followers" === d.default.getColumnType(this.column);
                    if (!a) {
                        var o = this.select("chirpSelector").map(function(e, t) {
                            return t.dataset.tweetId
                        }).get().map(function(e) {
                            return t.column.findChirp(e)
                        }).filter(Boolean).filter(function(e) {
                            return e.getMedia().some(function(e) {
                                return k.get(e, "entity.original_info", !1) && ("photo" === e.entity.type || "video" === e.entity.type)
                            })
                        }).length > 0;
                        o && (0, r.default)(document).trigger("imageInVisibleColumn")
                    }
                }
            }
        }, this.getChirpVerticalVisibileFraction = function(e, t) {
            if (t <= 0) return 0;
            var i = Math.min(this.scrollContainerHeight, Math.max(0, e)),
                s = Math.min(this.scrollContainerHeight, Math.max(0, e + t)),
                n = s - i;
            return n / t
        }, this.scribeTweetImpressions = function() {
            var e = Date.now(),
                t = this.column.temporary || this.column.visibility.visibleFraction > .5,
                i = this.$node.hasClass(this.attr.columnStateDetailViewClass) || this.$node.hasClass(this.attr.columnStateSocialProofClass);
            TD.util.documentIsHidden() || i || !t ? (this.setAllChirpsHidden(), this.updateVisibleChirps(e)) : (this.updateVisibleChirps(e), this.updateVisibleChirpsWithEndTimes(e), TD.controller.stats.tweetStreamImpression(d.default.getColumnType(this.column), this.getChirpsToScribeTierTwo())), TD.controller.stats.tweetStreamImpression(d.default.getColumnType(this.column), this.getChirpsToScribeTierThree(), !0), this.removeScribedChirpsFromVisibleChirps()
        }, this.scribeAllChirpsHidden = function() {
            this.setAllChirpsHidden(), TD.controller.stats.tweetStreamImpression(d.default.getColumnType(this.column), this.getChirpsToScribeTierThree(), !0)
        }, this.handleWindowResize = function() {
            this.scrollContainerHeight = this.$scrollContainer.height()
        }, this.updateVisibleChirps = function(e) {
            var t = !1;
            this.scrollContainerHeight = this.scrollContainerHeight || this.$scrollContainer.height();
            var i = null,
                s = [];
            this.select("chirpSelector").each(function(n, a) {
                var o, c = (0, r.default)(a),
                    l = c.attr("data-key"),
                    u = this.chirpHeightCache.get(l);
                if (!u) {
                    if ((u = c.height()) <= 0) return;
                    this.chirpHeightCache.put(l, u)
                }
                o = null === i ? c.position().top : i + 1, i = o + u;
                var d = this.getChirpVerticalVisibileFraction(o, u),
                    h = d * (this.column.temporary ? 1 : this.column.visibility.visibleFraction);
                if (h <= 0 && t) return !1;
                if (h > 0) {
                    t = !0, s.push({
                        $elem: c,
                        id: l,
                        chirp: this.column.findChirp(l)
                    });
                    var m = this.visibleChirpsTierTwo[l];
                    m || (m = {
                        scribed: !1
                    }), this.visibleChirpsTierTwo[l] = m
                }
                if (h > .5) {
                    var f = this.visibleChirpsTierThree[l];
                    f || (f = {
                        scribed: !1,
                        visibilityStart: e
                    }), f.knownVisible = !0, this.visibleChirpsTierThree[l] = f
                }
            }.bind(this)), this.trigger("uiVisibleChirps", {
                columnKey: this.columnKey,
                chirpsData: s
            });
            var n = TD.controller.stats.isInExperimentBucket("live_engagement_in_column_8020", "control"),
                a = TD.controller.stats.isInExperimentBucket("live_engagement_in_column_8020", "live_engagement_enabled");
            (n || a) && (0, r.default)(document).trigger("columnWithTweetsInView"), a ? this.tweetEngagementsManager.updateSubscriptions(s) : n && this.tweetEngagementsManager.clearAllSubscriptions()
        }, this.updateVisibleChirpsWithEndTimes = function(e) {
            (0, s.default)(this.visibleChirpsTierThree).forEach(function(t) {
                var i = this.visibleChirpsTierThree[t];
                i.knownVisible || (i.visibilityEnd = e), this.visibleChirpsTierThree[t] = i
            }, this)
        }, this.getChirpsToScribeTierThree = function() {
            var e = [];
            return (0, s.default)(this.visibleChirpsTierThree).forEach(function(t) {
                var i, s = this.visibleChirpsTierThree[t];
                s.visibilityStart && s.visibilityEnd && (s.visibilityEnd - s.visibilityStart > 500 && (i = this.column.findMostInterestingChirp(t)) instanceof TD.services.TwitterStatus && e.push(i.getScribeItemData(s)), s.scribed = !0, this.visibleChirpsTierThree[t] = s)
            }, this), e
        }, this.getChirpsToScribeTierTwo = function() {
            var e = [];
            return (0, s.default)(this.visibleChirpsTierTwo).forEach(function(t) {
                var i, s = this.visibleChirpsTierTwo[t];
                this.column.scribedImpressionIDs.get(t) || ((i = this.column.findMostInterestingChirp(t)) instanceof TD.services.TwitterStatus && e.push(i.getScribeItemData(s)), this.column.scribedImpressionIDs.put(t, !0)), s.scribed = !0, this.visibleChirpsTierTwo[t] = s
            }, this), e
        }, this.removeScribedChirpsFromVisibleChirps = function() {
            (0, s.default)(this.visibleChirpsTierTwo).forEach(function(e) {
                var t = this.visibleChirpsTierTwo[e];
                t.scribed && delete this.visibleChirpsTierTwo[e]
            }, this), (0, s.default)(this.visibleChirpsTierThree).forEach(function(e) {
                var t = this.visibleChirpsTierThree[e];
                t.scribed ? delete this.visibleChirpsTierThree[e] : (t.knownVisible = !1, this.visibleChirpsTierThree[e] = t)
            }, this)
        }, this.setAllChirpsHidden = function() {
            var e = Date.now();
            (0, s.default)(this.visibleChirpsTierThree).forEach(function(t) {
                this.visibleChirpsTierThree[t].visibilityEnd = e
            }, this)
        }, this.setMoreTweetsDesign = function() {
            var e = !!TD.decider.get("column_unread_bar");
            this.select("moreTweetsButton").toggleClass("is-hidden", e), this.select("moreTweetsGlow").toggleClass("is-hidden", !e)
        }, this.getAllCustomTimelineData = function() {
            var e = this.column.getCustomTimelineFeed(),
                t = e.getMetadata(),
                i = this.column.getCustomTimeline(),
                s = i ? i.account.getKey() : this.select("addToCustomTimelineInputSelector").data("account-key"),
                n = TD.controller.feedManager.getPoller(e.getKey());
            return {
                feed: e,
                customTimeline: i,
                metadata: t,
                account: s,
                poller: n
            }
        }, this.customTimelineActionWasMe = function(e) {
            var t = this.column.getCustomTimelineFeed();
            if (t) {
                var i = t.getMetadata();
                if (i) return e.action.id === i.id
            }
        }, this.boundedRefreshCustomTimelineFeed = function(e, t) {
            var i = this;
            if (this.customTimelineActionWasMe(t)) {
                var s = this.column.boundedRefreshCustomTimelineFeed({
                    relativeToId: k.get(t, "action.relativeToId", null),
                    placeAbove: k.get(t, "action.above", !1),
                    actionType: k.get(t, "action.actionType", null)
                });
                s.addCallback(function() {
                    return i.onDragLeave()
                })
            }
        }, this.removeChripFromCustomTimelineFeed = function(e, t) {
            if (this.customTimelineActionWasMe(t)) {
                var i = this.getAllCustomTimelineData();
                i.poller.removeWhere(function(e) {
                    return e.id === t.action.tweetId
                })
            }
        }, this.rebroadcast = function(e) {
            return function(t) {
                if (!this.state.isRebroadcasting) return this.mergeState({
                    isRebroadcasting: !0
                }), this.trigger(t, e.apply(this, [].slice.call(arguments))), this.mergeState({
                    isRebroadcasting: !1
                }), t.stopPropagation(), !1
            }.bind(this)
        }, this.transformRemoveTweetFromCustomTimeline = function(e, t) {
            var i = this.getAllCustomTimelineData();
            return {
                id: i.metadata.id,
                tweetId: t.tweetId,
                account: i.account
            }
        }, this.isFirstInCollection = function(e) {
            return 0 === this.column.getChirpIndex(e.data("key"))
        }, this.onDrop = function(e, t) {
            this.onDragOver.cancel();
            var i = (0, r.default)(e.target),
                s = i.closest(".stream-item"),
                n = s.length ? s : i.find(".stream-item").last(),
                a = this.attr.dropIndicatorId,
                o = (0, r.default)("#" + a),
                c = this.attr.dropIndicatorClassName,
                l = n.children().first().hasClass(c),
                u = !!this.isFirstInCollection(n) && l,
                h = n.length ? n.data("key") : null,
                m = this.getAllCustomTimelineData(),
                f = d.default.getDropActionType((0, r.default)(t.el).closest(".js-column"), this.column.model.getKey()),
                p = (0, r.default)(TD.ui.template.render("column/add_to_customtimeline_drop_indicator_spinner"));
            o.length ? o.html(p) : (this.select("columnDragDropOverlayText").addClass("is-hidden"), this.select("columnDragDropOverlaySpinner").removeClass("is-hidden")), this.trigger("uiAddOrMoveTweetToCustomTimeline", {
                id: m.metadata.id,
                tweetId: (0, r.default)(t.el).attr("data-tweet-id"),
                account: m.account,
                relativeToId: h,
                actionType: f,
                above: u
            })
        }, this.onDragOver = k.debounce(function(e, t) {
            if (this.column.isOwnReorderableCustomTimeline()) {
                var i = (0, r.default)(e.target),
                    s = i.closest(".stream-item"),
                    n = s.length ? s : i.find(".stream-item").last(),
                    a = d.default.getDropIndicatorText((0, r.default)(t.el).closest(".js-column"), this.column.model.getKey());
                if (!n.length) {
                    if (!this.column.isEmpty()) return;
                    var o = this.select("columnDragDropOverlayText");
                    return this.$node.addClass(this.attr.dropTargetClass), void o.text(a)
                }
                var c = (0, r.default)("." + this.attr.dropIndicatorClassName),
                    l = n.children(),
                    u = (0, r.default)("#" + this.attr.dropIndicatorId),
                    h = !0;
                if (this.isFirstInCollection(n)) {
                    var m = n.parent().offset();
                    if (!m) return;
                    var f = this.attr.dropIndicatorId,
                        p = d.default.isTopHalfOfTweet({
                            event: e,
                            parentOffset: m,
                            $streamItem: n,
                            dropIndicatorId: f
                        });
                    if (p) h = !1;
                    else if (void 0 !== p) return
                }
                var g = n.get(0) === u.parent().get(0),
                    v = n.get(0) === (0, r.default)(t.el).get(0),
                    T = h && l.first().get(0) !== u.get(0),
                    w = !h && l.last().get(0) !== u.get(0),
                    b = c.length > 2;
                if (!((g || v) && (T || w) || b)) {
                    u.css("max-height", "0").removeAttr("id").one(z, function() {
                        u.remove()
                    });
                    var y = (0, r.default)(TD.ui.template.render("column/add_to_customtimeline_drop_indicator", {
                        dropIndicatorIdName: this.attr.dropIndicatorId,
                        dropIndicatorClassName: this.attr.dropIndicatorClassName,
                        dropIndicatorText: a
                    }));
                    h ? n.append(y) : n.prepend(y), E.mutate(function() {
                        y.css("max-height", "500px")
                    })
                }
            }
        }, 10), this.onDragStart = function(e, t) {
            E.mutate(function() {
                (0, r.default)(t.el).addClass("opacity--40")
            })
        }, this.onDragEnd = function(e, t) {
            (0, r.default)(t.el).removeClass("opacity--40")
        }, this.onDragLeave = function() {
            this.onDragOver.cancel(), (0, r.default)("." + this.attr.dropIndicatorClassName).remove(), this.$node.removeClass(this.attr.dropTargetClass)
        }, this.enterEditMode = function(e) {
            var t = this;
            this.select("searchFilterCalloutSelector").trigger("uiRemoveSearchCallout");
            var i = this.column,
                s = this.$columnOptions;
            if (!this.$node.hasClass(this.attr.isOptionsOpenClass)) {
                this.$node.addClass(this.attr.isOptionsOpenClass);
                var n = this.connect(j, {
                    mapStateToProps: function(e) {
                        return {
                            searchFilter: e.searchFilter
                        }
                    }
                });
                this.attachChild(n, s, {
                    column: i,
                    expandContentFilter: "content-filter" === e,
                    expandUserFilter: "user-filter" === e,
                    expandActionFilter: "action-filter" === e,
                    expandEngagementFilter: "engagement-filter" === e,
                    expandLocationFilter: "location-filter" === e,
                    columnType: d.default.getColumnType(i),
                    onFilterChange: function() {
                        return function(e) {
                            t.column.updateSearchFilter(e), t.mergeState({
                                searchFilter: t.column.getSearchFilter()
                            })
                        }
                    },
                    onShowing: function() {
                        return t.handleShowingColumnOptions.bind(t)
                    },
                    onShown: function() {
                        return t.handleColumnOptionsShown.bind(t)
                    },
                    onHiding: function() {
                        return t.handleHidingColumnOptions.bind(t)
                    },
                    onHidden: function() {
                        return t.handleColumnOptionsHidden.bind(t)
                    }
                })
            }
        }, this.exitEditMode = function() {
            this.$node.hasClass(this.attr.isOptionsOpenClass) && (this.$node.removeClass(this.attr.isOptionsOpenClass), this.$columnOptions.trigger("uiColumnOptionsCloseAction"))
        }, this.handleLiveVideoTimelineUpdate = function(e, t) {
            var i = this.column.getFeeds()[0].getMetadata();
            i.timelineId = t.timelineId, this.column.updateMetadata(i)
        }
    }, F, O, L, P, o.default)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.InsightsEntryPointReact = void 0;
    var s = _(i(13)),
        n = _(i(10)),
        r = _(i(11)),
        a = _(i(14)),
        o = _(i(15)),
        c = _(i(7)),
        l = i(6),
        u = _(l),
        d = (_(i(9)), _(i(0))),
        h = _(i(609)),
        m = i(12),
        f = _(i(244)),
        p = i(358),
        g = _(i(2001)),
        v = _(i(161)),
        T = i(139),
        w = i(243),
        b = i(2004),
        y = i(64),
        C = _(i(3));

    function _(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }

    function D() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        return (e = Math.round(10 * e) / 10) < 20 ? e % 1 == 0 ? e.toFixed(0) : e.toFixed(1) : TD.util.prettyNumber(e)
    }
    var S = function(e) {
            return (0, y.generic)((0, c.default)({
                page: "column",
                section: "insights_entry",
                action: "click"
            }, e))
        },
        k = (0, T.daysAgoInSeconds)(1),
        E = function(e) {
            function t() {
                var e, i, r, o;
                (0, n.default)(this, t);
                for (var c = arguments.length, l = Array(c), u = 0; u < c; u++) l[u] = arguments[u];
                return i = r = (0, a.default)(this, (e = t.__proto__ || (0, s.default)(t)).call.apply(e, [this].concat(l))), r.handleValue = function(e) {
                    e && (e.error ? (0, d.default)(document).trigger("metric", {
                        key: "entry-point:sparkline-failure:" + e.error.name
                    }) : r.scribedForTerm !== r.props.matching && (r.scribedForTerm = r.props.matching, S({
                        action: "render"
                    })))
                }, o = i, (0, a.default)(r, o)
            }
            return (0, o.default)(t, e), (0, r.default)(t, [{
                key: "handleClick",
                value: function(e) {
                    var t = this;
                    return function(i) {
                        i.stopPropagation(), (0, d.default)(document).trigger("uiShowDataDrawer", {
                            insightTerm: t.props.matching
                        }), S({
                            element: e
                        })
                    }
                }
            }, {
                key: "render",
                value: function() {
                    var e = this,
                        t = this.props.matching;
                    return t && (0, b.searchQuerySupportedByInsights)(t) ? u.default.createElement(g.default, {
                        term: this.props.matching,
                        since: k,
                        onValue: this.handleValue,
                        isPaused: !this.props.isColumnVisible
                    }, function(t) {
                        if (!t || !t.data) return null;
                        var i = t.data,
                            s = i.volume,
                            n = i.trendPercentage,
                            r = i.data,
                            a = TD.util.pluralise((0, C.default)("Tweet"), (0, C.default)("Tweets"), s),
                            o = TD.util.truncateNumber(s) + " " + a;
                        return u.default.createElement("div", {
                            "data-testid": "entryPoint",
                            onClick: e.handleClick("other"),
                            className: "with-column-divider-bottom padding-h--8 padding-v--6 is-actionable"
                        }, u.default.createElement("div", {
                            "data-testid": "sparkline",
                            onClick: e.handleClick("sparkline"),
                            className: "height--30"
                        }, u.default.createElement(f.default, null, function(e) {
                            return u.default.createElement(p.GridChartReact, {
                                chartOptions: (0, w.makeSparklineDefaults)({
                                    backgroundColor: (0, w.getBackgroundColor)(e),
                                    seriesColor: w.getSeriesGray,
                                    tooltipOptions: null,
                                    focusMode: h.default.focusModes.OFF
                                }),
                                displayLegend: !1,
                                chartHeight: "30px",
                                chartData: r
                            })
                        })), u.default.createElement("div", {
                            className: "padding-t--6 flex flex-align--center color-twitter-dark-gray txt-size-variable--12"
                        }, u.default.createElement("span", {
                            "data-testid": "volume",
                            className: "margin-t--4"
                        }, o, " ", (0, C.default)("today")), n > 0 ? u.default.createElement("span", {
                            "data-testid": "percentageUp",
                            className: "color-twitter-green margin-l--8"
                        }, u.default.createElement(v.default, {
                            "data-testid": "percentageUpIcon",
                            name: "pointer-u"
                        }), D(n), "%") : n < 0 ? u.default.createElement("span", {
                            "data-testid": "percentageDown",
                            className: "color-twitter-red margin-l--8"
                        }, u.default.createElement(v.default, {
                            "data-testid": "percentageDownIcon",
                            name: "pointer-d"
                        }), D(-n), "%") : 0 === n ? u.default.createElement("span", {
                            "data-testid": "percentage0",
                            className: "margin-l--8 margin-t--4"
                        }, "0%") : null, u.default.createElement("span", {
                            "data-testid": "cta",
                            onClick: e.handleClick("cta"),
                            className: "flex-auto flex-justify-content--flex-end flex flex-align--center color-twitter-emphasis-gray txt-size-variable--14"
                        }, u.default.createElement("span", null, (0, C.default)("Insights")), u.default.createElement("span", {
                            className: "icon icon-small icon-arrow-r"
                        }))))
                    }) : null
                }
            }]), t
        }(l.Component);
    t.default = (0, m.reactToUiBase)(E), t.InsightsEntryPointReact = E
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = m(i(13)),
        n = m(i(10)),
        r = m(i(11)),
        a = m(i(14)),
        o = m(i(15)),
        c = i(6),
        l = m(c),
        u = (m(i(9)), i(159)),
        d = i(2002),
        h = i(139);

    function m(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var f = function(e) {
        function t() {
            return (0, n.default)(this, t), (0, a.default)(this, (t.__proto__ || (0, s.default)(t)).apply(this, arguments))
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "componentDidUpdate",
            value: function(e) {
                this.props.isPaused && !e.isPaused ? this.getObservable().pause() : !this.props.isPaused && e.isPaused && this.getObservable().resume()
            }
        }, {
            key: "getObservable",
            value: function() {
                if (!this.memoizedObservable || this.memoizedObservable.term !== this.props.term || this.memoizedObservable.since !== this.props.since) {
                    var e = this.props,
                        t = e.term,
                        i = e.since;
                    this.memoizedObservable = {
                        term: t,
                        since: i,
                        value: (0, d.getTimeseriesObservable)(this.props.isPaused, function() {
                            var e = (0, h.convertDateToSeconds)();
                            return {
                                search_term: t,
                                start_time: e - i,
                                end_time: e,
                                granularity: "hours",
                                include_trend: !0
                            }
                        })
                    }
                }
                return this.memoizedObservable.value
            }
        }, {
            key: "render",
            value: function() {
                var e = this;
                return l.default.createElement(u.Observe, {
                    observable: this.getObservable().observable,
                    onValue: this.props.onValue
                }, function(t) {
                    if (!t) return e.props.children(null);
                    var i = t.data,
                        s = t.error,
                        n = {};
                    if (s && (n.error = s), i) {
                        var r = parseFloat(i.trend),
                            a = isNaN(r) ? null : r;
                        n.data = {
                            data: [{
                                data: i.data
                            }],
                            volume: i.total_tweet_volume,
                            trendPercentage: a
                        }
                    }
                    return e.props.children(n)
                })
            }
        }]), t
    }(c.Component);
    t.default = f
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getTimeseriesObservable = function(e, t) {
        var i = new r.default.Subject,
            s = null;
        return {
            pause: function() {
                i.next(!0)
            },
            resume: function() {
                i.next(!1)
            },
            observable: i.distinctUntilChanged().startWith(e).switchMap(function(e) {
                if (e) return null == s ? r.default.Observable.of(null) : r.default.Observable.never();
                var t = null != s ? (new Date).getTime() - s : 1 / 0,
                    i = t >= o ? 0 : o - t;
                return r.default.Observable.timer(i, o)
            }).switchMap(function() {
                return s = (new Date).getTime(), r.default.Observable.fromPromise((0, a.getTimeseries)(t())).catch(function(e) {
                    return r.default.Observable.of({
                        error: e
                    })
                })
            }).scan(function(e, t) {
                return e && t.error ? {
                    data: e.data,
                    error: t.error
                } : t
            }).startWith(null)
        }
    };
    var s, n = i(29),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(2003);
    var o = 3e5
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getTimeseries = function(e) {
        var t = a.insights + "/timeseries.json";
        return r.default.promised(t, {
            params: e
        })
    };
    var s, n = i(107),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(612)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.searchQuerySupportedByInsights = function(e) {
        var t = !e.match(/\bOR\b/g),
            i = !e.match(/[!'%&*+,\-./:;<=>?\[\]^_{|}~"()]/g);
        return t && i
    }
}, function(e, t, i) {
    "use strict";
    var s = u(i(1)),
        n = u(i(0)),
        r = u(i(8)),
        a = u(i(12)),
        o = u(i(2006)),
        c = u(i(141)),
        l = i(64);

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = a.default.mixin(function() {
        this.attributes({
            liveVideoTimelinesSelector: ".js-live-video-timelines",
            liveVideoTimelinesListSelector: ".js-live-video-timelines-list",
            liveVideoTimelinesLabel: ".js-live-video-timelines-label",
            id: null,
            template: "live_video",
            timelines: null,
            hasMultipleTimelines: !1,
            isTemporaryColumn: !0
        }), this.after("initialize", function() {
            var e = (0, n.default)(this.node).find(".js-live-video-container"),
                t = e[0],
                i = {
                    suppressScribing: !1,
                    squareCorners: !0,
                    hideControls: !1,
                    addTwitterBranding: !1,
                    scribeContext: {
                        client: l.SCRIBE_CLIENT,
                        element: "live_video_player"
                    }
                },
                s = o.default.createPlayerForLiveVideo(t, this.attr.id, i);
            if (s.on("ready", function() {
                    this.playPreview()
                }), !this.attr.isTemporaryColumn && this.attr.hasMultipleTimelines) {
                this.dropdown = new c.default({
                    el: this.select("liveVideoTimelinesListSelector")[0]
                });
                var r = (0, n.default)(this.dropdown.el),
                    a = (0, n.default)(r.find("input")[0]);
                a.prop("checked", !0), this.dropdown.openOnClick(this.select("liveVideoTimelinesSelector")[0]), this.dropdown.on("change", function(e) {
                    var t = (0, n.default)(e.target).val();
                    this.handleChange(t)
                }.bind(this))
            }
        }), this.handleChange = function(e) {
            this.dropdown.hide(), this.trigger("uiUpdateLiveVideoTimeline", {
                timelineId: e
            });
            var t = s.default.findWhere(this.attr.timelines, {
                timeline_id: e
            }).title;
            this.select("liveVideoTimelinesLabel").html(t)
        }, this.render = function() {
            var e = r.default.render(this.attr.template, {
                liveVideoId: this.attr.id,
                timelines: this.attr.timelines,
                hasMultipleTimelines: this.attr.hasMultipleTimelines,
                isTemporaryColumn: this.attr.isTemporaryColumn,
                primaryTimeline: this.attr.timelines[0]
            });
            this.$node.html(e)
        }, this.before("teardown", function() {
            this.dropdown && this.dropdown.remove()
        })
    })
}, , function(e, t, i) {
    "use strict";
    var s = c(i(3)),
        n = c(i(1)),
        r = c(i(12)),
        a = c(i(8)),
        o = i(23);

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            template: "column/add_to_custom_timeline",
            addToCustomTimelineInputSelector: ".js-add-to-customtimeline-input",
            addToCustomTimelineButtonSelector: ".js-add-to-customtimeline-button",
            customTimelineIdDataAttr: "customtimeline-id",
            accountKey: null,
            customTimelineId: null,
            spinnerButtonSelector: ".js-spinner-button",
            spinnerButtonActiveSelector: ".js-spinner-button-active",
            spinnerButtonActiveClass: "spinner-button-is-active",
            spinnerButtonHiddenClass: "is-hidden"
        }), this.componentDidInitialize = function() {
            this.on("uiInputSubmit", {
                addToCustomTimelineInputSelector: this.addTweetToCustomTimeline
            }), this.on("click", {
                addToCustomTimelineButtonSelector: this.addTweetToCustomTimeline
            }), this.on(document, "dataAddOrMoveTweetToCustomTimelineSuccess", function(e, t) {
                this.eventIsForCustomTimeline(e, t) && (this.spinnerButtonToggle(!1), n.default.get(t, "result.response.errors", []).length ? (0, o.showErrorNotification)({
                    message: (0, s.default)("Unable to add or move that Tweet")
                }) : this.select("addToCustomTimelineInputSelector").val(""))
            }), this.on("dataAddOrMoveTweetToCustomTimelineError", function(e, t) {
                this.eventIsForCustomTimeline(e, t) && (this.spinnerButtonToggle(!1), (0, o.showErrorNotification)({
                    message: (0, s.default)("Unable to add or move that Tweet")
                }))
            })
        }, this.render = function() {
            var e = this.attr,
                t = e.accountKey,
                i = e.customTimelineId,
                s = a.default.render(this.attr.template, {
                    accountKey: t,
                    customTimelineId: i
                });
            this.$node.html(s).removeClass("is-hidden"), this.$spinnerBtn = this.select("spinnerButtonSelector"), this.$spinnerBtnActive = this.select("spinnerButtonActiveSelector")
        }, this.eventIsForCustomTimeline = function(e, t) {
            var i = this.select("addToCustomTimelineInputSelector"),
                s = TD.util.extractTweetIdFromPermalink(i.val());
            return t.action.tweetId === s && t.action.id === i.data(this.attr.customTimelineIdDataAttr)
        }, this.addTweetToCustomTimeline = function() {
            var e = this.select("addToCustomTimelineInputSelector"),
                t = e.data("account-key"),
                i = e.data("customtimeline-id"),
                n = e.val(),
                r = n.split(",").map(function(e) {
                    return TD.util.extractTweetIdFromPermalink(e)
                }).filter(Boolean);
            1 === r.length ? (this.trigger(document, "uiAddOrMoveTweetToCustomTimeline", {
                account: t,
                id: i,
                tweetId: r[0]
            }), this.spinnerButtonToggle(!0)) : r.length > 1 && r.length <= 100 ? (this.trigger(document, "uiAddMultipleTweetsToCustomTimeline", {
                account: t,
                id: i,
                ids: r
            }), this.spinnerButtonToggle(!0)) : (r.length > 100 ? (0, o.showErrorNotification)({
                message: (0, s.default)("Can't add more than 100 Tweets at a time")
            }) : (0, o.showErrorNotification)({
                message: (0, s.default)("Can't recognize Tweet URL")
            }), this.spinnerButtonToggle(!1))
        }, this.spinnerButtonToggle = function(e) {
            this.$spinnerBtn.toggleClass(this.attr.spinnerButtonActiveClass, e), this.$spinnerBtnActive.toggleClass(this.attr.spinnerButtonHiddenClass, !e)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    e.exports = {
        browserNeedsWillAnimateFix: r.default.memoize(function() {
            var e = window.navigator.userAgent,
                t = e.match(/Chrome\/([\d]+)\./),
                i = e.match(/AppleWebKit\/([\d]+)\./);
            return !!(t && parseInt(t[1], 10) >= 35) || !!("mac" === TD.util.getAppEnv() && i && parseInt(i[1], 10) >= 537)
        })
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = c(i(32)),
        n = c(i(10)),
        r = c(i(11)),
        a = c(i(1)),
        o = i(353);

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var l = function() {
        function e(t) {
            (0, n.default)(this, e), this.onLiveEngagement = t, this.subscriptions = {}
        }
        return (0, r.default)(e, [{
            key: "getSubscriptions",
            value: function() {
                return this.subscriptions
            }
        }, {
            key: "updateSubscriptions",
            value: function(e) {
                var t = this,
                    i = (0, o.getAccountPipeline)(TD.storage.accountController.getDefault()),
                    n = [];
                e.forEach(function(e) {
                    var s = e.chirp.getMainTweet && e.chirp.getMainTweet().id,
                        r = e.chirp.targetTweet && e.chirp.targetTweet.getMainTweet().id,
                        o = s || r;
                    if (o && (n.push(o), !t.subscriptions[o])) {
                        var c = i.subscribeToTweetEngagement(o).map(function(e) {
                            return a.default.get(e, "payload.tweet_engagement")
                        }).filter(Boolean).subscribe(function(e) {
                            t.onLiveEngagement(e, o)
                        });
                        t.subscriptions[o] = c
                    }
                });
                var r = (0, s.default)(this.subscriptions).filter(function(e) {
                    return !n.includes(e)
                });
                this._clearSubscriptions(r)
            }
        }, {
            key: "_clearSubscriptions",
            value: function(e) {
                var t = this;
                e.forEach(function(e) {
                    t.subscriptions[e].unsubscribe(), delete t.subscriptions[e]
                })
            }
        }, {
            key: "clearAllSubscriptions",
            value: function() {
                this._clearSubscriptions((0, s.default)(this.subscriptions))
            }
        }]), e
    }();
    t.default = l
}, function(e, t, i) {
    "use strict";
    var s = l(i(3)),
        n = l(i(1)),
        r = l(i(0)),
        a = l(i(142)),
        o = l(i(19)),
        c = i(23);

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var u = i(5).component,
        d = i(110),
        h = i(53),
        m = i(37),
        f = i(8),
        p = i(619);
    e.exports = u(a.default, function() {
        this.attributes({
            accountKey: null,
            customTimelineId: null,
            columnKey: null,
            isOwnCustomTimeline: !1,
            readOnly: !1,
            reloadPeriod: 900,
            animatingClass: "is-column-options-animating",
            maxCharCount: 160,
            characterCountSelector: ".js-character-count",
            tweetTextInputSelector: ".js-compose-text",
            inputSelector: ".js-input",
            editSelector: ".js-edit",
            saveSelector: ".js-save",
            cancelSelector: ".js-cancel",
            closeEditEvent: function() {
                return "uiCloseCustomTimelineDescriptionEdit-" + this.attr.customTimelineId
            }
        }), this.initialState({
            descriptionText: "",
            hideCharacterCount: !1
        }), this.after("initialize", function() {
            this.customTimeline = null, this.newDescription = null, this.$node.removeClass("is-hidden"), this.on(document, "dataCustomTimelineSuccess", this.handleCustomTimeline.bind(this)), this.on(document, "dataCustomTimelineUpdateError", this.handleUpdateError.bind(this)), this.on("uiComposeTextChanged", this.handleComposeTextChanged), this.stateSource = "customTimelineDescription[" + n.default.uniqueId("ctlid") + "].state";
            var e = this.observableState.map(function(e) {
                var t = p.getRemainingCharCount(this.attr.maxCharCount, twttrTxt.getUnicodeTextLength(e.descriptionText));
                return n.default.merge({}, e, {
                    tweetText: e.descriptionText,
                    displayedCharacterCount: t,
                    hasValidCharacterCount: t >= 0
                })
            }, this);
            this.provideResource(this.stateSource, e), e.subscribe(this.renderButtons.bind(this)), this.on("click", {
                editSelector: this.edit,
                saveSelector: this.save,
                cancelSelector: this.cancel
            }), this.on("uiInputSubmit", {
                inputSelector: this.save
            }), this.on("uiInputBlur", {
                inputSelector: this.cancel
            }), this.reloadTaskId = TD.controller.scheduler.schedulePeriodicTask(this.attr.reloadPeriod, this.requestData.bind(this), !0)
        }), this.before("teardown", function() {
            TD.controller.scheduler.removePeriodicTask(this.reloadTaskId)
        }), this.requestData = function() {
            this.trigger(document, "uiNeedsCustomTimeline", {
                id: this.attr.customTimelineId,
                account: this.attr.accountKey
            })
        }, this.handleCustomTimeline = function(e, t) {
            var i = !0;
            t.action.id === this.attr.customTimelineId && (i = !this.customTimeline || this.customTimeline.description !== t.result.description, this.customTimeline = t.result, this.customTimeline.description === this.newDescription && (this.newDescription = null), i && this.showDescription(this.customTimeline.description))
        }, this.showDescription = function(e) {
            var t = (0, r.default)(f.render("column/custom_timeline_description", {
                description: o.default.cleanWithEmoji(e),
                editable: this.attr.isOwnCustomTimeline && !this.attr.readOnly
            }));
            this.animateElementContentHeight(this.$node, t, this.attr.animatingClass)
        }, this.edit = function() {
            this.trigger("uiShowEditCustomTimeline", {
                accountKey: this.attr.accountKey,
                timelineId: this.attr.customTimelineId,
                columnKey: this.attr.columnKey,
                name: this.customTimeline.name,
                description: this.customTimeline.description,
                focus: "description"
            })
        }, this.setupDOM = function() {}, this.save = function(e, t) {
            var i = this.select("inputSelector").val(),
                s = this.customTimeline ? this.customTimeline.description : null;
            this.select("saveSelector").prop("disabled") || (this.showDescription(i), i !== s && (this.newDescription = i, this.trigger(document, "uiUpdateCustomTimeline", {
                account: this.attr.accountKey,
                id: this.attr.customTimelineId,
                description: i
            }), this.trigger(this.attr.closeEditEvent)))
        }, this.cancel = function() {
            this.showDescription(this.customTimeline.description), this.trigger(this.attr.closeEditEvent)
        }, this.handleUpdateError = function(e, t) {
            t.action.id === this.attr.customTimelineId && this.newDescription && (this.edit(), (0, c.showErrorNotification)({
                message: (0, s.default)("Error: unable to save description")
            }))
        }, this.handleComposeTextChanged = function(e, t) {
            e.stopPropagation(), this.mergeState({
                descriptionText: t.value
            })
        }, this.renderButtons = function(e) {
            this.select("saveSelector").prop("disabled", e.displayedCharacterCount <= 0)
        }
    }, d, h, m)
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component,
        o = i(96),
        c = i(53),
        l = i(620),
        u = i(8);
    e.exports = a(o, function() {
        this.attributes({
            columnBackSelector: ".js-dm-participants-back",
            headerLinkClass: "js-dm-participants-back",
            conversationAdderSelector: ".js-conversation-adder",
            conversationId: null,
            accountKey: null
        }), this.initialState({
            participants: null,
            isOneToOne: !1,
            conversationId: function() {
                return this.attr.conversationId
            },
            accountKey: function() {
                return this.attr.accountKey
            }
        }), this.after("initialize", function() {
            this.after("stateChanged", this.render), this.on("uiCloseDmParticipants", this.close), this.on("click", {
                columnBackSelector: this.close
            }), this.on("uiUserSelected", {
                conversationAdderSelector: this.handleUserSelection
            }), this.on(document, "dataConversationParticipants", this.handleConversationParticipants), this.fetchData()
        }), this.fetchData = function() {
            var e = TD.controller.clients.getClient(this.state.accountKey),
                t = e.conversations.getConversation(this.state.conversationId),
                i = t.participants;
            this.mergeState({
                participants: i,
                isOneToOne: t.isOneToOne()
            })
        }, this.handleConversationParticipants = function(e, t) {
            t.conversationId === this.state.conversationId && this.mergeState({
                participants: t.participants
            })
        }, this.render = function() {
            if (null !== this.state.participants) {
                var e = {
                        columntitle: (0, r.default)("Conversation"),
                        headerLinkClass: this.attr.headerLinkClass,
                        withUserMenu: !0,
                        users: this.state.participants
                    },
                    t = u.render("column/column_dm_participants", e);
                this.$node.html(t), this.attachChild(l, this.attr.conversationAdderSelector, {
                    placeholder: (0, r.default)("Add people to group"),
                    withSelectButton: !1,
                    focusOnInit: !1
                })
            }
        }, this.close = function() {
            this.trigger("uiDmParticipantsClosed"), this.teardown()
        }, this.addParticipants = function(e) {
            var t = {
                conversationId: this.state.conversationId,
                participantIds: [e.user.id],
                accountKey: this.state.accountKey
            };
            this.trigger("uiAddConversationParticipants", t)
        }, this.createNewConversation = function(e) {
            var t = {
                type: "message",
                messageRecipients: this.state.participants.concat(e.user),
                from: [this.state.accountKey],
                text: ""
            };
            this.trigger("uiComposeTweet", t)
        }, this.handleUserSelection = function(e, t) {
            this.state.isOneToOne ? this.createNewConversation(t) : this.addParticipants(t)
        }
    }, c)
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(1)),
        r = i(5),
        a = o(i(8));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, r.component)(function() {
        this.attributes({
            columnBackSelector: ".js-tweet-social-proof-back",
            headerLinkClass: "js-tweet-social-proof-back",
            templateName: "status/social_proof_for_tweet",
            tweetSummary: null,
            type: null
        }), this.after("initialize", function() {
            var e, t, i;
            this.on("uiSocialProofForTweetClose", this.close), this.on("click", {
                columnBackSelector: this.close
            }), this.on(document, "dataTwitterUsers", this.handleTwitterUsers), this.userIds = this.attr.tweetSummary[this.attr.type], "retweeters" === this.attr.type ? (t = "Retweeted", i = this.attr.tweetSummary.retweeters_count) : "repliers" === this.attr.type ? (t = "Replied", i = this.attr.tweetSummary.repliers_count) : (t = "Liked", i = this.attr.tweetSummary.favoriters_count), e = parseInt(i, 10) > 1 ? (0, s.default)("{{action}} {{n}} times", {
                n: TD.util.prettyNumber(i, {
                    noNegativeNumbers: !0
                }),
                action: t
            }) : (0, s.default)("{{action}} once", {
                action: t
            }), this.renderParams = {
                title: e,
                columntitle: (0, s.default)("Tweet"),
                headerLinkClass: this.attr.headerLinkClass,
                withUserMenu: !0
            };
            var r = a.default.render(this.attr.templateName, this.renderParams);
            this.$node.html(r), this.requestId = n.default.uniqueId("twitterUsers"), this.trigger("uiNeedsTwitterUsers", {
                requestId: this.requestId,
                userIds: this.userIds
            })
        }), this.handleTwitterUsers = function(e, t) {
            if (t.requestId === this.requestId) {
                this.renderParams.users = t.users;
                var i = a.default.render(this.attr.templateName, this.renderParams);
                this.$node.html(i)
            }
        }, this.close = function() {
            this.trigger("uiSocialProofForTweetClosed"), this.teardown()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(85),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    e.exports = r.default.mixin(function() {
        this.attributes({
            allowEmpty: !1,
            customTitleSelector: ".js-column-title-edit-box"
        }), this.initialState({
            currentTitle: ""
        }), this.after("initialize", function() {
            this.on("change uiInputSubmit", {
                customTitleSelector: this.handleCustomTitleChange
            }), this.on("focusin", {
                customTitleSelector: this.handleFocus
            })
        }), this.handleFocus = function() {
            this.mergeState({
                currentTitle: this.select("customTitleSelector").val()
            })
        }, this.handleCustomTitleChange = function() {
            var e = this.select("customTitleSelector").val().trim(),
                t = e !== this.state.currentTitle;
            "" !== e || !1 !== this.attr.allowEmpty ? t && (this.trigger("uiColumnTitleUpdate", {
                title: e
            }), this.mergeState({
                currentTitle: e
            })) : this.select("customTitleSelector").val(this.state.currentTitle)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.attributes({
            renameParentContainer: ".js-detail-header",
            renameHeaderText: ".js-tooltip-target",
            renameContainerSelector: ".js-edit-conversation-name",
            renameInputSelector: ".js-conversation-name",
            renameConfirmSelector: '[data-action="confirm-edit-conversation"]',
            renameCloseSelector: '[data-action="close-edit-conversation"]'
        }), this.after("initialize", function() {
            this.on("uiRenameConversation", this.handleRenameConversation), this.on("click", {
                renameConfirmSelector: this.handleRenameConversationActions,
                renameCloseSelector: this.handleRenameConversationActions
            }), this.on("uiInputEscape uiInputSubmit", {
                renameInputSelector: this.handleRenameConversationKeypress
            })
        }), this.handleRenameConversation = function(e, t) {
            var i = t.name || "",
                s = this.select("renameContainerSelector"),
                n = this.select("renameInputSelector").val(i).focus();
            i && (n[0].selectionStart = 0, n[0].selectionEnd = i.length), s.addClass("is-visible")
        }, this.handleRenameConversationKeypress = function(e, t) {
            this.performRenameConversation("uiInputSubmit" === e.type ? (0, r.default)(t.el).val().trim() : "")
        }, this.performRenameConversation = function(e) {
            var t = this.select("renameContainerSelector");
            if (e.length > 0) {
                var i = t.data("conversation-id");
                this.trigger("uiUpdateConversationName", {
                    conversationId: i,
                    name: e
                })
            }
            t.removeClass("is-visible")
        }, this.handleRenameConversationActions = function(e, t) {
            var i = (0, r.default)(t.el),
                s = this.select("renameInputSelector"),
                n = i.is(this.attr.renameConfirmSelector) ? s.val().trim() : "";
            this.performRenameConversation(n), e.stopPropagation()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = l(i(3)),
        n = i(17),
        r = l(i(8)),
        a = l(i(12)),
        o = l(i(20)),
        c = l(i(37));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = a.default.mixin(function() {
        this.attributes({
            columnType: null,
            columnAccounts: [],
            displayOrder: ["filter_not_following", "filter_not_followed_by", "filter_default_profile_image", "filter_no_confirmed_email", "filter_no_confirmed_phone", "filter_new_users"],
            personalTemplate: "menus/notifications_info",
            genericTemplate: "menus/filter_info_generic"
        }), this.initialState({
            fetched: !1,
            settings: null
        }), this.componentDidInitialize = function() {
            var e = this;
            return TD.decider.get("abuse_emergency_filter_info") && n.notificationColumnTypes.has(this.attr.columnType) ? void(1 === this.attr.columnAccounts.length && this.observe(this.getAccountSettingsObservable(this.attr.columnAccounts[0])).subscribe(function(t) {
                e.mergeState({
                    fetched: !0,
                    settings: t
                })
            })) : this.teardown()
        }, this.before("teardown", function() {
            this.$node.remove()
        }), this.getAccountSettingsObservable = function(e) {
            return this.requestResource("advanced_filters", {
                account: e
            })
        }, this.getText = function(e) {
            switch (e) {
                case "filter_default_profile_image":
                    return (0, s.default)("Who have a default profile photo");
                case "filter_new_users":
                    return (0, s.default)("Who have a new account");
                case "filter_no_confirmed_email":
                    return (0, s.default)("Who haven't confirmed their email");
                case "filter_no_confirmed_phone":
                    return (0, s.default)("Who haven't confirmed their phone");
                case "filter_not_following":
                    return (0, s.default)("You don't follow");
                case "filter_not_followed_by":
                    return (0, s.default)("Who don't follow you")
            }
        }, this.getFilterInfo = function(e) {
            var t = this,
                i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            return e.filter(function(e) {
                return i[e]
            }).map(function(e) {
                return {
                    text: t.getText(e)
                }
            })
        }, this.render = function() {
            var e = this.state.fetched ? r.default.render(this.attr.personalTemplate, {
                filters: this.getFilterInfo(this.attr.displayOrder, this.state.settings)
            }) : r.default.render(this.attr.genericTemplate);
            this.$node.html(e), this.trigger("uiAccordionUpdatePanelHeights")
        }
    }, o.default, c.default)
}, function(e, t, i) {
    "use strict";
    var s = i(17),
        n = c(i(8)),
        r = c(i(12)),
        a = c(i(20)),
        o = c(i(37));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            columnType: null,
            columnAccounts: [],
            personalTemplate: "menus/quality_filter_info",
            genericTemplate: "menus/filter_info_generic"
        }), this.initialState({
            fetched: !1,
            settings: null
        }), this.componentDidInitialize = function() {
            var e = this,
                t = s.notificationColumnTypes.has(this.attr.columnType),
                i = TD.decider.get("abuse_emergency_filter_info");
            if (!t || !i) return this.teardown();
            1 === this.attr.columnAccounts.length && this.observe(this.getAccountSettingsObservable(this.attr.columnAccounts[0])).subscribe(function(t) {
                e.mergeState({
                    fetched: !0,
                    settings: t
                })
            })
        }, this.before("teardown", function() {
            this.$node.remove()
        }), this.getAccountSettingsObservable = function(e) {
            return this.requestResource("account.settings", {
                account: e
            })
        }, this.getText = function() {
            return this.state.settings.universal_quality_filtering_enabled
        }, this.render = function() {
            var e = this.state.fetched ? n.default.render(this.attr.personalTemplate, {
                qualityFilterText: this.getText()
            }) : n.default.render(this.attr.genericTemplate);
            this.$node.html(e), this.trigger("uiAccordionUpdatePanelHeights")
        }
    }, a.default, o.default)
}, function(e, t, i) {
    "use strict";
    var s = g(i(30)),
        n = g(i(7)),
        r = g(i(3)),
        a = g(i(0)),
        o = g(i(12)),
        c = g(i(8)),
        l = g(i(2018)),
        u = i(2021),
        d = g(i(2024)),
        h = g(i(2046)),
        m = g(i(2047)),
        f = g(i(2048)),
        p = g(i(17));

    function g(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = o.default.mixin(function() {
        this.attributes({
            column: null,
            renderOptions: null,
            scribeSection: null,
            isSearchOrEventColumn: null,
            accordionSelector: null,
            userFilterSelector: null,
            contentFilterSelector: null,
            onChange: null,
            locationFilterSelector: ".js-location-filter",
            actionFilterSelector: ".js-action-filter",
            engagementFilterSelector: ".js-engagement-filter",
            contentSummarySelector: ".js-content-filter-summary",
            locationSummarySelector: ".js-location-filter-summary",
            userSummarySelector: ".js-user-filter-summary",
            actionSummarySelector: ".js-action-filter-summary",
            engagementSummarySelector: ".js-engagement-filter-summary",
            searchAccordionTemplate: "menus/search_accordion",
            contentSummaryClass: "js-content-filter-summary",
            locationSummaryClass: "js-location-filter-summary",
            userSummaryClass: "js-user-filter-summary",
            actionSummaryClass: "js-action-filter-summary",
            engagementSummaryClass: "js-engagement-filter-summary",
            filterTypes: ["content", "location", "user", "action", "engagement"]
        }), this.componentDidInitialize = function() {
            var e = this;
            this.columnType = p.default.getColumnType(this.attr.column), this.on("uiSearchFilterUpdateAction", function(t, i) {
                e.handleSearchFilterUpdate(i)
            }), this.on("uiAccordionWillExpand", this.handleAccordionWillExpand), this.initialRender()
        }, this.isValidFilterType = function(e) {
            return this.attr.filterTypes.some(function(t) {
                return e === t
            })
        }, this.handleSearchFilterUpdate = function(e) {
            if (e.filter && this.isValidFilterType(e.type)) {
                "col_search" === this.columnType && "" === e.filter.matching && (e.filter.matching = p.default.getBaseQuery(this.attr.column));
                var t = void 0;
                t = this.props.searchFilter instanceof TD.vo.SearchFilter ? new TD.vo.SearchFilter((0, n.default)({}, this.props.searchFilter.toJSONObject(), (0, s.default)({}, e.type, e.filter.toJSONObject()))) : (0, n.default)({}, this.props.searchFilter, (0, s.default)({}, e.type, e.filter)), TD.controller.stats.advancedSearchSettings(this.attr.scribeSection, e.type, e.filterName, e.value), this.trigger(this.$accordion, "uiAccordionUpdatePanelHeights"), this.attr.onChange(t)
            }
        }, this.handleAccordionWillExpand = function(e) {
            var t = (0, a.default)(e.target).closest(".js-accordion-item"),
                i = t.hasClass("facet-type-content");
            if (this.attr.isSearchOrEventColumn && i) {
                var s = this.props.searchFilter.content;
                this.handleSearchFilterUpdate({
                    filter: s,
                    filterName: "matching",
                    type: "content",
                    value: s.matching
                })
            }
        }, this.initialRender = function() {
            var e = this,
                t = this.attr.renderOptions;
            this.$accordion = this.select("accordionSelector");
            var i = c.default.render(this.attr.searchAccordionTemplate, {
                content: {
                    iconClass: "icon-content",
                    title: p.default.getColumnType(this.attr.column) === p.default.columnMetaTypes.TRENDS ? (0, r.default)("Trends source") : (0, r.default)("Tweet content"),
                    jsClass: this.attr.contentSummaryClass,
                    isExpanded: t.expandContentFilter
                },
                location: !!t.withLocationFilter && {
                    iconClass: "icon-geo",
                    title: (0, r.default)("Location"),
                    jsClass: this.attr.locationSummaryClass,
                    isExpanded: t.expandLocationFilter
                },
                user: !!t.withUsersFilter && {
                    iconClass: "icon-user",
                    title: (0, r.default)("Tweet authors"),
                    jsClass: this.attr.userSummaryClass,
                    isExpanded: t.expandUserFilter
                },
                action: !!t.withActionFilter && {
                    iconClass: "icon-check",
                    title: (0, r.default)("Notification types"),
                    jsClass: this.attr.actionSummaryClass,
                    isExpanded: t.expandActionFilter
                },
                engagement: !!t.withEngagementFilter && {
                    iconClass: "icon-heart",
                    title: (0, r.default)("Engagement"),
                    jsClass: this.attr.engagementSummaryClass,
                    isExpanded: t.expandEngagementFilter
                }
            });
            if (this.$accordion.append(i), this.attr.column instanceof TD.vo.Column) {
                var s = this.connect(l.default, {
                    mapStateToProps: function() {
                        return {
                            contentFilter: e.props.searchFilter.content,
                            onChange: function(t) {
                                e.handleSearchFilterUpdate(t)
                            }
                        }
                    }
                });
                this.attachChild(s, this.select("contentFilterSelector"), {
                    renderOptions: t
                })
            } else if ("col_trends" === p.default.getColumnType(this.attr.column)) {
                var n = this.connect(u.TrendsContentFilterFormUiBase, {
                    mapStateToProps: function() {
                        return {
                            filter: e.props.searchFilter.content.value,
                            onChange: function(t) {
                                e.handleSearchFilterUpdate({
                                    filter: {
                                        value: t
                                    },
                                    type: "content"
                                })
                            },
                            onComponentUpdated: function() {
                                e.trigger(e.$accordion, "uiAccordionUpdatePanelHeights")
                            }
                        }
                    }
                });
                this.attachChild(n, this.select("contentFilterSelector"))
            }
            t.withLocationFilter && this.attachChild(d.default, this.select("locationFilterSelector"), {
                searchFilter: this.props.searchFilter,
                renderOptions: t
            }), this.attachChild(h.default, this.select("userFilterSelector"), {
                searchFilter: this.props.searchFilter,
                renderOptions: t
            }), t.withActionFilter && this.attachChild(m.default, this.select("actionFilterSelector"), {
                searchFilter: this.props.searchFilter,
                renderOptions: t,
                columnType: this.columnType
            }), t.withEngagementFilter && this.attachChild(f.default, this.select("engagementFilterSelector"), {
                searchFilter: this.props.searchFilter,
                renderOptions: t
            })
        }, this.render = function() {
            var e = this,
                t = this.props.searchFilter;
            this.attr.filterTypes.forEach(function(i) {
                var s = t[i];
                if (s) {
                    var n = s.getSummaryText ? s.getSummaryText(e.columnType) : "",
                        r = e.select(i + "SummarySelector");
                    r.text(n)
                }
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = h(i(7)),
        n = h(i(3)),
        r = h(i(0)),
        a = h(i(12)),
        o = h(i(8)),
        c = i(527),
        l = h(i(593)),
        u = h(i(2019)),
        d = h(i(1));

    function h(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.default = a.default.mixin(function() {
        this.attributes({
            filterType: "content",
            template: "menus/search_content_form",
            matchingSelector: ".js-matching",
            excludingSelector: ".js-excluding",
            containingSelector: ".js-containing",
            writtenInSelector: ".js-written-in",
            dateTimeFilterSelector: ".js-datetime-filter",
            retweetsSelector: ".js-retweets",
            renderOptions: {
                withPeriscopeFilter: !0,
                withLanguage: !0,
                withDateTime: !1,
                withRetweetsToggle: !0
            }
        }), this.getContainingOptions = function() {
            var e = this.props.contentFilter.type;
            return [{
                value: l.default.TYPE_ANYTHING,
                title: (0, n.default)("all Tweets")
            }, {
                value: l.default.TYPE_IMG,
                title: (0, n.default)("Tweets with images")
            }, {
                value: l.default.TYPE_VID,
                title: (0, n.default)("Tweets with videos")
            }, {
                value: l.default.TYPE_GIF,
                title: (0, n.default)("Tweets with GIFs")
            }, {
                value: l.default.TYPE_VINE,
                title: (0, n.default)("Tweets with Vines")
            }, {
                value: l.default.TYPE_BROADCAST,
                title: (0, n.default)("Tweets with broadcasts"),
                hidden: !this.attr.renderOptions.withPeriscopeFilter
            }, {
                value: l.default.TYPE_IMG_AND_VID,
                title: (0, n.default)("Tweets with any media")
            }, {
                value: l.default.TYPE_LINKS,
                title: (0, n.default)("Tweets with links")
            }].filter(function(t) {
                return t.value !== l.default.TYPE_VINE || e === t.value
            })
        }, this.getRetweetOptions = function() {
            return [{
                value: "included",
                title: (0, n.default)("included"),
                isIncluded: !0
            }, {
                value: "excluded",
                title: (0, n.default)("excluded"),
                isIncluded: !1
            }]
        }, this.shouldIncludeRetweets = function() {
            var e = this.props.contentFilter,
                t = e.includeRTs ? "included" : "excluded";
            return this.retweetOptions.find(function(e) {
                return e.value === t
            }).isIncluded
        }, this.handleChange = function(e, t) {
            var i = this.props.contentFilter,
                s = new l.default({
                    type: "type" === e ? t : i.type,
                    matching: "matching" === e ? t : i.matching,
                    excluding: "excluding" === e ? t : i.excluding,
                    lang: "lang" === e ? t : i.lang,
                    sinceTimeInSec: "sinceTimeInSec" === e ? t : i.sinceTimeInSec,
                    untilTimeInSec: "untilTimeInSec" === e ? t : i.untilTimeInSec,
                    includeRTs: "includeRTs" === e ? "included" === t : i.includeRTs
                });
            this.props.onChange({
                type: "content",
                filter: s
            })
        }, this.componentDidInitialize = function() {
            var e = this;
            this.containingOptions = this.getContainingOptions(), this.retweetOptions = this.getRetweetOptions(), this.on("uiDateTimeFilterChange", function(t, i) {
                var s = i.filterName,
                    n = i.filterValue;
                e.handleChange({
                    since_datetime: "sinceTimeInSec",
                    until_datetime: "untilTimeInSec"
                } [s], n)
            }), this.initialRender(), this.$containing = this.select("containingSelector"), this.$writtenIn = this.select("writtenInSelector"), this.$matching = this.select("matchingSelector"), this.$excluding = this.select("excludingSelector"), this.$retweets = this.select("retweetsSelector"), this.on("change", function(t, i) {
                e.handleChange((0, r.default)(t.target).data("title"), t.target.value)
            })
        }, this.connectAndAttachDateTimeFilter = function() {
            var e = this,
                t = this.connect(u.default, {
                    mapStateToProps: function() {
                        var t = e.props.contentFilter,
                            i = t.sinceTimeInSec,
                            s = t.untilTimeInSec;
                        return {
                            sinceTimeInSec: i,
                            untilTimeInSec: s
                        }
                    }
                });
            this.attachChild(t, this.select("dateTimeFilterSelector"))
        }, this.initialRender = function() {
            var e = (0, c.getSystemLanguageCode)(!0),
                t = (0, c.getLanguageFromISOCode)(e),
                i = d.default.sortBy((0, c.getAllLanguages)(), "localized_name");
            this.$node.html(o.default.render(this.attr.template, (0, s.default)({}, this.attr.renderOptions, {
                withMatching: {
                    isControl: !0,
                    searchInputClassName: "js-matching",
                    searchInputPlaceholder: (0, n.default)("Enter words to match"),
                    searchInputTitle: "matching"
                },
                withExcluding: {
                    isControl: !0,
                    searchInputClassName: "js-excluding",
                    searchInputPlaceholder: (0, n.default)("Enter words to exclude"),
                    searchInputTitle: "excluding"
                },
                containingOptions: this.containingOptions,
                retweetOptions: this.retweetOptions,
                userLanguage: t,
                allLanguages: i
            }))), this.connectAndAttachDateTimeFilter()
        }, this.render = function() {
            var e = this.props.contentFilter;
            this.$containing.val(e.type), this.$writtenIn.val(e.lang), this.$matching.val(e.matching), this.$excluding.val(e.excluding), this.shouldIncludeRetweets() ? this.$retweets.val("included") : this.$retweets.val("excluded")
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(12),
        o = i(359),
        c = i(141),
        l = i(2020),
        u = i(8),
        d = i(70);
    e.exports = a.mixin(function() {
        this.attributes({
            template: "menus/search_datetime_form",
            fromDatePickerHolderSelector: ".js-from-datepicker-holder",
            toDatePickerHolderSelector: ".js-to-datepicker-holder",
            clearDatetimeSelector: ".js-clear-date",
            dateTimeInputSelector: ".js-datetime-input",
            sinceDatetimeFilterName: "since_datetime",
            untilDatetimeFilterName: "until_datetime",
            dateUnselectedClass: "date-unselected",
            timePickerDropdownClass: "TimePickerDropdown",
            timePickerSelector: ".TimePicker"
        }), this.componentDidInitialize = function() {
            var e = this;
            this.$node.html(u.render(this.attr.template)), this.fromDatePickerDropdown = this.createDatePickerDropdown("fromDatePickerHolderSelector", "select date"), this.toDatePickerDropdown = this.createDatePickerDropdown("toDatePickerHolderSelector", "now"), this.fromDatePickerDropdown.datePicker.on(o.events.CHANGE, this.handleFromChange.bind(this)), this.toDatePickerDropdown.datePicker.on(o.events.CHANGE, this.handleToChange.bind(this)), this.on(this.attr.fromDatePickerHolderSelector, "click", {
                clearDatetimeSelector: this.handleFromClear
            }), this.on(this.attr.toDatePickerHolderSelector, "click", {
                clearDatetimeSelector: this.handleToClear
            }), this.on(this.fromDatePickerDropdown.dropdown.$el, "click", {
                clearDatetimeSelector: this.handleFromClear
            }), this.on(this.toDatePickerDropdown.dropdown.$el, "click", {
                clearDatetimeSelector: this.handleToClear
            }), this.on(c.events.SHOW, function(t) {
                var i = (0, n.default)(t.target);
                i && i.hasClass(e.attr.timePickerDropdownClass) && e.repositionDropdown({
                    $dropdownMenu: i,
                    $target: i.siblings(e.attr.timePickerSelector).first()
                })
            })
        }, this.handleFromClear = function() {
            this.trigger("uiDateTimeFilterChange", {
                filterName: this.attr.sinceDatetimeFilterName,
                filterValue: ""
            })
        }, this.handleToClear = function() {
            this.trigger("uiDateTimeFilterChange", {
                filterName: this.attr.untilDatetimeFilterName,
                filterValue: ""
            })
        }, this.handleFromChange = function(e) {
            var t = this.fromDatePickerDropdown.datePicker.date().getTime() / 1e3;
            this.trigger("uiDateTimeFilterChange", {
                filterName: this.attr.sinceDatetimeFilterName,
                filterValue: t
            })
        }, this.handleToChange = function(e) {
            var t = this.toDatePickerDropdown.datePicker.date().getTime() / 1e3;
            this.trigger("uiDateTimeFilterChange", {
                filterName: this.attr.untilDatetimeFilterName,
                filterValue: t
            })
        }, this.createDatePickerDropdown = function(e, t) {
            var i = u.render("menus/datetime_input", {
                    placeHolderText: t
                }),
                s = u.render("menus/datetime_footer", {}),
                r = new l({
                    $target: (0, n.default)(i),
                    $footer: (0, n.default)(s),
                    datePickerOptions: {
                        showTime: !0,
                        preserveTimeOnDaySelect: !0
                    }
                });
            return r.$el.prependTo(this.select(e)), r
        }, this.repositionDropdown = function(e) {
            var t = e.$dropdownMenu,
                i = e.$target,
                s = (0, n.default)(window).height(),
                r = t.outerHeight(!0),
                a = i.position().top,
                o = i.offset().top,
                c = o + r > s;
            c && t.css("top", a - r)
        }, this.render = function() {
            this.fromDatePickerDropdown.dropdown.hide(), this.toDatePickerDropdown.dropdown.hide(), this.setMaxDate(this.fromDatePickerDropdown, this.props.untilTimeInSec), this.setMinDate(this.toDatePickerDropdown, this.props.sinceTimeInSec);
            var e = d(this.fromDatePickerDropdown.datePicker.options.maxDate || new Date).startOf("day").toDate(),
                t = d(this.toDatePickerDropdown.datePicker.options.minDate || new Date).endOf("day").toDate();
            this.setDateTimeOrDefault({
                dropdown: this.fromDatePickerDropdown,
                timeInSec: this.props.sinceTimeInSec,
                defaultText: (0, s.default)("select date"),
                defaultTime: e
            }), this.setDateTimeOrDefault({
                dropdown: this.toDatePickerDropdown,
                timeInSec: this.props.untilTimeInSec,
                defaultText: (0, s.default)("now"),
                defaultTime: t
            })
        }, this.setDateTimeOrDefault = function(e) {
            var t = e.dropdown,
                i = e.timeInSec,
                s = (e.defaultText, e.defaultTime),
                n = i && d.unix(i).isValid();
            n ? (t.datePicker.$el.removeClass(this.attr.dateUnselectedClass), t.datePicker.date(d(i, "X").toDate()), t.$el.find(this.attr.dateTimeInputSelector).val(d(i, "X").format("D MMM YYYY")), t.$el.addClass("has-value")) : (t.datePicker.$el.addClass(this.attr.dateUnselectedClass), t.datePicker.date(s), t.$el.find(this.attr.dateTimeInputSelector).val(""), t.$el.removeClass("has-value"))
        }, this.setMinDate = function(e, t) {
            var i = t && d.unix(t).isValid();
            e.datePicker.options.minDate = i ? d(t, "X").toDate() : null
        }, this.setMaxDate = function(e, t) {
            var i = t && d.unix(t).isValid();
            e.datePicker.options.maxDate = i ? d(t, "X").toDate() : null
        }, this.after("teardown", function() {
            this.fromDatePickerDropdown.remove(), delete this.fromDatePickerDropdown, this.toDatePickerDropdown.remove(), delete this.toDatePickerDropdown, this.$node.empty()
        })
    })
}, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TrendsContentFilterFormUiBase = void 0;
    var s = f(i(13)),
        n = f(i(10)),
        r = f(i(11)),
        a = f(i(14)),
        o = f(i(15)),
        c = f(i(6)),
        l = (f(i(9)), i(12)),
        u = f(i(3)),
        d = i(64),
        h = i(58),
        m = f(i(622));

    function f(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var p = function(e) {
            (0, d.generic)({
                page: "column",
                section: "trends",
                action: "filter",
                element: e
            })
        },
        g = function(e) {
            function t() {
                var e, i, r, o;
                (0, n.default)(this, t);
                for (var c = arguments.length, l = Array(c), u = 0; u < c; u++) l[u] = arguments[u];
                return i = r = (0, a.default)(this, (e = t.__proto__ || (0, s.default)(t)).call.apply(e, [this].concat(l))), r.handleUserOrCountryChange = function(e) {
                    var t = e.target.selectedOptions[0].value,
                        i = t[0],
                        s = t.substring(1),
                        n = null;
                    switch (i) {
                        case "u":
                            r.props.onChange({
                                accountId: s
                            }), n = "user";
                            break;
                        case "r":
                            r.props.onChange({
                                woeid: +s
                            }), n = "region"
                    }
                    n && p(n)
                }, r.handleCityChange = function(e) {
                    r.props.onChange({
                        woeid: +e.target.value
                    }), p("city")
                }, o = i, (0, a.default)(r, o)
            }
            return (0, o.default)(t, e), (0, r.default)(t, [{
                key: "componentDidUpdate",
                value: function() {
                    this.props.onComponentUpdated()
                }
            }, {
                key: "render",
                value: function() {
                    var e = this,
                        t = this.props.filter,
                        i = t.accountId,
                        s = t.woeid;
                    return c.default.createElement(m.default, null, function(t) {
                        var n = null,
                            r = null;
                        if (t) {
                            var a = t.locationByWoeid[s];
                            a && (a.isTown ? (n = a.woeid, r = t.countryWoeidByCityWoeid[a.woeid]) : r = a.woeid)
                        }
                        var o = (0, h.getTwitterAccounts)(),
                            l = i && "u" + i || r && "r" + r || "u" + o[0].userId;
                        return c.default.createElement("div", {
                            className: "padding-hl control-s"
                        }, c.default.createElement("label", {
                            className: "control-group"
                        }, c.default.createElement("span", {
                            className: "control-label txt-mute"
                        }, (0, u.default)("Trends for")), c.default.createElement("div", {
                            className: "controls"
                        }, c.default.createElement("select", {
                            value: l,
                            onChange: e.handleUserOrCountryChange
                        }, c.default.createElement("optgroup", {
                            label: (0, u.default)("Tailored")
                        }, o.map(function(e) {
                            return c.default.createElement("option", {
                                key: e.userId,
                                value: "u" + e.userId
                            }, "@", e.screenName)
                        })), t && c.default.createElement("optgroup", {
                            label: (0, u.default)("Regions")
                        }, t.countries.map(function(e) {
                            return c.default.createElement("option", {
                                key: e.woeid,
                                value: "r" + e.woeid
                            }, e.name)
                        }))))), r && t && t.citiesByCountryWoeid[r] && c.default.createElement("label", {
                            className: "control-group"
                        }, c.default.createElement("span", {
                            className: "control-label txt-mute"
                        }, (0, u.default)("City")), c.default.createElement("div", {
                            className: "controls"
                        }, c.default.createElement("select", {
                            value: n || "",
                            onChange: e.handleCityChange
                        }, c.default.createElement("option", {
                            value: r
                        }, (0, u.default)("All cities")), t.citiesByCountryWoeid[r].map(function(e) {
                            return c.default.createElement("option", {
                                key: e.woeid,
                                value: e.woeid
                            }, e.name)
                        })))))
                    })
                }
            }]), t
        }(c.default.Component);
    t.default = g;
    t.TrendsContentFilterFormUiBase = (0, l.reactToUiBase)(g)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = l(i(13)),
        n = l(i(10)),
        r = l(i(11)),
        a = l(i(14)),
        o = l(i(15)),
        c = l(i(6));
    l(i(9));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var u = function(e) {
        function t() {
            var e, i, r, o;
            (0, n.default)(this, t);
            for (var c = arguments.length, l = Array(c), u = 0; u < c; u++) l[u] = arguments[u];
            return i = r = (0, a.default)(this, (e = t.__proto__ || (0, s.default)(t)).call.apply(e, [this].concat(l))), r.state = {
                data: null,
                error: null
            }, o = i, (0, a.default)(r, o)
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "componentDidMount",
            value: function() {
                var e = this;
                this.deferred = this.props.runDeferred(), this.deferred.addCallbacks(function(t) {
                    return e.setState({
                        data: t
                    }), t
                }, function(t) {
                    throw e.setState({
                        error: t
                    }), t
                })
            }
        }, {
            key: "componentWillUnmount",
            value: function() {
                this.deferred.cancel()
            }
        }, {
            key: "render",
            value: function() {
                return this.props.children(this.state.data, this.state.error)
            }
        }]), t
    }(c.default.Component);
    t.default = u
}, function(e, t) {
    e.exports = {
        queryId: "hjw_0TtkSg2-43wtKsJz3A"
    }
}, function(e, t, i) {
    "use strict";
    var s = h(i(0)),
        n = h(i(12)),
        r = h(i(364)),
        a = h(i(624)),
        o = h(i(8)),
        c = h(i(2032)),
        l = h(i(1)),
        u = i(594),
        d = i(19);

    function h(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = n.default.mixin(function() {
        this.attributes({
            inputSelector: ".js-geo-search",
            radiusSelector: ".js-radius",
            clearMapSelector: ".js-clear-map",
            prettyLatLngSelector: ".js-pretty-lat-lng",
            filterType: "location",
            template: "menus/search_location_form",
            isHiddenClass: "is-hidden",
            searchFilter: null,
            metersInKm: 1e3,
            identity: function() {
                return l.default.uniqueId("mapbox")
            },
            defaultCoordinates: {
                lat: "51.514451",
                lng: "-0.122300"
            },
            filterCircleColour: "#2B7BB9"
        }), this.initialState({
            isCircleMoving: function() {
                var e = this.attr.searchFilter.location,
                    t = e.lat,
                    i = e.lng,
                    s = e.radius;
                return !(t && i && s)
            },
            lat: function() {
                var e = this.attr.searchFilter.location.lat;
                return e && e.length ? e : this.attr.defaultCoordinates.lat
            },
            lng: function() {
                var e = this.attr.searchFilter.location.lng;
                return e && e.length ? e : this.attr.defaultCoordinates.lng
            },
            radius: function() {
                return this.attr.searchFilter.location.radius
            },
            zoom: function() {
                return this.attr.searchFilter.location.zoom || 8
            },
            radiusInMeters: function() {
                var e = this.attr.searchFilter.location.radius,
                    t = this.attr.metersInKm;
                return e ? parseInt(e, 10) * t : 20 * t
            },
            name: function() {
                return this.attr.searchFilter.location.name || ""
            },
            prettyLatLng: function() {
                var e = this.attr.searchFilter.location,
                    t = e.name,
                    i = e.lat,
                    s = e.lng,
                    n = e.radius;
                return !t && i && i.length && s && s.length && n ? (0, u.getPrettyCoordinates)(i, s, n) : ""
            }
        }), this.componentDidInitialize = function() {
            var e = l.default.debounce(this.onMapMouseMove.bind(this), 10);
            this.initialRender(), this.mapBoxMap = this.setupMap(), this.filterCircle = this.setupFilterCircle(this.mapBoxMap), this.$radius = this.select("radiusSelector"), this.$clearMap = this.select("clearMapSelector"), this.$input = this.select("inputSelector"), this.$prettyLatLng = this.select("prettyLatLngSelector"), this.$clearMap.on("click", this.onClearMapClick.bind(this)), this.mapBoxMap.on("mousemove", e), this.mapBoxMap.on("click", this.onMapMouseClick.bind(this)), this.mapBoxMap.on("error", this.onMapError), this.$radius.on("change", this.handleFormChange.bind(this)), this.after("stateChanged", this.handleStateChange.bind(this)), this.on(document, "uiAccordionDidExpand", this.invalidateMapSize), this.on(document, "uiTypeaheadItemSelected", this.handleTypeaheadItemSelect), this.attachChild(a.default, this.$node, {
                inputSelector: this.attr.inputSelector
            }), this.attachChild(r.default, this.$node, {
                alwaysOpen: !1,
                autoSelect: !0,
                blockLinkActions: !0,
                datasources: ["locations"],
                datasourcesRecentOnly: [],
                hideAfterSelect: !0,
                inputSelector: this.attr.inputSelector,
                withClickTrap: !0,
                delayOnInputInMs: 250
            })
        }, this.before("teardown", function() {
            this.mapBoxMap.remove()
        }), this.handleTypeaheadItemSelect = function(e, t) {
            var i = e.target.parentElement.dataset.identity;
            if (i !== this.attr.identity) return !1;
            var s = this.state.radiusInMeters / this.attr.metersInKm,
                n = this.mapBoxMap.getZoom(),
                r = t.item,
                a = r.lat,
                o = r.lng,
                c = r.name;
            this.mergeState({
                isCircleMoving: !1,
                lat: a,
                lng: o,
                name: c,
                target: e.target,
                radius: s + "km",
                zoom: n,
                prettyLatLng: ""
            })
        }, this.toggleClearMap = function() {
            this.state.isCircleMoving ? this.$clearMap.addClass(this.attr.isHiddenClass) : this.$clearMap.removeClass(this.attr.isHiddenClass)
        }, this.handleStateChange = function() {
            this.state.isCircleMoving ? this.locationFilter = new TD.vo.LocationFilter({}) : this.state.zoom && this.state.radius && this.state.lat && this.state.lng ? this.locationFilter = new TD.vo.LocationFilter({
                radius: this.state.radius,
                lat: this.state.lat,
                lng: this.state.lng,
                zoom: this.state.zoom,
                name: this.state.name
            }) : this.locationFilter = new TD.vo.LocationFilter({
                radius: this.state.radius
            }), this.trigger("uiSearchFilterUpdateAction", {
                type: this.attr.filterType,
                filter: this.locationFilter,
                filterName: (0, s.default)(this.state.target).attr("data-title"),
                value: this.state.target.value
            })
        }, this.handleFormChange = function(e) {
            var t = this.$radius.val();
            this.mergeState({
                radius: parseInt(t, 10) / this.attr.metersInKm + "km",
                radiusInMeters: parseInt(t, 10),
                target: e.target
            })
        }, this.invalidateMapSize = function() {
            this.mapBoxMap.invalidateSize()
        }, this.onMapMouseMove = function(e) {
            this.state.isCircleMoving && this.filterCircle.setLatLng(e.latlng)
        }, this.onClearMapClick = function(e) {
            this.mergeState({
                isCircleMoving: !0,
                lat: "",
                lng: "",
                radius: "",
                name: "",
                target: e.target,
                prettyLatLng: ""
            })
        }, this.onMapMouseClick = function(e) {
            var t = e.latlng,
                i = t.lat,
                s = t.lng,
                n = this.state.radiusInMeters / this.attr.metersInKm,
                r = n + "km",
                a = this.mapBoxMap.getZoom();
            this.mergeState({
                isCircleMoving: !1,
                lat: i.toString(),
                lng: s.toString(),
                radius: r,
                zoom: a,
                target: e.target,
                prettyLatLng: (0, u.getPrettyCoordinates)(i, s, r),
                name: ""
            })
        }, this.onMapError = function(e) {
            (0, d.metric)("mapbox:map:error:" + e.code)
        }, this.getFillOpacity = function() {
            return this.state.isCircleMoving ? .2 : .6
        }, this.getRadiusOptions = function() {
            return [.1, .5, 1, 3, 5, 10, 20, 50, 100, 200].map(function(e) {
                var t = e * this.attr.metersInKm;
                return {
                    value: t,
                    title: t <= 500 ? t + "m" : e + "km",
                    selected: this.state.radiusInMeters === t
                }
            }, this)
        }, this.render = function() {
            this.filterCircle.setRadius(this.state.radiusInMeters), this.filterCircle.setStyle({
                fillOpacity: this.getFillOpacity()
            }), this.toggleClearMap(), this.state.zoom && this.state.radius && this.state.lat && this.state.lng && (this.mapBoxMap.setView([this.state.lat, this.state.lng], this.mapBoxMap.getZoom()), this.filterCircle.setLatLng(c.default.latLng(this.state.lat, this.state.lng))), this.$input.val(this.state.name), this.$prettyLatLng.text(this.state.prettyLatLng)
        }, this.initialRender = function() {
            var e = {
                    radiusOptions: this.getRadiusOptions(),
                    identity: this.attr.identity,
                    hideMapClear: this.state.isCircleMoving,
                    name: this.state.name,
                    prettyLatLng: this.state.prettyLatLng
                },
                t = o.default.render(this.attr.template, e);
            this.$node.html(t)
        }, this.setupFilterCircle = function(e) {
            var t = [this.state.lat, this.state.lng];
            return c.default.circle(t, this.state.radiusInMeters, {
                opacity: 1,
                weight: 1,
                fillOpacity: this.getFillOpacity(),
                fillColor: this.attr.filterCircleColour,
                color: this.attr.filterCircleColour
            }).addTo(e)
        }, this.setupMap = function() {
            var e = [this.state.lat, this.state.lng],
                t = c.default.mapbox.map("mapbox-map-" + this.attr.identity, null, {
                    maxBounds: [
                        [90, 180],
                        [-90, -180]
                    ],
                    minZoom: 1
                }).setView(e, this.state.zoom);
            return c.default.mapbox.styleLayer("mapbox://styles/twittergeo44abc7b/cir6fgdl50003nhn9o4xxqtic").addTo(t), t
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(8)),
        n = r(i(19));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = function() {
        this.attributes({
            usersListSelector: ".js-typeahead-user-list",
            usersItemSelector: ".js-typeahead-user-item",
            usersTemplate: "typeahead/typeahead_users"
        }), this.renderUsers = function(e, t) {
            this.$usersList.find(this.attr.usersItemSelector).remove();
            var i = t.suggestions.users || [];
            if (i.forEach(function(e) {
                    e.emojifiedName = n.default.cleanWithEmoji(e.name)
                }), i.length) {
                var r = s.default.render(this.attr.usersTemplate, {
                    users: i,
                    query: t.query
                });
                this.$usersList.toggleClass("has-results", i.length > 0).toggleClass("is-hidden", 0 === i.length).html(r)
            } else this.clearUsers()
        }, this.getAvatar = function(e) {
            return e.profile_image_url_https.replace(/_normal(\..*)?$/i, "_mini$1")
        }, this.clearUsers = function() {
            this.$usersList.removeClass("has-results"), this.$usersList.addClass("is-hidden")
        }, this.after("initialize", function() {
            this.$usersList = this.select("usersListSelector"), this.on("uiTypeaheadRenderResults", this.renderUsers)
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = r(i(8)),
        n = r(i(1));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = function() {
        this.attributes({
            locationsListSelector: ".js-typeahead-location-list",
            locationsItemSelector: ".js-typeahead-location-item",
            locationsTemplate: "typeahead/typeahead_locations"
        }), this.renderLocations = function(e, t) {
            this.$locationsList.find(this.attr.locationsItemSelector).remove();
            var i = n.default.get(t, "suggestions.locations", []);
            if (i.length) {
                var r = s.default.render(this.attr.locationsTemplate, {
                    locations: i
                });
                this.$locationsList.toggleClass("has-results", i.length > 0).toggleClass("is-hidden", 0 === i.length).html(r)
            } else this.clearLocations()
        }, this.clearLocations = function() {
            this.$locationsList.removeClass("has-results").addClass("is-hidden")
        }, this.after("initialize", function() {
            this.$locationsList = this.select("locationsListSelector"), this.on("uiTypeaheadRenderResults", this.renderLocations)
        })
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(8),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(248);
    e.exports = function() {
        this.attributes({
            savedSearchesListSelector: ".js-typeahead-saved-search-list",
            savedSearchesItemSelector: ".js-typeahead-saved-search-item",
            savedSearchesTemplate: "typeahead/typeahead_saved_searches"
        }), this.renderSavedSearches = function(e, t) {
            var i, s = [];
            this.$savedSearchesList.empty(), t.suggestions && t.suggestions.savedSearches && (t.suggestions.savedSearches.forEach(function(e) {
                s.push({
                    query: e.query,
                    name: (0, a.highlightSubstringAndAddHashflag)(e.name, t.query)
                })
            }, this), i = r.default.render(this.attr.savedSearchesTemplate, {
                savedSearches: s
            }), this.$savedSearchesList.toggleClass("has-results", s.length > 0).toggleClass("is-hidden", 0 === s.length).html(i))
        }, this.after("initialize", function() {
            this.$savedSearchesList = this.select("savedSearchesListSelector"), this.on("uiTypeaheadRenderResults", this.renderSavedSearches)
        })
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(8),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(248);
    e.exports = function() {
        this.attributes({
            recentSearchesListSelector: ".js-typeahead-recent-search-list",
            recentSearchesItemSelector: ".js-typeahead-recent-search-item",
            recentSearchesClearSelector: ".js-typeahead-recent-search-clear",
            recentSearchesTemplate: "typeahead/typeahead_recent_searches",
            recentSearchesFixedClass: "recent-searches-fixed-list"
        }), this.renderRecentSearches = function(e, t) {
            this.currentData = t;
            var i = t.datasources && t.datasources.some(function(e) {
                return "recentSearches" === e
            });
            if (!i) return this.$recentSearchesList.removeClass("has-results").addClass("is-hidden").empty(), void this.$clearRecentSearches.addClass("is-hidden").removeClass("is-invisible");
            var s, n = i && 1 === t.datasources.length,
                o = t.suggestions && t.suggestions.recentSearches && t.suggestions.recentSearches.length,
                c = n && !o;
            if (n && o) {
                var l = [];
                t.suggestions.recentSearches.forEach(function(e) {
                    l.push({
                        query: e,
                        name: (0, a.highlightSubstringAndAddHashflag)(e, t.query)
                    })
                }, this), s = r.default.render(this.attr.recentSearchesTemplate, {
                    recentSearches: l
                })
            } else s = "";
            this.$recentSearchesList.toggleClass(this.attr.recentSearchesFixedClass, n), this.$recentSearchesList.toggleClass("has-results", o).toggleClass("is-hidden", !n).html(s), this.$clearRecentSearches.toggleClass("is-hidden", !n).toggleClass("is-invisible", c)
        }, this.clearRecentSearches = function(e) {
            delete this.currentData.suggestions.recentSearches, this.renderRecentSearches(null, this.currentData)
        }, this.clearRecentSearchItem = function(e, t) {
            var i = this.currentData.suggestions.recentSearches.filter(function(e) {
                return t.query !== e
            });
            this.currentData.suggestions.recentSearches = i, this.renderRecentSearches(null, this.currentData)
        }, this.after("initialize", function() {
            this.$recentSearchesList = this.select("recentSearchesListSelector"), this.$clearRecentSearches = this.select("recentSearchesClearSelector"), this.on("uiRecentSearchClearAction", this.clearRecentSearches), this.on("uiTypeaheadRenderResults", this.renderRecentSearches), this.on("uiRecentSearchClearItem", this.clearRecentSearchItem)
        })
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(8),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(248);
    e.exports = function() {
        this.attributes({
            topicsListSelector: ".js-typeahead-topic-list",
            topicsItemSelector: ".js-typeahead-topic-item",
            topicsTemplate: "typeahead/typeahead_topics"
        }), this.renderTopics = function(e, t) {
            this.$topicsList.empty();
            var i = t.suggestions.topics || [];
            if (i.length) {
                var s = i.map(function(e) {
                        return {
                            topic: e.topic,
                            name: (0, a.highlightSubstringAndAddHashflag)(e.topic, t.query)
                        }
                    }, this),
                    n = r.default.render(this.attr.topicsTemplate, {
                        topics: s
                    });
                this.$topicsList.toggleClass("has-results", i.length > 0).toggleClass("is-hidden", 0 === i.length).html(n)
            } else this.clearTopics()
        }, this.clearTopics = function(e) {
            this.$topicsList.removeClass("has-results"), this.$topicsList.addClass("is-hidden")
        }, this.resetTopics = function() {
            this.clearTopics(), this.$topicsList.find(this.attr.topicsItemSelector).remove()
        }, this.after("initialize", function() {
            this.$topicsList = this.select("topicsListSelector"), this.on("uiTypeaheadRenderResults", this.renderTopics)
        })
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(8),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(248);
    e.exports = function() {
        this.attributes({
            listsListSelector: ".js-typeahead-lists-list",
            listItemSelector: ".js-typeahead-list-item",
            listTemplate: "typeahead/typeahead_lists"
        }), this.renderLists = function(e, t) {
            if (this.currentData = t, t.datasources && t.datasources.some(function(e) {
                    return "lists" === e
                })) {
                var i, s = t.suggestions && t.suggestions.lists && t.suggestions.lists.length;
                if (s) {
                    var n = [];
                    t.suggestions.lists.forEach(function(e) {
                        n.push({
                            query: e.fullName,
                            fullName: (0, a.highlightSubstring)(e.fullName, t.query),
                            name: e.name,
                            screenName: e.user.screenName
                        })
                    }, this), i = r.default.render(this.attr.listTemplate, {
                        lists: n
                    })
                } else i = "";
                this.$listsList.toggleClass("has-results", s).toggleClass("is-hidden", !s).html(i)
            } else this.$listsList.removeClass("has-results").addClass("is-hidden").empty()
        }, this.after("initialize", function() {
            this.$listsList = this.select("listsListSelector"), this.on("uiTypeaheadRenderResults", this.renderLists)
        })
    }
}, function(e, t, i) {
    "use strict";
    e.exports = function() {
        this.attributes({
            conversationListSelector: ".js-typeahead-conversation-list",
            conversationItemSelector: ".js-typeahead-conversation-item",
            conversationTemplate: "typeahead/typeahead_conversations"
        }), this.after("initialize", function() {
            this.$conversationList = this.select("conversationListSelector"), this.on("uiTypeaheadRenderResults", this.renderConversations)
        }), this.renderConversations = function(e, t) {
            this.$conversationList.find(this.attr.conversationItemSelector).remove();
            var i = t.suggestions.conversations || [];
            if (i.length) {
                var s = i.map(function(e) {
                    return e.render({
                        templateName: this.attr.conversationTemplate
                    })
                }, this).join("");
                this.$conversationList.toggleClass("has-results", i.length > 0).toggleClass("is-hidden", 0 === i.length).html(s)
            } else this.clearConversations()
        }, this.clearConversations = function() {
            this.$conversationList.removeClass("has-results"), this.$conversationList.addClass("is-hidden")
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = i(2033);
    s.mapbox.accessToken = TD.config.mapbox_access_token, i(2045), e.exports = s
}, , , , , , , , , , , , , , function(e, t, i) {
    "use strict";
    var s = a(i(3)),
        n = a(i(0)),
        r = a(i(8));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = i(5).component;
    e.exports = o(function() {
        this.attributes({
            FROM_ME: "from_me",
            MENTIONING_USER: "mentioning_user",
            MENTIONING_ME: "mentioning_me",
            filterType: "user",
            template: "menus/search_user_form",
            tweetsFromSelector: ".js-tweets-from",
            tweetsFromUserSelector: ".js-tweets-from-user",
            tweetsFromUserClass: "js-tweets-from-user",
            tweetsFromUserInputSelector: '.js-tweets-from-user input[type="text"]',
            tweetsFromListSelector: ".js-tweets-from-list",
            tweetsFromListClass: "js-tweets-from-list",
            tweetsFromListInputSelector: '.js-tweets-from-list input[type="text"]',
            tweetsFromMeSelector: ".js-tweets-from-me",
            mentioningSelector: ".js-mentioning",
            mentioningUserSelector: ".js-mentioning-user",
            mentioningUserInputSelector: '.js-mentioning-user input[type="text"]',
            mentioningUserClass: "js-mentioning-user",
            mentioningMeSelector: ".js-mentioning-me",
            isHiddenClass: "is-hidden",
            renderOptions: {
                withFromList: !1,
                withUsersIFollow: !1
            },
            searchFilter: null
        }), this.getTweetsFromOptions = function(e, t) {
            var i = [{
                value: TD.vo.UserFilter.FROM_ALL,
                title: (0, s.default)("all users")
            }, {
                value: TD.vo.UserFilter.FROM_USER,
                title: (0, s.default)("specific user…")
            }, {
                value: this.attr.FROM_ME,
                title: (0, s.default)("me…")
            }, {
                value: TD.vo.UserFilter.FROM_VERIFIED,
                title: (0, s.default)("verified users")
            }];
            return e && i.push({
                value: TD.vo.UserFilter.FROM_LIST,
                title: (0, s.default)("members of List…")
            }), t && i.splice(1, 0, {
                value: TD.vo.UserFilter.FROM_FOLLOWING,
                title: (0, s.default)("users I follow")
            }), i
        }, this.getMentioningOptions = function() {
            return [{
                value: "",
                title: (0, s.default)("-")
            }, {
                value: this.attr.MENTIONING_USER,
                title: (0, s.default)("specific user…")
            }, {
                value: this.attr.MENTIONING_ME,
                title: (0, s.default)("me…")
            }]
        }, this.getMyAccounts = function() {
            var e = TD.storage.accountController.getPreferredAccount("twitter"),
                t = TD.storage.accountController.getAccountsForService("twitter");
            return t = (t = t.map(function(t) {
                return {
                    value: t.getUsername().toLowerCase(),
                    title: "@" + t.getUsername(),
                    isDefault: t === e
                }
            })).sort(function(e, t) {
                return e.value.toLowerCase().localeCompare(t.value.toLowerCase())
            })
        }, this.updateFormState = function(e, t) {
            switch (e) {
                case TD.vo.UserFilter.FROM_USER:
                    this.$tweetsFromUser.removeClass(this.attr.isHiddenClass), this.$tweetsFromList.addClass(this.attr.isHiddenClass), this.$tweetsFromMe.addClass(this.attr.isHiddenClass);
                    break;
                case TD.vo.UserFilter.FROM_LIST:
                    this.$tweetsFromList.removeClass(this.attr.isHiddenClass), this.$tweetsFromUser.addClass(this.attr.isHiddenClass), this.$tweetsFromMe.addClass(this.attr.isHiddenClass);
                    break;
                case this.attr.FROM_ME:
                    this.$tweetsFromMe.removeClass(this.attr.isHiddenClass), this.$tweetsFromUser.addClass(this.attr.isHiddenClass), this.$tweetsFromList.addClass(this.attr.isHiddenClass), this.$tweetsFromUserInput.val("");
                    break;
                default:
                    this.$tweetsFromMe.addClass(this.attr.isHiddenClass), this.$tweetsFromUser.addClass(this.attr.isHiddenClass), this.$tweetsFromList.addClass(this.attr.isHiddenClass), this.$tweetsFromUserInput.val("")
            }
            switch (t) {
                case this.attr.MENTIONING_USER:
                    this.$mentioningUser.removeClass(this.attr.isHiddenClass), this.$mentioningMe.addClass(this.attr.isHiddenClass);
                    break;
                case this.attr.MENTIONING_ME:
                    this.$mentioningMe.removeClass(this.attr.isHiddenClass), this.$mentioningUser.addClass(this.attr.isHiddenClass), this.$mentioningUserInput.val("");
                    break;
                default:
                    this.$mentioningMe.addClass(this.attr.isHiddenClass), this.$mentioningUser.addClass(this.attr.isHiddenClass), this.$mentioningUserInput.val("")
            }
        }, this.handleChange = function(e) {
            var t, i = "",
                s = this.$tweetsFrom.val(),
                r = this.$mentioning.val(),
                a = (0, n.default)(e.target).data("title");
            switch (this.updateFormState(s, r), s) {
                case this.attr.FROM_ME:
                    i = this.$tweetsFromMe.val(), s = TD.vo.UserFilter.FROM_USER;
                    break;
                case TD.vo.UserFilter.FROM_USER:
                    i = this.$tweetsFromUserInput.val();
                    break;
                case TD.vo.UserFilter.FROM_LIST:
                    i = this.$tweetsFromListInput.val()
            }
            t = r === this.attr.MENTIONING_ME ? this.$mentioningMe.val() : this.$mentioningUserInput.val(), i || s !== TD.vo.UserFilter.FROM_USER && s !== TD.vo.UserFilter.FROM_LIST || (s = TD.vo.UserFilter.FROM_ALL);
            var o = new TD.vo.UserFilter({
                from_type: s,
                from_name: i,
                mention_name: t
            });
            this.trigger("uiSearchFilterUpdateAction", {
                type: "user",
                filter: o,
                filterName: a,
                value: e.target.value
            })
        }, this.after("initialize", function() {
            var e, t, i;
            this.tweetsFromOptions = this.getTweetsFromOptions(this.attr.renderOptions.withFromList, this.attr.renderOptions.withUsersIFollow), this.mentioningOptions = this.getMentioningOptions(), this.myAccounts = this.getMyAccounts();
            var n = this.attr.searchFilter,
                a = n.user && null !== n.user.from_type ? n.user.from_name : "",
                o = n.user ? n.user.mention_name : "";
            e = {
                tweetsFromOptions: this.tweetsFromOptions,
                tweetsFromUser: {
                    searchInputControlClass: this.attr.tweetsFromUserClass + " margin-txs",
                    searchInputPlaceholder: (0, s.default)("user name"),
                    searchInputTitle: "from_user_or_list",
                    searchInputValue: a
                },
                tweetsFromList: {
                    searchInputControlClass: this.attr.tweetsFromListClass + " margin-txs",
                    searchInputPlaceholder: (0, s.default)("@username/list-name"),
                    searchInputTitle: "from_user_or_list",
                    searchInputValue: a
                },
                mentioningUser: {
                    searchInputControlClass: this.attr.mentioningUserClass + " margin-txs",
                    searchInputPlaceholder: (0, s.default)("user name"),
                    searchInputTitle: "mentioning_user",
                    searchInputValue: o
                },
                mentioningOptions: this.mentioningOptions,
                myAccounts: this.myAccounts
            };
            var c = r.default.render(this.attr.template, e);
            if (this.$node.html(c), this.$tweetsFrom = this.select("tweetsFromSelector"), this.$tweetsFromUser = this.select("tweetsFromUserSelector"), this.$tweetsFromUserInput = this.select("tweetsFromUserInputSelector"), this.$tweetsFromList = this.select("tweetsFromListSelector"), this.$tweetsFromListInput = this.select("tweetsFromListInputSelector"), this.$tweetsFromMe = this.select("tweetsFromMeSelector"), this.$mentioning = this.select("mentioningSelector"), this.$mentioningUser = this.select("mentioningUserSelector"), this.$mentioningUserInput = this.select("mentioningUserInputSelector"), this.$mentioningMe = this.select("mentioningMeSelector"), this.attr.searchFilter && this.attr.searchFilter.user) {
                if (t = this.attr.searchFilter.user.from_name && TD.storage.accountController.getAccountFromUsername(this.attr.searchFilter.user.from_name).length > 0, i = this.attr.searchFilter.user.mention_name && TD.storage.accountController.getAccountFromUsername(this.attr.searchFilter.user.mention_name).length > 0, t) this.$tweetsFrom.val(this.attr.FROM_ME), this.$tweetsFromMe.val(this.attr.searchFilter.user.from_name);
                else switch (this.$tweetsFrom.val(this.attr.searchFilter.user.from_type), this.attr.searchFilter.user.from_type) {
                    case TD.vo.UserFilter.FROM_USER:
                        this.$tweetsFromUserInput.val(this.attr.searchFilter.user.from_name);
                        break;
                    case TD.vo.UserFilter.FROM_LIST:
                        this.$tweetsFromListInput.val(this.attr.searchFilter.user.from_name)
                }
                i ? (this.$mentioning.val(this.attr.MENTIONING_ME), this.$mentioningMe.val(this.attr.searchFilter.user.mention_name)) : this.attr.searchFilter.user.mention_name && (this.$mentioning.val(this.attr.MENTIONING_USER), this.$mentioningUserInput.val(this.attr.searchFilter.user.mention_name))
            }
            this.updateFormState(this.$tweetsFrom.val(), this.$mentioning.val()), this.on("change", this.handleChange)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = c(i(30)),
        n = c(i(7)),
        r = c(i(32)),
        a = c(i(0)),
        o = c(i(17));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var l = i(5).component,
        u = i(8);
    e.exports = l(function() {
        this.attributes({
            filterType: "action",
            columnType: null,
            template: "menus/search_action_form",
            searchFilter: null,
            showFavoritesSelector: ".js-show-favorites",
            showRetweetsSelector: ".js-show-retweets",
            showListsSelector: ".js-show-lists",
            showFollowersSelector: ".js-show-followers",
            showMentionsSelector: ".js-show-mentions",
            showActionsOnRetweetsSelector: ".js-show-actions-on-retweets",
            showQuotedSelector: ".js-show-quoted",
            showInteractionsOnMentioned: ".js-show-interactions-on-mentioned",
            showInteractionsOnTagged: ".js-show-interactions-on-tagged",
            errorMessageSelector: ".js-action-filter-error",
            isHiddenClass: "is-hidden"
        }), this.after("initialize", function() {
            var e = {
                    available: this.attr.searchFilter.action.getAvailableFacets(this.attr.columnType),
                    checked: this.attr.searchFilter.action.toJSONObject(),
                    showError: this.attr.searchFilter.action.hasFilterError(this.attr.columnType)
                },
                t = u.render(this.attr.template, e);
            this.$node.html(t), this.$showRetweets = this.select("showRetweetsSelector"), this.$showFavorites = this.select("showFavoritesSelector"), this.$showFollowers = this.select("showFollowersSelector"), this.$showLists = this.select("showListsSelector"), this.$showMentions = this.select("showMentionsSelector"), this.$showActionsOnRetweets = this.select("showActionsOnRetweetsSelector"), this.$showQuoted = this.select("showQuotedSelector"), this.$showInteractionsOnMentioned = this.select("showInteractionsOnMentioned"), this.$showInteractionsOnTagged = this.select("showInteractionsOnTagged"), this.on("change", this.handleChange)
        }), this.isInActivityColumn = function() {
            return this.attr.columnType === o.default.columnMetaTypes.ACTIVITY
        }, this.handleChange = function(e) {
            var t, i = {
                    showFollowers: this.$showFollowers.prop("checked"),
                    showLists: this.$showLists.prop("checked"),
                    showMentions: this.$showMentions.prop("checked"),
                    showRetweets: this.$showRetweets.prop("checked"),
                    showFavorites: this.$showFavorites.prop("checked"),
                    showActionsOnRetweets: this.$showActionsOnRetweets.prop("checked"),
                    showQuoted: this.$showQuoted.prop("checked"),
                    showInteractionsOnMentioned: this.$showInteractionsOnMentioned.prop("checked"),
                    showInteractionsOnTagged: this.$showInteractionsOnTagged.prop("checked")
                },
                o = (0, r.default)(i).reduce(function(e, t) {
                    return "boolean" != typeof i[t] ? e : (0, n.default)({}, e, (0, s.default)({}, t, i[t]))
                }, {});
            t = new TD.vo.ActionFilter(o), this.select("errorMessageSelector").toggleClass(this.attr.isHiddenClass, !t.hasFilterError(this.attr.columnType)), this.trigger("uiAccordionUpdatePanelHeights"), this.trigger("uiSearchFilterUpdateAction", {
                type: this.attr.filterType,
                filter: t,
                filterName: (0, a.default)(e.target).data("title"),
                value: [e.target.value, e.target.checked ? "show" : "hide"].join(":")
            }), t.hasFilterError(this.attr.columnType) && this.trigger("uiActionFilterError")
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(0)),
        n = r(i(8));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).component;
    e.exports = a(function() {
        this.attributes({
            filterType: "engagement",
            template: "menus/search_engagement_form",
            searchFilter: null,
            minRetweetsSelector: ".js-min-retweets",
            minRepliesSelector: ".js-min-replies",
            minFavoritesSelector: ".js-min-favorites",
            zeroClass: "txt-mute"
        }), this.after("initialize", function() {
            var e = this.attr.searchFilter.engagement,
                t = n.default.render(this.attr.template, e);
            this.$node.html(t), this.$minFavorites = this.select("minFavoritesSelector"), this.$minRetweets = this.select("minRetweetsSelector"), this.$minReplies = this.select("minRepliesSelector"), this.on("change blur", this.handleChange), this.validateInput(this.attr.searchFilter.engagement)
        }), this.validateInput = function() {
            var e = parseInt(this.$minFavorites.val(), 10),
                t = parseInt(this.$minRetweets.val(), 10),
                i = parseInt(this.$minReplies.val(), 10);
            e = isNaN(e) ? 0 : e, t = isNaN(t) ? 0 : t, i = isNaN(i) ? 0 : i, this.$minFavorites.val(e).toggleClass(this.attr.zeroClass, 0 === e), this.$minRetweets.val(t).toggleClass(this.attr.zeroClass, 0 === t), this.$minReplies.val(i).toggleClass(this.attr.zeroClass, 0 === i)
        }, this.handleChange = function(e) {
            var t, i = (0, s.default)(e.target).data("title"),
                n = (0, s.default)(e.target).val();
            this.validateInput(), t = new TD.vo.EngagementFilter({
                minFavorites: this.$minFavorites.val(),
                minRetweets: this.$minRetweets.val(),
                minReplies: this.$minReplies.val()
            }), this.trigger("uiSearchFilterUpdateAction", {
                type: this.attr.filterType,
                filter: t,
                filterName: i,
                value: n
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = c(i(3)),
        n = c(i(0)),
        r = c(i(12)),
        a = c(i(8)),
        o = c(i(17));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            column: null,
            template: "column/preferences",
            actionButton: "[data-action]",
            summarySelector: ".js-preferences-summary",
            summaryClass: "js-preferences-summary",
            thumbSizeSelectSelector: ".js-thumb-size",
            thumbSizeSelectTemplate: "column/thumb_size_select",
            selectItemSelector: ".js-toggle-item",
            selectedMediaSelector: ".js-selected-media",
            unselectedMediaSelector: ".js-unselected-media"
        }), this.initialState({
            hasSound: function() {
                return this.attr.column.model.getHasSound()
            },
            hasNotifications: function() {
                return this.attr.column.model.getHasNotification()
            },
            thumbSize: function() {
                return this.attr.column.getMediaPreviewSize()
            }
        }), this.componentDidInitialize = function() {
            this.column = this.attr.column, this.initialRender(), this.on(this.$preferences, "click", {
                actionButton: this.toggleColumnSetting
            }), this.on(this.$node, "click", {
                selectItemSelector: this.handleThumbSizeSelectClick
            })
        }, this.getMediaPreviewSizeText = function() {
            var e = this.column.getMediaPreviewSize();
            return this.isColumnWithTweets() ? (0, s.default)({
                off: "Media hidden",
                small: "Small media",
                medium: "Medium media",
                large: "Large media"
            } [e]) : ""
        }, this.getNotificationsText = function() {
            var e = this.state,
                t = e.hasNotifications,
                i = e.hasSound;
            return t && i ? (0, s.default)("Sounds and desktop notifications") : t ? (0, s.default)("Desktop notifications") : i ? (0, s.default)("Sounds") : ""
        }, this.renderSummary = function() {
            var e = this.getMediaPreviewSizeText(),
                t = this.getNotificationsText(),
                i = t.length && this.isColumnWithTweets() ? "·" : "";
            this.$summarySelector.text(e + " " + i + " " + t)
        }, this.render = function() {
            this.renderSummary(), this.renderThumbSizeSelector()
        }, this.toggleColumnSetting = function(e) {
            var t = (0, n.default)(e.target).closest(this.attr.actionButton),
                i = t.data("action"),
                s = this.column.model;
            switch (i) {
                case "popups":
                    var r = !s.getHasNotification();
                    s.setHasNotification(r), this.trigger(document, "uiCheckNotificationPermission"), this.mergeState({
                        hasNotifications: r
                    });
                    break;
                case "sound":
                    var a = !s.getHasSound();
                    s.setHasSound(a), this.mergeState({
                        hasSound: a
                    })
            }
        }, this.renderThumbSizeSelector = function() {
            var e = this.state,
                t = e.thumbSize,
                i = e.thumbSizeEl,
                s = this.attr,
                n = s.selectedMediaSelector,
                r = s.unselectedMediaSelector,
                a = '[data-value="' + t + '"]';
            if (i) this.$selectedMedia.addClass("is-hidden"), this.$unselectedMedia.removeClass("is-hidden"), i.find(n).removeClass("is-hidden"), i.find(r).addClass("is-hidden");
            else {
                var o = this.$thumbSizeSelectOptions.filter(a);
                o.find(n).removeClass("is-hidden"), o.find(r).addClass("is-hidden")
            }
        }, this.handleThumbSizeSelectClick = function(e, t) {
            var i = (0, n.default)(t.el),
                s = i.data("value");
            s && (this.trigger("uiColumnUpdateMediaPreview", {
                value: s
            }), this.mergeState({
                thumbSizeEl: i
            }))
        }, this.getNotificationOptions = function() {
            var e = TD.controller.notifications.hasNotifications(),
                t = e ? {
                    action: "popups",
                    option: (0, s.default)("Enable desktop notifications"),
                    on: this.state.hasNotifications
                } : null,
                i = {
                    action: "sound",
                    option: (0, s.default)("Enable sound"),
                    on: this.state.hasSound
                };
            return [i, t].filter(Boolean)
        }, this.getMediaPreviewSizeOptions = function() {
            var e = "/web/assets/global/backgrounds";
            return [{
                dataValue: "off",
                text: (0, s.default)("Hidden"),
                selectedSrc: TD.assets.get(e + "/hidden-selected.png"),
                unselectedSrc: TD.assets.get(e + "/hidden-unselected.png")
            }, {
                dataValue: "small",
                text: (0, s.default)("Small"),
                selectedSrc: TD.assets.get(e + "/small-selected.png"),
                unselectedSrc: TD.assets.get(e + "/small-unselected.png")
            }, {
                dataValue: "medium",
                text: (0, s.default)("Medium"),
                selectedSrc: TD.assets.get(e + "/medium-selected.png"),
                unselectedSrc: TD.assets.get(e + "/medium-unselected.png")
            }, {
                dataValue: "large",
                text: (0, s.default)("Large"),
                selectedSrc: TD.assets.get(e + "/large-selected.png"),
                unselectedSrc: TD.assets.get(e + "/large-unselected.png")
            }]
        }, this.isColumnWithTweets = function() {
            return -1 !== o.default.mediaPreviewableColumnTypes.indexOf(o.default.getColumnType(this.column))
        }, this.initialRender = function() {
            var e = this.isColumnWithTweets(),
                t = {
                    summaryText: "",
                    iconClass: "icon-settings",
                    title: (0, s.default)("Preferences"),
                    jsClass: this.attr.summaryClass,
                    notificationOptions: this.getNotificationOptions(),
                    mediaPreviewSizeOptions: this.getMediaPreviewSizeOptions(),
                    columnWithTweets: e
                };
            this.$preferences = (0, n.default)(a.default.render(this.attr.template, t)), this.$node.append(this.$preferences), this.$thumbSizeSelectOptions = this.select("selectItemSelector"), this.$summarySelector = this.select("summarySelector"), this.$selectedMedia = this.select("selectedMediaSelector"), this.$unselectedMedia = this.select("unselectedMediaSelector"), this.renderSummary(), this.renderThumbSizeSelector()
        }
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = o(i(12)),
        n = o(i(98)),
        r = o(i(17)),
        a = i(2051);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.default = s.default.mixin(function() {
        this.attributes({
            column: null
        }), this.componentDidInitialize = function() {
            var e = this;
            this.initialRender(), this.on("uiRemoveColumn", function() {
                this.teardown()
            });
            var t = this.connect(a.SimpleColumnHolderUiBase, {
                mapStateToProps: function(t) {
                    return {
                        column: e.attr.column
                    }
                }
            });
            this.attachChild(t, this.$node)
        }, this.initialRender = function() {
            var e = this.attr.column;
            this.$node.attr("data-column", e.model.getKey()).addClass((0, n.default)("js-column js-simple-column column", r.default.getColumnClassByColumn(e)))
        }, this.render = function() {}
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.SimpleColumnHolderUiBase = void 0;
    var s = b(i(13)),
        n = b(i(10)),
        r = b(i(11)),
        a = b(i(14)),
        o = b(i(15)),
        c = b(i(6)),
        l = (b(i(9)), b(i(17))),
        u = b(i(2052)),
        d = b(i(2053)),
        h = b(i(2058)),
        m = i(12),
        f = i(621),
        p = i(617),
        g = i(2059),
        v = i(2065),
        T = b(i(2071)),
        w = b(i(3));

    function b(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var y = function(e) {
        function t() {
            var e, i, r, o;
            (0, n.default)(this, t);
            for (var c = arguments.length, l = Array(c), u = 0; u < c; u++) l[u] = arguments[u];
            return i = r = (0, a.default)(this, (e = t.__proto__ || (0, s.default)(t)).call.apply(e, [this].concat(l))), r.state = {
                showColumnOptions: !1,
                showFilterCallout: !0,
                isShowingOptions: !1,
                isHidingOptions: !1,
                filter: r.props.column.getSearchFilter()
            }, r.handleFilterChange = function(e) {
                r.props.column.updateSearchFilter(e), r.setState({
                    filter: r.props.column.getSearchFilter()
                })
            }, r.handleOptionsShown = function() {
                r.setState({
                    isShowingOptions: !1
                })
            }, r.handleOptionsHidden = function() {
                r.setState({
                    isHidingOptions: !1
                })
            }, r.handleOptionsToggle = function() {
                r.state.isShowingOptions || r.state.isHidingOptions || r.setState(function(e) {
                    return {
                        showColumnOptions: !e.showColumnOptions,
                        isShowingOptions: !e.showColumnOptions && !e.isShowingOptions,
                        isHidingOptions: e.showColumnOptions && !e.isHidingOptions,
                        expandContentFilter: !1,
                        showFilterCallout: !1
                    }
                })
            }, r.handleShowColumnOptionsFromFilterMessage = function() {
                r.setState(function(e) {
                    return {
                        showColumnOptions: !0,
                        isShowingOptions: !0,
                        isHidingOptions: !1,
                        expandContentFilter: !0,
                        showFilterCallout: !1
                    }
                })
            }, o = i, (0, a.default)(r, o)
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "render",
            value: function() {
                var e = this,
                    t = this.props.column,
                    i = this.state,
                    s = i.filter,
                    n = i.showColumnOptions,
                    r = i.isHidingOptions,
                    a = i.expandContentFilter,
                    o = i.showFilterCallout,
                    m = l.default.getColumnType(t),
                    b = c.default.createElement(u.default, {
                        titleHTML: l.default.getColumnHeaderTitleHTML(t),
                        iconClassName: l.default.getColumnIconClassByColumn(t),
                        areOptionsOpen: n,
                        onOptionsToggle: this.handleOptionsToggle
                    }),
                    y = (n || r) && c.default.createElement(f.ColumnOptionsReact, {
                        column: t,
                        columnType: m,
                        searchFilter: s,
                        isOpen: n,
                        expandContentFilter: a,
                        onFilterChange: this.handleFilterChange,
                        onShown: this.handleOptionsShown,
                        onHidden: this.handleOptionsHidden
                    }),
                    C = void 0,
                    _ = void 0,
                    D = void 0;
                switch (m) {
                    case l.default.columnMetaTypes.TRENDS:
                        C = c.default.createElement(g.TrendsList, {
                            filter: s.content.value
                        }), _ = !y && c.default.createElement(T.default, {
                            filter: s.content.value,
                            onClick: this.handleShowColumnOptionsFromFilterMessage
                        });
                        break;
                    case l.default.columnMetaTypes.ANALYTICS:
                        C = c.default.createElement("div", null, "Analytics to be rendered here :-)");
                        break;
                    case l.default.columnMetaTypes.WHATSHAPPENING:
                        var S = ["Top", "Latest"],
                            k = this.state.whatsHappeningOrder || S[0];
                        D = c.default.createElement(d.default, {
                            items: S,
                            active: k,
                            onClick: function(t) {
                                e.setState({
                                    whatsHappeningOrder: t
                                })
                            }
                        }), C = c.default.createElement(v.WhatsHappeningEntities, {
                            order: k,
                            columnKey: t.model.getKey()
                        })
                }
                var E = m === l.default.columnMetaTypes.TRENDS && o ? c.default.createElement(p.FilterCalloutReact, {
                    content: (0, w.default)("Use filters to get customised trends for a different account or location"),
                    getSetting: TD.settings.getShowTrendsFilterCallout,
                    setSetting: TD.settings.setShowTrendsFilterCallout,
                    scribeComponent: "trends",
                    onClick: this.handleShowColumnOptionsFromFilterMessage
                }) : null;
                return c.default.createElement(h.default, {
                    header: b,
                    columnOptions: y,
                    nav: D,
                    filterMessage: _,
                    callout: E,
                    content: C
                })
            }
        }]), t
    }(c.default.Component);
    t.default = y;
    t.SimpleColumnHolderUiBase = (0, m.reactToUiBase)(y)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = d(i(13)),
        n = d(i(10)),
        r = d(i(11)),
        a = d(i(14)),
        o = d(i(15)),
        c = d(i(6)),
        l = d(i(98)),
        u = d(i(161));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var h = function(e) {
        function t() {
            var e, i, r, o;
            (0, n.default)(this, t);
            for (var c = arguments.length, l = Array(c), u = 0; u < c; u++) l[u] = arguments[u];
            return i = r = (0, a.default)(this, (e = t.__proto__ || (0, s.default)(t)).call.apply(e, [this].concat(l))), r.handleOptionsToggleClick = function(e) {
                e.preventDefault(), r.props.onOptionsToggle()
            }, o = i, (0, a.default)(r, o)
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "render",
            value: function() {
                return c.default.createElement("header", {
                    className: (0, l.default)("flex-shrink--0 column-header", this.props.areOptionsOpen && "is-options-open")
                }, c.default.createElement("i", {
                    className: "js-column-drag-handle is-movable column-drag-handle pull-left sprite sprite-drag-vertical"
                }), c.default.createElement("i", {
                    className: (0, l.default)("pull-left margin-l--10 margin-r--2 column-type-icon icon", this.props.iconClassName)
                }), c.default.createElement("span", {
                    className: "column-number"
                }), c.default.createElement("div", {
                    className: "column-title flex flex-justify-content--space-between"
                }, c.default.createElement("div", {
                    className: "column-header-title flex flex-align--center flex-wrap--no-wrap width-p--85",
                    dangerouslySetInnerHTML: {
                        __html: this.props.titleHTML
                    }
                }), c.default.createElement("div", {
                    className: "column-header-links"
                }, c.default.createElement("a", {
                    "data-testid": "optionsToggle",
                    className: "column-header-link column-settings-link",
                    href: "#",
                    onClick: this.handleOptionsToggleClick
                }, c.default.createElement(u.default, {
                    name: "sliders"
                })))))
            }
        }]), t
    }(c.default.Component);
    t.default = h
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = d(i(13)),
        n = d(i(10)),
        r = d(i(11)),
        a = d(i(14)),
        o = d(i(15)),
        c = d(i(6)),
        l = i(2054),
        u = (d(i(9)), d(i(3)));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var h = function(e) {
        function t() {
            var e, i, r, o;
            (0, n.default)(this, t);
            for (var c = arguments.length, l = Array(c), u = 0; u < c; u++) l[u] = arguments[u];
            return i = r = (0, a.default)(this, (e = t.__proto__ || (0, s.default)(t)).call.apply(e, [this].concat(l))), r.state = {
                active: r.props.active
            }, o = i, (0, a.default)(r, o)
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "handleClick",
            value: function(e) {
                this.setState({
                    active: e
                }), this.props.onClick(e)
            }
        }, {
            key: "render",
            value: function() {
                var e = this;
                return c.default.createElement("nav", {
                    className: "column-nav",
                    role: "toolbar",
                    "aria-label": (0, u.default)("Sorting options")
                }, c.default.createElement(l.Nav, {
                    className: "flex"
                }, this.props.items.map(function(t) {
                    return c.default.createElement(l.NavItem, {
                        key: t
                    }, c.default.createElement(l.NavLink, {
                        tag: "button",
                        "data-testid": "whatsHappeningNavLink-" + t,
                        className: "txt-bold padding-h--14 padding-v--6 block min-width--45 txt-center",
                        onClick: function(i) {
                            return e.handleClick(t)
                        },
                        active: e.state.active === t,
                        role: "button"
                    }, (0, u.default)(t)))
                })))
            }
        }]), t
    }(c.default.Component);
    t.default = h
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.NavLink = t.NavItem = t.Nav = void 0;
    var s = a(i(2055)),
        n = a(i(2056)),
        r = a(i(2057));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.Nav = s.default, t.NavItem = n.default, t.NavLink = r.default
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = c(i(7)),
        n = c(i(63));
    t.default = l;
    var r = c(i(6)),
        a = c(i(9)),
        o = c(i(98));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    a.default.string, a.default.string, a.default.bool;

    function l(e) {
        var t = e.className,
            i = e.tag,
            a = e.vertical,
            c = (0, n.default)(e, ["className", "tag", "vertical"]),
            l = (0, o.default)(t, a ? "flex-column" : "flex-row");
        return r.default.createElement(i, (0, s.default)({}, c, {
            className: l
        }))
    }
    l.defaultProps = {
        tag: "ul",
        vertical: !1
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = c(i(7)),
        n = c(i(63));
    t.default = l;
    var r = c(i(6)),
        a = c(i(9)),
        o = c(i(98));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    a.default.string, a.default.bool, a.default.string;

    function l(e) {
        var t = e.className,
            i = e.active,
            a = e.tag,
            c = (0, n.default)(e, ["className", "active", "tag"]),
            l = (0, o.default)(t, "nav-item", !!i && "active");
        return r.default.createElement(a, (0, s.default)({}, c, {
            className: l
        }))
    }
    l.defaultProps = {
        tag: "li"
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = c(i(7)),
        n = c(i(63));
    t.default = l;
    var r = c(i(6)),
        a = c(i(9)),
        o = c(i(98));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    a.default.string, a.default.bool, a.default.bool, a.default.string, a.default.func, a.default.any;

    function l(e) {
        var t = e.className,
            i = e.active,
            a = e.tag,
            c = (0, n.default)(e, ["className", "active", "tag"]),
            l = (0, o.default)(t, "nav-link", {
                disabled: c.disabled,
                active: i
            });
        return r.default.createElement(a, (0, s.default)({}, c, {
            onClick: function(e) {
                ! function(e) {
                    c.disabled ? e.preventDefault() : ("#" === c.href && e.preventDefault(), c.onClick && c.onClick(e))
                }(e)
            },
            className: l
        }))
    }
    l.defaultProps = {
        tag: "a"
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.default = function(e) {
        var t = e.header,
            i = e.nav,
            o = e.columnOptions,
            c = e.filterMessage,
            l = e.callout,
            u = e.content;
        return s.default.createElement(r.default, null, function(e) {
            return s.default.createElement("div", {
                className: "column-holder"
            }, s.default.createElement("div", {
                className: "column-panel flex flex-column height-p--100"
            }, t, l, s.default.createElement("div", {
                className: (0, a.default)("column-content flex-auto position-rel flex flex-column height-p--100", "light" === e ? "bg-color-twitter-white" : "bg-color-twitter-midnight-dark-gray")
            }, s.default.createElement("div", {
                className: "column-options flex-shrink--0 z-index--2"
            }, s.default.createElement("div", {
                className: n.default.isTouchColumnOptions() ? "with-touch-txt-base" : ""
            }), o, i), c && s.default.createElement("div", {
                className: "flex-shrink--0"
            }, c), s.default.createElement("div", {
                "data-testid": "columnContent",
                className: (0, a.default)("column-scroller scroll-v", TD.util.hasFixedScrollBars() && "scroll-styled-v")
            }, u))))
        })
    };
    var s = o(i(6)),
        n = (o(i(9)), o(i(17))),
        r = o(i(244)),
        a = o(i(98));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.TrendsList = void 0;
    var s = f(i(13)),
        n = f(i(10)),
        r = f(i(11)),
        a = f(i(14)),
        o = f(i(15)),
        c = i(6),
        l = f(c),
        u = (f(i(9)), i(2060)),
        d = f(i(637)),
        h = i(159),
        m = i(2064);

    function f(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.TrendsList = function(e) {
        function t() {
            return (0, n.default)(this, t), (0, a.default)(this, (t.__proto__ || (0, s.default)(t)).apply(this, arguments))
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "getSelectedTrendsObservable",
            value: function() {
                var e = this.props.filter;
                return this.memoizedObservable && this.memoizedObservable.filter === e || (this.memoizedObservable = {
                    filter: e,
                    value: (0, m.getTrendsObservable)(e)
                }), this.memoizedObservable.value
            }
        }, {
            key: "render",
            value: function() {
                return l.default.createElement(h.Observe, {
                    observable: this.getSelectedTrendsObservable()
                }, function(e) {
                    var t = (e || {}).trends;
                    return t && t.length ? t.map(function(e) {
                        return l.default.createElement(u.TrendContainer, {
                            trend: e,
                            key: e.name
                        })
                    }) : l.default.createElement(d.default, null)
                })
            }
        }]), t
    }(c.Component)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.Trend = t.TrendContainer = void 0;
    var s = b(i(13)),
        n = b(i(10)),
        r = b(i(11)),
        a = b(i(14)),
        o = b(i(15)),
        c = i(6),
        l = b(c),
        u = (b(i(9)), b(i(19))),
        d = b(i(98)),
        h = i(159),
        m = b(i(2061)),
        f = i(363),
        p = i(64),
        g = b(i(587)),
        v = b(i(1)),
        T = i(138),
        w = i(36);

    function b(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var y = ["moments"],
        C = (t.TrendContainer = function(e) {
            function t() {
                return (0, n.default)(this, t), (0, a.default)(this, (t.__proto__ || (0, s.default)(t)).apply(this, arguments))
            }
            return (0, o.default)(t, e), (0, r.default)(t, [{
                key: "handleScribe",
                value: function(e) {
                    (0, p.generic)({
                        page: "column",
                        section: "trends",
                        action: "click",
                        element: e
                    })
                }
            }, {
                key: "renderTrend",
                value: function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        t = e.cardData,
                        i = e.cardContext;
                    return l.default.createElement(_, {
                        trend: this.props.trend,
                        onScribe: this.handleScribe,
                        card: t && (0, T.isAllowedCardForTrendsColumn)(t.name) ? l.default.createElement(g.default, {
                            cardData: t,
                            cardContext: i
                        }) : null
                    })
                }
            }, {
                key: "render",
                value: function() {
                    var e = this;
                    return l.default.createElement(h.Observe, {
                        observable: w.horizonWebCardsEnabled$
                    }, function(t) {
                        if (null == t) return null;
                        if (t.some(T.isAllowedCardForTrendsColumn)) {
                            var i = e.props.trend,
                                s = i.target.pinned_tweets_str,
                                n = i.badges || [];
                            if (y.indexOf(n[0]) > -1 && s && s.length > 0) return l.default.createElement(C, {
                                tweetId: s[0]
                            }, function(t) {
                                var i = t.cardData,
                                    s = t.cardContext;
                                return e.renderTrend({
                                    cardData: i,
                                    cardContext: s
                                })
                            })
                        }
                        return e.renderTrend()
                    })
                }
            }]), t
        }(l.default.Component), function(e) {
            function t() {
                var e, i, r, o;
                (0, n.default)(this, t);
                for (var c = arguments.length, l = Array(c), u = 0; u < c; u++) l[u] = arguments[u];
                return i = r = (0, a.default)(this, (e = t.__proto__ || (0, s.default)(t)).call.apply(e, [this].concat(l))), r.state = {
                    cardData: null,
                    cardContext: null
                }, o = i, (0, a.default)(r, o)
            }
            return (0, o.default)(t, e), (0, r.default)(t, [{
                key: "fetchCard",
                value: function() {
                    var e = this;
                    this.cancelInflightRequest && this.cancelInflightRequest();
                    var t = this.props.tweetId,
                        i = !1;
                    (0, f.fetchHorizonWebCardDataFromGraphQL)(t).then(function(s) {
                        if (!i && (s.errors || s.data || u.default.metric("trends:card:graphql:missing-data"), !(s.errors && s.errors.length > 0) && s.data)) {
                            var n = s.data.tweet_by_rest_id,
                                r = v.default.get(n, "legacy.card");
                            if (r) {
                                var a = v.default.get(n, "core.user.legacy.screen_name"),
                                    o = (0, T.convertCardFromGraphQL)(r);
                                e.setState({
                                    cardData: o,
                                    cardContext: {
                                        tweetId: t,
                                        tweetPermalink: "https://twitter.com/" + a + "/status/" + t,
                                        tweetUserId: v.default.get(n, "core.user.rest_id")
                                    }
                                })
                            }
                        }
                    }), this.cancelInflightRequest = function() {
                        i = !0
                    }
                }
            }, {
                key: "componentDidMount",
                value: function() {
                    this.fetchCard()
                }
            }, {
                key: "componentDidUpdate",
                value: function(e) {
                    this.props.tweetId !== e.tweetId && this.fetchCard()
                }
            }, {
                key: "componentWillUnmount",
                value: function() {
                    this.cancelInflightRequest()
                }
            }, {
                key: "render",
                value: function() {
                    return this.props.children(this.state)
                }
            }]), t
        }(l.default.Component)),
        _ = t.Trend = function(e) {
            function t() {
                return (0, n.default)(this, t), (0, a.default)(this, (t.__proto__ || (0, s.default)(t)).apply(this, arguments))
            }
            return (0, o.default)(t, e), (0, r.default)(t, [{
                key: "renderTrendRankAndMovement",
                value: function() {
                    var e = this.props.trend,
                        t = void 0 !== e.movement;
                    return l.default.createElement(c.Fragment, null, l.default.createElement("div", {
                        className: (0, d.default)("txt-bold txt-size-variable--14 txt-right width-p--9 flex-shrink--0", !t && "padding-r--20")
                    }, e.rank), t && l.default.createElement("div", {
                        className: "txt-size-variable--12 txt-center width-p--14 flex-shrink--0"
                    }, l.default.createElement(m.default, {
                        movement: e.movement,
                        interval: e.interval,
                        positionChanged: e.positionChanged
                    })))
                }
            }, {
                key: "render",
                value: function() {
                    var e = this.props,
                        t = e.trend,
                        i = e.card,
                        s = t.name,
                        n = "https://twitter.com/search?q=" + t.query;
                    return l.default.createElement("div", {
                        "data-testid": "trend",
                        className: "padding-a--12 border-divider flex"
                    }, this.renderTrendRankAndMovement(), l.default.createElement("div", {
                        className: "txt-size-variable--14 txt-ellipsis flex-auto"
                    }, l.default.createElement("a", {
                        "data-testid": "trendLink",
                        href: n,
                        rel: "hashtag",
                        target: "_blank",
                        className: "link-complex",
                        onClick: this.props.onScribe.bind(this, "trend")
                    }, l.default.createElement("span", {
                        className: "link-complex-target txt-ellipsis"
                    }, s)), i || (t.metaDescription ? l.default.createElement("span", {
                        "data-testid": "trendDescription",
                        className: "dark-only--color-twitter-gray txt-size-variable--12 block padding-t--3 wrap",
                        dangerouslySetInnerHTML: {
                            __html: u.default.transform(t.metaDescription)
                        },
                        onClick: this.props.onScribe.bind(this, "description")
                    }) : null)))
                }
            }]), t
        }(l.default.Component)
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.default = function(e) {
        var t = e.movement,
            i = e.interval,
            c = e.positionChanged,
            l = i ? function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                    t = Math.round(e / 60 / 1e3);
                if (t <= 1) return (0, r.default)("minute");
                if (t > 60) return (0, r.default)("hour");
                return a.default.duration(e).humanize()
            }(i) : "",
            d = c ? function() {
                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                if (1 === e) return (0, r.default)("1 position");
                return (0, r.default)("{{position}} positions", {
                    position: e
                })
            }(c) : "";
        if (null === t || 0 === t) return u(null, "-", i ? (0, r.default)("No change in the last {{interval}}", {
            interval: l
        }) : (0, r.default)("Waiting for trend movement data"));
        if (t > 0) return u("color-twitter-green", n.default.createElement(s.Fragment, null, n.default.createElement(o.default, {
            "data-testid": "trendMovementUp",
            name: "pointer-u"
        }), t), (0, r.default)("Up {{position}} in the last {{interval}}", {
            position: d,
            interval: l
        }));
        return u("color-twitter-red", n.default.createElement(s.Fragment, null, n.default.createElement(o.default, {
            "data-testid": "trendMovementDown",
            name: "pointer-d"
        }), -t), (0, r.default)("Down {{position}} in the last {{interval}}", {
            position: d,
            interval: l
        }))
    };
    var s = i(6),
        n = l(s),
        r = (l(i(9)), l(i(3))),
        a = l(i(70)),
        o = l(i(161)),
        c = l(i(2062));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }

    function u(e, t, i) {
        return n.default.createElement(c.default.Label, {
            "data-testid": "trendMovementTooltip",
            position: "top",
            target: n.default.createElement("span", {
                "data-testid": "trendMovement",
                className: "is-default " + e
            }, t)
        }, n.default.createElement("span", {
            className: "txt-size-variable--12"
        }, i))
    }
}, , , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = l(i(7)),
        n = l(i(43));
    t.getTrendsObservable = function(e) {
        var t = void 0;
        t = e.woeid ? [{
            woeid: e.woeid
        }] : [{}, TD.storage.accountController.getAccountFromId(e.accountId)];
        return c.tweetdeckBeta$.switchMap(function(e) {
            var i = e ? u : d;
            t[0].max_trends = e ? 30 : 10;
            var c = r.default.Observable.timer(0, i).switchMap(function() {
                return a.default.fromDeferred(o.getTrends.apply(void 0, (0, n.default)(t))).map(function(e) {
                    return {
                        trends: e,
                        error: null
                    }
                }).catch(function(e) {
                    return r.default.Observable.of({
                        error: e
                    })
                })
            }).scan(function(e, t) {
                return e && t.error ? (0, s.default)({}, e, {
                    error: t.error
                }) : (0, s.default)({}, t, {
                    error: null
                })
            });
            return e && (c = c.scan(function(e, t) {
                var i = t.trends,
                    n = t.error;
                if (n) return e;
                var r = (new Date).getTime(),
                    a = r - h;
                e.previousPositions = e.previousPositions.filter(function(e) {
                    var t = e.time;
                    return t >= a
                });
                var o = e.previousPositions[0],
                    c = [];
                e.trends = i.map(function(e) {
                    var t = e.name,
                        i = o ? o.positions[t] : null,
                        n = e.rank;
                    c[t] = n;
                    var a = null != i ? i - e.rank : null,
                        l = o ? r - o.time : null,
                        u = "number" == typeof i ? Math.abs(i - n) : null;
                    return (0, s.default)({}, e, {
                        movement: a,
                        interval: l,
                        positionChanged: u
                    })
                });
                var l = {
                    time: r,
                    positions: c
                };
                return e.previousPositions.push(l), e
            }, {
                trends: [],
                previousPositions: [],
                error: null
            }).map(function(e) {
                var t = e.trends,
                    i = e.error;
                return {
                    trends: t,
                    error: i
                }
            })), c.startWith({
                trends: [],
                error: null
            })
        })
    };
    var r = l(i(29)),
        a = l(i(49)),
        o = i(363),
        c = i(36);

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var u = 6e4,
        d = 5 * u,
        h = 36e5
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.WhatsHappeningEntities = void 0;
    var s = v(i(119)),
        n = v(i(13)),
        r = v(i(10)),
        a = v(i(11)),
        o = v(i(14)),
        c = v(i(15)),
        l = i(6),
        u = v(l),
        d = (v(i(9)), v(i(1))),
        h = v(i(637)),
        m = v(i(2066)),
        f = i(139),
        p = i(159),
        g = i(2069);

    function v(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }

    function T(e) {
        var t = e.value;
        return "semanticCoreEntityValue" in t ? t.semanticCoreEntityValue.displayName : "hashtagEntityValue" in t ? "#" + t.hashtagEntityValue.originalText : "nerEntityValue" in t ? t.nerEntityValue.originalText : "textEntityValue" in t ? t.textEntityValue.originalText : ""
    }

    function w(e) {
        var t, i = e.value;
        if ("semanticCoreEntityValue" in i) {
            var s = i.semanticCoreEntityValue.normalizedText;
            if (s) return s;
            var n = i.semanticCoreEntityValue.displayName;
            return n ? ("#" === (t = n)[0] ? t.substring(1) : t).toLowerCase().replace(/['\s.,]/g, "") : null
        }
        return "hashtagEntityValue" in i ? i.hashtagEntityValue.normalizedText : "nerEntityValue" in i ? i.nerEntityValue.normalizedText : "textEntityValue" in i ? i.textEntityValue.normalizedText : ""
    }

    function b(e) {
        var t = e.value;
        return "semanticCoreEntityValue" in t || "hashtagEntityValue" in t
    }(t.WhatsHappeningEntities = function(e) {
        function t() {
            return (0, r.default)(this, t), (0, o.default)(this, (t.__proto__ || (0, n.default)(t)).apply(this, arguments))
        }
        return (0, c.default)(t, e), (0, a.default)(t, [{
            key: "getTopEntitiesObservable",
            value: function() {
                if (!this.topEntitiesObservable) {
                    var e = {
                        timeRange: (0, f.hoursAgoInMilliseconds)(4),
                        numEntities: 50
                    };
                    this.topEntitiesObservable = (0, g.getTopEntitiesObservable)(e)
                }
                return this.topEntitiesObservable
            }
        }, {
            key: "orderBy",
            value: function(e, t) {
                return "Top" === e ? t.map(function(e) {
                    return e[1].score
                }).sort(function(e, t) {
                    return t - e
                }).map(function(e) {
                    return t.find(function(t) {
                        return t[1].score === e
                    })
                }) : "Latest" === e ? t.map(function(e) {
                    return e[1].event.timeRange.startTime.milliseconds
                }).sort(function(e, t) {
                    return t - e
                }).map(function(e) {
                    return t.find(function(t) {
                        return t[1].event.timeRange.startTime.milliseconds === e
                    })
                }) : t
            }
        }, {
            key: "render",
            value: function() {
                var e = this;
                return u.default.createElement(p.Observe, {
                    observable: this.getTopEntitiesObservable()
                }, function(t) {
                    var i = (t || {}).data,
                        n = e.props,
                        r = n.columnKey,
                        a = n.order;
                    if (!i) return u.default.createElement(h.default, null);
                    var o = e.orderBy(a, i);
                    return d.default.uniq(o, function(e) {
                        var t = (0, s.default)(e, 2);
                        t[0];
                        return w(t[1].canonicalEntity)
                    }).map(function(e) {
                        var t, i, n, a, o, c, l, h, f, p, g;
                        return t = e, i = (0, s.default)(t, 2), n = i[0], a = i[1], o = n.domainId, c = n.entityId, l = n.timeRange, h = a.canonicalEntity, f = a.entities, p = h.metadata.frequency, g = o + "." + c, (e = {
                            title: T(h),
                            qualifiedId: g,
                            frequency: parseInt(p, 10),
                            timeRange: l,
                            entities: function(e) {
                                return d.default.uniq(e.filter(b), function(e) {
                                    return w(e)
                                }).map(function(e) {
                                    var t, i, s = "hashtagEntityValue" in e.value,
                                        n = s ? "hashtag" : "entity",
                                        r = T(e);
                                    return !(!r || 0 === r.length) && (s ? {
                                        type: n,
                                        title: r
                                    } : {
                                        type: n,
                                        title: r,
                                        qualifiedId: (t = e, i = t.value, (i = i.semanticCoreEntityValue.value).domainId + "." + i.entityId)
                                    })
                                }).filter(Boolean)
                            }(f)
                        }).title || (e.title = ""), u.default.createElement(m.default, {
                            key: e.qualifiedId,
                            entity: e,
                            columnKey: r
                        })
                    })
                })
            }
        }]), t
    }(l.Component)).defaultProps = {
        order: "Top"
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = T(i(7)),
        n = T(i(13)),
        r = T(i(10)),
        a = T(i(11)),
        o = T(i(14)),
        c = T(i(15)),
        l = i(6),
        u = T(l),
        d = (T(i(9)), T(i(3))),
        h = i(19),
        m = T(i(244)),
        f = T(i(2067)),
        p = i(58),
        g = i(64),
        v = T(i(2068));

    function T(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var w = function(e) {
        function t() {
            return (0, r.default)(this, t), (0, o.default)(this, (t.__proto__ || (0, n.default)(t)).apply(this, arguments))
        }
        return (0, c.default)(t, e), (0, a.default)(t, [{
            key: "addNewColumn",
            value: function(e) {
                var t = this.props.columnKey,
                    i = TD.controller.columnManager.makeColumnFor((0, s.default)({
                        service: "twitter",
                        accountKey: (0, p.getDefaultAccount)().accountKey
                    }, e));
                TD.controller.columnManager.addColumnToUIAfterColumnKey(i, t)
            }
        }, {
            key: "addEventColumn",
            value: function(e) {
                var t = e.title,
                    i = e.qualifiedId;
                this.addNewColumn({
                    type: "event",
                    metadata: {
                        id: i,
                        title: t
                    }
                })
            }
        }, {
            key: "handleEntityClick",
            value: function(e) {
                this.addEventColumn(e), this.scribeElement("entity")
            }
        }, {
            key: "handlePillHashtagClick",
            value: function(e) {
                this.addNewColumn({
                    type: "search",
                    metaString: e
                }), this.scribeElement("hashtag")
            }
        }, {
            key: "handleFindOutMoreClick",
            value: function(e) {
                this.addEventColumn(e), this.scribeElement("find_out_more")
            }
        }, {
            key: "scribeElement",
            value: function(e) {
                (0, g.generic)({
                    page: "column",
                    section: "whats_happening",
                    action: "click",
                    element: e
                })
            }
        }, {
            key: "getFormattedTime",
            value: function(e) {
                var t = new Date(Number(e.from));
                return (0, d.default)("Started {{prettyDate}} ago", {
                    prettyDate: (0, h.prettyDate)(t)
                })
            }
        }, {
            key: "renderEventTitle",
            value: function(e, t) {
                return e.length % 2 == 0 ? (0, d.default)("People are talking about {{{title}}}", {
                    title: e
                }) : (0, d.default)("{{count}} Tweets about {{{title}}}", {
                    count: (0, h.prettyNumber)(t),
                    title: e
                })
            }
        }, {
            key: "render",
            value: function() {
                var e = this,
                    t = this.props.entity,
                    i = t.title,
                    s = t.qualifiedId,
                    n = t.frequency,
                    r = t.timeRange,
                    a = t.entities;
                return u.default.createElement(m.default, null, function(t) {
                    return u.default.createElement(l.Fragment, null, u.default.createElement("div", {
                        "data-testid": "entity",
                        className: "padding-a--10 border-divider"
                    }, u.default.createElement("div", {
                        "data-testid": "timestamp",
                        className: "color-twitter-dark-gray padding-b--2 txt-size-variable--12"
                    }, e.getFormattedTime(r)), u.default.createElement("div", {
                        "data-testid": "title",
                        className: "txt-size-variable--14 txt-bold"
                    }, e.renderEventTitle(i, n)), u.default.createElement("div", {
                        className: "padding-v--3"
                    }, a.map(function(i) {
                        var s = i.type,
                            n = i.title,
                            r = i.qualifiedId,
                            a = "entity" === s ? e.handleEntityClick.bind(e, {
                                title: n,
                                qualifiedId: r
                            }) : e.handlePillHashtagClick.bind(e, n),
                            o = "entity" === s ? r : n;
                        return u.default.createElement(f.default, {
                            key: o,
                            "data-testid": "pill",
                            appearance: "light" === t ? "tertiary" : null,
                            size: "xsmall",
                            className: "pill margin-r--6 margin-t--6 padding-h--10 txt-size-variable--12 txt-ellipsis",
                            onClick: a
                        }, n)
                    }))), u.default.createElement("div", {
                        className: "padding-a--10 border-divider txt-size-variable--14"
                    }, u.default.createElement("a", {
                        href: "#",
                        "data-testid": "findOutMore",
                        onClick: e.handleFindOutMoreClick.bind(e, {
                            title: i,
                            qualifiedId: s
                        })
                    }, (0, d.default)("Find out more"))), u.default.createElement(v.default, {
                        theme: t
                    }))
                })
            }
        }]), t
    }(u.default.Component);
    t.default = w
}, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = r(i(6)),
        n = r(i(98));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.default = function(e) {
        var t = e.theme;
        return s.default.createElement("div", {
            className: (0, n.default)("height--6 border-divider", "light" === t ? "bg-color-twitter-lightest-gray" : "bg-color-twitter-midnight-darkest-gray")
        })
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getTopEntitiesObservable = function(e) {
        return s.default.Observable.timer(0, o).switchMap(function() {
            var t = Date.now(),
                i = e.timeRange,
                a = e.numEntities;
            return n.default.fromDeferred((0, r.getTopEntities)({
                toTime: t,
                fromTime: t - i,
                numEntities: a
            })).map(function(e) {
                return {
                    data: e,
                    error: null
                }
            }).catch(function(e) {
                return s.default.Observable.of({
                    error: e
                })
            })
        }).scan(function(e, t) {
            return e && t.error ? {
                data: e.data,
                error: t.error
            } : {
                data: t.data,
                error: null
            }
        })
    };
    var s = a(i(29)),
        n = a(i(49)),
        r = i(2070);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = 3e5
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.getTopEntities = function(e) {
        var t = e.toTime,
            i = e.fromTime,
            s = e.numEntities,
            n = o + "/strato/column/None/fromTime=" + i + ",toTime=" + t + ",numEntities=" + s + "/eventdetection/hydratedTopClusters",
            a = TD.storage.store.getTwitterLoginAccount(),
            l = {
                account: a,
                handleSuccess: !0,
                handleError: !0,
                method: "GET",
                processor: c
            },
            u = TD.net.ajax.request(n, l);
        return u.addCallbacks(function(e) {
            return r.default.processSuccessResponse(n, l, e, {
                oauth: {
                    account: a
                }
            }).data
        }, function(e) {
            return r.default.processErrorResponse(n, l, e, a)
        }), u
    };
    var s, n = i(192),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = TD.config,
        o = a.twitter_api_base + "/" + a.twitter_api_version;

    function c(e) {
        return e
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = m(i(13)),
        n = m(i(10)),
        r = m(i(11)),
        a = m(i(14)),
        o = m(i(15)),
        c = m(i(6)),
        l = (m(i(9)), m(i(618))),
        u = m(i(622)),
        d = i(58),
        h = m(i(3));

    function m(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var f = function(e) {
        function t() {
            return (0, n.default)(this, t), (0, a.default)(this, (t.__proto__ || (0, s.default)(t)).apply(this, arguments))
        }
        return (0, o.default)(t, e), (0, r.default)(t, [{
            key: "getLocationFilter",
            value: function(e, t) {
                var i = e.locationByWoeid,
                    s = e.countryWoeidByCityWoeid,
                    n = i[t],
                    r = (0, h.default)("Trends for") + " " + n.name;
                n.isTown && (r += ", " + i[s[t]].name);
                return [{
                    name: "trends",
                    icon: "geo",
                    text: r
                }]
            }
        }, {
            key: "render",
            value: function() {
                var e = this,
                    t = this.props,
                    i = t.filter,
                    s = t.onClick;
                return c.default.createElement(u.default, null, function(t) {
                    return c.default.createElement(l.default, {
                        title: "",
                        filters: i.accountId ? [{
                            name: "trends",
                            icon: "user",
                            text: (0, h.default)("Trends for") + " @" + (0, d.getAccountFromId)(i.accountId).screenName
                        }] : t && e.getLocationFilter(t, i.woeid),
                        onClick: s
                    })
                })
            }
        }]), t
    }(c.default.Component);
    t.default = f
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(0));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(638);
    e.exports = function() {
        this.attributes({
            defaultDragScrollConfig: {
                regionSize: 20,
                maxSpeed: 400,
                throttlePeriod: 200,
                horizontal: !0,
                vertical: !1,
                deltaFn: function(e, t, i, s) {
                    return e
                }
            }
        }), this.before("initialize", function() {
            this.animateScrollLeft = this.animateScroll.bind(this, "scrollLeft"), this.animateScrollTop = this.animateScroll.bind(this, "scrollTop"), this.dragScrollId = s.default.uniqueId("drag-scroll")
        }), this.handleDrag = function(e, t, i, s) {
            if (this.justDropped) this.justDropped = !1;
            else {
                var r = (0, n.default)(s.el),
                    a = this.mousePositionRelativeToElement(r, i.originalEvent),
                    o = {};
                o.left = a.x / r.width() * 100, o.right = 100 - o.left, o.top = a.y / r.height() * 100, o.bottom = 100 - o.top;
                var c = {};
                c.left = -this.percToDelta(o.left, e), c.right = this.percToDelta(o.right, e), c.up = -this.percToDelta(o.top, e), c.down = this.percToDelta(o.bottom, e), !1 !== e.horizontal && (o.left < e.regionSize ? this.animateScrollLeft(r, "left", c.left, e, t.left) : o.right < e.regionSize && this.animateScrollLeft(r, "right", c.right, e, t.right)), !1 !== e.vertical && (o.top < e.regionSize ? this.animateScrollTop(r, "up", c.up, e, t.up) : o.bottom < e.regionSize && this.animateScrollTop(r, "down", c.down, e, t.down))
            }
        }, this.setupDragScroll = function(e, t) {
            t = s.default.defaults(t || {}, this.attr.defaultDragScrollConfig);
            var i = {};
            i[e] = s.default.throttle(this.handleDrag.bind(this, t, {
                up: {},
                down: {},
                left: {},
                right: {}
            }), t.throttlePeriod), this.on("dragover", i), this.on("drop", function() {
                this.justDropped = !0
            })
        }, this.percToDelta = function(e, t) {
            var i = e / t.regionSize;
            return t.maxSpeed - t.maxSpeed * i
        }, this.animateScroll = function(e, t, i, s, r, o) {
            var c = (0, n.default)(t);
            if (!c[e]) throw new Error("$elem has no method " + e);
            o.startTime || (o.startTime = Date.now()), clearTimeout(o.timeout), o.timeout = setTimeout(function() {
                delete o.startTime
            }, 1.1 * r.throttlePeriod);
            var l = Date.now() - o.startTime,
                u = r.deltaFn.call(this, s, i, d, l),
                d = c[e]();
            a.ease({
                name: this.dragScrollId,
                from: d,
                delta: u,
                time: r.throttlePeriod,
                applicator: function(t) {
                    c[e](t)
                }
            })
        }, this.getMousePosition = function(e) {
            var t = 0,
                i = 0;
            return e || (e = window.event), e.pageX || e.pageY ? (t = e.pageX, i = e.pageY) : (e.clientX || e.clientY) && (t = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft, i = e.clientY + document.body.scrollTop + document.documentElement.scrollTop), {
                x: t,
                y: i
            }
        }, this.mousePositionRelativeToElement = function(e, t) {
            var i = (0, n.default)(e),
                s = i.offset(),
                r = this.getMousePosition(t);
            return r.x -= s.left + parseInt(i.css("paddingLeft"), 10) + parseInt(i.css("borderLeftWidth"), 10), r.y -= s.top + parseInt(i.css("paddingTop"), 10) + parseInt(i.css("borderTopWidth"), 10), r
        }
    }
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.columnStates$ = void 0;
    var s = a(i(0)),
        n = a(i(29)),
        r = a(i(17));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.columnStates$ = n.default.Observable.fromEvent((0, s.default)(document), "dataColumnFeedUpdated").map(function(e) {
        return r.default.getColumnFromElement((0, s.default)(e.target))
    }).map(function(e) {
        return {
            columnKey: e.model.getKey(),
            state: {
                matching: e.getSearchFilter().content.matching || null
            }
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(1)),
        r = o(i(0)),
        a = o(i(17));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var c, l, u, d, h, m, f, p, g, v, T, w, b, y, C = window.TD || {};
    C.ui = C.ui || {}, window.TD = C, C.ui.columns = (u = {}, d = {}, h = {}, m = ".js-column-header", f = ".js-more-tweets-btn", p = {
        mouseIsDownOnScrollBar: !1
    }, g = function(e) {
        return y.getColumnElementByKey(e).find(m)
    }, v = function(e) {
        if (!(0, r.default)(e.target).hasClass("column-title-edit-box")) {
            var t = (0, r.default)(e.currentTarget);
            t.closest(".js-more-tweets-btn").length && C.util.metric("column:ui:more-tweets:click");
            var i = t.parents(".js-column").data("column"),
                s = C.controller.columnManager.get(i);
            s instanceof C.vo.Column && C.ui.columns.setColumnToTop(s)
        }
    }, T = function() {
        var e = (0, r.default)(this);
        return e.offset().top + this.offsetHeight > 0 && e.offset().top < c.innerHeight()
    }, w = function() {
        var e = C.ui.updates.findParentArticle((0, r.default)(this)),
            t = C.controller.columnManager.get(e.column),
            i = t.updateIndex[e.statusKey];
        e.element.replaceWith(i.render({
            isTemporary: t.temporary
        }))
    }, b = n.default.debounce(function(e) {
        e.find(".is-minimalist").filter(T).each(w)
    }, 150), y = {
        COLUMN_GLOW_DURATION: 500,
        init: function() {
            c = (0, r.default)(".js-app-columns"), l = (0, r.default)("#container"), c.on("click", [m, f].join(", "), v), c.on("wheel", ".js-more-tweets-btn-container", function(e) {
                e.preventDefault()
            }), (0, r.default)(document).on("mousedown", ".js-column-scroller", function(e) {
                var t = (0, r.default)(e.target);
                p.mouseIsDownOnScrollBar = t.is(".js-column-scroller"), p.mouseIsDownOnScrollBar && (0, r.default)(document).one("mouseup", function(e) {
                    p.mouseIsDownOnScrollBar = !1, p.mouseButtonWasDown = !0, t.trigger("scroll")
                })
            })
        },
        renderColumn: function(e) {
            var t = (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).detached,
                i = void 0 !== t && t,
                s = void 0;
            return (0, r.default)(document).trigger("uiColumnRender", {
                column: e,
                detached: i,
                getCreatedEl: function(e) {
                    s = e
                }
            }), s
        },
        setupColumnScrollListeners: function(e) {
            var t = e.model.getKey(),
                i = (0, r.default)('.js-column[data-column="' + t + '"]'),
                s = (0, r.default)('.js-chirp-container[data-column="' + t + '"]').closest(".js-column-scroller"),
                n = s.scrollTop(),
                a = function(e, t, i) {
                    var s, n, r = 0,
                        a = 0;
                    return function(o) {
                        var c = o.timeStamp || (new Date).getTime(),
                            l = i.scrollTop();
                        d[e] = l;
                        var u = "stationary";
                        l > a ? u = "down" : l < a && (u = "up"), a = l, b(i), c - r > 200 && (r = c, n = o.currentTarget.scrollHeight, s = i.height());
                        var h = l,
                            m = n - s - l,
                            f = p.mouseButtonWasDown;
                        p.mouseButtonWasDown = !1, 0 !== l || p.mouseIsDownOnScrollBar ? t.isTrackingRealtime = !1 : (C.ui.columns.unlockColumnFromElement(e), t.isTrackingRealtime = !0, t.ui.moreTweetsState.trackingRealtime()), "up" !== u && m < 250 && (C.util.metric("column:ui:scroll:infinite:impression"), p.mouseIsDownOnScrollBar && C.util.metric("column:ui:scroll:infinite:with-mouse"), t.doInfiniteScroll({
                            fromScrollbarDrag: p.mouseIsDownOnScrollBar
                        }), r = 0), p.mouseIsDownOnScrollBar ? h < 250 ? "down" !== u && t.ui.moreTweetsState.mouseScrollToTop() : t.ui.moreTweetsState.mouseScrollAwayFromTop() : "down" !== u && h < 250 && (C.util.metric("column:ui:scroll:upward:impression"), f && C.util.metric("column:ui:scroll:upward:with-mouse"), t.ui.moreTweetsState.upwardScroll(), t.doUpwardScroll(), r = 0)
                    }
                }(t, e, s),
                o = function(e, t) {
                    var i = t.closest(".scroll-h"),
                        s = {
                            direction: "",
                            time: 0
                        };
                    return function(n) {
                        var a, o = Math.abs(n.originalEvent.wheelDeltaX),
                            c = Math.abs(n.originalEvent.wheelDeltaY),
                            u = (0, r.default)(n.currentTarget);
                        if (n.originalEvent.wheelDeltaY || n.originalEvent.wheelDeltaX) {
                            n.preventDefault();
                            var h = "";
                            o > c ? h = "h" : o < c && (h = "v"), h !== s.direction && Date.now() < s.time + 100 || (s.direction = h, s.time = Date.now(), "v" === h ? u.is(".js-column-scroller") ? (a = d[e] - n.originalEvent.wheelDeltaY, t.scrollTop(a), d[e] = t.scrollTop()) : u.scrollTop(u.scrollTop() - n.originalEvent.wheelDeltaY) : "h" === h && i.scrollLeft(l.scrollLeft() - n.originalEvent.wheelDeltaX))
                        }
                    }
                }(t, s);
            C.util.isTouchDevice() && C.decider.get("touchdeck_tweet_controls_v3") && s.addClass("is-touch-tweet-container"), d[t] = n, u[t] = s, s.scroll(a), i.on("mousewheel onmousewheel", ".scroll-v", o), i.on("mouseover", m, function() {
                var e = d[t];
                (0, r.default)(this).toggleClass("is-actionable", e > 0)
            }), C.util.isTouchDevice() && window.navigator.standalone && i.on("touchmove", ".scroll-v", function(e) {
                e.stopPropagation()
            })
        },
        refreshTitle: function(e, t) {
            var i, n, r, o = a.default.getColumnIconClassByColumn(e),
                c = e.model.getKey(),
                l = a.default.isSearchColumn(e),
                u = t instanceof C.services.TwitterConversation,
                d = a.default.getColumnHeaderTitleHTML(e),
                h = y.getColumnElementByKey(c),
                m = a.default.isMessageColumn(e);
            n = e.temporary && a.default.getColumnType(e) === a.default.columnMetaTypes.SEARCH ? (0, s.default)("results") : a.default.getColumnTitleHTML(e), m && (r = e.unreadMessageCount()), i = C.ui.template.render("column/column_header", {
                columntitle: d,
                columniconclass: o,
                isTemporary: e.temporary,
                isSearch: a.default.isSearchColumn(e),
                withEditableTitle: l,
                withImageAttribution: !0,
                withMarkAllRead: m && !e.temporary,
                withDMComposeButton: m && !e.temporary,
                unreadCount: "0" === r ? null : r
            }), g(e.model.getKey()).replaceWith(i), i = C.ui.template.render("column/column_header_detail", {
                headerClass: "js-detail-header",
                headerAction: "resetToTopColumn",
                headerLinkClass: "js-column-back",
                getConversationTitleInformation: u && t.getConversationTitleInformation(),
                participants: t && t.participants,
                withConversationMenu: t instanceof C.services.TwitterConversation,
                columntitle: n,
                conversationId: u && t.conversationId,
                accountKey: u && t.account.getKey()
            }), h.find(".js-detail-header").replaceWith(i), h.trigger("uiColumnTitleRefreshed", {
                columnKey: c
            })
        },
        setColumnToTop: function(e) {
            var t = e.model.getKey(),
                i = u[t],
                s = i.find(".js-chirp-container"),
                n = g(t),
                r = i.scrollTop(),
                a = Math.min(100 + r / 5, 400);
            return n.removeClass("is-actionable"), e.resetUnreadIndicators(), 0 === r ? o() : new C.core.defer.DeferredList([y.transitionTranslateY(s, r, a), y.transitionOpacity(i, {
                from: 1,
                to: 0,
                duration: a
            })]).addCallback(o).addCallback(y.transitionOpacity.bind(y, i, {
                from: 0,
                to: 1,
                duration: 250
            }));

            function o() {
                return e.doUpwardScroll().addBoth(function() {
                    s.css({
                        transform: ""
                    }), i.scrollTop(0), e.isTrackingRealtime = !0
                })
            }
        },
        transitionTranslateY: function(e, t, i) {
            var s, n = new C.core.defer.Deferred;
            return window.requestAnimationFrame(function r(a) {
                s || (s = a);
                var o = a - s;
                var c = Math.min(1, o / i);
                var l = ~~(c * t);
                e.css({
                    transform: "translateY(" + l + "px)"
                });
                c < 1 ? window.requestAnimationFrame(r) : n.callback()
            }), n
        },
        transitionOpacity: function(e, t) {
            var i;
            t = n.default.defaults({}, t, {
                duration: 250,
                from: 0,
                to: 1
            });
            var s = new C.core.defer.Deferred;
            return window.requestAnimationFrame(function n(r) {
                i || (i = r);
                var a = r - i;
                var o = Math.min(1, a / t.duration);
                e.css({
                    opacity: t.from + o * (t.to - t.from)
                });
                o < 1 ? window.requestAnimationFrame(n) : (1 === t.to && e.css({
                    opacity: ""
                }), s.callback())
            }), s
        },
        isScrolledToTop: function(e) {
            return !u[e] || 0 === d[e]
        },
        alterColumnContents: function(e, t, i, s) {
            if (s = s || {}, t && 0 !== t.length) {
                var n, r, a = h[e];
                if ("boolean" == typeof s.willBreakScrollPosition) n = s.willBreakScrollPosition;
                else {
                    var o = a ? a.position().top : 0;
                    n = t.position().top < o
                }
                n && (r = this.cacheColumnScrollPosition(e));
                var c = i(t);
                return n && r(), c
            }
        },
        cacheColumnScrollPosition: function(e) {
            var t = u[e];
            if (!t) return function() {};
            var i = d[e],
                s = t[0].scrollHeight - i;
            return function() {
                var i = t[0].scrollHeight - s;
                t.scrollTop(i), d[e] = i, 0 === i && b(t)
            }
        },
        lockColumnToElement: function(e, t) {
            h[e] = t
        },
        unlockColumnFromElement: function(e) {
            delete h[e]
        },
        columnIsLockedToElement: function(e) {
            return !!h[e]
        },
        addColumnsToView: function(e) {
            var t = this;
            e.forEach(function(e) {
                t.renderColumn(e)
            }), (0, r.default)(".js-chirp-container").show()
        },
        removeColumn: function(e) {
            var t = y.getColumnElementByKey(e);
            t.trigger("uiRemoveColumn"), t.remove(), delete d[e], delete u[e]
        },
        calculateScrollDuration: function(e, t, i) {
            i = i || 500;
            var s = 200 + e / 100 * (t = t || 20);
            return s = Math.min(s, i)
        },
        getLeftmostColumn: function() {
            var e = null;
            return c.children(".js-column").each(function() {
                e || ((0, r.default)(this).position().left < 10 && (0, r.default)(this).position().left >= 0 ? e = this : (0, r.default)(this).position().left > 10 && (e = (0, r.default)(this).prev()))
            }), (0, r.default)(e)
        },
        focusColumn: function(e, t) {
            (0, r.default)(".is-focused", c).removeClass("is-focused"), y.getColumnElementByKey(e).addClass("is-focused"), n.default.isNumber(t) && n.default.delay(function() {
                C.ui.columns.unfocusColumn(e)
            }, t)
        },
        unfocusColumn: function(e) {
            y.getColumnElementByKey(e).removeClass("is-focused")
        },
        setMovingColumn: function(e) {
            y.getColumnElementByKey(e).addClass("is-moving")
        },
        getColumnElementByKey: function(e) {
            return (0, r.default)('.js-column[data-column="' + e + '"]')
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = a(i(1)),
        n = a(i(0)),
        r = a(i(17));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = i(5).component,
        c = i(160);
    e.exports = o(function() {
        this.attributes({
            id: "grid",
            focusId: null,
            chirpScrollOffset: 20,
            columnScrollOffset: 20,
            isSelectedClass: "is-selected-tweet",
            chirpSelector: ".js-stream-item",
            autoFocus: !0,
            pagingEasingFunction: "easeOutQuad",
            actionsMenuButtonSelector: '[rel="actionsMenu"]',
            columnStateDetailViewClass: "js-column-state-detail-view",
            columnStateSocialProofClass: "js-column-state-social-proof",
            columnSelector: ".js-app-columns .js-column"
        }), this.after("initialize", function() {
            this.selectedColumn = null, this.$selectedChirp = (0, n.default)(), this.columnIndex = null, this.chirpCenter = null, this.scrollDirection = this.attr.down, this.chirpOffsetTop = null, this.on(document, "uiKeyLeft", this.moveSelection("left")), this.on(document, "uiKeyUp", this.moveSelection("up")), this.on(document, "uiKeyRight", this.moveSelection("right")), this.on(document, "uiKeyDown", this.moveSelection("down")), this.on(document, "uiGridBack", this.handleBack), this.on(document, "uiGridClearSelection", this.handleClearSelection), this.on(document, "uiColumnFocus", this.handleColumnFocus), this.on(document, "uiGridPageDown", this.handlePagingFactory("down")), this.on(document, "uiGridPageUp", this.handlePagingFactory("up")), this.on(document, "uiGridHome", this.handleGridHome), this.on(document, "uiGridEnd", this.handleGridEnd), this.on(document, "uiKeyEnter", this.tweetActionFactory("viewDetails")), this.on(document, "uiGridReply", this.tweetActionFactory("reply")), this.on(document, "uiGridFavorite", this.tweetActionFactory("favorite")), this.on(document, "uiGridFavoriteFromAccounts", this.tweetActionFactory("favoriteFromAccounts")), this.on(document, "uiGridRetweet", this.tweetActionFactory("retweet")), this.on(document, "uiGridDirectMessage", this.tweetActionFactory("dm")), this.on(document, "uiGridProfile", this.tweetActionFactory("profile")), this.on(document, "uiGridCustomTimeline", this.tweetActionFactory("customTimeline")), this.on(document, "uiGridContextMenu", this.tweetActionFactory("actionsMenu")), this.on(document, "uiDetailViewActive", this.handleDetailViewActive), this.on(document, "uiShowSocialProof", this.handleDetailViewActive), this.on(document, "uiDetailViewClosed", this.handleDetailClosed), this.on(document, "uiSkipToReplies", this.handleSkipToReplies), this.on(document, "dataColumns", this.handleDataColumns), this.trigger("uiNeedsColumns")
        }), this.handleSkipToReplies = function(e, t) {
            var i = this.$selectedChirp.hasClass(this.attr.isSelectedClass);
            this.selectColumnByKey(t.columnKey), this.selectFirstChirpInSelectedColumn(), this.scrollDirection = "up", this.selectNextChirp({
                forceScroll: !0
            }), i || this.$selectedChirp.removeClass(this.attr.isSelectedClass)
        }, this.handleDataColumns = function(e, t) {
            t.columns && (this.columns = t.columns, this.columnIndex = this.columns.indexOf(this.selectedColumn), -1 === this.columnIndex && (this.selectedColumn = null, this.$selectedChirp = (0, n.default)(), this.offset = null))
        }, this.setSelectedColumn = function(e) {
            var t = this.columns.length;
            e < 0 ? e = 0 : e >= t && (e = t - 1), this.columns[e] !== this.selectedColumn && (clearTimeout(this.chirpCenterTimeout), this.chirpCenter = this.calculateChirpCenterRelativeToColumn(this.selectedColumn, this.$selectedChirp), this.chirpCenterTimeout = setTimeout(function() {
                this.chirpCenter = null
            }.bind(this), 1e3), this.selectedColumn = this.columns[e], this.columnIndex = e, null === this.chirpCenter ? this.selectFirstChirpInSelectedColumn() : this.selectClosestChirpToOffsetCenter(this.selectedColumn, this.chirpCenter, !0))
        }, this.selectClosestChirpToOffsetCenter = function(e, t, i) {
            var s = this.selectedColumn.model.getKey(),
                a = r.default.getColumnScrollContainerByKey(s),
                o = a.innerHeight(),
                c = a.find(this.attr.chirpSelector),
                l = (0, n.default)(),
                u = null,
                d = Number.MAX_VALUE;
            c.each(function() {
                var e = (0, n.default)(this),
                    i = e.position().top,
                    s = i + e.outerHeight();
                s >= 0 && i <= o && i <= t && s >= t && (l = (0, n.default)().add(e))
            }), 0 === l.length ? u = c.last() : 1 === l.length ? u = l : l.each(function(i, s) {
                var r = this.calculateChirpCenterRelativeToColumn(e, (0, n.default)(s)),
                    a = Math.abs(t - r);
                d = Math.min(a, d), a === d && (u = (0, n.default)(s))
            }.bind(this)), this.setSelectedChirp(u, {
                doScrollToChirp: i
            })
        }, this.calculateChirpCenterRelativeToColumn = function(e, t) {
            if (0 === t.length || null !== this.chirpCenter) return this.chirpCenter;
            var i, s, n, a = e.model.getKey(),
                o = r.default.getColumnScrollContainerByKey(a).innerHeight();
            return i = t.position().top, s = t.outerHeight(), (n = i + s / 2) > o ? n = o : n < 0 && (n = 0), n
        }, this.selectAndScrollToFirstChirpInSelectedColumn = function() {
            this.selectFirstChirpInSelectedColumn(), this.scrollToChirp({
                direction: "up"
            })
        }, this.selectFirstChirpInSelectedColumn = function() {
            var e;
            if (this.isInDetailView()) this.$selectedChirp = this.selectedColumn.detailViewComponent.getMostInteresting$Chirp();
            else if (!this.isInDetailViewLevel2()) {
                e = this.selectedColumn.model.getKey();
                var t = r.default.getColumnElementByKey(e).find(this.attr.chirpSelector);
                this.$selectedChirp.removeClass(this.attr.isSelectedClass), this.$selectedChirp = (0, n.default)(), t.each(function(e, t) {
                    var i = (0, n.default)(t);
                    if (i.position().top + i.outerHeight() / 2 > 0) return this.$selectedChirp = i, !1
                }.bind(this)), 0 === this.$selectedChirp.length && (this.$selectedChirp = t.first())
            }
            this.$selectedChirp.addClass(this.attr.isSelectedClass)
        }, this.setSelectedChirp = function(e, t) {
            this.$selectedChirp.length > 0 && this.$selectedChirp.removeClass(this.attr.isSelectedClass), this.$selectedChirp = e, this.$selectedChirp.addClass(this.attr.isSelectedClass), t.doScrollToChirp && this.$selectedChirp.length > 0 && this.scrollToChirp({
                direction: this.scrollDirection,
                forceScroll: t.forceScroll
            })
        }, this.selectPrevChirp = function() {
            var e, t, i;
            this.chirpCenter = null, this.isInDetailView() ? (t = this.selectedColumn.detailViewComponent.$find(this.attr.chirpSelector), i = t.index(this.$selectedChirp), e = t.eq(Math.max(0, i - 1))) : e = this.$selectedChirp.prev(this.attr.chirpSelector), 0 === e.length ? this.selectAndScrollToFirstChirpInSelectedColumn() : this.setSelectedChirp(e, {
                doScrollToChirp: !0
            })
        }, this.selectNextChirp = function(e) {
            var t, i, s;
            e = e || {}, this.chirpCenter = null, this.isInDetailView() ? (i = this.selectedColumn.detailViewComponent.$find(this.attr.chirpSelector), s = i.index(this.$selectedChirp), t = i.eq(Math.min(i.length - 1, s + 1))) : t = this.$selectedChirp.next(this.attr.chirpSelector).length > 0 ? this.$selectedChirp.next(this.attr.chirpSelector) : this.$selectedChirp, 0 === t.length ? this.selectAndScrollToFirstChirpInSelectedColumn() : this.setSelectedChirp(t, {
                doScrollToChirp: !0,
                forceScroll: e.forceScroll
            })
        }, this.moveSelection = function(e) {
            var t = s.default.throttle(function() {
                var t;
                if (this.hasFocus)
                    if (null === this.selectedColumn) this.setSelectedColumn(0);
                    else {
                        switch (this.scrollDirection = e, e) {
                            case "left":
                                t = null === this.columnIndex ? 0 : this.columnIndex - 1, this.setSelectedColumn(t);
                                break;
                            case "right":
                                t = null === this.columnIndex ? 0 : this.columnIndex + 1, this.setSelectedColumn(t);
                                break;
                            case "up":
                                this.selectPrevChirp();
                                break;
                            case "down":
                                this.selectNextChirp()
                        }
                        this.trigger("uiColumnsScrollToColumn", {
                            columnKey: this.selectedColumn.model.getKey(),
                            source: this.attr.id,
                            offset: this.attr.columnScrollOffset,
                            direction: this.scrollDirection
                        })
                    }
            }.bind(this), 100);
            return t
        }, this.selectColumnByKey = function(e) {
            if (this.selectedColumn && this.selectedColumn.model.getKey() === e) return !1;
            for (var t = 0; t < this.columns.length; t += 1)
                if (this.columns[t].model.getKey() === e) return this.columnIndex = t, this.selectedColumn = this.columns[t], !0;
            return !1
        }, this.selectColumnByIndex = function(e) {
            return this.selectedColumn !== this.columns[e] && (this.columnIndex = e, this.selectedColumn = this.columns[e], !0)
        }, this.selectLastColumn = function() {
            return this.selectColumnByIndex(this.columns.length - 1)
        }, this.handleColumnFocus = function(e, t) {
            if (this.hasFocus) {
                var i = !1;
                this.$selectedChirp.removeClass(this.attr.isSelectedClass), void 0 !== t.columnKey ? i = this.selectColumnByKey(t.columnKey) : void 0 !== t.index ? i = this.selectColumnByIndex(t.index) : !0 === t.last && (i = this.selectLastColumn()), i ? (this.$selectedChirp = (0, n.default)(), this.chirpIndex = null, this.offset = null) : this.selectedColumn && (this.$selectedChirp.addClass(this.attr.isSelectedClass), 1 === s.default.get(this.selectedColumn, "visibility.visibleFraction") && this.trigger("uiGridHome"))
            }
        }, this.clearSelection = function() {
            this.$selectedChirp.removeClass(this.attr.isSelectedClass), this.$selectedChirp = (0, n.default)(), this.selectedColumn = null, this.chirpIndex = null, this.columnIndex = null, this.offset = null
        }, this.scrollToChirp = function(e) {
            this.trigger("uiColumnsScrollToChirp", {
                columnKey: this.selectedColumn.model.getKey(),
                $chirp: this.$selectedChirp,
                direction: e.direction,
                forceScroll: e.forceScroll,
                offset: this.attr.chirpScrollOffset
            })
        }, this.handleBack = function(e, t) {
            var i, s, n;
            this.hasFocus && (n = r.default.getColumnElementByKey(this.selectedColumn.model.getKey()), this.isInDetailView() ? (i = this.selectedColumn.detailViewComponent.parentChirp, s = this.selectedColumn.ui.getChirpById(i.id), n.trigger("uiCloseDetailView"), s.addClass(this.attr.isSelectedClass), this.$selectedChirp = s, this.scrollToChirp({
                direction: "down"
            })) : this.isInDetailViewLevel2() && n.trigger("uiCloseSocialProof"))
        }, this.handleClearSelection = function() {
            this.hasFocus && this.clearSelection()
        }, this.isInDetailView = function() {
            var e = r.default.getColumnElementByKey(this.selectedColumn.model.getKey());
            return e.hasClass(this.attr.columnStateDetailViewClass)
        }, this.isInDetailViewLevel2 = function() {
            var e = r.default.getColumnElementByKey(this.selectedColumn.model.getKey());
            return e.hasClass(this.attr.columnStateSocialProofClass)
        }, this.tweetActionFactory = function(e) {
            return function() {
                var t, i, s, r;
                if (this.hasFocus && this.$selectedChirp.length > 0 && !this.isInDetailViewLevel2()) {
                    if (i = this.$selectedChirp.attr("data-key"), !(t = this.selectedColumn.findMostInterestingChirp(i))) return;
                    switch (e) {
                        case "profile":
                            t.getMainUser ? s = t.getMainUser() : t.getRelatedUser && (s = t.getRelatedUser()), s && this.trigger("uiShowProfile", {
                                id: s.screenName
                            });
                            break;
                        case "favoriteFromAccounts":
                            t instanceof TD.services.TwitterStatus && this.trigger("uiShowFavoriteFromOptions", {
                                tweet: t
                            });
                            break;
                        case "actionsMenu":
                            this.trigger(this.$selectedChirp.find(this.attr.actionsMenuButtonSelector), "uiShowActionsMenu");
                            break;
                        case "viewDetails":
                            if (t instanceof TD.services.TwitterConversationMessageEvent) return;
                        default:
                            if (t instanceof TD.services.TwitterAction) return;
                            var a = t instanceof TD.services.TwitterConversation || t instanceof TD.services.TwitterConversationMessageEvent;
                            r = "reply" === e && a ? "dm" : e, this.parentChirp = this.selectedColumn.findChirp(i), n.default.publish("chirp/action", [r, t, this.parentChirp, this.selectedColumn, {
                                element: this.$selectedChirp
                            }])
                    }
                } else switch (e) {
                    case "dm":
                        this.trigger("uiComposeTweet", {
                            type: "message"
                        })
                }
            }.bind(this)
        }, this.handleDetailViewActive = function(e, t) {
            var i = t.$chirp.closest(this.attr.columnSelector);
            this.selectColumnByKey(i.attr("data-column")), this.$selectedChirp.removeClass(this.attr.isSelectedClass), this.$selectedChirp = t.$chirp, this.parentChirp === t.parentChirp && this.$selectedChirp.addClass(this.attr.isSelectedClass)
        }, this.handleDetailClosed = function(e, t) {
            var i;
            t && t.column && (i = t.column.model.getKey(), this.$selectedChirp.removeClass(this.attr.isSelectedClass), this.selectColumnByKey(i), this.$selectedChirp = (0, n.default)())
        }, this.handlePagingFactory = function(e) {
            return function() {
                if (this.hasFocus && this.selectedColumn) {
                    var t, i, s, n, a, o, c, l = this.selectedColumn.model.getKey(),
                        u = r.default.getColumnScrollContainerByKey(l),
                        d = u.scrollTop(),
                        h = u.innerHeight();
                    if (0 === this.$selectedChirp.length && this.selectAndScrollToFirstChirpInSelectedColumn(), null !== this.chirpOffsetTop ? t = this.chirpOffsetTop : (t = this.$selectedChirp.position().top, this.targetChirpOffsetTop = null), this.chirpOffsetTop = t, this.$selectedChirp.removeClass(this.attr.isSelectedClass), "down" === e) {
                        this.targetChirpOffsetTop = null === this.targetChirpOffsetTop ? t + h : this.targetChirpOffsetTop + h;
                        do {
                            (o = this.$selectedChirp.next(this.attr.chirpSelector)).length > 0 && (this.$selectedChirp = o)
                        } while (o.length > 0 && o.position().top < this.targetChirpOffsetTop);
                        (i = d + (this.$selectedChirp.position().top - t)) + h + 50 > u.get(0).scrollHeight && (i += 50), s = i - d
                    } else {
                        this.targetChirpOffsetTop = null === this.targetChirpOffsetTop ? t - h : this.targetChirpOffsetTop - h;
                        do {
                            (a = this.$selectedChirp.prev(this.attr.chirpSelector)).length > 0 && (this.$selectedChirp = a)
                        } while (a.length > 0 && a.position().top > this.targetChirpOffsetTop);
                        i = d - (t + Math.abs(this.$selectedChirp.position().top)), s = d - i
                    }
                    this.$selectedChirp.addClass(this.attr.isSelectedClass), c = function() {
                        this.chirpOffsetTop = null, this.targetChirpOffsetTop = null
                    }.bind(this), n = TD.ui.columns.calculateScrollDuration(s, 50, 750), u.stop().animate({
                        scrollTop: i
                    }, n, this.attr.pagingEasingFunction, c)
                }
            }.bind(this)
        }, this.handleGridHome = function() {
            if (this.hasFocus && this.selectedColumn) {
                this.chirpOffsetTop = null, this.targetChirpOffsetTop = null;
                var e = this.selectedColumn.model.getKey(),
                    t = r.default.getColumnScrollContainerByKey(e),
                    i = t.scrollTop(),
                    s = TD.ui.columns.calculateScrollDuration(i, 20, 300);
                this.$selectedChirp.removeClass(this.attr.isSelectedClass), this.$selectedChirp = this.$selectedChirp.parent().find(".js-stream-item:first"), this.$selectedChirp.addClass(this.attr.isSelectedClass), t.stop().animate({
                    scrollTop: 0
                }, s, this.attr.pagingEasingFunction)
            }
        }, this.handleGridEnd = function() {
            if (this.hasFocus && this.selectedColumn) {
                this.chirpOffsetTop = null, this.targetChirpOffsetTop = null;
                var e = this.selectedColumn.model.getKey(),
                    t = r.default.getColumnScrollContainerByKey(e),
                    i = t.scrollTop(),
                    s = t.get(0).scrollHeight - t.innerHeight() + 50,
                    n = s - i,
                    a = TD.ui.columns.calculateScrollDuration(n, 20, 300);
                this.$selectedChirp.removeClass(this.attr.isSelectedClass), this.$selectedChirp = this.$selectedChirp.parent().find(".js-stream-item:last"), this.$selectedChirp.addClass(this.attr.isSelectedClass), t.stop().animate({
                    scrollTop: s
                }, a, this.attr.pagingEasingFunction)
            }
        }
    }, c)
}, function(e, t, i) {
    "use strict";
    var s, n = i(17),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.attributes({
            columnsLeftMargin: 10,
            columnSlideMinDuration: 200,
            columnSlideMaxDuration: 500,
            columnExtraSlideTimePer100Px: 20,
            chirpSlideMinDuration: 100,
            chirpSlideMaxDuration: 500,
            chirpExtraSlideTimePer100Px: 100,
            columnGlowDuration: 500,
            appColumnsContainerSelector: ".js-app-columns-container",
            columnsContainerSelector: ".js-app-columns"
        }), this.after("initialize", function() {
            this.on(document, "uiColumnFocus", this.handleColumnFocus), this.on(document, "uiColumnsScrollToColumn", this.handleScrollToColumn), this.on(document, "uiColumnsScrollColumnToCenter", this.handleScrollColumnToCenter), this.on(document, "uiColumnsScrollToChirp", this.handleScrollToChirp)
        }), this.handleColumnFocus = function(e, t) {
            var i;
            void 0 !== t.index ? i = r.default.getKeyForColumnAtIndex(t.index) : t.last ? i = r.default.getKeyForLastColumn() : t.columnKey && (i = t.columnKey), i && this.trigger("uiColumnsScrollColumnToCenter", {
                columnKey: i
            })
        }, this.handleScrollToColumn = function(e, t) {
            var i, s = r.default.getColumnElementByKey(t.columnKey),
                n = this.select("appColumnsContainerSelector"),
                a = this.select("columnsContainerSelector"),
                o = s.outerWidth(),
                c = a.width(),
                l = n.scrollLeft(),
                u = s.position().left,
                d = u + o;
            u >= 0 && d <= c || (i = "left" === t.direction ? l + u - t.offset : l + d + t.offset - c, this.scrollColumnToOffset(t.columnKey, i, !1))
        }, this.handleScrollColumnToCenter = function(e, t) {
            var i, s, n, a, o, c, l = r.default.getColumnElementByKey(t.columnKey),
                u = this.select("appColumnsContainerSelector"),
                d = this.select("columnsContainerSelector"),
                h = u.innerWidth() / l.outerWidth(!0),
                m = u.scrollLeft(),
                f = !0;
            h <= 3.05 ? (c = parseInt(d.css("padding-left"), 10), i = m + l.position().left - c) : (s = l.outerWidth(), n = u.get(0).scrollWidth - this.attr.columnsLeftMargin, a = d.width(), o = l.offset().left, i = m + o - (a - s) / 2, i = Math.min(i, n - a), i = Math.max(i, 0)), h < 2 && (f = !1), this.scrollColumnToOffset(t.columnKey, i, f)
        }, this.calculateScrollDuration = function(e) {
            var t = Math.abs(e.target - e.current),
                i = e.minTime + t / 100 * e.extraSlideTimePer100Px;
            return i = Math.min(i, e.maxTime)
        }, this.scrollColumnToOffset = function(e, t, i) {
            var s, n = this.select("appColumnsContainerSelector"),
                a = n.scrollLeft();
            t !== a ? (n.stop(), s = this.calculateScrollDuration({
                target: t,
                current: a,
                minTime: this.attr.columnSlideMinDuration,
                maxTime: this.attr.columnSlideMaxDuration,
                extraSlideTimePer100Px: this.attr.columnExtraSlideTimePer100Px
            }), n.animate({
                scrollLeft: t
            }, s, "easeInOutQuad", function() {
                i && TD.ui.columns.focusColumn(e, this.attr.columnGlowDuration), r.default.getColumnElementByKey(e).trigger("uiColumnScrolled", {
                    columnKey: e
                })
            }.bind(this))) : (i && TD.ui.columns.focusColumn(e, this.attr.columnGlowDuration), r.default.getColumnElementByKey(e).trigger("uiColumnScrolled", {
                columnKey: e
            }))
        }, this.handleScrollToChirp = function(e, t) {
            if (t.$chirp && t.columnKey && 0 !== t.$chirp.length) {
                var i, s, n, a = r.default.getColumnScrollContainerByKey(t.columnKey),
                    o = a.scrollTop(),
                    c = t.$chirp.position().top + o,
                    l = a.innerHeight(),
                    u = !1;
                "up" === t.direction ? (i = c - t.offset, (t.forceScroll || i < o) && (u = !0)) : (s = c + t.$chirp.outerHeight() + t.offset, (t.forceScroll || s > o + l) && (i = s - l, u = !0)), u && (n = this.calculateScrollDuration({
                    target: i,
                    current: o,
                    minTime: this.attr.chirpSlideMinDuration,
                    maxTime: this.attr.chirpSlideMaxDuration,
                    extraSlideTimePer100Px: this.attr.chirpExtraSlideTimePer100Px
                }), a.stop().animate({
                    scrollTop: i
                }, n, "easeInOutQuad"))
            }
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.handleFocusRequest = function(e, t) {
            t && void 0 !== t.id && this.focusHistory[this.focusHistory.length - 1] !== t.id && (this.focusHistory.push(t.id), this.trigger("uiFocus", {
                id: t.id
            }))
        }, this.handleFocusRelease = function(e, t) {
            t && void 0 !== t.id && (this.focusHistory[this.focusHistory.length - 1] === t.id ? (this.focusHistory = this.focusHistory.filter(function(e) {
                return e !== t.id
            }), this.focusHistory.length > 0 && r.default.defer(function() {
                this.trigger("uiFocus", {
                    id: this.focusHistory[this.focusHistory.length - 1]
                })
            }.bind(this))) : this.focusHistory = this.focusHistory.filter(function(e) {
                return e !== t.id
            }))
        }, this.after("initialize", function() {
            this.focusHistory = [], this.on(document, "uiFocusRequest", this.handleFocusRequest), this.on(document, "uiFocusRelease", this.handleFocusRelease)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        this.showConfirmationDialog = function(e, t) {
            this.trigger(document, "uiConfirmationAction", {
                id: t.id,
                result: !!confirm(t.message)
            })
        }, this.after("initialize", function() {
            this.on(document, "uiShowConfirmationDialog", this.showConfirmationDialog)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = f(i(3)),
        n = f(i(0)),
        r = f(i(29)),
        a = f(i(20)),
        o = i(109),
        c = i(94),
        l = f(i(2080)),
        u = f(i(2082)),
        d = f(i(2090)),
        h = f(i(2091)),
        m = f(i(19));

    function f(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var p = i(5).compose,
        g = i(2092),
        v = i(2093),
        T = i(2094),
        w = i(2095),
        b = i(2097),
        y = i(2098),
        C = i(2100),
        _ = i(2102),
        D = i(140),
        S = i(2103),
        k = i(2104);
    e.exports = function() {
        p.mixin(this, [a.default, D, o.flightWithCommands]), this.showCommandPalette = function() {
            this.showModal(l.default, {}, {
                withClickTrap: !0,
                withDismissButton: !1,
                withDraggable: !1,
                withFooter: !1,
                withHeader: !1,
                withBorder: !1,
                withClasses: ["mdl-fixed-top"]
            })
        }, this.showAddColumn = function() {
            TD.ui.openColumn.showOpenColumn()
        }, this.showProfile = function(e, t) {
            this.showModal(w, {
                screenName: t.id
            }, {
                withHeader: !1,
                withFooter: !1,
                withDismissButton: !1,
                withClasses: ["prf", "s-tall-fixed", "s-profile", "is-inverted-dark"],
                withBorder: !1
            })
        }, this.showEmbedTweet = function(e, t) {
            var i = {
                title: (0, s.default)("Embed this Tweet"),
                withHeader: !0,
                withFooter: !1,
                withDismissButton: !0,
                withBorder: !1,
                withClasses: ["s-wide", "embed-modal"]
            };
            this.showModal(g, {
                tweet: t.tweet
            }, i)
        }, this.showKeyboardShortcutList = function(e, t) {
            var i = {
                title: (0, s.default)("Keyboard shortcuts"),
                withHeader: !0,
                withFooter: !1,
                withDismissButton: !0,
                withBorder: !1,
                withClasses: ["s-wide", "keyboard-shortcut-list-modal"]
            };
            this.showModal(v, {}, i)
        }, this.showSearchOperatorList = function(e, t) {
            var i = {
                title: (0, s.default)("Search tips"),
                withHeader: !0,
                withHeaderDivider: !0,
                withFooter: !1,
                withDismissButton: !0,
                withBorder: !1,
                withClasses: ["s-wide"],
                withContentClasses: ["scroll-v", "max-height--600"]
            };
            this.showModal(T, {}, i), this.trigger("scribeEvent", {
                terms: {
                    page: "main",
                    section: "navbar",
                    element: "search_tips",
                    action: "click"
                }
            })
        }, this.showReportOptions = function(e, t) {
            if (!t.isMessage && !t.conversationId && TD.decider.get("report_flow_iframe") && TD.storage.accountController.getCookieAccount()) return this.showReportFlow(t);
            var i = {
                withClasses: ["mdl", "s-narrow", "is-inverted-dark"],
                withContentClasses: ["mdl-report-spam-options"],
                withFooter: !1,
                withBorder: !1,
                withHeaderDivider: !0,
                title: t.isMessage ? (0, s.default)("Flag message") : (0, s.default)("Flag conversation")
            };
            this.showModal(b, t, i)
        }, this.showReportUserOptions = function(e, t) {
            return TD.decider.get("report_flow_iframe") && TD.storage.accountController.getCookieAccount() || this.trigger("uiReportSpamAction", {
                account: t.account,
                twitterUser: t.twitterUser,
                block: !0
            }), this.showReportFlow(t)
        }, this.showReportFlow = function(e) {
            var t = {
                    account: e.account,
                    twitterUser: e.twitterUser,
                    tweetId: e.tweetId,
                    isMedia: e.isMedia
                },
                i = {
                    title: (0, s.default)("Report an issue"),
                    withFooter: !0,
                    withDoneButton: !0,
                    withCenteredFooter: !0
                };
            this.showModal(y, t, i)
        }, this.showFollowFromOptions = function(e, t) {
            var i = t.userToFollow,
                n = {
                    title: (0, s.default)("Follow {{>text/user_link_screenname}} from your accounts", i),
                    withBorder: !1,
                    withHeaderDivider: !1,
                    withContentClasses: ["margin-hxl"],
                    withFooter: !1,
                    withDoneButton: !1,
                    withClasses: ["s-narrow", "s-fluid-height", "padding-b--12"]
                };
            this.showModal(C, {
                userToFollow: i
            }, n)
        }, this.showFavoriteFromOptions = function(e, t) {
            var i = t.tweet,
                n = {
                    title: (0, s.default)("Like this Tweet from"),
                    withBorder: !1,
                    withHeaderDivider: !1,
                    withContentClasses: ["margin-hxl"],
                    withFooter: !1,
                    withDoneButton: !1,
                    withClasses: ["s-narrow", "s-fluid-height", "padding-b--12"]
                };
            this.showModal(_, {
                tweet: i
            }, n)
        }, this.showGlobalSettings = function() {
            new TD.components.GlobalSettings
        }, this.showEditListMembers = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                i = t.list,
                s = t.autoAddUsers;
            i ? new TD.components.ListMembers(i, s) : this.showEditListDetails(e, t)
        }, this.showEditListDetails = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                i = t.list,
                n = t.autoAddUser,
                r = {
                    title: i ? (0, s.default)("Edit List details") : (0, s.default)("Create a new List"),
                    withFooter: !1,
                    withBorder: !1,
                    withHeaderDivider: !0
                };
            i ? this.showModal(h.default, {
                listId: i.id,
                accountKey: i.account.getKey(),
                name: i.name,
                description: i.description,
                isPrivate: i.isPrivate,
                autoAddUser: n
            }, r) : n ? this.showModal(h.default, {
                autoAddUser: n
            }, r) : this.showModal(h.default, {}, r)
        }, this.showEditCustomTimeline = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                i = t.timelineId,
                n = {
                    timelineId: i,
                    accountKey: t.accountKey,
                    name: t.name,
                    description: t.description,
                    columnKey: t.columnKey,
                    focus: t.focus
                },
                r = {
                    title: i ? (0, s.default)("Edit Collection") : (0, s.default)("Create a new Collection"),
                    withFooter: !1,
                    withBorder: !1,
                    withHeaderDivider: !0
                };
            this.showModal(d.default, n, r)
        }, this.showCopyTweetLink = function(e) {
            var t = {
                value: (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).url,
                readonly: !0,
                title: (0, s.default)("Copy link to Tweet"),
                explanatoryText: (0, s.default)("The URL of this Tweet is below.  Copy to easily share with colleagues and friends."),
                buttonText: (0, s.default)("Copy link"),
                placeholderText: (0, s.default)("URL"),
                successText: (0, s.default)("Link copied to clipboard"),
                errorText: (0, s.default)("That didn't work. Try copying the link from the field.")
            };
            this.showCopyTextModal(t)
        }, this.showCopySearchQuery = function(e) {
            var t = {
                value: (arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}).query,
                readonly: !1,
                title: (0, s.default)("Copy search query"),
                buttonText: (0, s.default)("Copy query"),
                placeholderText: (0, s.default)("Search query"),
                explanatoryText: (0, s.default)('Here\'s your full search query.  Copy it to share with colleagues or to use in your app with Twitter Kit.  <a href="https://fabric.io/kits/ios/twitterkit" target="_blank" rel="noopener noreferrer">Learn More.</a>'),
                successText: (0, s.default)("Query copied to clipboard"),
                errorText: (0, s.default)("That didn't work. Try copying the query from the field.")
            };
            this.showCopyTextModal(t)
        }, this.showCopyTextModal = function(e) {
            this.showModal(u.default, e, {
                title: e.title,
                withFooter: !1,
                withBorder: !1,
                withHeaderDivider: !0
            })
        }, this.showImportListModal = function(e, t) {
            var i = {
                    list: t.list
                },
                n = {
                    title: (0, s.default)("Add multiple users to {{{listName}}}", {
                        listName: m.default.cleanWithEmoji(t.list.name)
                    }),
                    withBorder: !1,
                    withHeaderDivider: !0,
                    withClasses: ["s-narrow"]
                };
            this.showModal(S, i, n)
        }, this.showExportListModal = function(e, t) {
            var i = {
                    list: t.list,
                    members: t.members
                },
                n = {
                    title: (0, s.default)("Copy users in this List"),
                    withBorder: !1,
                    withHeaderDivider: !0,
                    withClasses: ["s-narrow"]
                };
            this.showModal(k, i, n)
        }, this.after("initialize", function() {
            var e = this;
            this.on(document, "uiShowProfile", this.showProfile), this.on(document, "uiShowReportOptions", this.showReportOptions), this.on(document, "uiShowReportUserOptions", this.showReportUserOptions), this.on(document, "uiShowKeyboardShortcutList", this.showKeyboardShortcutList), this.on(document, "uiShowSearchOperatorList", this.showSearchOperatorList), this.on(document, "uiShowEditCustomTimeline", this.showEditCustomTimeline), this.on(document, "uiShowEditListMembers", this.showEditListMembers), this.on(document, "uiShowEditListDetails", this.showEditListDetails), this.on(document, "uiShowCopyTweetLink", this.showCopyTweetLink), this.on(document, "uiShowCopySearchQuery", this.showCopySearchQuery), this.on(document, "uiShowImportListModal", this.showImportListModal), this.on(document, "uiShowExportListModal", this.showExportListModal), this.on(document, "uiShowEmbedTweet", this.showEmbedTweet), this.on(document, "uiShowAddColumn", this.showAddColumn), this.on(document, "uiShowGlobalSettings", this.showGlobalSettings), this.on(document, "uiShowFollowFromOptions", this.showFollowFromOptions), this.on(document, "uiShowFavoriteFromOptions", this.showFavoriteFromOptions);
            var t = r.default.Observable.fromEvent((0, n.default)(document), "uiShowCommandPalette").withLatestFrom((0, c.getStreamForFeatureFlag)("tweetdeck_dogfood"), function(e, t) {
                return {
                    enabled: t
                }
            }).filter(function(e) {
                return e.enabled
            });
            this.observe(t).subscribe(function() {
                return e.showCommandPalette()
            }), this.addCommands([{
                label: (0, s.default)("Create a new List"),
                apply: function() {
                    return e.showEditListDetails()
                }
            }, {
                label: (0, s.default)("Create a new Collection"),
                apply: function() {
                    return e.showEditCustomTimeline()
                }
            }])
        })
    }
}, function(e, t, i) {
    "use strict";
    var s = d(i(3)),
        n = d(i(0)),
        r = d(i(1)),
        a = function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(109)),
        o = d(i(8)),
        c = d(i(12)),
        l = d(i(2081)),
        u = d(i(160));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = c.default.mixin(function() {
        this.attributes({
            inputSelector: ".js-input",
            commandSelector: ".js-command",
            listSelector: ".js-command-list",
            template: "command_palette/base",
            autoFocus: !0
        }), this.initialState({
            fuzzyMatchedCommands: function() {
                return a.query()
            },
            query: "",
            selection: 0
        }), this.before("initialize", function() {
            this.addCommands([{
                label: (0, s.default)("Close this dialog"),
                shortcut: {
                    key: "Esc"
                },
                apply: function() {}
            }])
        }), this.componentDidInitialize = function() {
            var e = this,
                t = o.default.render(this.attr.template);
            this.$node.html(t), r.default.defer(function() {
                return e.select("inputSelector").focus()
            }), this.on("uiInputSubmit", function() {
                return e.execute()
            }), this.on("uiInputEscape", this.teardown), this.on(document, "uiKeyEnter", function() {
                return e.execute()
            }), this.on(document, "uiKeyDown", function() {
                return e.nudgeSelection(1)
            }), this.on(document, "uiKeyUp", function() {
                return e.nudgeSelection(-1)
            }), this.on(this.attr.inputSelector, "keydown", this.handleInputKeyDown), this.on("click", {
                commandSelector: function(t, i) {
                    return e.execute((0, n.default)(i.el).attr("data-index"))
                }
            }), this.on(this.attr.inputSelector, "input change", function() {
                var t = e.select("inputSelector").val();
                e.setQuery(t)
            });
            var i = this.connect(l.default, {
                mapStateToProps: function(e) {
                    return {
                        fuzzyMatchedCommands: e.fuzzyMatchedCommands,
                        selection: e.selection
                    }
                }
            });
            this.attachChild(i, this.attr.listSelector)
        }, this.execute = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.state.selection,
                t = r.default.get(this.state, ["fuzzyMatchedCommands", e, "original"]);
            t && (this.teardown(), t.apply())
        }, this.setQuery = function(e) {
            e !== this.state.query && this.mergeState({
                fuzzyMatchedCommands: a.query(e),
                query: e,
                selection: 0
            })
        }, this.nudgeSelection = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
            e = e < 0 ? -1 : 1;
            var t = this.state.selection + this.state.fuzzyMatchedCommands.length + e;
            this.mergeState({
                selection: t % this.state.fuzzyMatchedCommands.length
            })
        }, this.handleInputKeyDown = function(e) {
            9 === e.which && (this.select("inputSelector").blur(), e.preventDefault()), 40 === e.which && (this.nudgeSelection(1), e.preventDefault()), 38 === e.which && (this.nudgeSelection(-1), e.preventDefault())
        }
    }, u.default, a.flightWithCommands)
}, function(e, t, i) {
    "use strict";
    var s = l(i(19)),
        n = i(109),
        r = l(i(8)),
        a = i(188),
        o = l(i(250)),
        c = l(i(12));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = c.default.mixin(function() {
        this.attributes({
            template: "command_palette/command_list"
        }), this.render = function() {
            var e = this.props,
                t = e.fuzzyMatchedCommands,
                i = void 0 === t ? [] : t,
                a = e.selection,
                o = void 0 === a ? 0 : a,
                c = {
                    commands: i.map(function(e, t) {
                        var i = e.string.split(n.MATCH_DELIMITER).map(function(e) {
                                return s.default.cleanWithEmoji(e)
                            }),
                            r = i.reduce(function(e, t, i) {
                                var s = i % 2 == 1;
                                return e + (s ? "<b>" + t + "</b>" : t)
                            }, "");
                        return {
                            html: r,
                            shortcut: e.original.shortcut,
                            index: t,
                            classes: t === o ? "is-selected bg-color-twitter-medium-blue color-twitter-white" : "color-twitter-darker-gray hover-bg-color-twitter-white"
                        }
                    })
                },
                l = r.default.render(this.attr.template, c);
            this.$node.html(l), this.scrollToSelection()
        }, this.scrollToSelection = (0, a.makeDOMMutator)(function() {
            o.default.makeElementVisible(this.$node, this.$node.find(".is-selected"), {
                time: 100
            })
        })
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = u(i(3)),
        n = u(i(1)),
        r = u(i(8)),
        a = u(i(12)),
        o = u(i(639)),
        c = i(19),
        l = i(23);

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.default = a.default.mixin(function() {
        this.attributes({
            textSelector: ".js-text-field",
            copyButtonSelector: ".js-copy-button",
            value: null,
            readonly: !1,
            titleText: void 0,
            explanatoryText: void 0,
            buttonText: void 0,
            placeholderText: void 0,
            successText: void 0,
            errorText: void 0
        }), this.componentDidInitialize = function() {
            var e = this,
                t = !(0, c.isSafari)() || (0, c.getWebkitVersion)() > 602,
                i = {
                    titleText: (0, s.default)("Copy"),
                    buttonText: (0, s.default)("Copy"),
                    placeholderText: "",
                    explanatoryText: (0, s.default)("The item you requested is below."),
                    successText: (0, s.default)("Text copied to clipboard"),
                    errorText: (0, s.default)("That didn't work. Try copying the text from the field."),
                    showButton: t
                },
                a = n.default.defaults({}, this.attr, i),
                o = r.default.render("actions/copy_text_modal", a);
            this.$node.html(o), this.setupClipboard(n.default.pick(a, ["successText", "errorText"])), this.attr.readonly && this.on("click", {
                textSelector: function() {
                    e.select("textSelector").select()
                }
            }), n.default.defer(function() {
                e.select("textSelector").val(e.attr.value).select()
            })
        }, this.setupClipboard = function(e) {
            var t = this;
            this.clipboard = new o.default(this.attr.copyButtonSelector, {
                target: function() {
                    return t.select("textSelector").get(0)
                }
            }), this.clipboard.on("success", function() {
                (0, l.showNotification)({
                    message: e.successText
                })
            }), this.clipboard.on("error", function(t) {
                (0, l.showErrorNotification)({
                    message: e.errorText
                })
            })
        }, this.render = function() {}, this.before("teardown", function() {
            this.clipboard.destroy()
        })
    })
}, , , , , , , , function(e, t, i) {
    "use strict";
    var s = d(i(7)),
        n = d(i(3)),
        r = d(i(1)),
        a = d(i(8)),
        o = d(i(154)),
        c = d(i(12)),
        l = d(i(640)),
        u = i(23);

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = c.default.mixin(function() {
        this.attributes({
            saveButtonSelector: ".js-save-customtimeline",
            deleteButtonSelector: ".js-delete-customtimeline",
            accountSelector: ".js-customtimeline-account",
            nameSelector: ".js-customtimeline-name",
            descriptionSelector: ".js-customtimeline-description",
            characterCountSelector: ".js-character-count",
            maxDescriptionLength: 160,
            timelineId: void 0,
            accountKey: void 0,
            columnKey: void 0,
            name: "",
            description: "",
            focus: "name"
        }), this.initialState({
            isSubmittable: !0,
            descriptionCharsLeft: 0
        }), this.componentDidInitialize = function() {
            var e = this,
                t = TD.storage.accountController.getAccountsForService("twitter"),
                i = (0, s.default)({}, this.attr, {
                    accounts: t
                }),
                n = a.default.render("customtimeline/edit_customtimeline", i);
            this.$node.html(n), this.attr.timelineId && this.updateUI(this.attr), r.default.defer(function() {
                e.select(e.attr.focus + "Selector").focus()
            }), this.on("click uiInputSubmit", {
                saveButtonSelector: this.handleSaveEvent,
                deleteButtonSelector: this.handleDeleteEvent
            }), this.on("uiInputSubmit", {
                nameSelector: this.handleSaveEvent
            }), this.on("input propertychange change", {
                descriptionSelector: this.handleChange
            });
            var o = this.connect(l.default, {
                mapStateToProps: function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        t = e.descriptionCharsLeft,
                        i = e.hasValidCharacterCount;
                    return {
                        displayedCharacterCount: t,
                        hasValidCharacterCount: i
                    }
                }
            });
            this.attachChild(o, this.select("characterCountSelector")), this.handleChange()
        }, this.updateUI = function(e) {
            this.select("nameSelector").val(e.name), this.select("descriptionSelector").val(e.description), this.select("accountSelector").val(e.accountKey)
        }, this.getValsFromUI = function() {
            return {
                accountKey: this.select("accountSelector").val(),
                name: this.select("nameSelector").val(),
                description: this.select("descriptionSelector").val()
            }
        }, this.handleSaveEvent = function() {
            this.state.isSubmittable && (this.attr.timelineId ? this.triggerUpdateExisting() : this.createAndConfigureNew(), this.teardown())
        }, this.handleDeleteEvent = function() {
            var e = r.default.uniqueId(),
                t = {
                    id: e,
                    title: (0, n.default)("Delete"),
                    message: (0, n.default)("Are you sure you want to delete this Collection?"),
                    okLabel: (0, n.default)("Delete"),
                    cancelLabel: (0, n.default)("Cancel")
                };
            this.on(document, "uiConfirmationAction", function(t, i) {
                if (i.id === e && (this.off(document, "uiConfirmationAction"), i.result)) {
                    var s = TD.controller.columnManager.get(this.attr.columnKey);
                    s.deleteCustomTimeline(), this.teardown()
                }
            }), this.trigger("uiShowConfirmationDialog", t)
        }, this.triggerUpdateExisting = function() {
            var e = this.getValsFromUI();
            this.trigger(document, "uiUpdateCustomTimeline", {
                account: this.attr.accountKey,
                id: this.attr.timelineId,
                name: e.name,
                description: e.description
            })
        }, this.createNewTimeline = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                i = TD.controller.clients.getClient(e),
                s = new o.default.Deferred;
            return i.createCustomTimeline(t, s.callback.bind(s), s.errback.bind(s)), s
        }, this.createAndConfigureNew = function() {
            var e = this.getValsFromUI(),
                t = e.name,
                i = e.description,
                s = e.accountKey,
                a = this.createNewTimeline(s, {
                    name: t,
                    description: i
                });
            a.addCallback(function(e) {
                var t = new TD.components.TemporaryColumn;
                t.customTimeline(e), t.populate(), t.makePermanent(), r.default.defer(function() {
                    t.destroy()
                })
            }), a.addErrback(function(e) {
                (0, u.showErrorNotification)({
                    message: (0, n.default)("Error creating customTimeline: {{status}}", {
                        status: e.status
                    })
                })
            })
        }, this.handleChange = function() {
            var e = this.select("descriptionSelector").val().length,
                t = this.attr.maxDescriptionLength - e;
            this.mergeState({
                descriptionCharsLeft: t,
                hasValidCharacterCount: t >= 0,
                isSubmittable: t >= 0
            })
        }, this.render = function() {
            this.select("saveButtonSelector").prop("disabled", !this.state.isSubmittable)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = d(i(7)),
        n = d(i(3)),
        r = d(i(1)),
        a = d(i(8)),
        o = d(i(154)),
        c = d(i(12)),
        l = d(i(640)),
        u = i(23);

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = c.default.mixin(function() {
        this.attributes({
            saveButtonSelector: ".js-save-list",
            accountSelector: ".js-list-account",
            nameSelector: ".js-list-name",
            descriptionSelector: ".js-list-description",
            characterCountSelector: ".js-character-count",
            publicSelector: "#list-mode-public",
            privateSelector: "#list-mode-private",
            maxDescriptionLength: 100,
            listId: void 0,
            accountKey: void 0,
            name: "",
            description: "",
            isPrivate: !1,
            focus: "name",
            autoAddUser: void 0
        }), this.initialState({
            isSubmittable: !0,
            descriptionCharsLeft: 0
        }), this.componentDidInitialize = function() {
            var e = this,
                t = TD.storage.accountController.getAccountsForService("twitter"),
                i = (0, s.default)({}, this.attr, {
                    accounts: t
                }),
                n = a.default.render("lists/edit_list_details", i);
            this.$node.html(n), this.attr.listId && this.updateUI(this.attr), r.default.defer(function() {
                e.select(e.attr.focus + "Selector").focus()
            }), this.on("click uiInputSubmit", {
                saveButtonSelector: this.handleSaveEvent
            }), this.on("uiInputSubmit", {
                nameSelector: this.handleSaveEvent
            }), this.on("input propertychange change", {
                nameSelector: this.handleChange,
                descriptionSelector: this.handleChange
            });
            var o = this.connect(l.default, {
                mapStateToProps: function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        t = e.descriptionCharsLeft,
                        i = e.hasValidCharacterCount;
                    return {
                        displayedCharacterCount: t,
                        hasValidCharacterCount: i
                    }
                }
            });
            this.attachChild(o, this.select("characterCountSelector")), this.handleChange()
        }, this.updateUI = function(e) {
            this.select("nameSelector").val(e.name), this.select("descriptionSelector").val(e.description), this.select("accountSelector").val(e.accountKey), e.isPrivate ? this.$node.find('input:radio[value="private"]').prop("checked", !0) : this.$node.find('input:radio[value="public"]').prop("checked", !0)
        }, this.getValsFromUI = function() {
            return {
                accountKey: this.select("accountSelector").val(),
                name: this.select("nameSelector").val(),
                description: this.select("descriptionSelector").val(),
                isPrivate: this.select("privateSelector").prop("checked")
            }
        }, this.handleSaveEvent = function() {
            if (this.state.isSubmittable) {
                this.select("saveButtonSelector").prop("disabled", !0);
                var e = this.getValsFromUI(),
                    t = e.name,
                    i = e.description,
                    s = e.accountKey,
                    r = e.isPrivate,
                    a = this.attr.autoAddUser ? [this.attr.autoAddUser] : [],
                    o = this.createOrUpdateList(s, this.attr.listId, t, i, r);
                o.addCallbackWith(this, function(e) {
                    this.trigger("uiShowEditListMembers", {
                        list: e,
                        autoAddUsers: a
                    })
                }), o.addErrbackWith(this, function(e) {
                    this.select("saveButtonSelector").prop("disabled", !1);
                    var t = (0, n.default)("Problem saving List. Please check the details and try again");
                    (0, u.showErrorNotification)({
                        message: t
                    })
                })
            }
        }, this.createOrUpdateList = function(e, t, i, s, n) {
            var r = TD.controller.clients.getClient(e),
                a = new o.default.Deferred;
            return t ? r.updateList(t, i, s, n, a.callback.bind(a), a.errback.bind(a)) : r.createList(i, s, n, a.callback.bind(a), a.errback.bind(a)), a
        }, this.handleChange = function() {
            var e = this.select("descriptionSelector").val().length,
                t = this.attr.maxDescriptionLength - e,
                i = this.select("nameSelector").val().length;
            this.mergeState({
                descriptionCharsLeft: t,
                hasValidCharacterCount: t >= 0,
                isSubmittable: t >= 0 && i > 0
            })
        }, this.render = function() {
            this.select("saveButtonSelector").prop("disabled", !this.state.isSubmittable)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = l(i(3)),
        n = l(i(1)),
        r = l(i(0)),
        a = i(5),
        o = l(i(8)),
        c = i(23);

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, a.component)(function() {
        this.attributes({
            embedDataCache: {},
            includeParentTweet: !0,
            includeMedia: !0,
            closeEvent: "uiCloseEmbedTweet",
            dataEmbeddedTweetEvent: "dataEmbeddedTweet",
            dataEmbeddedTweetErrorEvent: "dataEmbeddedTweetError",
            embedTextArea: ".js-embed-textarea",
            embedIncludeParentCheckBox: ".js-embed-include-parent",
            embedIncludeMediaCheckBox: ".js-embed-include-media",
            modalTitle: ".js-header-title",
            embedIframe: ".js-embed-iframe",
            embedIframeContainer: ".js-embed-iframe-container",
            embedModalPanel: ".js-modal-panel",
            embedModalHeader: ".js-mdl-header",
            embedModalContent: ".js-mdl-content",
            embedLoading: ".js-embed-loading-container",
            tweet: null
        }), this.after("initialize", function() {
            this.includeParentTweet = this.attr.includeParentTweet, this.includeMedia = this.attr.includeMedia;
            var e = o.default.render("embed_tweet", {
                loading: !0
            });
            this.$node.html(e), this.trigger(document, "uiNeedsEmbeddedTweet", {
                tweetID: this.attr.tweet.id,
                hideThread: !this.includeParentTweet,
                hideMedia: !this.includeMedia
            }), this.on(this.attr.closeEvent, this.teardown), this.on("change", {
                embedIncludeParentCheckBox: this.handleEmbeddedTweetOptionsChange,
                embedIncludeMediaCheckBox: this.handleEmbeddedTweetOptionsChange
            }), this.on(document, this.attr.dataEmbeddedTweetEvent, this.handleEmbeddedTweet), this.on(document, this.attr.dataEmbeddedTweetErrorEvent, this.handleEmbeddedTweetError)
        }), this.handleEmbeddedTweet = function(e, t) {
            var i, n, a, c, l, u, d, h;
            if (t && t.html && t.request && t.request.tweetID === this.attr.tweet.id && t.request.hideThread !== this.includeParentTweet && t.request.hideMedia !== this.includeMedia)
                if (this.putEmbedDataInCache(t), h = function(e) {
                        var h, m = o.default.render("embed_tweet", {
                            html: t.html,
                            isReply: !!e.inReplyToID,
                            includeParentTweet: this.includeParentTweet,
                            hasMedia: !1,
                            includeMedia: this.includeMedia
                        });
                        this.$node.html(m), this.select("modalTitle").text((0, s.default)("Embed this Tweet")), this.on(this.select("embedTextArea"), "focus", this.handleInputBoxFocus), n = this.select("embedIframe"), a = this.select("embedIframeContainer"), c = this.select("embedModalPanel"), l = this.select("embedModalHeader"), u = this.select("embedModalContent"), d = this.select("embedLoading"), h = function() {
                            a.css("height", "auto"), n.height(Math.max((0, r.default)("html", i).outerHeight(), (0, r.default)("body", i).outerHeight(), n.height())), c.height(u.height() + l.outerHeight()), (0, r.default)("a", i).attr("target", "_blank")
                        }, n.load(function() {
                            d.addClass("is-hidden"), h(), this.resizeIframeIntervalId = setInterval(h, 500)
                        }.bind(this)), n[0] && ((i = n[0].contentWindow.document).open(), i.write(["<!DOCTYPE html>", '<meta charset="utf-8">', '<base href="https://tweetdeck.twitter.com">', '<meta name="twitter:widgets:csp" content="on">', t.html].join("\n")), i.close()), u.removeClass("horizontal-flow-container")
                    }, !this.attr.tweet.cards && this.attr.tweet.hasLink()) {
                    var m = TD.controller.clients.getClient(this.attr.tweet.account.getKey());
                    m.show(this.attr.tweet.id, h.bind(this), function() {
                        this.trigger(document, this.attr.dataEmbeddedTweetErrorEvent, t)
                    }.bind(this))
                } else h.call(this, this.attr.tweet)
        }, this.handleEmbeddedTweetError = function(e, t) {
            t && t.request && t.request.tweetID === this.attr.tweet.id && (this.teardown(e), (0, c.showErrorNotification)({
                message: (0, s.default)("Sorry, couldn't retrieve embedded Tweet. Please try again later.")
            }))
        }, this.handleInputBoxFocus = function(e) {
            var t = this.select("embedTextArea");
            n.default.defer(function() {
                t.select()
            })
        }, this.handleEmbeddedTweetOptionsChange = function(e) {
            var t;
            this.includeParentTweet = (0, r.default)(this.attr.embedIncludeParentCheckBox).prop("checked"), this.includeMedia = (0, r.default)(this.attr.embedIncludeMediaCheckBox).prop("checked");
            var i = o.default.render("embed_tweet", {
                loading: !0
            });
            this.$node.html(i), (t = this.getEmbedDataFromCache()) ? this.trigger(document, "dataEmbeddedTweet", t) : this.trigger(document, "uiNeedsEmbeddedTweet", {
                tweetID: this.attr.tweet.id,
                hideThread: !this.includeParentTweet,
                hideMedia: !this.includeMedia
            })
        }, this.getEmbedDataFromCache = function() {
            var e = !!this.includeParentTweet,
                t = !!this.includeMedia,
                i = this.attr.embedDataCache[e + ":" + t];
            if (i && i.request.tweetID === this.attr.tweet.id) return i
        }, this.putEmbedDataInCache = function(e) {
            var t = !!this.includeParentTweet,
                i = !!this.includeMedia;
            this.attr.embedDataCache[t + ":" + i] = e
        }, this.after("teardown", function() {
            clearInterval(this.resizeIframeIntervalId), this.$node.html("")
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = o(i(20)),
        n = i(94),
        r = o(i(8)),
        a = o(i(12));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = a.default.mixin(function() {
        this.attributes({
            commandPaletteFeatureFlag: "tweetdeck_dogfood"
        }), this.initialState({
            isMac: function() {
                return "osx" === TD.util.getOSName()
            },
            withCommandPalette: !1
        }), this.componentDidInitialize = function() {
            this.watchFeatureFlags()
        }, this.render = function() {
            this.$node.html(r.default.render("keyboard_shortcut_list", this.state))
        }, this.watchFeatureFlags = function() {
            var e = this;
            this.observe((0, n.getStreamForFeatureFlag)(this.attr.commandPaletteFeatureFlag)).subscribe(function(t) {
                return e.mergeState({
                    withCommandPalette: t
                })
            })
        }
    }, s.default)
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(0)),
        r = i(5),
        a = o(i(8));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, r.component)(function() {
        this.attributes({
            tblLeftItemClass: "padding-l--28 padding-v--10",
            tblRightItemClass: "padding-h--28 padding-v--10",
            sectionHeaderClass: "padding-h--28 padding-t--25 padding-b--10 txt-size--10 txt-uppercase txt-bold",
            advancedSearchContentClass: "padding-h--28 padding-v--5 txt-size--12",
            tryButtonSelector: ".js-try-query",
            searchOperators: [{
                sectionTitle: (0, s.default)("Tweet content"),
                sectionOperators: [{
                    query: "watching now",
                    description: (0, s.default)('containing both "watching" and "now"')
                }, {
                    query: '"happy hour"',
                    description: (0, s.default)('containing the exact phrase "happy hour"')
                }, {
                    query: "love OR hate",
                    description: (0, s.default)('containing either "love" or "hate" (or both)')
                }, {
                    query: "beer -root",
                    description: (0, s.default)('containing “beer” but not "root"')
                }, {
                    query: "#haiku",
                    description: (0, s.default)('containing the hashtag "haiku"')
                }, {
                    query: "$twtr",
                    description: (0, s.default)("containing a cashtag, useful for following stock information")
                }, {
                    query: "politics filter:safe",
                    description: (0, s.default)('containing "politics" with Tweets marked as potentially sensitive removed')
                }, {
                    query: "puppy url:twitter",
                    description: (0, s.default)('containing "puppy" and a URL with the word "twitter" anywhere within it')
                }, {
                    query: "traffic ?",
                    description: (0, s.default)('containing "traffic" and asking a question')
                }]
            }, {
                sectionTitle: (0, s.default)("Tweet information"),
                sectionOperators: [{
                    query: "near:london within:15mi",
                    description: (0, s.default)("geotagged in a place, within a radius (can use km or mi)")
                }, {
                    query: "superhero since:2015-12-21",
                    description: (0, s.default)("containing “superhero” and sent since “2015-12-21” (year-month-day)")
                }, {
                    query: "#brexit until:2016-06-23",
                    description: (0, s.default)('containing "#brexit" and sent before the date "2016-06-23" (year-month-day)')
                }, {
                    query: "puppy source:tweetdeck",
                    description: (0, s.default)('containing "puppy" and sent from "tweetdeck" (common sources are "tweetdeck", "twitter_for_iphone", "twitter_for_android" and "twitter_web_client")')
                }, {
                    query: "puppy min_retweets:5",
                    description: (0, s.default)('containing "puppy" with a minimum of 5 Retweets')
                }, {
                    query: "puppy min_faves:10",
                    description: (0, s.default)('containing "puppy" with a minimum of 10 likes')
                }, {
                    query: "puppy min_replies:100",
                    description: (0, s.default)('containing "puppy" with a minimum of 100 replies')
                }, {
                    query: "puppy filter:nativeretweets",
                    description: (0, s.default)('Retweets containing "puppy"')
                }, {
                    query: "puppy filter:retweets",
                    description: (0, s.default)('old style Retweets ("RT") and quoted Tweets containing "puppy"')
                }]
            }, {
                sectionTitle: (0, s.default)("Tweet media"),
                sectionOperators: [{
                    query: "kitten filter:media",
                    description: (0, s.default)('containing "kitten" and an image or video')
                }, {
                    query: "kitten filter:native_video",
                    description: (0, s.default)('containing "kitten" and an uploaded video, Amplify video or Periscope')
                }, {
                    query: "kitten filter:periscope",
                    description: (0, s.default)('containing "kitten" and a Periscope video URL')
                }, {
                    query: "kitten filter:images",
                    description: (0, s.default)('containing "kitten" and links identified as photos')
                }, {
                    query: "kitten filter:twimg",
                    description: (0, s.default)('containing "kitten" and a pic.twitter.com link representing one or more photos')
                }, {
                    query: "kitten filter:links",
                    description: (0, s.default)('containing "kitten" and linking to URL')
                }]
            }, {
                sectionTitle: (0, s.default)("Users"),
                sectionOperators: [{
                    query: "from:jack",
                    description: (0, s.default)("sent from Twitter account @jack")
                }, {
                    query: "list:NASA/space-tweets",
                    description: (0, s.default)("sent from a Twitter account in the NASA List space-tweets")
                }, {
                    query: "to:NASA",
                    description: (0, s.default)("replying to Twitter account @NASA")
                }, {
                    query: "@NASA",
                    description: (0, s.default)("mentioning Twitter account @NASA")
                }, {
                    query: "breaking filter:verified",
                    description: (0, s.default)('containing the word "breaking" from verified users only')
                }]
            }],
            advancedSearches: [{
                sectionTitle: (0, s.default)("Negation of filters"),
                sectionExplanation: (0, s.default)('Any "filter:type" can also be negated using the "-" symbol.'),
                sectionExamples: [{
                    example: (0, s.default)("Example: I want Tweets from @Nasa with all types of media except images"),
                    query: "from:NASA filter:media -filter:images"
                }]
            }, {
                sectionTitle: (0, s.default)("Combining filters and boolean queries"),
                sectionExplanation: (0, s.default)("Combine complex queries together with booleans and parentheses to refine your results."),
                sectionExamples: [{
                    example: (0, s.default)('Example 1: I want mentions of either "puppy" or "kitten", with mentions of either "sweet" or "cute", excluding Retweets, with at least 10 likes.'),
                    query: "(puppy OR kitten) AND (sweet OR cute) -filter:nativeretweets min_faves:10"
                }, {
                    example: (0, s.default)('Example 2: I want mentions of "space" and either "big" or "large" by members of the NASA astronauts List, sent from an iPhone or twitter.com, with images, excluding mentions of #asteroid, since 2011.'),
                    query: "space (big OR large) list:nasa/astronauts (source:twitter_for_iphone OR source:twitter_web_client) filter:images since:2011-01-01 -#asteroid"
                }]
            }]
        }), this.after("initialize", function() {
            var e = a.default.render("search_operator_list", this.attr);
            this.$node.html(e), this.on("click", {
                tryButtonSelector: this.handleTryClick
            })
        }), this.handleTryClick = function() {
            (0, n.default)(document).trigger("uiCloseModal"), (0, n.default)(document).trigger("uiPerformSearch", {
                query: event.target.dataset.query
            }), (0, n.default)(document).trigger("scribeEvent", {
                terms: {
                    page: "main",
                    section: "search_tips",
                    element: "try",
                    action: "click"
                }
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = d(i(0)),
        n = i(5),
        r = d(i(589)),
        a = d(i(590)),
        o = d(i(2096)),
        c = d(i(8)),
        l = d(i(110)),
        u = d(i(19));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, n.component)(function() {
        this.attributes({
            screenName: null,
            dataAction: "[data-action]",
            socialProofSelector: ".js-social-proof",
            followFromSelector: ".js-action-follow",
            followStateSelector: ".prf-follow-status",
            closeEvent: "uiTwitterProfileClosing",
            numUsersInSocialProof: 3,
            isSocialProofAnimatingClass: "social-proof-animating"
        }), this.handleTwitterAccount = function(e, t) {
            if (t && t.account && t.screenName && t.screenName.toLowerCase() === this.screenName.toLowerCase()) {
                this.twitterUser = t;
                var i = c.default.render("twitter_profile", {
                    twitterProfile: {
                        preferredAccount: this.account.getUsername(),
                        profile: this.twitterUser,
                        displayOrderProfile: TD.controller.columnManager.DISPLAY_ORDER_PROFILE,
                        account: this.account,
                        showAccountMenu: !0,
                        hideFromAccountName: !0,
                        isSingleAccount: this.isSingleAccount
                    }
                });
                this.$node.html(i), this.on(this.attr.dataAction, "click", this.handleActionClick), this.twitterUser.isMe() || this.trigger(document, "uiNeedsUserProfileSocialProof", {
                    screenName: this.screenName
                });
                var s = {
                    account: this.account,
                    twitterUser: this.twitterUser,
                    closeEvent: this.attr.closeEvent
                };
                a.default.attachTo(this.select("followFromSelector"), s), r.default.attachTo(this.select("followStateSelector"), s)
            }
        }, this.handleTwitterUserError = function(e, t) {
            t.screenName.toLowerCase() === this.screenName.toLowerCase() && this.teardown()
        }, this.handleSocialProofData = function(e, t) {
            var i, s, n, r = this.select("socialProofSelector"),
                a = [],
                o = 0,
                l = [];
            if (t.users && t.users.length) {
                if (t.users.length > this.attr.numUsersInSocialProof)
                    for (o = t.users.length - this.attr.numUsersInSocialProof; a.length < this.attr.numUsersInSocialProof;) n = Math.floor(Math.random() * t.users.length), a.push(t.users.splice(n, 1)[0]);
                else a = t.users;
                a.forEach(function(e) {
                    l.push(c.default.render("text/social_proof_link", {
                        screenName: e.screen_name,
                        emojifiedName: u.default.cleanWithEmoji(e.name)
                    }))
                }), o > 0 && l.push(c.default.render("text/followers_you_follow_link", {
                    screenName: this.screenName
                })), l.length > 1 && (s = l.splice(l.length - 1, 1)), i = l.join(", "), r.removeClass("is-hidden"), r.html(c.default.render("twitter_profile_social_proof", {
                    followedByString: i,
                    others: s
                })), this.transitionExpand(r, this.attr.isSocialProofAnimatingClass)
            }
        }, this.handleActionClick = function(e) {
            var t = (0, s.default)(e.currentTarget),
                i = t.data("type"),
                n = TD.components.OpenColumnHome.URL_BASE + "/" + i,
                r = TD.util.maybeOpenClickExternally(e);
            r || (this.screenName && (n += "?screenName=" + this.screenName), o.default.publishToQueue(TD.components.OpenColumn.GO_EVENT, {
                data: n,
                history: {
                    type: "uiShowProfile",
                    target: document,
                    data: {
                        id: this.screenName
                    }
                }
            }), e.preventDefault(), e.stopPropagation())
        }, this.destroy = function(e) {
            e.stopPropagation(), this.teardown()
        }, this.before("teardown", function() {
            this.trigger(this.select("followStateSelector"), this.attr.closeEvent), this.trigger(this.select("followFromSelector"), this.attr.closeEvent)
        }), this.after("teardown", function() {
            this.$node.html("")
        }), this.handleSingleAccountStatus = function(e, t) {
            this.isSingleAccount = t.isSingleAccount
        }, this.handlePreferredAccount = function(e, t) {
            this.account = t.account
        }, this.after("initialize", function() {
            this.screenName = "" + this.attr.screenName, 0 === this.screenName.indexOf("@") && (this.screenName = this.screenName.substring(1)), this.on(document, "dataSingleAccountStatus", this.handleSingleAccountStatus), this.on(document, "dataPreferredAccount", this.handlePreferredAccount), this.trigger(document, "uiNeedsSingleAccountStatus"), this.on(document, "dataTwitterUser", this.handleTwitterAccount), this.on(document, "dataTwitterUserError", this.handleTwitterUserError), this.on(document, "dataUserProfileSocialProof", this.handleSocialProofData);
            var e = c.default.render("twitter_profile", {
                loading: !0
            });
            this.$node.html(e), this.trigger(document, "uiNeedsPreferredAccount"), this.trigger(document, "uiNeedsTwitterUser", {
                screenName: this.screenName
            })
        })
    }, l.default)
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = {
        publishToQueue: function(e, t) {
            TD.storage.notification.notify(e, t)
        },
        publish: function(e, t) {
            r.default.publish(e, t)
        },
        subscribe: function(e, t) {
            return r.default.subscribe(e, t)
        },
        unsubscribe: function(e) {
            r.default.unsubscribe(e)
        }
    };
    e.exports = a
}, function(e, t, i) {
    "use strict";
    var s = o(i(3)),
        n = o(i(8)),
        r = o(i(12)),
        a = i(23);

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            twitterUser: null,
            account: null,
            tweetId: void 0,
            conversationId: void 0,
            isGroupConversation: void 0,
            closeEvent: "uiReportMessageActionClose",
            spamButtonSelector: ".js-report-spam",
            abuseButtonSelector: ".js-mark-abusive"
        }), this.initialState({
            reportSource: function() {
                return this.attr.tweetId ? (0, s.default)("message") : (0, s.default)("conversation")
            },
            isFinished: !1
        }), this.after("initialize", function() {
            this.on("click", {
                spamButtonSelector: this.handleActionFactory("spam"),
                abuseButtonSelector: this.handleActionFactory("abuse")
            }), this.on(document, "dMReportError", this.handleReportError)
        }), this.handleManualDismiss = function() {
            this.trigger("uiShowReportMessageCancel")
        }, this.handleActionFactory = function(e) {
            return function(t) {
                t.preventDefault(), this.trigger("uiNeedsDMReport", {
                    account: this.attr.account,
                    dmId: this.attr.tweetId,
                    conversationId: this.attr.conversationId,
                    reportType: e,
                    blockUser: !1
                }), this.mergeState({
                    isFinished: !0
                })
            }.bind(this)
        }, this.handleReportError = function(e, t) {
            t.error && (this.trigger("uiShowReportMessageError"), (0, a.showErrorNotification)({
                message: (0, s.default)("Error: Unable to report {{reportSource}}", {
                    reportSource: this.state.reportSource
                })
            }), this.mergeState({
                isFinished: !1
            }))
        }, this.render = function() {
            var e = n.default.render("report_message_options", {
                reportSource: this.state.reportSource,
                isFinished: this.state.isFinished,
                screenName: this.attr.twitterUser.screenName,
                isGroupConversation: this.attr.isGroupConversation
            });
            this.$node.html(e)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = i(85),
        n = i(8),
        r = i(2099),
        a = i(1);
    e.exports = s.mixin(function() {
        this.attributes({
            account: null,
            twitterUser: null,
            tweetId: "",
            isMedia: !1
        }), this.after("initialize", function() {
            var e = n.render("report_flow", {
                url: r.getReportUrl({
                    reportedUserId: this.attr.twitterUser.id,
                    reportedTweetId: this.attr.tweetId,
                    isMedia: this.attr.isMedia
                })
            });
            this.$node.html(e), this.on(window, "message", this.handlePostMessage)
        }), this.handlePostMessage = function(e) {
            var t = a.get(e, ["originalEvent", "data", "type"]),
                i = a.get(e, ["originalEvent", "data", "action"]);
            "ReportAction" === t && this.triggerAction(i)
        }, this.triggerAction = function(e) {
            var t = {
                account: this.attr.account,
                twitterUser: this.attr.twitterUser
            };
            switch (e) {
                case "mute":
                    return this.trigger(document, "uiMuteAction", t);
                case "block":
                    return this.trigger(document, "uiBlockAction", t);
                case "unfollow":
                    return this.trigger(document, "uiUnfollowAction", t)
            }
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = i(69),
        n = {
            baseUrl: "https://twitter.com/i/safety/report_story",
            completeUrl: "https://twitter.com/i/safety/report_story_complete",
            getReportUrl: function(e) {
                return e.reportedTweetId ? n.getReportTweetUrl(e) : n.getReportUserUrl(e)
            },
            getReportUserUrl: function(e) {
                var t = new s(n.baseUrl);
                return t.setQuery({
                    source: "reportprofile",
                    initiated_in_app: !0,
                    reported_user_id: e.reportedUserId
                }), t.href()
            },
            getReportTweetUrl: function(e) {
                var t = new s(n.baseUrl);
                return t.setQuery({
                    source: "reporttweet",
                    initiated_in_app: !0,
                    reported_user_id: e.reportedUserId,
                    reported_tweet_id: e.reportedTweetId,
                    is_media: !!e.isMedia
                }), t.href()
            }
        };
    e.exports = n
}, function(e, t, i) {
    "use strict";
    var s = a(i(0)),
        n = a(i(2101)),
        r = a(i(12));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            userToFollow: null
        }), this.render = function() {
            var e = this,
                t = TD.storage.accountController.getAccountsForService("twitter"),
                i = document.createDocumentFragment();
            this.trigger(this.childTeardownEvent), t.forEach(function(t) {
                if (t.getUserID() !== e.attr.userToFollow.id) {
                    var r = s.default.createElement("div").addClass("js-component");
                    e.attachChild(n.default, r, {
                        userToFollow: e.attr.userToFollow,
                        account: t
                    }), i.appendChild(r[0])
                }
            }), this.$node.html(i)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = o(i(1)),
        n = o(i(0)),
        r = o(i(12)),
        a = o(i(8));

    function o(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            userToFollow: null,
            account: null,
            template: "actions/follow_from",
            followButtonSelector: ".js-follow-button",
            followButtonHolderSelector: ".js-action-follow"
        }), this.initialState({
            relationship: "stranger",
            stopSubsequentFollows: !1
        }), this.before("teardown", function() {
            s.default.each(this.subscriptions, function(e) {
                return n.default.unsubscribe(e)
            })
        }), this.componentDidInitialize = function() {
            var e = this;
            this.initialRender(), this._fetchFriendship().addErrback(function(e) {
                console.log("Unhandled Err in FollowFrom._fetchFriendship:", e)
            }), this.on("click", {
                followButtonSelector: this.handleClick.bind(this)
            });
            var t = this.attr.userToFollow.screenName;
            this.subscriptions = [n.default.subscribe("/user/" + t + "/block", function(t) {
                return e._handleBlock(t)
            }), n.default.subscribe("/user/" + t + "/blocked", function(t) {
                return e._handleBlock(t)
            })]
        }, this._handleBlock = function(e) {
            e.getKey() === this.attr.account.getKey() && this.mergeState({
                relationship: "blocked"
            })
        }, this.initialRender = function() {
            var e = TD.storage.accountController,
                t = 1 === e.getAccountsForService("twitter").length,
                i = {
                    account: this.attr.account,
                    isSingleAccount: t
                },
                s = a.default.render(this.attr.template, i);
            this.$node.html(s)
        }, this.render = function() {
            var e = this.select("followButtonHolderSelector");
            e.removeClass("s-thats-you s-not-following s-following s-pending s-blocking");
            var t = this.select("followButtonSelector");
            switch (t.removeClass("is-disabled"), this.state.relationship) {
                case "me":
                    e.addClass("s-thats-you");
                    break;
                case "blocked":
                    e.addClass("s-blocking");
                    break;
                case "pending":
                    e.addClass("s-pending"), t.addClass("is-disabled");
                    break;
                case "following":
                    e.addClass("s-following");
                    break;
                case "stranger":
                    e.addClass("s-not-following")
            }
        }, this._fetchFriendship = function() {
            if (this.attr.account.getUserID() === this.attr.userToFollow.id) return this.mergeState({
                relationship: "me"
            }), TD.core.defer.succeed();
            var e = TD.controller.clients.getClient(this.attr.account.getKey()),
                t = new TD.core.defer.Deferred;
            return e.showFriendship(this.attr.account.getUserID(), this.attr.userToFollow.id, null, t.callback.bind(t), t.errback.bind(t)), t.addCallbackWith(this, this._handleFriendshipResponse), t
        }, this._handleFriendshipResponse = function(e) {
            var t = e.relationship.source;
            !0 === t.blocking ? this.mergeState({
                relationship: "blocked"
            }) : !0 === t.following ? this.mergeState({
                relationship: "following"
            }) : t.following_requested && !t.following_received ? this.mergeState({
                relationship: "pending"
            }) : this.mergeState({
                relationship: "stranger"
            })
        }, this.handleClick = function(e) {
            var t = this;
            if (!this.state.stopSubsequentFollows) {
                var i = this.attr.account,
                    s = this.select("followButtonSelector");
                if (!s.hasClass("is-disabled")) {
                    switch (this.state.relationship) {
                        case "me":
                            TD.util.openURL("https://twitter.com/settings/profile");
                            break;
                        case "blocked":
                            this.attr.userToFollow.unblock(i, null, function() {
                                t.mergeState({
                                    relationship: "blocked"
                                })
                            }), this.mergeState({
                                relationship: "stranger"
                            });
                            break;
                        case "pending":
                        case "following":
                            this.attr.userToFollow.unfollow(i, null, function() {
                                t.mergeState({
                                    relationship: "following"
                                })
                            }), this.mergeState({
                                relationship: "stranger"
                            });
                            break;
                        case "stranger":
                            this.attr.userToFollow.follow(i, function(e) {
                                e.isProtected && t.mergeState({
                                    relationship: "pending"
                                })
                            }, function() {
                                t.mergeState({
                                    relationship: "stranger"
                                })
                            }), this.mergeState({
                                relationship: "following"
                            })
                    }
                    this.mergeState({
                        stopSubsequentFollows: !0
                    }), setTimeout(function() {
                        t.trigger("uiCloseModal")
                    }, 500)
                }
            }
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = d(i(84)),
        n = d(i(7)),
        r = d(i(3)),
        a = d(i(1)),
        o = d(i(0)),
        c = d(i(12)),
        l = d(i(8)),
        u = i(23);

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = c.default.mixin(function() {
        this.attributes({
            tweet: null,
            buttonStates: {
                favorited: "s-favorited",
                unfavorited: "s-not-favorited",
                protected: "s-protected"
            },
            accounts: function() {
                return TD.storage.accountController.getAccountsForService("twitter")
            }
        }), this.initialState({
            stopSubsequentLikes: !1
        }), this.componentDidInitialize = function() {
            this.initialRender(), this.setUpListeners()
        }, this.getButtonForAccount = function(e) {
            return this.$node.find('[data-account-key="' + e + '"]')
        }, this.setUpListeners = function() {
            var e = this,
                t = this.attr.accounts;
            a.default.each(t, function(t) {
                var i = t.getKey(),
                    s = e.getButtonForAccount(i);
                s.click(e.handleFavoriteButtonClick.bind(e, i)), e.on(document, "dataFavoriteState", function(t, s) {
                    return e.handleFavoriteState((0, n.default)({
                        currentAccountKey: i
                    }, s))
                }), e.on(document, "dataFavoriteStateError", function(t, s) {
                    return e.handleFavoriteStateError((0, n.default)({
                        currentAccountKey: i
                    }, s))
                }), e.on(document, "dataFavoriteError", function(t, s) {
                    return e.handleFavoriteError((0, n.default)({
                        currentAccountKey: i
                    }, s))
                }), e.trigger("uiNeedsFavoriteState", {
                    tweetId: e.attr.tweet.id,
                    accountKey: i
                })
            })
        }, this.handleFavoriteButtonClick = function(e, t) {
            var i = this;
            if (!this.state.stopSubsequentLikes) {
                var s = this.attr.buttonStates.favorited,
                    n = (0, o.default)(t.currentTarget),
                    r = n.is(":disabled") || n.hasClass("is-disabled"),
                    a = n.hasClass(s);
                if (!r) {
                    var c = a ? "uiUnfavoriteTweet" : "uiFavoriteTweet";
                    this.trigger(c, {
                        tweetId: this.attr.tweet.id,
                        accountKey: e
                    }), this.mergeState({
                        stopSubsequentLikes: !0
                    }), setTimeout(function() {
                        i.trigger("uiCloseModal")
                    }, 500)
                }
            }
        }, this.initialRender = function() {
            var e = this.attr.accounts,
                t = l.default.render("favorite_from_options", {
                    no_horiz_flow_container: !0,
                    accounts: e,
                    tweet: this.attr.tweet
                });
            this.$node.html(t)
        }, this.render = function() {}, this.updateButton = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                t = this.attr.buttonStates,
                i = (0, s.default)(t).join(" "),
                n = e.$button,
                r = e.tooltip,
                a = e.newState,
                o = e.disabled,
                c = t[a];
            n.removeClass(i).addClass(c).removeAttr("title").removeAttr("data-orig-title").prop("disabled", o), r && n.attr("title", r).attr("data-orig-title", r)
        }, this.handleFavoriteState = function(e) {
            if (e.tweetId === this.attr.tweet.id && e.accountKey === e.currentAccountKey) {
                var t = e.isFavorite ? "favorited" : "unfavorited",
                    i = this.getButtonForAccount(e.accountKey);
                this.updateButton({
                    newState: t,
                    $button: i
                })
            }
        }, this.handleFavoriteStateError = function(e) {
            if (e.request.tweetId === this.attr.tweet.id && e.request.accountKey === e.currentAccountKey) {
                var t = a.default.get(e, "error.responseJSON.errors[0].code");
                if (179 !== t)(0, u.showErrorNotification)({
                    message: (0, r.default)("Cannot retrieve favorite status")
                });
                else {
                    var i = this.getButtonForAccount(e.request.accountKey);
                    this.updateButton({
                        $button: i,
                        newState: "protected",
                        tooltip: (0, r.default)("You cannot favorite this protected Tweet"),
                        disabled: !0
                    })
                }
            }
        }, this.handleFavoriteError = function(e) {
            e.request.tweetId === this.attr.tweet.id && e.request.accountKey === e.currentAccountKey && (0, u.showErrorNotification)({
                message: (0, r.default)("Failed changing favorite status")
            })
        }, this.componentWillTeardown = function() {
            this.off(document, "dataFavoriteState", this.handleFavoriteState), this.off(document, "dataFavoriteStateError", this.handleFavoriteStateError), this.off(document, "dataFavoriteError", this.handleFavoriteError)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = i(188),
        n = i(19),
        r = c(i(1)),
        a = c(i(8)),
        o = c(i(12));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = o.default.mixin(function() {
        this.attributes({
            list: null,
            addUsersTemplate: "lists/member_import",
            addUsersButtonTemplate: "lists/add_users_to_list_button",
            membersTextareaSelector: ".js-multiple-users-input",
            addButtonContainerSelector: ".js-add-users-to-list-btn",
            addButtonSelector: ".js-add-multiple",
            backButtonSelector: ".js-dismiss-top-modal",
            maxUsers: 100,
            placeholderText: "@username \n@username \n@username \n..."
        }), this.initialState({
            canAddMembers: !1
        }), this.after("initialize", function() {
            this.$membersTextarea = this.select("membersTextareaSelector"), this.on("keyup keydown keypress paste", {
                membersTextareaSelector: this.handleTextAreaChange
            }), this.on("click", {
                addButtonSelector: this.handleAddMembers,
                backButtonSelector: this.openEditListModal
            })
        }), this.componentDidInitialize = function() {
            this.initialRender(), this.$addUsersButtonContainer = this.select("addButtonContainerSelector")
        }, this.handleTextAreaChange = (0, s.makeDOMMutator)(function() {
            var e = this.$membersTextarea.first().val().trim(),
                t = new RegExp("[^A-Za-z0-9_@]"),
                i = e.split(t).map(function(e) {
                    return e = e.trim(), (0, n.isLinkToTwitterItem)(e) && (e = (0, n.extractScreenNameFromPermalink)(e)), (0, n.deMentionify)(e)
                }).filter(Boolean).map(function(e) {
                    return {
                        screenName: e
                    }
                });
            this.validUsers = r.default.uniq(i, function(e) {
                return e.screenName
            });
            var s = Boolean(this.validUsers.length) && this.validUsers.length <= this.attr.maxUsers;
            this.mergeState({
                canAddMembers: s
            })
        }), this.handleAddMembers = function() {
            this.state.canAddMembers && this.trigger("uiShowEditListMembers", {
                list: this.attr.list,
                autoAddUsers: this.validUsers
            })
        }, this.openEditListModal = function() {
            this.trigger("uiShowEditListMembers", {
                list: this.attr.list
            })
        }, this.initialRender = function() {
            var e = a.default.render(this.attr.addUsersTemplate, {
                canAddMembers: this.state.canAddMembers,
                placeholderText: this.attr.placeholderText
            });
            this.$node.html(e)
        }, this.render = function() {
            var e = a.default.render(this.attr.addUsersButtonTemplate, {
                canAddMembers: this.state.canAddMembers
            });
            this.$addUsersButtonContainer.first().html(e)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = d(i(3)),
        n = d(i(8)),
        r = d(i(12)),
        a = i(19),
        o = d(a),
        c = i(23),
        l = d(i(1)),
        u = d(i(639));

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            list: null,
            members: null,
            copyUsersTemplate: "lists/member_export",
            membersTextareaSelector: ".js-copy-users-input",
            copyButtonSelector: ".js-copy-members",
            backButtonSelector: ".js-dismiss-top-modal"
        }), this.componentDidInitialize = function() {
            var e = this;
            this.on("click", {
                backButtonSelector: this.openEditListModal
            }), l.default.defer(function() {
                e.select("membersTextareaSelector").select()
            }), this.setupClipboard()
        }, this.setupClipboard = function() {
            var e = this;
            this.clipboard = new u.default(this.attr.copyButtonSelector, {
                target: function() {
                    return e.select("membersTextareaSelector").get(0)
                }
            }), this.clipboard.on("success", function() {
                (0, c.showNotification)({
                    message: (0, s.default)("List copied to clipboard")
                })
            }), this.clipboard.on("error", function(e) {
                (0, c.showErrorNotification)({
                    message: (0, s.default)("List could not be copied")
                })
            })
        }, this.openEditListModal = function() {
            this.trigger("uiShowEditListMembers", {
                list: this.attr.list
            })
        }, this.render = function() {
            var e = n.default.render(this.attr.copyUsersTemplate, {
                members: this.attr.members,
                name: o.default.cleanWithEmoji(this.attr.list.name),
                showCopyButton: !(0, a.isSafari)() || (0, a.getWebkitVersion)() > 602
            });
            this.$node.html(e)
        }, this.componentWillTeardown = function() {
            this.clipboard.destroy()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component,
        o = i(110),
        c = i(2106),
        l = i(614),
        u = i(2107);
    e.exports = a(function() {
        this.attributes({
            messageSelector: ".js-message-banner",
            applicationSelector: ".js-app",
            isAnimatingClass: "is-application-animating"
        }), this._onHidden = function() {
            this.trigger("uiMessageBannerContainerHidden")
        }, this.showAccessDeniedMessage = function(e, t) {
            var i;
            i = t.isLoginAccount ? this.getLoginAccountAccessDeniedMessageData(t) : this.getReauthorizeAccountMessageData(t), (0, r.default)(document).trigger("dataMessage", {
                message: i
            })
        }, this.removeAccessDeniedMessage = function() {
            (0, r.default)(document).trigger("dataMessageRemove", {
                id: this.getAccountSuspendedMessageId()
            }), (0, r.default)(document).trigger("dataMessageRemove", {
                id: this.getLoginAccountAccessDeniedMessageId()
            })
        }, this.showAccountSuspendedMessage = function(e, t) {
            var i = this.getAccountSuspendedMessageData(t);
            (0, r.default)(document).trigger("dataMessage", {
                message: i
            })
        }, this.handleMessageBannerResize = function() {
            this.transitionTop(this.$application, this.attr.isAnimatingClass, this.$message.outerHeight())
        }, this.handleHideMessageBannerContainer = function() {
            this.transitionTop(this.$application, this.attr.isAnimatingClass, 0, this._boundOnHiddenFn)
        }, this.after("initialize", function() {
            this.$application = this.select("applicationSelector"), this.$message = this.select("messageSelector"), this._boundOnHiddenFn = this._onHidden.bind(this), this.on(document, "uiHidingMessageBanner", this.handleHideMessageBannerContainer), this.on(document, "uiMessageBannerShown", this.handleMessageBannerResize), this.on(document, "uiMessageBannerResized", this.handleMessageBannerResize), this.on(document, "uiShowAccountAccessDeniedBanner", this.showAccessDeniedMessage), this.on(document, "uiHideAccountAccessDeniedBanner", this.removeAccessDeniedMessage), this.on(document, "dataTwitterAccountSuspended", this.showAccountSuspendedMessage)
        })
    }, o, c, l, u)
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    e.exports = function() {
        this.getReauthorizeAccountMessageData = function(e) {
            return {
                id: "expired-token-error",
                text: (0, r.default)("You can no longer access the @{{1}} account.", {
                    1: e.account.getUsername()
                }),
                colors: {
                    background: "#ea596e",
                    foreground: "white"
                },
                actions: [{
                    id: "no-button",
                    action: "trigger-event",
                    label: (0, r.default)("Remove columns"),
                    class: "Button--danger",
                    event: {
                        type: "uiAccountAction",
                        data: {
                            action: "remove",
                            accountKey: e.account.getKey()
                        }
                    }
                }, {
                    id: "keep-columns",
                    action: "trigger-event",
                    label: (0, r.default)("Keep columns"),
                    class: "Button--primary" + (TD.decider.get("enable_rewrite_columns") ? "" : " is-hidden"),
                    event: {
                        type: "uiAccountAction",
                        data: {
                            action: "rewriteColumns",
                            accountKey: e.account.getKey()
                        }
                    }
                }, {
                    id: "yes-button",
                    action: "trigger-event",
                    label: (0, r.default)("Enter account password"),
                    class: "Button--primary",
                    event: (e.account, {
                        type: "uiShowAccountSettings"
                    })
                }]
            }
        }
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    e.exports = function() {
        this.getAccountSuspendedMessageId = function() {
            return "expired-token-error"
        }, this.getAccountSuspendedMessageData = function(e) {
            return {
                id: this.getAccountSuspendedMessageId(),
                text: (0, r.default)("Your account @{{1}} is currently suspended.", {
                    1: e.account.getUsername()
                }),
                colors: {
                    background: "#b2d5ed",
                    foreground: "#555"
                },
                actions: [{
                    id: "yes-button",
                    action: "url-ext",
                    label: (0, r.default)("Visit Suspended Accounts Help page"),
                    url: "https://twitter.com/account/suspended_help"
                }]
            }
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = h(i(43)),
        n = h(i(3)),
        r = h(i(12)),
        a = h(i(20)),
        o = h(i(8)),
        c = i(23),
        l = i(361),
        u = i(36),
        d = h(i(1));

    function h(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            IMAGE_TYPES: ["jpg", "jpeg", "gif", "png"],
            VIDEO_TYPES: ["mp4"],
            template: "media/media_upload",
            uploadInputSelector: ".js-media-upload"
        }), this.initialState({
            files: [],
            handlingDragEvents: !1,
            dragStatus: null,
            hasScheduleVideo: !1,
            scheduledDate: null
        }), this.getDragStatuses = function() {
            return {
                WAITING: "waiting",
                DRAG_OK: "drag_ok",
                DRAG_ERROR: "drag_error"
            }
        }, this.getErrorMessages = function() {
            return {
                TOO_MANY_FILES_ERROR: (0, n.default)("You can't attach more than {{max}} images.", {
                    max: (0, l.getMaxAllowedFiles)()
                }),
                MAX_FILES_ALREADY_ADDED_ERROR: (0, n.default)("You can't attach more than {{max}} images.", {
                    max: (0, l.getMaxAllowedFiles)()
                }),
                INCORRECT_FILETYPE_ERROR: (0, n.default)("One selected file is not an image."),
                INVALID_FILESIZE_ERROR: (0, n.default)("One selected file is greater than the {{max}}MB limit.", {
                    max: (0, l.getMaxAllowedSize)()
                }),
                INVALID_GIF_FILESIZE_ERROR: (0, n.default)("One selected GIF is greater than the {{max}}MB limit.", {
                    max: (0, l.getMaxAllowedGifSize)()
                }),
                INVALID_VIDEO_FILESIZE_ERROR: (0, n.default)("One selected video is greater than the {{max}}MB limit.", {
                    max: (0, l.getMaxAllowedVideoSize)()
                }),
                GIF_ERROR: (0, n.default)("You can't upload a GIF with other images."),
                VIDEO_ERROR: (0, n.default)("You can only include one video in a Tweet."),
                MULTIPLE_VIDEO_ERROR: (0, n.default)("You can't Tweet videos and images at the same time.")
            }
        }, this.validateFile = function(e) {
            var t = this.getErrorMessages(),
                i = (0, l.getMaxAllowedFiles)(),
                s = (0, l.getFileType)(e),
                n = e.size,
                r = {
                    success: !0
                },
                a = !this.state.hasScheduleVideo && this.state.scheduledDate;
            return this.state.files.length >= i ? r.error = t.MAX_FILES_ALREADY_ADDED_ERROR : d.default.include(this.ALLOWED_MEDIA_TYPES, s) ? (0, l.isGif)(e) && n > (0, l.getMaxAllowedGifSize)({
                bytes: !0
            }) ? r.error = t.INVALID_GIF_FILESIZE_ERROR : (0, l.isVideo)(e) && n > (0, l.getMaxAllowedVideoSize)({
                bytes: !0
            }) ? r.error = t.INVALID_VIDEO_FILESIZE_ERROR : !(0, l.isGif)(e) && !(0, l.isVideo)(e) && n > (0, l.getMaxAllowedSize)({
                bytes: !0
            }) ? r.error = t.INVALID_FILESIZE_ERROR : (0, l.isVideo)(e) && ("message" === this.tweetType || a) && (r.error = t.INCORRECT_FILETYPE_ERROR) : r.error = t.INCORRECT_FILETYPE_ERROR, r.error && (r.success = !1), r
        }, this.validateFiles = function(e) {
            var t = this,
                i = this.validateStandAloneGIF(e),
                s = this.validateStandAloneVideo(e),
                n = this.validateFileCount(e.length);
            if (!i.success) return i;
            if (!s.success) return s;
            if (!n.success) return n;
            var r = null;
            return d.default.each(e, function(e) {
                var i = t.validateFile(e);
                i.success || (r = i)
            }), r || {
                success: !0
            }
        }, this.validateFileCount = function(e) {
            var t = this.getErrorMessages(),
                i = (0, l.getMaxAllowedFiles)(),
                s = {
                    success: !0
                },
                n = this.state.files.length;
            return e > i ? s.error = t.TOO_MANY_FILES_ERROR : n > 0 && n + e > i && (s.error = t.MAX_FILES_ALREADY_ADDED_ERROR), s.error && (s.success = !1), s
        }, this.validateStandAloneVideo = function(e) {
            var t = d.default.map(this.state.files).concat(d.default.map(e)),
                i = this.getErrorMessages();
            if (t.length > 1) {
                if (t.every(l.isVideo)) return {
                    success: !1,
                    error: i.MULTIPLE_VIDEO_ERROR
                };
                if (t.some(l.isVideo)) return {
                    success: !1,
                    error: i.VIDEO_ERROR
                }
            }
            return {
                success: !0
            }
        }, this.validateStandAloneGIF = function(e) {
            var t = d.default.map(this.state.files).concat(d.default.map(e)),
                i = this.getErrorMessages();
            return t.length > 1 && t.some(l.isGif) ? {
                success: !1,
                error: i.GIF_ERROR
            } : {
                success: !0
            }
        }, this.handleResetImageUpload = function(e) {
            this.mergeState({
                files: []
            })
        }, this.addFilesToUpload = function(e) {
            if (e) {
                var t = this.validateFiles(e);
                if (!t.success) return void(0, c.showErrorNotification)({
                    message: t.error
                });
                this.trigger("uiFilesAdded", {
                    files: e
                }), this.mergeState({
                    files: e
                })
            }
        }, this.updateFilesOncePreviewed = function(e, t) {
            t && t.files && this.mergeState({
                files: t.files
            })
        }, this.handleDragEnterEvent = function(e) {
            var t = this,
                i = this.getDragStatuses();
            if (this.currentDragElement) this.currentDragElement = e.target;
            else if (this.currentDragElement = e.target, this.mergeState({
                    dragStatus: i.DRAG_OK
                }), e.originalEvent.dataTransfer.items) {
                e.preventDefault();
                var s = e.originalEvent.dataTransfer.items,
                    n = this.validateFileCount(s.length);
                n.success ? d.default.each(s, function(e) {
                    if ("file" === e.kind && "application/x-moz-file" !== e.type) {
                        var s = t.validateFile(e);
                        if (!s.success) return t.mergeState({
                            dragStatus: i.DRAG_ERROR
                        }), void(0, c.showErrorNotification)({
                            message: s.error
                        })
                    }
                }) : (this.mergeState({
                    dragStatus: i.DRAG_ERROR
                }), (0, c.showErrorNotification)({
                    message: n.error
                }))
            }
        }, this.handleDragLeaveEvent = function(e) {
            var t = this.getDragStatuses();
            this.currentDragElement === e.target && (this.currentDragElement = null, this.mergeState({
                dragStatus: t.WAITING
            }))
        }, this.handleDropEvent = function(e) {
            var t = this.getDragStatuses();
            if (e.preventDefault(), this.state.dragStatus === t.DRAG_OK) {
                var i = e.originalEvent.dataTransfer.files;
                this.addFilesToUpload(i)
            }
            this.mergeState({
                dragStatus: t.WAITING
            }), this.currentDragElement = null
        }, this.cancel = function(e) {
            return e.preventDefault(), !1
        }, this.handleComposeUpdatedTweetType = function(e, t) {
            this.tweetType = t.type
        }, this.handleComposeUpdatedScheduledDate = function(e, t) {
            this.mergeState({
                scheduledDate: t.scheduledDate
            })
        }, this.handleComposeAddImageClick = function() {
            this.$uploadInputSelector.click()
        }, this.handleFileUploadChange = function(e) {
            this.addFilesToUpload(e.target.files), this.$uploadInputSelector.val("")
        }, this.whenEnabled = function(e) {
            return function() {
                if (!this.state.handlingDragEvents) return e.apply(this, [].slice.call(arguments))
            }
        }, this.onDragStart = function() {
            this.mergeState({
                handlingDragEvents: !0
            })
        }, this.onDragEnd = function() {
            this.mergeState({
                handlingDragEvents: !1
            })
        }, this.getAcceptedMediaForInput = function() {
            var e = this.attr,
                t = e.IMAGE_TYPES,
                i = e.VIDEO_TYPES,
                s = t.concat(i);
            return s.map(function(e) {
                return "." + e
            }).join(",")
        }, this.initialRender = function() {
            var e = {
                    acceptedMedia: this.getAcceptedMediaForInput()
                },
                t = o.default.render(this.attr.template, e);
            this.$node.html(t)
        }, this.componentDidInitialize = function() {
            var e = this;
            this.ALLOWED_MEDIA_TYPES = [].concat((0, s.default)(this.attr.IMAGE_TYPES), (0, s.default)(this.attr.VIDEO_TYPES)), this.initialRender(), this.$uploadInputSelector = this.select("uploadInputSelector"), this.on(document, "uiResetImageUpload", this.handleResetImageUpload), this.on(document, "uiComposeAddImageClick", this.handleComposeAddImageClick), this.on(document, "uiComposeUpdatedTweetType", this.handleComposeUpdatedTweetType), this.on(document, "uiComposeUpdatedScheduledDate", this.handleComposeUpdatedScheduledDate), this.on(document, "dragstart", this.onDragStart), this.on(document, "dragend", this.onDragEnd), this.on(document, "dragenter", this.whenEnabled(this.handleDragEnterEvent)), this.on(document, "dragleave", this.whenEnabled(this.handleDragLeaveEvent)), this.on(document, "drop", this.whenEnabled(this.handleDropEvent)), this.on(document, "dragover", this.whenEnabled(this.cancel)), this.on(document, "uiComposeImageAdded", this.updateFilesOncePreviewed), this.$uploadInputSelector.on("change", this.handleFileUploadChange.bind(this)), this.observe(u.tweetdeckBeta$).subscribe(function(t) {
                e.mergeState({
                    hasScheduleVideo: t
                })
            })
        }
    }, a.default)
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(8));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).component,
        o = i(53),
        c = i(2110);
    e.exports = a(function() {
        this.attributes({
            chromeTemplate: "startflow_wrapper",
            startflowContentSelector: ".js-startflow-content",
            startflowChromeSelector: ".js-startflow-chrome",
            externalLinkSelector: 'a[target="_blank"]'
        }), this.after("initialize", function() {
            this.on(document, "uiLoginShowLoginForm", this.handleStartflow), this.on("click", {
                externalLinkSelector: this.openExternalLink
            })
        }), this.before("teardown", function() {
            this.$node.empty().hide()
        }), this.handleStartflow = function(e, t) {
            this.prepareStartflowUi(), this.resetStartflowUi(), this.attachChild(c, this.attr.startflowContentSelector, {
                errorMsg: t.errorMsg
            })
        }, this.prepareStartflowUi = s.default.once(function() {
            var e = n.default.render(this.attr.chromeTemplate, {
                version: TD.util.getFullVersionString(),
                withLoading: !0
            });
            this.$node.html(e)
        }), this.resetStartflowUi = function() {
            this.select("startflowChromeSelector").removeClass("is-hidden"), this.trigger(this.childTeardownEvent), this.select("startflowContentSelector").empty()
        }, this.openExternalLink = function(e, t) {
            e.preventDefault(), TD.util.openURL(t.el.href)
        }
    }, o, o.withBoundLifecycle)
}, function(e, t, i) {
    "use strict";
    var s, n = i(8),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component,
        o = i(53),
        c = i(616);
    e.exports = a(function() {
        this.attributes({
            formIsRendered: !1,
            errorMsg: "",
            layoutTemplate: "login/login_form",
            loginContainerSelector: ".js-signin-ui",
            teardownEvent: "uiGeneralLoginTeardown"
        }), this.after("initialize", function() {
            this.renderLayout(), this.initialRender()
        }), this.initialRender = function() {
            this.attr.formIsRendered || (this.attr.formIsRendered = !0, this.displayLoginForm())
        }, this.renderLayout = function() {
            var e = r.default.render(this.attr.layoutTemplate, {
                screenshot: TD.assets.get("td_screenshot", {
                    resolution: TD.util.isRetina() ? "2x" : "1x"
                })
            });
            this.$node.html(e)
        }, this.displayLoginForm = function() {
            this.attr.formIsRendered = !0, this.trigger(this.attr.teardownEvent);
            var e = this.select("loginContainerSelector").empty();
            e.html(r.default.render("login/twitter_account_login_form", {
                twitterLoginUrl: c.getLoginUrl(),
                message: this.attr.errorMsg
            })), this.trigger("uiLoginFormImpression")
        }, this.after("teardown", function() {
            this.trigger(this.attr.teardownEvent)
        })
    }, o)
}, function(e, t, i) {
    "use strict";
    var s = a(i(1)),
        n = a(i(0)),
        r = a(i(17));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = i(5).component,
        c = i(247),
        l = i(110),
        u = i(641),
        d = i(8);
    e.exports = o(function() {
        var e = !1,
            t = null,
            i = null,
            a = null;
        this.attributes({
            templateName: "menus/column_nav_menu",
            contentSelector: ".js-column-nav-list",
            dragAndDropContainerSelector: ".js-int-scroller",
            addColumnButtonSelector: ".js-header-add-column",
            headerActionSelector: ".js-header-action",
            listItemSelector: ".js-column-nav-menu-item",
            dragHandleSelector: ".js-drag-handle",
            columnNavScrollerSelector: ".js-column-nav-scroller",
            animateInClass: "anim-rotate-in",
            animateOutClass: "anim-rotate-out",
            isNewClass: "is-new",
            overflowClass: "column-navigator-overflow",
            touchEvents: "touchstart touchmove touchend touchcancel",
            listOrientation: "vertical",
            initScrollbarsDelay: 300,
            showScrollbarsThrottle: 100
        }), this.after("initialize", function() {
            this.$columnNavScroller = (0, n.default)(".js-column-nav-scroller"), this.renderColumnNavigation(), this.on(document, "dataColumnsLoaded", this.handleDataColumnsLoaded), this.on(document, "uiMainWindowResized", this.handleUiMainWindowResized), n.default.subscribe("/storage/client/column_order_changed", this.handleColumnsChanged.bind(this)), n.default.subscribe("/storage/client/change", this.handleColumnsChanged.bind(this)), this.on(document, "uiReadStateChange", this.handleReadStateChange), this.on(document, "uiMessageUnreadCount", this.handleMessageCount), this.on(document, "dataSettings", this.handleDataSettings), this.on(document, "uiColumnTitleRefreshed", this.handleColumnTitleRefreshed), this.on("click", {
                headerActionSelector: this.handleClick
            }), this.trigger("uiNeedsSettings"), TD.util.isTouchDevice() && this.on(this.$columnNavScroller, this.attr.touchEvents, this.handleTouch), this.throttledShowScrollbars = s.default.throttle(this.showScrollbars.bind(this), this.attr.showScrollbarsThrottle), this.debouncedInitScrollbars = s.default.debounce(this.initScrollbars.bind(this), this.attr.initScrollbarsDelay), this.debouncedInitScrollbars(), this.setupDragDrop({
                type: "tweet",
                indicateDrop: !1,
                dragover: this.delegateDragOver,
                drop: function(e, t) {
                    var i = (0, n.default)(e.target).closest(".js-droptarget", this.$node);
                    i.length && this.trigger("uiAddOrMoveTweetToCustomTimeline", {
                        id: i.data("customtimeline-id"),
                        tweetId: (0, n.default)(t.el).attr("data-tweet-id"),
                        account: i.data("customtimeline-account")
                    })
                }
            })
        }), this.delegateDragOver = function(e) {
            var t, i = (0, n.default)(e.target);
            if ((t = i.is(".js-droptarget") ? i : i.closest(".js-droptarget", this.$node)).length) {
                if (e.preventDefault(), this.$flyover) {
                    if (this.flyoverFor === t[0]) return;
                    this.destroyFlyover()
                }
                this.showFlyoverFor(t[0]), this.flyoverFor = t[0]
            } else this.destroyFlyover()
        }, this.handleDataColumnsLoaded = function() {
            this.renderColumnNavigation()
        }, this.handleColumnsChanged = function() {
            this.debouncedInitScrollbars()
        }, this.renderColumnNavigation = function() {
            var e = this,
                t = TD.controller.columnManager.getAllOrdered(),
                i = this.select("listItemSelector").map(function(e, t) {
                    return t.getAttribute("data-column")
                }),
                a = i.length !== t.length,
                o = s.default.map(t, function(t, s) {
                    var n, o, c, l, u, d = t.model.getKey(),
                        h = TD.ui.columns.getColumnElementByKey(d);
                    return i[s] !== d && (a = !0), r.default.isOwnCustomTimeline(t) && (n = t.getCustomTimelineFeed(), o = n && n.getMetadata(), c = o && o.id, l = n && n.getAccountKey()), r.default.isMessageColumn(t) && (u = t.unreadMessageCount()), {
                        key: d,
                        title: r.default.getColumnTitleHTML(t),
                        iconclass: r.default.getColumnIconClassByColumn(t),
                        isNew: h.hasClass(e.attr.isNewClass),
                        customTimelineId: c,
                        customTimelineAccount: l,
                        isMessageColumn: r.default.isMessageColumn(t),
                        unreadCount: "0" === u ? null : u
                    }
                });
            if (a) {
                var c = d.render(this.attr.templateName, {
                    columns: o
                });
                this.$node.html(c), this.$content = this.select("contentSelector"), this.$addColumnButton = this.select("addColumnButtonSelector"), this.select("headerActionSelector").on("mouseover", this.handleListItemMouseover.bind(this)).on("mouseout", this.handleListItemMouseout.bind(this)), this.resizeColumnNavigation(), this.initialiseDragDrop()
            }
            var l = (0, n.default)(".js-column-nav-list a").find(":hover");
            l.length || this.destroyFlyover()
        }, this.resizeColumnNavigation = function() {
            this.setNormalNavbar();
            var e = this.$node.height();
            this.$node && e && this.$content.outerHeight() > e && this.setOverflowNavbar()
        }, this.setNormalNavbar = function() {
            (0, n.default)(document).trigger("uiColumnNavSizeNormal"), this.$columnNavScroller.removeClass(this.attr.overflowClass), this.$addColumnButton.show()
        }, this.setOverflowNavbar = function() {
            (0, n.default)(document).trigger("uiColumnNavSizeOverflow"), this.$columnNavScroller.addClass(this.attr.overflowClass), this.$addColumnButton.hide()
        }, this.handleUiMainWindowResized = function() {
            this.resizeColumnNavigation(), this.throttledShowScrollbars()
        }, this.handleClick = function(t) {
            if (!TD.util.isTouchDevice() || !e) {
                var i = (0, n.default)(t.target).closest("a[data-action]"),
                    s = i.data("action"),
                    r = i.data("column");
                switch (s) {
                    case "jumpto":
                        TD.controller.columnManager.showColumn(r), TD.controller.stats.navbarJumpToColumn()
                }
                this.trigger(TD.components.BaseModal.CLOSE_EVENT)
            }
        }, this.handleDrop = function(e) {
            var t = [],
                i = (0, n.default)(e.target).attr("data-column");
            this.trigger("uiColumnMoving", {
                columnKey: i
            }), this.select("listItemSelector").each(function() {
                t.push((0, n.default)(this).attr("data-column"))
            }), TD.storage.clientController.client.setColumnOrder(t), TD.controller.stats.navbarReorderColumns()
        }, this.handleDrag = function(e, t) {
            this.repositionFlyover((0, n.default)(e.target))
        }, this.handleDropped = function(e, t) {
            this.repositionFlyover((0, n.default)(e.target))
        }, this.initialiseDragDrop = function() {
            this.select("dragAndDropContainerSelector").dragdroplist({
                handle: this.attr.dragHandleSelector,
                orientation: this.attr.listOrientation,
                selector: this.attr.listItemSelector,
                $boundary: this.$node
            }).on("drop.dragdroplist", this.handleDrop.bind(this)).on("drag.draggable", this.handleDrag.bind(this)).on("dropped.dragdroplist", this.handleDropped.bind(this))
        }, this.getColumnItem = function(e) {
            return this.$node.find(".js-column-nav-menu-item[data-column=" + e + "]")
        }, this.handleReadStateChange = function(e, t) {
            var i = this.getColumnItem(t.columnKey),
                s = i.find(".js-unread-count");
            0 === s.length && i.toggleClass(this.attr.isNewClass, !t.read)
        }, this.handleMessageCount = function(e, t) {
            var i = this.getColumnItem(t.columnKey),
                s = i.find(".js-unread-count"),
                n = s.text() || "0",
                r = "0" === n && "0" !== t.count,
                a = "0" !== n && "0" === t.count;
            s.text(t.count), r && (this.stopAnimation(s, this.attr.animateOutClass), s.addClass("is-visible"), this.addAnimateClass(s, this.attr.animateInClass)), a && (this.stopAnimation(s, this.attr.animateInClass), this.addAnimateClass(s, this.attr.animateOutClass, function() {
                s.removeClass("is-visible")
            }))
        }, this.showFlyoverFor = function(e) {
            var t = (0, n.default)(e);
            if (this.isNavbarCollapsed && !TD.util.isTouchDevice()) {
                var i, s, a = t.data("column");
                a && (i = TD.controller.columnManager.get(a), s = {
                    content: r.default.getColumnTitleHTML(i)
                }), this.isDragging() || this.renderFlyover(t, s)
            }
        }, this.handleListItemMouseover = function(e) {
            this.showFlyoverFor(e.currentTarget)
        }, this.handleListItemMouseout = function(e) {
            this.isDragging() || this.destroyFlyover()
        }, this.isDragging = function() {
            return this.$node.find(".draggable-dragging").length > 0
        }, this.handleDataSettings = function(e, t) {
            this.isNavbarCollapsed = Boolean("condensed" === t.navbarWidth), this.destroyFlyover()
        }, this.handleDataColumnStateUpdated = function(e, t) {
            var i = this.$node.find(".js-column-nav-menu-item[data-column=" + t.columnKey + "]");
            t.unread ? i.addClass(this.attr.isNewClass) : i.removeClass(this.attr.isNewClass)
        }, this.handleColumnTitleRefreshed = function(e, t) {
            var i = this.$node.find(".js-column-nav-menu-item[data-column=" + t.columnKey + "] .js-column-title"),
                s = TD.controller.columnManager.get(t.columnKey),
                n = r.default.getColumnTitleHTML(s);
            i.html(n)
        }, this.initScrollbars = function() {
            var e = this.$columnNavScroller.data("antiscroll");
            e ? e.refresh() : this.$columnNavScroller.antiscroll({
                showOnMouseOver: !1,
                position: "left"
            })
        }, this.showScrollbars = function() {
            var e = this.$columnNavScroller.data("antiscroll");
            e ? (e.refresh(), e.vertical && e.vertical.show()) : this.initScrollbars()
        }, this.handleTouch = function(s) {
            var r = (0, n.default)(s.target);
            if (0 !== r.closest(".js-drag-handle").length) {
                var o = null,
                    c = s.originalEvent,
                    l = c.changedTouches[0],
                    u = {
                        x: l.pageX,
                        y: l.pageY
                    },
                    d = (new Date).getTime();
                switch (c.type) {
                    case "touchstart":
                        e = !1, t = d, i = u, a = 0;
                        break;
                    case "touchmove":
                        var h = this.countDistance(u, i);
                        if (h > a && (a = h), d < t + 300) break;
                        !e && a < 50 ? (e = !0, o = "mousedown") : e && (o = "mousemove");
                        break;
                    case "touchend":
                        e && (o = "mouseup")
                }
                o && this.simulateMouseEvent(o, c)
            }
        }, this.simulateMouseEvent = function(e, t) {
            var i = t.changedTouches[0],
                s = document.createEvent("MouseEvent");
            s.initMouseEvent(e, !0, !0, window, 1, i.screenX, i.screenY, i.clientX, i.clientY, !1, !1, !1, !1, 0, null), i.target.dispatchEvent(s), t.preventDefault()
        }, this.countDistance = function(e, t) {
            if (!e || !t) return 0;
            var i = Math.abs(e.x - t.x),
                s = Math.abs(e.y - t.y);
            return Math.sqrt(i * i + s * s)
        }
    }, c, l, u)
}, function(e, t, i) {
    "use strict";
    var s, n = i(17),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.attributes({
            isMovingClass: "is-moving",
            isMovingSelector: ".is-moving",
            appColumnsContainerSelector: ".js-app-columns-container",
            columnsContainerSelector: ".js-app-columns",
            columnStateDetailViewClass: "js-column-state-detail-view",
            columnStateSocialProofClass: "js-column-state-social-proof",
            columnSelector: ".js-app-columns .js-column",
            scrollContainerSelector: ".js-column-scroller",
            columnDetailScrollerSelector: ".js-detail-container",
            columnOptionsSelector: ".js-column-options",
            columnOptionsContainerSelector: ".js-column-options-container",
            columnHeaderSelector: ".js-column-header",
            columnUnreadCountSelector: ".js-column-header .js-unread-count",
            columnContentSelector: ".js-column-content"
        }), this.after("initialize", function() {
            this.on(document, "uiColumnMoving", this.handleMovingColumn), this.on(document, "dataColumnOrder", this.handleColumnOrder), this.$columnsContainer = this.select("columnsContainerSelector")
        }), this.handleMovingColumn = function(e, t) {
            r.default.getColumnElementByKey(t.columnKey).addClass(this.attr.isMovingClass)
        }, this.isColumnOffScreen = function(e) {
            var t = e.position().left,
                i = this.getOriginalWidth(e);
            return t + i < 0 || t + i > this.$node.width()
        }, this.storeOriginalWidth = function(e) {
            var t = e.data("originalWidth");
            void 0 === t && (t = parseInt(e.css("width"), 10)), e.data("originalWidth", t)
        }, this.getOriginalWidth = function(e) {
            return e.data("originalWidth") || parseInt(e.css("width"), 10)
        }, this.moveColumnInstantly = function(e, t, i, s) {
            i.length > 0 && i.attr("data-column") !== s.newOrder[s.newIndex + 1] && (s.detached[i.attr("data-column")] = i.detach()), e ? t.insertAfter(e) : this.$columnsContainer.prepend(t)
        }, this.moveColumnToNewIndex = function(e, t) {
            var i, s, n = e.newOrder[e.newIndex],
                a = e.detached[n] || r.default.getColumnElementByKey(n),
                o = a.index(),
                c = function() {
                    a.removeClass(this.attr.isMovingClass), t = a, delete e.detached[n]
                }.bind(this);
            e.newOrder.length >= e.newIndex ? (i = r.default.getColumnElementByKey(e.newOrder[e.newIndex + 1]), s = i.index()) : (i = !1, s = -1), e.newIndex < e.newOrder.length && o !== s && (a.hasClass(this.attr.isMovingClass) ? (this.storeOriginalWidth(a), this.moveColumnInstantly(t, a, i, e), this.isColumnOffScreen(a) ? (a.one("uiColumnScrolled", function() {
                c(), e.newIndex += 1, this.moveColumnToNewIndex(e, t)
            }.bind(this)), a.trigger("uiColumnsScrollColumnToCenter", {
                columnKey: a.attr("data-column")
            })) : (TD.ui.columns.focusColumn(a.attr("data-column"), TD.ui.columns.COLUMN_GLOW_DURATION), c(), e.newIndex += 1, this.moveColumnToNewIndex(e, t))) : (t = a, e.newIndex += 1, this.moveColumnToNewIndex(e, t)))
        }, this.handleColumnOrder = function(e, t) {
            var i = {},
                s = null,
                n = this.select("columnSelector").filter(this.attr.isMovingSelector);
            n.length > 0 ? this.moveColumnToNewIndex({
                newIndex: 0,
                newOrder: t.columnOrder,
                detached: i
            }) : t.columnOrder.forEach(function(e, n) {
                var a = i[e] || r.default.getColumnElementByKey(e),
                    o = this.select("columnSelector").eq(n);
                o[0] !== a[0] && (t.columnOrder.length > n + 1 && o.length > 0 && o.attr("data-column") !== t.columnOrder[n + 1] && (i[o.attr("data-column")] = o.detach()), 0 === n ? a.prependTo(this.$columnsContainer) : a.insertAfter(s), delete i[e]), s = a
            }, this)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = l(i(3)),
        n = l(i(0)),
        r = i(5),
        a = l(i(2114)),
        o = i(58),
        c = l(i(17));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, r.component)(function() {
        this.attributes({
            searchInputClassName: "js-app-search-input",
            searchInPopoverTemplate: "search/search_in_popover",
            isHiddenClass: null,
            appSearchSourceId: null,
            searchPopoverSourceId: null,
            typeaheadContainer: ".js-typeahead-dropdown",
            searchResultsContainer: ".js-search-results-container"
        }), this.after("initialize", function() {
            this.renderInPopover(this.attr.searchInPopoverTemplate, {
                searchInputClassName: this.attr.searchInputClassName,
                searchInputTitle: (0, s.default)("Search"),
                searchInputPlaceholder: (0, s.default)("Search"),
                isTouchColumnOptions: c.default.isTouchColumnOptions()
            }, {
                defaultHeight: "auto"
            }), this.$searchResultsContainer = this.select("searchResultsContainer"), this.$typeaheadContainer = this.select("typeaheadContainer"), this.searchData = null, this.on("uiTypeaheadItemSelected", this.handleTypeaheadItemSelect), this.on("uiTypeaheadNoItemSelected", this.handleTypeaheadNoItemSelected), this.on("uiTypeaheadSubmitQuery", this.handleTypeaheadSubmitQuery), this.on("uiTypeaheadSuggestions", this.handleTypeaheadSuggestions), this.on("uiTypeaheadNoSuggestions", this.handleTypeaheadNoSuggestions), this.on("uiTypeaheadRenderResults", this.handleTypeaheadRenderResults);
            var e = this.searchInputHandlerFactory.bind(this);
            this.on(document, "uiSearchInputSubmit", this.handleSearchInputSubmit), this.on(document, "uiSearchInputEscaped", this.handleSearchInputEscaped), this.on(document, "uiSearchInputFocus", this.handleSearchInputFocus), this.on(document, "uiSearchInputChanged", this.handleSearchInputChanged), this.on(document, "uiSearchInputTab", e("uiTypeaheadInputTab")), this.on(document, "uiSearchInputLeft", e("uiTypeaheadInputLeft")), this.on(document, "uiSearchInputRight", e("uiTypeaheadInputRight")), this.on(document, "uiSearchInputMoveUp", e("uiTypeaheadInputMoveUp")), this.on(document, "uiSearchInputMoveDown", e("uiTypeaheadInputMoveDown")), this.on("uiPopoverShown", this.handlePopoverShown), this.on("uiPopoverHiding", this.handlePopoverHiding), this.on("uiPopoverHidden", this.handlePopoverHidden), this.hasTypeaheadResults = !0, this.around("hidePopover", function(e, t) {
                !1 !== t && this.$input && this.$input.blur(), this.trigger("uiSearchResultsHidden"), e.apply(this)
            })
        }), this.handlePopoverShown = function(e, t) {
            this.$input.addClass("is-focused"), this.trigger("uiSearchInPopoverShown")
        }, this.handlePopoverHiding = function(e, t) {
            this.defaultHeight = "auto", this.$searchResultsContainer.addClass("is-hidden"), this.$typeaheadContainer.removeClass("is-hidden")
        }, this.handlePopoverHidden = function(e, t) {
            this.$input.removeClass("is-focused"), this.trigger("uiSearchInPopoverHidden")
        }, this.handleSearchInputFocus = function(e, t) {
            this.isCorrectSource(t.source) && (this.$input = (0, n.default)(e.target), this.isPopoverVisible() || TD.controller.stats.searchboxFocus(), this.isPopoverEmpty() || this.showPopover(), this.trigger("uiFixedHeaderChangedPosition"), this.$typeaheadContainer.hasClass(this.attr.isHiddenClass) || (this.trigger("uiTypeaheadInputFocus", t), this.defaultHeight = "auto"))
        }, this.searchInputHandlerFactory = function(e) {
            return function(t, i) {
                this.isCorrectSource(i.source) && !this.$typeaheadContainer.hasClass(this.attr.isHiddenClass) && this.trigger(e, i)
            }.bind(this)
        }, this.handleSearchInputChanged = function(e, t) {
            this.isCorrectSource(t.source) && (this.$input = (0, n.default)(e.target), this.isPopoverVisible() || this.showPopover(), this.defaultHeight = "auto", this.$searchResultsContainer.addClass("is-hidden"), this.$typeaheadContainer.removeClass("is-hidden"), this.trigger("uiTypeaheadInputChanged", t))
        }, this.isCorrectSource = function(e) {
            return e === this.attr.appSearchSourceId || e === this.attr.searchPopoverSourceId
        }, this.handleSearchInputEscaped = function(e, t) {
            this.isCorrectSource(t.source) && (this.trigger("uiTypeaheadInputBlur"), this.hidePopover())
        }, this.handleSearchInputSubmit = function(e, t) {
            var i;
            this.isCorrectSource(t.source) && (this.searchData = t, twttrTxt.isValidList(t.query) ? (i = t.query.split("/"), TD.ui.openColumn.showList(i[0].substr(1), i[1]), this.hidePopover()) : (this.trigger("uiTypeaheadInputSubmit", t), TD.controller.stats.searchboxPerformSearch(t.query)))
        }, this.handleTypeaheadNoItemSelected = function() {
            this.searchData && this.performSearch(this.searchData)
        }, this.handleTypeaheadSubmitQuery = function(e, t) {
            var i;
            if (twttrTxt.isValidList(t.query)) return i = t.query.split("/"), TD.ui.openColumn.showList(i[0].substr(1), i[1]), void this.hidePopover()
        }, this.performSearch = function(e) {
            if (e.query) {
                var t = "users" !== e.searchScope;
                if (t) {
                    this.hidePopover();
                    var i = TD.controller.columnManager.makeColumnFor({
                        type: "search",
                        service: "twitter",
                        metaString: e.query,
                        accountKey: (0, o.getDefaultAccount)().accountKey
                    });
                    TD.controller.columnManager.addColumnToUIAfterColumnKey(i, e.columnKey), this.trigger("uiSearchNoTemporaryColumn", e)
                } else this.trigger("uiNewSearchQuery", {
                    query: e.query
                }), this.defaultHeight = "max", this.$typeaheadContainer.addClass("is-hidden"), this.$searchResultsContainer.removeClass("is-hidden"), this.trigger("uiSearch", e), this.showPopover(), this.searchData = null
            }
        }, this.handleTypeaheadItemSelect = function(e, t) {
            var i;
            switch (t.searchType) {
                case "user":
                    this.hidePopover(), this.trigger("uiShowProfile", {
                        id: t.query
                    });
                    break;
                case "topic":
                case "saved-search":
                case "recent-search":
                    t.removeItem ? this.trigger("uiRecentSearchClearItem", {
                        query: t.query
                    }) : this.performSearch(t);
                    break;
                case "recent-search-clear":
                    this.trigger("uiRecentSearchClearAction");
                    break;
                case "list":
                    i = t.query.split("/"), TD.ui.openColumn.showList(i[0], i[1])
            }
            this.searchData = null
        }, this.handleTypeaheadNoSuggestions = function(e, t) {
            this.hasTypeaheadResults = !1, this.isPopoverEmpty() && this.hidePopover(!1), this.trigger("uiAppSearchSetPreventDefault", {
                preventDefault: !1,
                key: 9
            })
        }, this.handleTypeaheadSuggestions = function(e, t) {
            this.trigger("uiAppSearchSetPreventDefault", {
                preventDefault: !0,
                key: 9
            })
        }, this.handleTypeaheadRenderResults = function() {
            this.hasTypeaheadResults = !0
        }, this.isPopoverEmpty = function() {
            return !this.hasTypeaheadResults && !n.default.contains(this.$popover[0], this.$input[0])
        }
    }, a.default)
}, function(e, t, i) {
    "use strict";
    var s = a(i(1)),
        n = a(i(0)),
        r = a(i(8));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = function() {
        this.attributes({
            popoverSelector: ".js-popover",
            popoverContentSelector: ".js-popover-content",
            isHiddenClass: "is-hidden",
            hasOverlayClass: "has-overlay",
            noScrollClass: "scroll-none",
            defaultHeight: 2e3,
            defaultWidth: 350,
            bottomPadding: 30,
            withClickTrap: !0,
            withOverlay: !1,
            closeModals: !1,
            positionalClasses: {
                rt: "popover-position-rt"
            },
            popoverPosition: "rt"
        }), this.after("initialize", function() {
            this.trigger("uiPopoverCreated", {
                id: this.attr.id
            }), this.on(document, "uiCloseModal", this.handleCloseModal), this.boundClickTrap = this.popoverClickTrap.bind(this)
        }), this.handleCloseModal = function(e) {
            e.target !== this.node && this.hidePopover()
        }, this.popoverClickTrap = function(e) {
            e !== this.lastSeenEvent && (this.lastSeenEvent = e, this.$node && 0 === this.$node.find(e.currentTarget).length && this.hidePopover())
        }, this.isPopoverVisible = function() {
            return !this.$popover.hasClass(this.attr.isHiddenClass)
        }, this.showPopover = function(e) {
            this.$popover.hasClass(this.attr.isHiddenClass) && (this.$popover.removeClass(this.attr.isHiddenClass), this.withOverlay && (this.$overlay.removeClass(this.attr.isHiddenClass), this.$overlayControlNode.addClass(this.attr.hasOverlayClass)), this.attr.closeModals && this.trigger("uiCloseModal"), this.withClickTrap && s.default.defer(function() {
                (0, n.default)("body").on("click", "*", this.boundClickTrap)
            }.bind(this)), this.trigger("uiPopoverShown", {
                id: this.attr.id
            }))
        }, this.hidePopover = function(e) {
            this.$popover.hasClass(this.attr.isHiddenClass) || ((0, n.default)("body").off("click", "*", this.boundClickTrap), this.trigger("uiPopoverHiding", {
                id: this.attr.id
            }), this.$popover.addClass(this.attr.isHiddenClass), this.$overlay.addClass(this.attr.isHiddenClass), this.$overlayControlNode.removeClass(this.attr.hasOverlayClass), clearInterval(this.repositionInterval), this.repositionInterval = null, this.trigger("uiPopoverHidden", {
                id: this.attr.id
            }))
        }, this.setPopoverSize = function(e) {
            this.width = e.width, this.height = e.height, this.$popover.css({
                width: this.width,
                height: this.height
            })
        }, this.getPopoverPositionClass = function() {
            return this.attr.positionalClasses[this.attr.popoverPosition]
        }, this.renderInPopover = function(e, t, i) {
            i && (this.defaultHeight = i.defaultHeight || this.attr.defaultHeight, this.withOverlay = i.withOverlay || this.attr.withOverlay, this.withClickTrap = i.withClickTrap || this.attr.withClickTrap), this.$overlay = (0, n.default)(r.default.render("overlay")), this.$overlayControlNode = this.$node.closest(".js-overlay"), this.$overlay.insertBefore(this.$overlayControlNode), this.$node.html(r.default.render("popover")), this.$popover = this.select("popoverSelector"), this.$popover.addClass(this.getPopoverPositionClass()), this.setPopoverSize({
                width: this.attr.defaultWidth
            }), this.$popoverContent = this.select("popoverContentSelector");
            var s = r.default.render(e, t);
            this.$popoverContent.append(s)
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = i(5).component,
        n = i(2116);
    e.exports = s(function() {
        this.attributes({
            userResultsSelector: ".js-user-results"
        }), this.after("initialize", function() {
            this.on(document, "uiSearch", this.showUsers), this.$userResults = this.select("userResultsSelector"), n.attachTo(this.$userResults), TD.util.isTouchDevice() && window.navigator.standalone && this.on(this.$userResults, "touchmove", function(e) {
                e.stopPropagation()
            })
        }), this.showUsers = function() {
            this.trigger("scribeEvent", {
                terms: {
                    page: "main",
                    section: "search_results",
                    element: "show_user_results",
                    action: "click"
                }
            })
        }, this.before("teardown", function() {
            this.trigger(this.$userResults, "uiUserResultsDestroy")
        })
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(5),
        r = i(8),
        a = (s = r) && s.__esModule ? s : {
            default: s
        };
    e.exports = (0, n.component)(function() {
        this.after("initialize", function() {
            this.query = null, this.on(document, "uiSearch", this.handleSearch), this.on(document, "dataUserSearch", this.handleResults), this.on("uiUserResultsDestroy", this.teardown)
        }), this.handleSearch = function(e, t) {
            this.query = t.query, this.$node.empty(), this.trigger(document, "uiNeedsUserSearch", {
                query: this.query
            })
        }, this.handleResults = function(e, t) {
            if (t.request.query === this.query) {
                var i = t.result;
                if (0 === i.length) {
                    var s = a.default.render("search_no_users_placeholder");
                    this.$node.html(s)
                } else {
                    var n = a.default.render("menus/user_results", {
                        users: i,
                        withUserMenu: !0,
                        userMenuPositon: "pos-r",
                        withUserBio: !0
                    });
                    this.$node.html(n)
                }
            }
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.attributes({
            appSearchSelector: ".js-search",
            appSearchInputSelector: ".js-search-form .js-app-search-input",
            isTouchSearchClass: "is-touch-search",
            searchPopoverInputSelector: ".js-search-in-popover .js-app-search-input"
        }), this.after("initialize", function() {
            TD.util.isTouchDevice() && TD.decider.get("touchdeck_search_v2") ? this.select("appSearchSelector").addClass(this.attr.isTouchSearchClass) : this.select("appSearchSelector").removeClass(this.attr.isTouchSearchClass), this.on(document, "uiPerformSearch", this.handlePerformSearch), this.on(document, "uiAppSearchFocus uiShowSearchButtonClick", this.focusSearchInput), this.on(document, "dataSettings", this.handleDataSettings), this.trigger("uiNeedsSettings")
        }), this.handleDataSettings = function(e, t) {
            "condensed" === t.navbarWidth ? this.$input = this.select("searchPopoverInputSelector") : this.$input = this.select("appSearchInputSelector")
        }, this.focusSearchInput = function() {
            this.$input.triggerHandler("focus"), this.$input.is(":focus") || this.$input.focus()
        }, this.handlePerformSearch = function(e, t) {
            e.target === document && r.default.defer(function() {
                this.trigger(this.$input, "uiAppSearchSubmit", t)
            }.bind(this))
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = u(i(3)),
        n = u(i(0)),
        r = u(i(1)),
        a = i(109),
        o = u(i(94)),
        c = u(i(20)),
        l = u(i(8));

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var d = i(5).component,
        h = i(96),
        m = i(2119),
        f = i(641),
        p = i(246),
        g = i(37);
    e.exports = d(h, g, c.default, function() {
        this.attributes({
            headerActionSelector: ".js-header-action",
            settingsButtonSelector: '[data-action="settings-menu"]',
            accountNotificationCountSelector: ".js-account-count",
            userInfoSelector: ".js-account-summary"
        }), this.initialState({
            showUpdateAvailable: !1,
            showDisableDogfood: !1
        }), this.after("initialize", function() {
            var e = this;
            this.on("click", this.handleClick), this.on(document, "uiToggleNavbarWidth", this.toggleNavbarWidth), this.on(document, "dataSettings", this.handleDataSettings), this.on(document, "uiNotificationAccounts", this.handleNotificationAccounts), this.on(document, "uiSuggestRefreshToggle", function(t) {
                var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                    s = i.shouldShow,
                    n = void 0 !== s && s;
                return e.mergeState({
                    showUpdateAvailable: n
                })
            }), this.select("headerActionSelector").on("mouseover", this.handleListItemMouseover.bind(this)).on("mouseout", this.handleListItemMouseout.bind(this)), this.trigger("uiNeedsSettings"), this.observe(this.requestResource("accounts.state")).pluck("loginAccount").filter(r.default.identity).subscribe(this.renderUserInfo.bind(this)), this.observe((0, o.default)()).map(function(e) {
                var t = r.default.get(e, "config.tweetdeck_devel.value", !1),
                    i = r.default.get(e, "config.tweetdeck_dogfood.value", !1);
                return t || i
            }).subscribe(function(t) {
                return e.mergeState({
                    showDisableDogfood: t
                })
            }), this.after("stateChanged", this.maybeShowUpdateAvailable), this.setupCommands()
        }), this.renderUserInfo = function(e) {
            var t = l.default.render("topbar/navbar_account_summary", e);
            this.select("userInfoSelector").html(t)
        }, this.handleClick = function(e, t) {
            var i = (0, n.default)(e.target).closest("[data-action]"),
                s = i.attr("data-action");
            if (i.length) {
                switch ("url" !== s && e.preventDefault(), s) {
                    case "settings-menu":
                        e.stopPropagation(), this.toggleSettingsDropdown(i), TD.controller.stats.navbarSettingsClick();
                        break;
                    default:
                        this.performAction(s)
                }
                i.hasClass("js-show-tip") && i.tooltip("hide"), this.destroyFlyover()
            }
        }, this.setupCommands = function() {
            var e = this;
            this.addCommands([{
                label: (0, s.default)("Show accounts"),
                apply: function() {
                    return e.performAction("account-settings")
                }
            }, {
                label: (0, s.default)("Add a column"),
                shortcut: {
                    key: "a"
                },
                apply: function() {
                    return e.performAction("add-column")
                }
            }, {
                label: (0, s.default)("Expand/Collapse navigation"),
                shortcut: {
                    key: "x"
                },
                apply: function() {
                    return e.performAction("change-sidebar-width")
                }
            }, {
                label: (0, s.default)("Search Twitter"),
                shortcut: {
                    key: "/"
                },
                apply: function() {
                    return e.performAction("show-search")
                }
            }, {
                label: (0, s.default)("Log out"),
                apply: function() {
                    return e.performAction("signOut")
                }
            }, {
                label: (0, s.default)("Show settings"),
                shortcut: {
                    key: ","
                },
                apply: function() {
                    return e.performAction("globalSettings")
                }
            }, {
                label: (0, s.default)("Show keyboard shortcuts"),
                shortcut: {
                    key: "?"
                },
                apply: function() {
                    return e.performAction("keyboardShortcutList")
                }
            }, {
                label: (0, s.default)("Show search tips"),
                apply: function() {
                    return e.performAction("searchOperatorList")
                }
            }, {
                label: (0, s.default)("Update TweetDeck"),
                apply: function() {
                    return e.performAction("updateAvailable")
                },
                canApply: function() {
                    return e.state.showUpdateAvailable
                }
            }, {
                label: (0, s.default)("Disable Dev/Dogfood features"),
                apply: function() {
                    return e.performAction("disableDogfood")
                },
                canApply: function() {
                    return e.state.showDisableDogfood
                }
            }])
        }, this.performAction = function(e) {
            switch (e) {
                case "account-settings":
                    this.trigger("uiShowAccountSettings");
                    break;
                case "add-column":
                    TD.ui.openColumn.showOpenColumn(), TD.controller.stats.navbarAddColumnClick();
                    break;
                case "show-lists":
                    TD.ui.openColumn.showLists(), TD.controller.stats.navbarListsClick();
                    break;
                case "show-customtimelines":
                    TD.ui.openColumn.showCustomTimelines();
                    break;
                case "change-sidebar-width":
                    this.toggleNavbarWidth();
                    break;
                case "show-search":
                    this.trigger("uiShowSearchButtonClick");
                    break;
                case "signOut":
                    TD.controller.init.signOut();
                    break;
                case "globalSettings":
                    (0, n.default)(document).trigger("uiShowGlobalSettings");
                    break;
                case "keyboardShortcutList":
                    (0, n.default)(document).trigger("uiShowKeyboardShortcutList");
                    break;
                case "searchOperatorList":
                    (0, n.default)(document).trigger("uiShowSearchOperatorList");
                    break;
                case "updateAvailable":
                    this.trigger("uiAppHeaderUpdateAvailableClick");
                    break;
                case "disableDogfood":
                    this.trigger("uiReload", {
                        params: {
                            no_dogfood: 1
                        }
                    })
            }
        }, this.toggleSettingsDropdown = function(e) {
            this.renderDropdown(e, "menus/topbar_menu", {
                account: TD.storage.accountController.getUserIdentifier(),
                showUpdateAvailable: this.state.showUpdateAvailable,
                showDisableDogfood: this.state.showDisableDogfood
            }, {
                position: this.attr.dropdownPositions.verticalRight,
                toggle: !0
            })
        }, this.toggleNavbarWidth = function() {
            var e;
            e = this.isCollapsed ? "full-size" : "condensed", this.trigger("uiNavbarWidthChangeAction", {
                navbarWidth: e
            })
        }, this.maybeShowUpdateAvailable = function() {
            this.select("settingsButtonSelector").find(".icon").toggleClass("color-twitter-yellow", this.state.showUpdateAvailable)
        }, this.handleDataSettings = function(e, t) {
            this.isCollapsed = Boolean("condensed" === t.navbarWidth)
        }, this.handleListItemMouseover = function(e) {
            if (this.isCollapsed && !TD.util.isTouchDevice()) {
                var t = (0, n.default)(e.currentTarget);
                this.renderFlyover(t)
            }
        }, this.handleListItemMouseout = function(e) {
            this.destroyFlyover()
        }, this.handleNotificationAccounts = function(e, t) {
            this.select("accountNotificationCountSelector").text(t.count > 20 ? "20+" : t.count).toggleClass("is-visible", t.count > 0)
        }
    }, m, f, p, a.flightWithCommands)
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    e.exports = function() {
        this.attributes({
            showDrawerButtonSelector: ".js-show-drawer",
            hideDrawerButtonSelector: ".js-hide-drawer"
        }), this.after("initialize", function() {
            this.on("click", {
                showDrawerButtonSelector: this.handleShowDrawerClick,
                hideDrawerButtonSelector: this.handleHideDrawerClick
            }), this.on(document, "uiDockedComposeTweet", this.handleDockedComposeTweet), this.on(document, "uiDrawerActive", this.handleDrawerActive)
        }), this.handleDockedComposeTweet = function(e, t) {
            var i = t.type || "tweet";
            this.select("hideDrawerButtonSelector").filter(".tweet-button").find("i").addClass("is-hidden").filter('[data-tweet-type~="' + i + '"]').removeClass("is-hidden")
        }, this.handleShowDrawerClick = function(e, t) {
            switch ((0, r.default)(t.el).attr("data-drawer")) {
                case "compose":
                    this.trigger("uiComposeTweet"), TD.controller.stats.navbarComposeClick();
                    break;
                case "accountSettings":
                    this.trigger("uiShowAccountSettings")
            }
        }, this.handleHideDrawerClick = function(e, t) {
            var i = (0, r.default)(t.el).attr("data-drawer");
            this.trigger("uiDrawerHideDrawer"), "compose" === i && TD.controller.stats.navbarComposeClick()
        }, this.handleDrawerActive = function(e, t) {
            if (this.select("hideDrawerButtonSelector").addClass("is-hidden"), this.select("showDrawerButtonSelector").removeClass("is-hidden"), t.activeDrawer) {
                var i = function() {
                    return (0, r.default)(this).attr("data-drawer") === t.activeDrawer
                };
                this.select("showDrawerButtonSelector").filter(i).addClass("is-hidden"), this.select("hideDrawerButtonSelector").filter(i).removeClass("is-hidden")
            }
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = i(5).component;
    e.exports = s(function() {
        var e;
        this.attributes({
            jsAppSelector: ".js-app",
            jsAppHeaderSelector: ".js-app-header",
            isCondensedClass: "is-condensed"
        }), this.setNavbarWidth = function(t) {
            var i = this.select("jsAppHeaderSelector"),
                s = "condensed" === t,
                n = function() {
                    e.toggleClass(this.attr.isCondensedClass, s), i.toggleClass(this.attr.isCondensedClass, s)
                }.bind(this);
            !s && !e.hasClass(this.attr.isCondensedClass) || s && e.hasClass(this.attr.isCondensedClass) || (n(), this.trigger("uiToggleNavBarWidth"))
        }, this.handleDataSettings = function(e, t) {
            this.setNavbarWidth(t.navbarWidth)
        }, this.after("initialize", function() {
            e = this.select("jsAppSelector"), this.on(document, "dataSettings", this.handleDataSettings)
        })
    })
}, function(e, t, i) {
    "use strict";
    var s = i(5).component,
        n = i(2122);
    e.exports = s(function() {
        var e;
        this.attributes({
            composeDrawerOpenClass: "hide-detail-view-inline",
            inlineOpenClass: ".js-inline-reply.is-inline-active"
        }), this.after("initialize", function() {
            this.on(document, "uiDrawerActive", this.handleDrawerActive), this.on(document, "uiComposeTweet", this.handleUiComposeTweet), this.on(document, "uiFilesAdded", this.handleFilesAdded), this.on(document, "uiRecipientToggledFromList", this.handleRecipientToggledFromList)
        }), this.handleDrawerActive = function(e, t) {
            var i = "compose" === t.activeDrawer;
            this.$node.toggleClass(this.attr.composeDrawerOpenClass, i)
        }, this.handleFilesAdded = function(e, t) {
            this.select("inlineOpenClass").length && this.trigger("uiPopInlineComposeState"), this.trigger("uiComposeFilesAdded", t)
        }, this.handleUiComposeTweet = function(t, i) {
            i = i || {};
            var s = function(e) {
                return this.select("inlineOpenClass").length && "tweet" === e.type && !e.text && !e.replyTo && !e.quotedTweet
            }.bind(this);
            this.$node.hasClass(this.attr.composeDrawerOpenClass) ? this.trigger("uiDockedComposeTweet", i) : "reply" === i.type && i.element && i.element.closest(".js-column").length > 0 ? (e || (n.attachTo(this.$node), e = !0), this.trigger("uiInlineComposeTweet", i)) : s(i) ? this.trigger("uiPopInlineComposeState") : this.trigger("uiDockedComposeTweet", i)
        }, this.handleRecipientToggledFromList = function(e, t) {
            var i = this.$node.hasClass(this.attr.composeDrawerOpenClass),
                s = i ? "uiRecipientToggledInDockedCompose" : "uiRecipientToggledInInlineCompose";
            this.trigger(s, t)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = u(i(0)),
        n = u(i(596)),
        r = u(i(142)),
        a = u(i(20)),
        o = u(i(8)),
        c = i(38),
        l = u(i(17));

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var d = i(12),
        h = i(642),
        m = i(643),
        f = i(644),
        p = i(645),
        g = i(647),
        v = i(648),
        T = i(160),
        w = i(649),
        b = i(189).TRANSITION_END,
        y = i(242),
        C = i(650),
        _ = i(158),
        D = i(653),
        S = i(29),
        k = i(1);
    e.exports = d.mixin(r.default, a.default, function() {
        var e, t, i;
        this.attributes({
            panelCloseDelay: 500,
            inlineReplySelector: ".js-inline-reply",
            closeSelector: ".js-inline-compose-close",
            popSelector: ".js-inline-compose-pop",
            characterCountSelector: ".is-inline-active .js-character-count",
            progressSvgSelector: ".js-progress-svg",
            accountSafeguardCheckboxSelector: ".is-inline-active .js-account-safeguard-checkbox",
            accountSelector: ".js-inline-reply .js-account-item",
            tweetSelector: ".js-tweet",
            tweetActionsSelector: ".js-tweet-actions",
            replyActionSelector: ".js-reply-action",
            detailViewInlineSelector: ".js-detail-view-inline",
            tweetTextInputSelector: ".is-inline-active .js-compose-text",
            sendButtonContainerSelector: ".is-inline-active .js-send-button-container",
            replyInfoContainerSelector: ".is-inline-active .js-reply-info-container",
            pagingEasingFunction: "easeOutQuad",
            draftCacheSize: 50
        }), this.initialState({
            tweetType: "reply",
            sendingStatus: "ready",
            tweetText: "",
            accountSafeguardChecked: !1,
            tweetTextFocused: !1,
            batchMode: "off",
            attr: function() {
                return this.attr
            },
            messageRecipients: function() {
                return []
            },
            files: function() {
                return []
            },
            currentTime: function() {
                return new Date
            },
            selectedAccountKeys: function() {
                return []
            },
            selectionIndices: function() {
                return []
            }
        }), this.after("initialize", function() {
            try {
                this.afterInitialize.apply(this, arguments)
            } catch (e) {
                TD.controller.stats.generic({
                    page: "compose",
                    component: "inline_compose",
                    action: "error"
                }, {
                    custom_json_payload: {
                        stack: e.stack,
                        build: TD.buildIDShort
                    }
                })
            }
        }), this.afterInitialize = function() {
            this.draftCache = new n.default(this.attr.draftCacheSize), this.on(document, "uiInlineComposeTweet", this.handleUiInlineComposeTweet), this.on(document, "uiDockedComposeTweet", this.closeInlineCompose), this.on(document, "uiComposeClose", this.closeInlineComposeIfFocused), this.on(document, "uiPopInlineComposeState", this.handlePopClick), this.on(document, "uiRecipientToggledInInlineCompose", this.handleRecipientToggledFromList), this.on("uiComposeTweetSending", this.enterSendingState), this.on("uiComposeTweetSent", this.enterSuccessState), this.on("uiComposeTweetError", this.enterErrorState), this.on("uiComposeTextChanged", this.handleTextChanged), this.on("uiAccountSafeguardCheckboxChange", this.handleAccountSafeguardCheckboxChange);
            var e = this.observe(this.requestResource("settings.state")).pluck("safeguarded_account_list").map(TD.util.unpluck("safeguarded_account_list")).map(TD.util.unpluck("settings")),
                t = this.observe(this.requestResource("/1.1/help/configuration.json")).map(TD.util.unpluck("configuration")),
                i = S.Observable.combineLatest([this.observableState, e, t], TD.util.merge).map(C).share();
            this.provideResource("inlineCompose.state", i), S.Observable.fromEvent(this.$node, "uiComposeSendTweet").do(function(e) {
                e.stopPropagation()
            }).withLatestFrom(i, function(e, t) {
                return t
            }).filter(TD.util.pluck("canSend")).map(this.prepareSendTweet.bind(this)).subscribe(this.sendTweet.bind(this)), this.on(b, {
                inlineReplySelector: this.handleAnimationEnd
            })
        }, this.setupDOM = function() {
            var e = this;
            if (i) {
                this.attachChild(v, this.select("tweetTextInputSelector"), {
                    stateSource: "inlineCompose.state",
                    teardownOn: "inlineInstanceTearDown"
                }), this.attachChild(m, this.select("characterCountSelector"), {
                    stateSource: "inlineCompose.state",
                    teardownOn: "inlineInstanceTearDown"
                }), this.observe(this.requestResource("inlineCompose.state")).pluck("displayedCharacterCount").distinctUntilChanged().subscribe(function(t) {
                    e.mergeState({
                        displayedCharacterCount: t
                    })
                });
                var t = this.connect(f, {
                    mapStateToProps: function(e) {
                        return {
                            characterCount: e.displayedCharacterCount,
                            tweetType: "tweet"
                        }
                    }
                });
                this.attachChild(t, i.find(".js-progress-svg").first()), this.attachChild(p, this.select("sendButtonContainerSelector"), {
                    stateSource: "inlineCompose.state",
                    teardownOn: "inlineInstanceTearDown"
                }), this.attachChild(h, this.select("accountSafeguardCheckboxSelector"), {
                    stateSource: "inlineCompose.state"
                });
                var s = this.connect(g, {
                    mapStateToProps: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                            t = e.selectedAccountKeys,
                            i = void 0 === t ? [] : t,
                            s = e.implicitRecipients,
                            n = void 0 === s ? [] : s,
                            r = e.excludedRecipientsIds,
                            a = e.batchMode,
                            o = void 0 === a ? "off" : a;
                        return {
                            recipients: y.recipientsWithoutSelfMention(n, i),
                            excludedRecipientsIds: r,
                            batchMode: o
                        }
                    }
                });
                this.attachChild(s, this.select("replyInfoContainerSelector"), {
                    teardownOn: "inlineInstanceTearDown"
                }), this.select("closeSelector").on("click", this.handleCloseClick.bind(this)), this.select("popSelector").on("click", this.handlePopClick.bind(this)), this.select("accountSelector").on("click", this.handlePopClick.bind(this))
            }
        }, this.handleUiInlineComposeTweet = function(i, n) {
            (e = n || {}).singleFrom = [n.from[0]], (0, s.default)(n.element).find(this.attr.inlineReplySelector).length > 0 ? this.closeInlineCompose() : (t && this.closeInlineCompose(), this.focusRequest(), this.setupInlineCompose(e))
        }, this.setupInlineCompose = function(e) {
            this.trigger(document, "scribeEvent", {
                terms: {
                    page: "compose",
                    component: "inline_compose",
                    action: "impression"
                }
            }), (t = e.element).find(".js-tweet-actions").addClass("is-visible"), t.find(".js-detail-view-inline").addClass("is-hidden"), t.find(".js-reply-action").addClass("is-selected");
            var n = (0, c.getAccountData)(e.from),
                r = e.inReplyTo.chirp,
                a = r.isOwnChirp() && r.isInThread() && !r.isMidSelfThread() && r.lastInSelfThread();
            i = (0, s.default)(o.default.render("compose/compose_inline_reply", {
                account: n,
                isMac: "osx" === TD.util.getOSName(),
                inline: !0,
                addSubsequentTweet: a
            })), t.find(this.attr.tweetSelector).after(i), this.setupDOM();
            var l = k.pluck(e.mentions, "screenName").map(_.atMentionify),
                u = [e.inReplyTo.user.screenName].map(_.atMentionify);
            l = D.stripRepliesFromMentions(l, u);
            var d = (0, c.getAccountData)(e.from[0]).screenName;
            l = k.without(l, _.atMentionify(d)), u = k.without(u, _.atMentionify(d));
            var h, m, f = this.getDraftText();
            f && "" !== f ? h = [(m = f).length, m.length] : (m = "", h = D.getSelectionIndices(m, u, l)), this.mergeState({
                selectedAccountKeys: e.from,
                tweetText: m,
                selectionIndices: h,
                tweetTextFocused: !0,
                implicitRecipients: e.mentions,
                excludedRecipientsIds: [],
                autoPopulateReplyMetadata: !0,
                batchMode: a ? "subsequent" : "off",
                replies: u,
                mentions: l
            }), k.defer(function() {
                i.removeClass("is-inline-inactive")
            }), i.on("click", function(e) {
                e.target.classList.contains("account-link") || e.stopPropagation()
            });
            var p = i.parents(".js-column");
            p.hasClass("js-column-state-detail-view") || TD.ui.columns.lockColumnToElement(p.attr("data-column"), t)
        }, this.closeInlineCompose = function() {
            t && (this.saveDraftText(this.state.tweetText), this.closeAndRemovePanels(), this.focusRelease(), this.trigger(document, "scribeEvent", {
                terms: {
                    page: "compose",
                    component: "inline_compose",
                    action: "close"
                }
            }), this.trigger(i, "inlineInstanceTearDown"))
        }, this.closeInlineComposeIfFocused = function(e, t) {
            t && t.keyboardShortcut && !this.hasFocus || this.closeInlineCompose()
        }, this.closeAndRemovePanels = function(e) {
            i && this.select("inlineReplySelector").removeClass("is-inline-active").css({
                overflow: "hidden"
            }).addClass("is-inline-inactive")
        }, this.tearDownInlineCompose = function() {
            this.closeAndRemovePanels(), this.deleteDraftText(), this.focusRelease(), t = null, this.mergeState({
                sendingStatus: "ready",
                tweetText: "",
                selectedAccountKeys: []
            })
        }, this.handleAnimationEnd = function(e) {
            var t = (0, s.default)(e.target);
            if (t.hasClass("is-inline-inactive")) {
                var n = t.parents(".js-column").attr("data-column"),
                    r = t.parents(".js-stream-item-content");
                TD.ui.columns.unlockColumnFromElement(n), r.find(this.attr.tweetActionsSelector).removeClass("is-visible"), r.find(this.attr.replyActionSelector).removeClass("is-selected"), r.find(this.attr.detailViewInlineSelector).removeClass("is-hidden"), t.remove()
            } else this.scrollColumnIfRequired(), i.css({
                overflow: "visible"
            })
        }, this.scrollColumnIfRequired = function() {
            var e, t = i.parents(".js-column"),
                s = t.attr("data-column"),
                n = l.default.getColumnScrollContainerByKey(s),
                r = t.find(".js-live-video"),
                a = i.offset().top + i.height() - n.height();
            if (a > 0) {
                e = n.scrollTop() - r.height();
                var o = TD.ui.columns.calculateScrollDuration(a, 50, 750);
                n.stop().animate({
                    scrollTop: e + a
                }, o, this.attr.pagingEasingFunction)
            }
        }, this.accountsHaveSafeguard = function(e) {
            return k.intersection(e, TD.settings.getSafeguardedAccountList()).length > 0
        }, this.prepareSendTweet = function(t, i) {
            return {
                requestId: k.uniqueId("sendTweet"),
                text: this.state.tweetText,
                inReplyToStatusId: e.inReplyTo.id,
                autoPopulateReplyMetadata: this.state.autoPopulateReplyMetadata,
                excludeReplyUserIds: this.state.excludedRecipientsIds,
                from: this.state.selectedAccountKeys,
                type: "reply",
                inline: !0,
                batchMode: this.state.batchMode
            }
        }, this.enterSendingState = function(e) {
            e.stopPropagation(), this.mergeState({
                sendingStatus: "sending"
            })
        }, this.enterSuccessState = function(e) {
            e.stopPropagation(), this.mergeState({
                sendingStatus: "success"
            }), this.deleteDraftText(), setTimeout(this.tearDownInlineCompose.bind(this), this.attr.panelCloseDelay)
        }, this.enterErrorState = function(e, t) {
            e.stopPropagation(), this.mergeState({
                sendingStatus: "ready"
            })
        }, this.getDraftText = function() {
            if (t && t.length) return this.draftCache.get(t.attr("data-key"))
        }, this.saveDraftText = function(e) {
            if (t && t.length) {
                var i = t.attr("data-key");
                i && this.draftCache.enqueue(i, e)
            }
        }, this.deleteDraftText = function() {
            t && t.length && this.draftCache.dequeue(t.attr("data-key"))
        }, this.handleTextChanged = function(e, t) {
            e.stopPropagation(), this.saveDraftText(t.value), this.mergeState({
                tweetText: t.value
            })
        }, this.handleCloseClick = function() {
            this.closeInlineCompose()
        }, this.handlePopClick = function() {
            this.deleteDraftText(), this.trigger("uiDockedComposeTweet", {
                type: "reply",
                text: this.state.tweetText,
                from: e.from,
                mentions: e.mentions,
                inReplyTo: e.inReplyTo,
                excludedRecipientsIds: this.state.excludedRecipientsIds,
                batchMode: this.state.batchMode,
                popFromInline: !0
            })
        }, this.handleAccountSafeguardCheckboxChange = function(e, t) {
            this.mergeState({
                accountSafeguardChecked: t.checked
            })
        }, this.handleRecipientToggledFromList = function(e, t) {
            var i = y.getUpdatedExcludedRecipientsIds(this.state, t);
            this.mergeState({
                excludedRecipientsIds: i
            })
        }, this.render = function() {}
    }, T, w)
}, , function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.apiErrors = void 0, t.getApiErrorMessage = function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return a[e.code] || e.message || a.unknown
    };
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = t.apiErrors = {
        0: (0, r.default)("Something went wrong. Please check your connection and try again."),
        32: (0, r.default)("The username and password you entered did not match our records. Please double-check and try again."),
        63: (0, r.default)("This user has been suspended."),
        64: (0, r.default)("Your account has been suspended."),
        130: (0, r.default)("Twitter is temporarily over capacity. Please try again later."),
        131: (0, r.default)("There's something wrong. Please try again later."),
        135: (0, r.default)("Could not authenticate you."),
        108: (0, r.default)("There is no user by that name."),
        150: (0, r.default)("This user doesn't follow you. You can only send messages to people who do."),
        151: (0, r.default)("Something went wrong, but don't fret. It's not your fault."),
        185: (0, r.default)("You reached your daily tweet limit. Please try again tomorrow."),
        187: (0, r.default)("You already tweeted that."),
        195: (0, r.default)("Invalid search query."),
        215: (0, r.default)("Could not authenticate you."),
        226: (0, r.default)("This action was flagged as suspicious."),
        231: (0, r.default)("You need to generate a temporary password on twitter.com to log in."),
        235: (0, r.default)("Your login verification request has expired. Please log in again."),
        236: (0, r.default)("That is not the correct code. Please re-enter the code sent to your phone."),
        241: (0, r.default)("The login verification request sent to your phone was rejected."),
        242: (0, r.default)("Your account is deactivated. Please log in on twitter.com to reactivate."),
        243: (0, r.default)("You have too many failed login attempts. Please try again in an hour."),
        244: (0, r.default)("You must reset the password on this account. Please log in on twitter.com to do this."),
        245: (0, r.default)("You have initiated too many login requests. Please try logging in again in an hour."),
        246: (0, r.default)("You have entered too many incorrect codes. Please try logging in again."),
        276: (0, r.default)("Scheduled tweet was rejected. Please try again."),
        297: (0, r.default)("You cannot have both media and tweet."),
        278: (0, r.default)("You are not a member of this group"),
        280: (0, r.default)("You cannot add more people to this conversation. Try starting a new one."),
        311: (0, r.default)("You have already sent this message."),
        429: (0, r.default)("You have initiated too many login requests. Please try logging in again later."),
        unknown: (0, r.default)("Unknown error. Please try again.")
    }
}, function(e, t, i) {
    "use strict";
    var s, n = i(1),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = {
        isSelectedAccountSafeguarded: function(e) {
            return r.default.intersection(e.settings.safeguarded_account_list, e.selectedAccountKeys).length > 0
        },
        isSafeguardingOk: function(e) {
            return !a.isSelectedAccountSafeguarded(e) || e.accountSafeguardChecked
        }
    };
    e.exports = a
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(651);
    var o = {
        buttonText: {
            tweet: (0, r.default)("Tweet"),
            reply: (0, r.default)("Tweet"),
            message: (0, r.default)("Send message")
        },
        tooltipText: {
            ready: (0, r.default)("Tweet"),
            tooLong: (0, r.default)("Your Tweet is too long"),
            noAccount: (0, r.default)("You have to select at least one account to Tweet from"),
            noRecipients: (0, r.default)("You have to select a recipient for your message"),
            scheduledDatePassed: (0, r.default)("Scheduled time has passed"),
            accountSafeguardNotChecked: (0, r.default)("You have to check the confirmation step to Tweet"),
            uploading: (0, r.default)("Uploading media"),
            processing: (0, r.default)("Processing media")
        },
        getButtonText: function(e) {
            return e.scheduledDate && !e.tweetSentWhileVideoUploadInProgress ? (0, r.default)("Tweet at {{time}}", {
                time: TD.util.prettyTimeOfDayOrDateString(e.scheduledDate)
            }) : e.tweetSentWhileVideoUploadInProgress && (0, a.isSending)(e) && (0, a.isUploading)(e) ? (0, r.default)("{{progress}}%", {
                progress: (0, a.getMinimumProgress)(e)
            }) : e.tweetSentWhileVideoUploadInProgress && (0, a.isSending)(e) && (0, a.isProcessing)(e) ? (0, r.default)("Processing") : o.buttonText[e.tweetType]
        },
        getDefaultTooltipText: function() {
            return [o.tooltipText.ready, " (", "osx" === TD.util.getOSName() ? "&#8984;" + (0, r.default)("Return") : (0, r.default)("Ctrl+Enter"), ")"].join("")
        },
        getTooltipText: function(e) {
            return 0 === e.selectedAccountKeys.length ? o.tooltipText.noAccount : e.remainingCharCount < 0 ? o.tooltipText.tooLong : "message" !== e.tweetType || e.hasMessageRecipients ? e.schedulingOk ? e.safeguardingOk ? e.tweetSentWhileVideoUploadInProgress && (0, a.isSending)(e) && (0, a.isUploading)(e) ? o.tooltipText.uploading : e.tweetSentWhileVideoUploadInProgress && (0, a.isSending)(e) && (0, a.isProcessing)(e) ? o.tooltipText.processing : o.getDefaultTooltipText() : o.tooltipText.accountSafeguardNotChecked : o.tooltipText.scheduledDatePassed : o.tooltipText.noRecipients
        }
    };
    e.exports = o
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(242));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = !1;

    function o(e) {
        return e.files.some(function(e) {
            return "image/gif" === e.type
        })
    }

    function c(e) {
        return e.files.some(function(e) {
            return "video/mp4" === e.type
        })
    }
    i(36).tweetdeckBeta$.subscribe(function(e) {
        a = e
    });
    var l = {
        buttonText: {
            single: (0, s.default)("Add image"),
            singleWithVideo: (0, s.default)("Add image or video"),
            another: (0, s.default)("Add another image"),
            multiple: (0, s.default)("Add images"),
            multipleWithVideo: (0, s.default)("Add images or video")
        },
        tooltipText: {
            oneGIF: (0, s.default)("You cannot upload a GIF with other images"),
            oneVideo: (0, s.default)("You cannot upload a Video with other images"),
            isScheduling: (0, s.default)("You cannot add more than 1 image to a scheduled Tweet"),
            isSchedulingWithVideo: (0, s.default)("You cannot add more than 1 image or video to a scheduled Tweet"),
            isMessaging: (0, s.default)("You cannot add more than 1 image to a message"),
            reachedLimit: "You cannot add more than {{max}} images",
            quotedTweet: (0, s.default)("Quoted Tweets cannot contain images")
        },
        canScheduleVideo: function() {
            return a
        },
        getButtonText: function(e) {
            var t = l.isTweetTypeMessage(e),
                i = l.canScheduleVideo(),
                s = !t && (i || !e.scheduledDate);
            return 1 === n.default.getMaxAllowedImages(e) ? i ? l.buttonText.singleWithVideo : l.buttonText.single : e.files.length > 0 ? l.buttonText.another : s ? l.buttonText.multipleWithVideo : l.buttonText.multiple
        },
        isTweetTypeMessage: function(e) {
            return "message" === e.tweetType
        },
        getTooltipText: function(e) {
            if (4 === n.default.getMaxAllowedImages(e)) {
                if (o(e)) return l.tooltipText.oneGIF;
                if (c(e)) return l.tooltipText.oneVideo
            }
            return e.files.length >= n.default.getMaxAllowedImages(e) ? e.scheduledDate ? l.canScheduleVideo() ? l.tooltipText.isSchedulingWithVideo : l.tooltipText.isScheduling : l.isTweetTypeMessage(e) ? l.tooltipText.isMessaging : (0, s.default)("You cannot add more than {{max}} images", {
                max: n.default.getMaxAllowedImages(e)
            }) : e.quotedTweet ? l.tooltipText.quotedTweet : void 0
        },
        canAddMedia: function(e) {
            return e.files.length < n.default.getMaxAllowedImages(e) && function(e) {
                return 1 === n.default.getMaxAllowedImages(e) || n.default.getMaxAllowedImages(e) > 1 && !o(e)
            }(e) && function(e) {
                return 1 === n.default.getMaxAllowedImages(e) || n.default.getMaxAllowedImages(e) > 1 && !c(e)
            }(e) && !e.quotedTweet
        }
    };
    e.exports = l
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(36),
        o = i(139),
        c = i(652);
    var l = !1;
    a.tweetdeckBeta$.distinctUntilChanged().subscribe(function(e) {
        l = e
    });
    var u = {
        buttonText: {
            scheduleTweet: (0, r.default)("Schedule Tweet")
        },
        tooltipText: {
            noMessages: (0, r.default)("Direct messages cannot be scheduled"),
            noVideo: (0, r.default)("Scheduled Tweets cannot contain video"),
            noMultipleImages: (0, r.default)("Scheduled Tweets cannot contain multiple images")
        },
        getButtonText: function(e) {
            return e.scheduledDate ? (0, o.getFormattedDateTime)({
                time: e.scheduledDate,
                fullMonth: !1
            }) : u.buttonText.scheduleTweet
        },
        getTooltipText: function(e) {
            return "message" === e.tweetType ? u.tooltipText.noMessages : (0, c.hasVideo)(e) && !this.hasScheduleVideoAccess() ? u.tooltipText.noVideo : 2 === e.files.length ? u.tooltipText.noMultipleImages : ""
        },
        hasScheduleVideoAccess: function() {
            return l
        },
        canSchedule: function(e) {
            return "message" !== e.tweetType && e.files.length < 2 && (!(0, c.hasVideo)(e) || this.hasScheduleVideoAccess())
        }
    };
    e.exports = u
}, function(e, t, i) {
    "use strict";
    var s, n = i(3),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(652);
    var o = {
        tooltipText: {
            messageCannotBeScheduled: (0, r.default)("Direct messages cannot be scheduled"),
            noMultipleImages: (0, r.default)("Direct messages cannot contain multiple images"),
            noVideo: (0, r.default)("Direct messages cannot contain video")
        },
        getTooltipText: function(e) {
            return e.scheduledDate ? o.tooltipText.messageCannotBeScheduled : e.files.length > 1 ? o.tooltipText.noMultipleImages : (0, a.hasVideo)(e) ? o.tooltipText.noVideo : ""
        },
        canSwitchTweetType: function(e) {
            return !e.scheduledDate && e.files.length <= 1 && !(0, a.hasVideo)(e)
        }
    };
    e.exports = o
}, function(e, t, i) {
    "use strict";
    var s = i(5).component,
        n = i(247);
    e.exports = s(function() {
        this.after("initialize", function() {
            this.on("dragstart", function(e) {
                var t = this.extractDataFromEvent(e);
                e.originalEvent.dataTransfer.setData("text", document.getSelection()), this.trigger(document, "uiDragStart", t)
            }), this.on("dragend", function(e) {
                var t = this.extractDataFromEvent(e);
                this.trigger(document, "uiDragEnd", t)
            })
        })
    }, n)
}, function(e, t, i) {
    "use strict";
    var s = c(i(1)),
        n = c(i(0)),
        r = i(5),
        a = c(i(8)),
        o = i(36);

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, r.component)(function() {
        this.attributes({
            modalContextTemplate: "modal/modal_context",
            modalContextSelector: ".js-modal-context",
            modalInnerSelector: ".js-modal-inner",
            modalContentSelector: ".js-modal-content",
            modalClickTrapSelector: ".js-click-trap",
            modalDismissSelector: ".js-dismiss",
            modalDragHandleSelector: ".js-drag-handle",
            modalNonDismissibleSelector: ".js-non-dismissible",
            modalOptions: {
                title: "",
                withNonDismissible: !1,
                withCenteredFooter: !1,
                withClickTrap: !0,
                withDismissButton: !0,
                withDoneButton: !1,
                withDraggable: !0,
                withDragHandle: !0,
                withFooter: !0,
                withHeader: !0,
                withHeaderDivider: !1,
                withBorder: !0,
                withClasses: [],
                withContentClasses: [],
                withOverlayClasses: [],
                withTitleClasses: []
            }
        }), this.after("initialize", function() {
            var e = this;
            this.on(document, "uiNeedsModalContext", this.handleCreateModalContext), this.on("uiModalShowing", {
                modalContextSelector: this.handleModalShowing
            }), this.on("uiModalHiding", {
                modalContextSelector: this.handleModalHiding
            }), this.on("click", {
                modalDismissSelector: this.handleModalDismiss,
                modalClickTrapSelector: this.handleModalContextClick
            }), this.gdprModal$ = o.gdprConsent$.subscribe(function(t) {
                e.gdprModalEnabled = t
            })
        }), this.handleCreateModalContext = function(e, t) {
            var i = s.default.defaults(t || {}, this.attr.modalOptions);
            if (!i.withNonDismissible && this.select("modalNonDismissibleSelector").length > 0) this.trigger("uiModalContext", {
                id: i.id,
                $node: null
            });
            else {
                if (i.withNonDismissible && i.withDismissButton) throw new Error("non-dismissible modals may not have dismiss button");
                if (i.withNonDismissible && i.withClickTrap && !this.gdprModalEnabled) throw new Error("non-dismissible modals may not have click trap");
                var n = this.createModalContext(i),
                    r = n.find(this.attr.modalInnerSelector),
                    a = r.find("header"),
                    o = a.find("h3"),
                    c = r.find(this.attr.modalContentSelector);
                n.addClass("is-hidden").addClass(i.withOverlayClasses.join(" ")), r.addClass(i.withClasses.join(" ")), c.addClass(i.withContentClasses.join(" ")), o.addClass(i.withTitleClasses.join(" ")), this.$node.append(n), this.trigger("uiModalContext", {
                    id: i.id,
                    $node: n.find(this.attr.modalContentSelector)
                }), i.withDraggable && this.setupDragHandle({
                    draggable: r,
                    handle: r.find(this.attr.modalDragHandleSelector),
                    boundary: n
                });
                var l = i.withDraggable,
                    u = i.withDragHandle;
                if (!1 === l && !1 === u) {
                    var d = r.find(this.attr.modalDragHandleSelector);
                    d.removeClass("is-movable js-drag-handle")
                }
            }
        }, this.setupDragHandle = function(e) {
            ["draggable", "handle", "boundary"].forEach(function(t) {
                if (!e[t]) throw new Error("Required parameter " + t + " omitted")
            }), e.draggable.draggable({
                handle: e.handle,
                boundary: e.boundary
            }).on("start.draggable", function() {
                e.draggable.css({
                    position: "absolute",
                    top: e.draggable.offset().top,
                    left: e.draggable.offset().left
                }), e.boundary.addClass("is-dragging")
            }).on("drop.draggable", function() {
                e.boundary.removeClass("is-dragging")
            })
        }, this.createModalContext = function(e) {
            return (0, n.default)(a.default.render(this.attr.modalContextTemplate, e))
        }, this.handleModalShowing = function(e, t) {
            this.select("modalContextSelector").addClass("is-hidden"), (0, n.default)(t.el).removeClass("is-hidden")
        }, this.handleModalHiding = function(e, t) {
            (0, n.default)(t.el).remove()
        }, this.handleModalDismiss = function(e, t) {
            this.closeModals()
        }, this.closeModals = function() {
            this.trigger("uiCloseModal")
        }, this.handleModalContextClick = function(e, t) {
            var i = (0, n.default)(t.el),
                s = (0, n.default)(e.target);
            s.closest(this.attr.modalInnerSelector, i).length || this.closeModals()
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = u(i(7)),
        n = u(i(3)),
        r = u(i(0)),
        a = i(5),
        o = u(i(246)),
        c = i(64),
        l = i(23);

    function u(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = (0, a.component)(function() {
        this.attributes({
            isActionsMenu: !0,
            profileActionsButtonSelector: ".js-user-actions-menu",
            chirpActionsContainerSelector: ".js-tweet-actions",
            profileMenuTemplate: "menus/actions",
            chirpMenuTemplate: "menus/actions",
            dmMenuTemplate: "menus/actions_directmessage",
            menuPosition: "pos-l",
            actionScribeElementMap: {
                mention: "tweet_to_user",
                message: "send_a_dm_to_user",
                lists: "add_or_remove_from_lists",
                "flag-media": "flag_media",
                block: "block_user",
                "report-tweet": "report_tweet",
                "report-spam": "report_spam",
                followOrUnfollow: "follow_or_unfollow_from_accounts",
                favoriteOrUnfavorite: "like_or_unlike_from_accounts",
                follow: "follow",
                unfollow: "unfollow",
                "reference-to": "link_to_this_tweet",
                "message-to": "share_via_dm",
                email: "share_via_email",
                mute: "mute_user",
                unmute: "unmute_user",
                muteConversation: "mute_conversation",
                unmuteConversation: "unmute_conversation",
                "undo-retweet": "undo_retweet",
                destroy: "delete_tweet",
                customtimelines: "add_to_collection",
                embed: "embed_this_tweet",
                translate: "translate"
            }
        }), this.after("initialize", function() {
            this.state = {}, this.around("handleDocumentClick", this.maybeStopDocumentClick), this.after("renderDropdown", this.addActionsMenuClickHandler), this.before("teardownCurrentDropdown", this.removeActionsMenuClickHandler), this.before("teardownCurrentDropdown", this.removeForcedActionsMenuContainerVisibility), this.on("uiDetailViewClosing uiMediaGalleryClosing uiTwitterProfileClosing", this.teardownCurrentDropdown), this.on("click", {
                profileActionsButtonSelector: this.handleUserButtonClick
            }), this.on("uiShowActionsMenu", this.handleShowActionsMenu)
        }), this.addActionsMenuClickHandler = function() {
            this.currentDropdown && this.on(this.currentDropdown.$el, "click", this.handleActionsMenuClick)
        }, this.removeActionsMenuClickHandler = function() {
            this.currentDropdown && this.off(this.currentDropdown.$el, "click", this.handleActionsMenuClick)
        }, this.removeForcedActionsMenuContainerVisibility = function() {
            this.state.$actionsMenuContainer && (this.state.$actionsMenuContainer.removeClass("is-visible"), this.state.$actionsMenuContainer = null)
        }, this.maybeStopDocumentClick = function(e, t) {
            if (this.dropdownIsOpen()) {
                var i = (0, r.default)(t.target).closest(this.attr.profileActionsButtonSelector);
                0 === i.length && e(t)
            }
        }, this.showActionsMenu = function(e, t, i) {
            var s, n, r, a, o, c = 1 === TD.storage.accountController.getAccountsForService("twitter").length,
                l = void 0,
                u = e.hasClass("js-tweet-detail-action"),
                d = e.data("actions-menu-position");
            i ? (i.getRelatedTweet && (i = i.getRelatedTweet() || i), s = !c, n = i.getMedia().some(function(e) {
                return e.flaggedNSFW
            }), r = i instanceof TD.services.TwitterConversationMessageEvent, a = r ? this.attr.dmMenuTemplate : this.attr.chirpMenuTemplate, t = i.getMainUser(), l = i.conversationMuted) : a = this.attr.profileMenuTemplate;
            var h = TD.controller.clients.getClient(t.account.getKey());
            o = !!h.mutes[t.id], this.renderDropdown(e, a, {
                showFavorite: s,
                isFlagged: n,
                isMuted: o,
                isMutedConversation: l,
                isTweetDetailAction: u,
                user: t,
                chirp: i,
                isSingleAccount: c
            }, {
                toggle: !0,
                position: d || this.attr.menuPosition
            }), this.state = {
                user: t,
                chirp: i,
                $actionsMenuContainer: e.closest(this.attr.chirpActionsContainerSelector)
            }, this.state.$actionsMenuContainer.addClass("is-visible")
        }, this.handleShowActionsMenu = function(e, t) {
            var i = (0, r.default)(e.target),
                s = i.attr("data-parent-chirp-id");
            if (s || (s = i.attr("data-chirp-id")), !s) return this.handleUserButtonClick(e);
            var n = i.attr("data-account-key"),
                a = i.closest(".js-column").attr("data-column"),
                o = TD.controller.columnManager.findChirpByAccountKey({
                    chirpId: s,
                    accountKey: n,
                    columnKey: a
                });
            this.showActionsMenu(i, null, o)
        }, this.handleUserButtonClick = function(e) {
            var t = (0, r.default)(e.target).closest(this.attr.profileActionsButtonSelector),
                i = t.data("user-id");
            if (i) {
                var n = TD.cache.twitterUsers.getById(i);
                e.stopPropagation(), e.preventDefault(), n.addCallback(function(e) {
                    this.showActionsMenu(t, e, null)
                }.bind(this)), this.trigger("scribeEvent", {
                    terms: (0, s.default)({}, (0, c.getElementNamespace)(t), {
                        element: "user_actions_menu",
                        action: "click"
                    })
                })
            }
        }, this.handleFlagTweetSuccess = function() {
            var e = this.state.chirp.getMedia();
            e.forEach(function(e) {
                e.flaggedNSFW = !0
            }), (0, l.showNotification)({
                message: (0, n.default)("Success: Media flagged")
            })
        }, this.handleFlagTweetError = function() {
            (0, l.showErrorNotification)({
                message: (0, n.default)("Error: Failed to flag media. Please try again.")
            })
        }, this.scribeAction = function(e, t) {
            this.trigger("scribeEvent", {
                terms: (0, s.default)({}, (0, c.getElementNamespace)(t), {
                    element: this.attr.actionScribeElementMap[e] || e.toLowerCase(),
                    action: "click"
                })
            })
        }, this.handleActionsMenuClick = function(e) {
            var t = (0, r.default)(e.target);
            if (0 !== t.closest(this.attr.isSelectedSelector).length) {
                var i = t.data("action"),
                    s = !0,
                    a = this.state.user,
                    o = this.state.chirp,
                    c = [];
                switch (o && c.push(o.account.getKey()), o ? this.trigger("metric", {
                    key: ["chirp", "ui", o.chirpType, i].join(":")
                }) : this.trigger("metric", {
                    key: ["user", "ui", i].join(":")
                }), this.scribeAction(i, t), i) {
                    case "mention":
                        this.trigger("uiComposeTweet", {
                            text: "@" + a.screenName + " ",
                            from: c
                        });
                        break;
                    case "message":
                        this.trigger("uiComposeTweet", {
                            type: "message",
                            from: c,
                            messageRecipients: [{
                                screenName: a.screenName,
                                avatar: a.profileImageURL
                            }]
                        });
                        break;
                    case "lists":
                        new TD.components.AddToListsDialog(a);
                        break;
                    case "flag-media":
                        (0, l.showNotification)({
                            message: (0, n.default)("Flagging media…")
                        }), TD.controller.clients.getClient(o.account.getKey()).flagTweet(o.id, this.handleFlagTweetSuccess.bind(this), this.handleFlagTweetError);
                        break;
                    case "block":
                        this.trigger("uiBlockAction", {
                            account: a.account,
                            twitterUser: a
                        });
                        break;
                    case "report-tweet":
                        this.trigger("uiShowReportOptions", {
                            account: a.account,
                            tweetId: o.id,
                            twitterUser: a,
                            isMessage: o instanceof TD.services.TwitterConversationMessageEvent,
                            isMedia: o.hasMedia()
                        });
                        break;
                    case "report-spam":
                        this.trigger("uiShowReportUserOptions", {
                            account: a.account,
                            twitterUser: a
                        });
                        break;
                    case "followOrUnfollow":
                        this.trigger("uiShowFollowFromOptions", {
                            userToFollow: a
                        });
                        break;
                    case "favoriteOrUnfavorite":
                        this.trigger("uiShowFavoriteFromOptions", {
                            tweet: o
                        });
                        break;
                    case "follow":
                        a.follow(a.account, null, null, !0);
                        break;
                    case "unfollow":
                        a.unfollow(a.account, null, null, !0);
                        break;
                    case "reference-to":
                        this.trigger("uiShowCopyTweetLink", {
                            url: o.getChirpURL()
                        });
                        break;
                    case "message-to":
                        o.messageTo();
                        break;
                    case "email":
                        o.email();
                        break;
                    case "mute":
                        a.mute(a.account);
                        break;
                    case "unmute":
                        a.unmute(a.account);
                        break;
                    case "muteConversation":
                        o.muteConversation(a.account);
                        break;
                    case "unmuteConversation":
                        o.unmuteConversation(a.account);
                        break;
                    case "destroy":
                        o.destroy();
                        break;
                    case "undo-retweet":
                        (0, r.default)(document).trigger("uiUndoRetweet", {
                            tweetId: o.getMainTweet().id,
                            from: o.account.getKey()
                        });
                        break;
                    case "customtimelines":
                        new TD.components.AddToCustomTimelineDialog(o.getMainTweet());
                        break;
                    case "embed":
                        this.trigger("uiShowEmbedTweet", {
                            tweet: o.getMainTweet()
                        });
                        break;
                    case "translate":
                        o.translate();
                        break;
                    case "search-for-quoted":
                        (0, r.default)(document).trigger("uiPerformSearch", {
                            query: o.getChirpURL(),
                            columnKey: t.closest(".js-column").attr("data-column")
                        });
                        break;
                    default:
                        s = !1
                }
                s && (e.preventDefault(), e.stopPropagation()), this.teardownCurrentDropdown()
            }
        }
    }, o.default)
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component;
    e.exports = a(function() {
        this.attributes({
            columnDragHandleSelector: ".js-column-drag-handle",
            appColumnsContainerSelector: ".js-app-columns-container",
            columnsContainerSelector: ".js-app-columns",
            columnSelector: ".js-column"
        }), this.after("initialize", function() {
            this.on("uiColumnRendered", this.handleColumnRendered), this.select("columnsContainerSelector").dragdroplist({
                selector: this.attr.columnSelector,
                contentSelector: this.attr.columnSelector,
                handle: this.attr.columnDragHandleSelector,
                $boundary: this.select("appColumnsContainerSelector"),
                orientation: "horizontal",
                tagName: "section",
                scroll_speed: 24
            }).on("dropped.dragdroplist", function() {
                var e = [];
                this.select("columnSelector").each(function() {
                    e.push((0, r.default)(this).attr("data-column"))
                }), TD.storage.clientController.client.setColumnOrder(e)
            }.bind(this))
        }), this.handleColumnRendered = function(e, t) {
            t.$column.trigger("itemadded.dragdroplist", {
                itemId: t.column
            })
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(0),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(2135),
        o = i(2152),
        c = i(189).TRANSITION_END,
        l = i(12);
    e.exports = l.mixin(function() {
        var e = {
            accountSettings: "accounts"
        };
        this.attributes({
            contentSelector: ".js-app-content",
            drawerSelector: ".js-drawer",
            closeDrawerSelector: ".js-drawer-close",
            composeSelector: ".js-drawer-compose",
            accountSettingsSelector: ".js-drawer-account-settings",
            drawerWidth: 270,
            transitionDuration: 200
        }), this.initialState({
            activeDrawer: null,
            closeDrawerConfirmationRequired: !1
        }), this.componentDidInitialize = function() {
            var e = this;
            this.$content = this.select("contentSelector"), this.on(document, "uiDrawerHideDrawer", this.handleDrawerHide), this.on(document, "uiDrawerShowDrawer", this.handleDrawerShow), this.on(document, "uiShowAccountSettings", this.handleShowAccountSettings), this.on("click", {
                closeDrawerSelector: this.handleDrawerHide
            });
            var t = this.connect(a, {
                mapStateToProps: function(t) {
                    return e.state.closeDrawerConfirmationRequired
                }
            });
            this.attachChild(t, this.getDrawerContainer("compose"), {
                setIsClosable: function() {
                    return function(t) {
                        return e.toggleCloseDrawerConfirmationRequired(!t)
                    }
                }
            }), this.attachChild(o, this.getDrawerContainer("accountSettings"))
        }, this.handleDrawerShow = function(e, t) {
            this.showDrawer({
                drawer: t.drawer,
                withAnimation: t.withAnimation,
                withCloseModal: t.withCloseModal
            })
        }, this.handleDrawerHide = function(e, t) {
            this.state.closeDrawerConfirmationRequired ? this.trigger("uiComposeCloseNeedsConfirmation") : this.hideDrawer({
                withAnimation: !0
            })
        }, this.getDrawerContainer = function(e) {
            return this.select("drawerSelector").filter(function() {
                return (0, r.default)(this).attr("data-drawer") === e
            })
        }, this.handleShowAccountSettings = function() {
            this.showDrawer({
                drawer: "accountSettings",
                withAnimation: !0
            })
        }, this.applyContentTransition = function(e) {
            this.$content.one(c, this.handleTransitionEnd.bind(this)), this.$content.css(e)
        }, this.hideDrawer = function(e) {
            this.state.activeDrawer && (this.select("contentSelector").removeClass("is-open"), this.setTransitionDuration(e.withAnimation), this.mergeState({
                activeDrawer: null
            }), this.applyContentTransition({
                transform: "translateX(0px)",
                "margin-right": "0"
            }), this.trigger("uiDrawerActive", {
                activeDrawer: this.state.activeDrawer
            }))
        }, this.showDrawer = function(t) {
            t.drawer !== this.state.activeDrawer && (this.select("contentSelector").addClass("is-open"), this.setVisibleDrawer(t), this.state.activeDrawer || (this.setTransitionDuration(t.withAnimation), this.applyContentTransition({
                transform: "translateX(" + this.attr.drawerWidth + "px)"
            })), this.mergeState({
                activeDrawer: t.drawer
            }), this.trigger("uiDrawerActive", {
                activeDrawer: this.state.activeDrawer
            }), e[t.drawer] && this.trigger(document, "scribeEvent", {
                terms: {
                    page: "settings",
                    section: e[t.drawer],
                    action: "impression"
                }
            }))
        }, this.handleTransitionEnd = function() {
            this.state.activeDrawer && this.$content.css({
                "margin-right": this.attr.drawerWidth
            }), this.trigger("uiDrawerTransitionComplete")
        }, this.setVisibleDrawer = function(e) {
            var t = e.drawer,
                i = e.withCloseModal,
                s = void 0 === i || i;
            s && this.trigger("uiCloseModal"), this.select("drawerSelector").addClass("is-hidden");
            var n = this.getDrawerContainer(t);
            n.removeClass("is-hidden")
        }, this.setTransitionDuration = function(e) {
            e ? this.$content.css({
                "transition-duration": this.attr.transitionDuration + "ms"
            }) : this.$content.css({
                "transition-duration": "0"
            })
        }, this.toggleCloseDrawerConfirmationRequired = function(e) {
            this.mergeState({
                closeDrawerConfirmationRequired: e
            })
        }, this.render = function() {}
    })
}, function(e, t, i) {
    "use strict";
    var s = w(i(7)),
        n = w(i(43)),
        r = w(i(30)),
        a = w(i(32)),
        o = w(i(3)),
        c = w(i(0)),
        l = w(i(142)),
        u = w(i(20)),
        d = i(58),
        h = i(19),
        m = i(49),
        f = w(i(2136)),
        p = i(651),
        g = w(i(1)),
        v = i(38),
        T = w(i(2137));

    function w(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var b = i(12),
        y = i(642),
        C = i(2138),
        _ = i(2139),
        D = i(643),
        S = i(644),
        k = i(2140),
        E = i(647),
        I = i(2141),
        A = i(2142),
        M = i(2143),
        x = i(648),
        R = i(645),
        F = i(2144),
        O = i(2145),
        L = i(2146),
        U = i(2147),
        P = i(623),
        N = i(160),
        j = i(2148),
        B = i(649),
        $ = i(158),
        K = i(653),
        z = i(650),
        H = i(242),
        q = i(29);
    e.exports = b.mixin(l.default, u.default, function() {
        this.attributes({
            stayOpenInputSelector: ".js-compose-stay-open",
            tweetTextInputSelector: ".js-compose-text",
            characterCountSelector: ".js-character-count",
            progressSvgSelector: ".js-progress-svg",
            accountSafeguardCheckboxSelector: ".js-account-safeguard-checkbox",
            composeScrollerSelector: ".js-compose-scroller",
            withTouchComposeClass: "is-touch-compose",
            addImageButtonSelector: ".js-add-image-button",
            sendButtonContainerSelector: ".js-send-button-container",
            replyInfoContainerSelector: ".js-reply-info-container",
            scheduleButtonSelector: ".js-scheduler",
            tweetTypeButtonSelector: ".js-tweet-type-button",
            inReplyToSelector: ".js-in-reply-to",
            quoteTweetHolderSelector: ".js-quote-tweet-holder",
            inlineConfirmationSelector: ".js-inline-confirmation",
            accountSelectorSelector: ".js-account-list",
            tcoLinkLength: 22,
            tweetLinkLength: 23,
            panelCloseDelay: 500,
            releaseFocusDelay: 300,
            defaultTextComposeHeight: 130,
            increasedTextComposeHeight: 160,
            minimumComposeHeight: 180,
            scheduledHintSelector: ".js-compose-hint",
            accountSelectorGridToggleSelector: ".js-account-selector-grid-toggle",
            maxRecipients: 20,
            setIsClosable: null
        }), this.initialState({
            sendingStatus: "ready",
            tweetType: "tweet",
            tweetText: "",
            tweetTextFocused: !1,
            messageConversation: null,
            scheduledDate: null,
            quotedTweet: null,
            stayOpen: null,
            accountSafeguardChecked: !1,
            inReplyTo: null,
            uploadsInProgress: {},
            attr: function() {
                return this.attr
            },
            selectedAccountKeys: function() {
                return [(0, d.getDefaultAccount)().accountKey]
            },
            messageRecipients: function() {
                return []
            },
            files: function() {
                return []
            },
            currentTime: function() {
                return new Date
            },
            replies: function() {
                return []
            },
            mentions: function() {
                return []
            },
            selectionIndices: function() {
                return []
            },
            tweetSentWhileVideoUploadInProgress: !1
        }), this.after("initialize", function() {
            var e = this;
            TD.util.isTouchDevice() && TD.decider.get("touchdeck_compose_v2") && this.$node.addClass(this.attr.withTouchComposeClass);
            var t = this.observe(this.requestResource("settings.state")).map(TD.util.unpluck("settings")),
                i = this.observe(this.requestResource("/1.1/help/configuration.json")).map(TD.util.unpluck("configuration")),
                s = q.Observable.combineLatest([this.observableState, t, i], TD.util.merge).map(z).share();
            this.provideResource("dockedCompose.state", s), this.observe(q.Observable.fromEvent(this.$node, "uiComposeSendTweet")).do(function(e) {
                e.stopPropagation()
            }).withLatestFrom(s, function(e, t) {
                return t
            }).filter(TD.util.pluck("canSend")).map(this.prepareSendTweet.bind(this)).subscribe(this.sendTweet.bind(this)), this.observe(this.observableState).distinctUntilKeyChanged("scheduledDate", m.existenceEquality).filter(function(e) {
                var t = g.default.get(e, ["metadata", "originalUpdates"], []),
                    i = !e.quotedTweet && t.some(function(e) {
                        return e.attachmentUrl
                    }),
                    s = !e.inReplyTo && t.some(function(e) {
                        return e.inReplyToStatusId
                    });
                return e.scheduledDate && (i || s)
            }).subscribe(this.hydrateScheduledFields.bind(this)), this.observe(this.observableState).filter(function(e) {
                return "reply" === e.tweetType && e.autoPopulateReplyMetadata && g.default.get(e, "inReplyTo.getReplyUsers") && 0 === g.default.get(e, "implicitRecipients.length", 0)
            }).map(function(e) {
                return e.inReplyTo.getReplyUsers()
            }).filter(function(e) {
                return e.length
            }).subscribe(function(t) {
                e.mergeState({
                    implicitRecipients: t
                })
            }), this.observe(this.observableState).pluck("tweetTextFocused").distinctUntilChanged().filter(TD.util.equals(!1)).subscribe(this.setReleaseFocusTimer.bind(this));
            var n = this.connect(T.default, {
                mapStateToProps: function(e) {
                    return {
                        scheduledDate: e.scheduledDate
                    }
                }
            });
            this.attachChild(n, this.select("scheduledHintSelector")), this.observe(this.requestResource("dockedCompose.state")).pluck("displayedCharacterCount").distinctUntilChanged().subscribe(function(t) {
                e.mergeState({
                    displayedCharacterCount: t
                })
            }), this.attachChild(D, this.select("characterCountSelector"), {
                stateSource: "dockedCompose.state"
            });
            var r = this.connect(S, {
                mapStateToProps: function(e) {
                    return {
                        characterCount: e.displayedCharacterCount,
                        tweetType: e.tweetType
                    }
                }
            });
            this.attachChild(r, this.select("progressSvgSelector").first()), this.attachChild(M, this.$node, {
                stateSource: "dockedCompose.state",
                maxRecipients: this.attr.maxRecipients
            }), this.attachChild(k, this.select("inReplyToSelector"), {
                stateSource: "dockedCompose.state"
            }), this.attachChild(x, this.select("tweetTextInputSelector"), {
                stateSource: "dockedCompose.state"
            }), this.attachChild(L, this.select("quoteTweetHolderSelector"), {
                stateSource: "dockedCompose.state"
            }), this.attachChild(R, this.select("sendButtonContainerSelector"), {
                stateSource: "dockedCompose.state"
            }), this.attachChild(I, this.select("addImageButtonSelector"), {
                stateSource: "dockedCompose.state"
            }), this.attachChild(A, this.select("scheduleButtonSelector"), {
                stateSource: "dockedCompose.state"
            }), this.attachChild(O, this.select("tweetTypeButtonSelector"), {
                stateSource: "dockedCompose.state"
            }), this.attachChild(F, this.$node, {
                stateSource: "dockedCompose.state"
            }), this.attachChild(U, this.select("stayOpenInputSelector"), {
                settingName: "compose_stay_open"
            }), this.on("uiAccountsSelected", this.handleAccountsSelected), this.attachChild(C, this.select("accountSelectorSelector"), {
                stateSource: "dockedCompose.state"
            }), this.attachChild(_, this.select("accountSelectorGridToggleSelector")), this.attachChild(y, this.select("accountSafeguardCheckboxSelector"), {
                stateSource: "dockedCompose.state"
            });
            var a = this.connect(E, {
                mapStateToProps: function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                        t = e.selectedAccountKeys,
                        i = void 0 === t ? [] : t,
                        s = e.implicitRecipients,
                        n = void 0 === s ? [] : s,
                        r = e.excludedRecipientsIds;
                    return {
                        recipients: H.recipientsWithoutSelfMention(n, i),
                        excludedRecipientsIds: r
                    }
                }
            });
            this.attachChild(a, this.select("replyInfoContainerSelector")), this.releaseFocusTimer = null, this.observe(this.requestResource("settings.state")).pluck("compose_stay_open").distinctUntilChanged().subscribe(this.toState("stayOpen").bind(this)), this.on(document, "uiDrawerActive", this.handleUiDrawerActive), this.on(document, "uiDockedComposeTweet", this.handleUiComposeTweet), this.on(document, "uiComposeClose", this.handleUiComposeClose), this.on(document, "uiComposeCloseNeedsConfirmation", this.handleUiComposeCloseNeedsConfirmation), this.on(document, "uiComposeFilesAdded", this.handleUiComposeFilesAdded), this.on(document, "uiRemoveQuotedTweet", this.handleQuotedTweetRemove), this.on(document, "uiRecipientToggledInDockedCompose", this.handleRecipientToggledFromList), this.on(document, "videoUploadProgress", this.handleVideoUploadProgress), this.on(document, "videoUploadCancel", this.handleVideoUploadCancel), this.on("uiComposeTweetSending", this.enterSendingState), this.on("uiComposeTweetSent", this.enterSuccessState), this.on("uiComposeTweetError", this.enterErrorState), this.on("uiComposeScheduleDate", this.handleUiComposeScheduleDate), this.on("uiAccountSafeguardCheckboxChange", this.handleAccountSafeguardCheckboxChange), this.on("uiRemoveInReplyTo", this.handleRemoveInReplyTo), this.after("attachImagesPreview", function() {
                this.mergeState({
                    selectionIndices: [this.state.tweetText.length, this.state.tweetText.length]
                })
            }), this.after("removeFile", function() {
                this.mergeState({
                    files: this.getFiles()
                })
            }), this.onReceiveClick(function() {
                this.hasFocus || this.focusRequest()
            }), this.onLoseClick(function() {
                this.hasFocus && this.focusRelease()
            }), this.on("uiComposeImageAdded", this.handleComposeImageAdded), this.on(document, "uiComposeResetFiles", this.resetFiles.bind(this)), this.on("uiComposeImageClicked", function() {
                this.mergeState({
                    tweetTextFocused: !0
                })
            }), this.on("uiComposeTextChanged", this.handleComposeTextChanged), this.on("uiAddMessageRecipient", this.handleUiAddMessageRecipient), this.on("uiRemoveMessageRecipient", this.handleUiRemoveMessageRecipient), this.on("uiRemoveLastMessageRecipient", this.handleUiRemoveLastMessageRecipient), this.on("uiAddMessageConversation", this.handleUiAddMessageConversation), this.on("uiRemoveMessageConversation", this.handleUiRemoveMessageConversation), this.on("uiComposeTextFocus", this.handleUiComposeTextFocus), this.$composeScroller = this.select("composeScrollerSelector"), q.Observable.merge(this.observableState.distinctUntilChanged(function(e, t) {
                var i = g.default.get(e, "inReplyTo.id") === g.default.get(t, "inReplyTo.id"),
                    s = g.default.get(e, "quotedTweet.id") === g.default.get(t, "quotedTweet.id");
                return i && s
            }), t.pluck("account_selector_grid_mode"), q.Observable.fromEvent((0, c.default)(document), "uiMainWindowResized"), q.Observable.fromEvent(this.$node, "uiComposeScheduleDatePickerOpen")).debounceTime(50).subscribe(this.initScrollbars.bind(this)), this.observe(q.Observable.timer(0, 1e3)).map(function(e) {
                return {
                    value: e,
                    timestamp: Date.now()
                }
            }).pluck("timestamp").map(TD.util.makeDate).subscribe(this.toState("currentTime").bind(this)), this.state.stayOpen && this.trigger(document, "uiDockedComposeTweet", {
                noAnimate: !0,
                noFocus: !0
            })
        }), this.resetFiles = function() {
            this.mergeState({
                files: this.getFiles()
            })
        }, this.getConversation = function(e, t) {
            return t.map(v.getClientByAccountKey).map(function(t) {
                return t.conversations.getConversation(e)
            }).find(function(e) {
                return e
            }) || null
        }, this.hydrateMessageRecipients = function(e) {
            return TD.core.defer.gatherResults(e.map(function(e) {
                return e.screenName && e.id && e.profileImageURL ? TD.core.defer.succeed(e) : TD.cache.twitterUsers.getByScreenName(e.screenName || e)
            })).addCallbackWith(this, function(e) {
                return g.default.uniq(e, function(e) {
                    return e.id
                })
            })
        }, this.hydrateScheduledFields = function(e) {
            var t = this,
                i = g.default.get(e, ["metadata", "originalUpdates"], []),
                s = i.map(function(e) {
                    var t = e.account,
                        i = e.attachmentUrl,
                        s = e.inReplyToStatusId;
                    return {
                        account: t,
                        hydrations: {
                            quotedTweet: (0, h.extractTweetIdFromPermalink)(i),
                            inReplyTo: s
                        }
                    }
                }),
                o = TD.core.defer.gatherResults(s.map(function(e) {
                    var t = e.account,
                        i = e.hydrations,
                        s = TD.controller.clients.getClient(t.getKey()),
                        o = (0, a.default)(i).map(function(e) {
                            var t = i[e];
                            if (!t) return TD.core.defer.succeed();
                            var n = new TD.core.defer.Deferred;
                            return s.show(t, n.callback.bind(n), n.errback.bind(n)), n.addCallback(function(t) {
                                return (0, r.default)({}, e, t)
                            }), n
                        }),
                        c = TD.core.defer.gatherResults(o);
                    return c.addCallback(function(e) {
                        return g.default.merge.apply(g.default, [{}].concat((0, n.default)(e)))
                    }), c
                }));
            o.addCallback(function(e) {
                t.mergeState(e[0])
            })
        }, this.handleUiAddMessageConversation = function(e, t) {
            H.existingConversation(this.state) || H.keyIsInSelectedAccounts(this.state, t.conversation.accountKey) && this.mergeState({
                messageConversation: this.getConversation(t.conversation.conversationId, [t.conversation.accountKey]),
                tweetTextFocused: !0
            })
        }, this.handleUiAddMessageRecipient = function(e, t) {
            if (this.state.messageConversation) return !1;
            H.maxRecipientsReached(this.state) || this.hydrateMessageRecipients(this.state.messageRecipients.concat(t.recipient)).addCallbackWith(this, function(e) {
                this.mergeState({
                    messageRecipients: e,
                    tweetTextFocused: e.length >= this.attr.maxRecipients
                })
            })
        }, this.handleUiRemoveMessageConversation = function(e) {
            this.mergeState({
                messageConversation: null
            })
        }, this.handleUiRemoveMessageRecipient = function(e, t) {
            var i = this.state.messageRecipients.filter(function(e) {
                return e.id !== t.id
            });
            this.hydrateMessageRecipients(i).addCallbackWith(this, this.toState("messageRecipients"))
        }, this.handleUiRemoveLastMessageRecipient = function(e, t) {
            this.hydrateMessageRecipients(this.state.messageRecipients.slice(0, -1)).addCallbackWith(this, this.toState("messageRecipients"))
        }, this.handleAccountsSelected = function(e, t) {
            this.mergeState({
                selectedAccountKeys: t.accountKeys
            }), this.updateAccountsMediaIds(t.accountKeys)
        }, this.handleUiDrawerActive = function(e, t) {
            null === t.activeDrawer && this.resetAfterClose()
        }, this.handleQuotedTweetRemove = function() {
            this.mergeState({
                quotedTweet: null
            }), TD.controller.stats.discardQuoteTweet()
        }, this.hideComposePanel = function() {
            this.trigger("uiDrawerHideDrawer")
        }, this.handleUiComposeTweet = function(e, t) {
            t = t || {}, this.trigger("uiDrawerShowDrawer", {
                drawer: "compose",
                withAnimation: !t.noAnimate,
                withCloseModal: !t.noFocus
            }), this.mergeState({
                tweetType: t.type || "tweet"
            }), this.trigger(document, "scribeEvent", {
                terms: {
                    page: "compose",
                    component: "docked_compose",
                    element: this.state.tweetType,
                    action: "impression"
                }
            }), !0 !== t.noReset && this.resetComposePanelState(t), t.noFocus || this.focusRequest(), this.enableClickTrap();
            var i = [];
            if (t.columnKey) {
                var s = TD.controller.columnManager.get(t.columnKey),
                    n = s.getFeeds();
                i = n.length > 1 ? [(0, d.getDefaultAccount)().accountKey] : [n[0].getAccountKey()], this.mergeState({
                    selectedAccountKeys: i
                })
            }
        }, this.handleUiComposeClose = function(e, t) {
            (t = t || {}).keyboardShortcut ? this.hasFocus && (this.state.stayOpen ? this.focusRelease() : this.hideComposePanel()) : this.hideComposePanel(), clearTimeout(this.releaseFocusTimer), this.releaseFocusTimer = null
        }, this.handleUiComposeCloseNeedsConfirmation = function() {
            var e = this;
            this.state.tweetSentWhileVideoUploadInProgress && this.attachChild(f.default, this.select("inlineConfirmationSelector"), {
                confirmationText: (0, o.default)("Are you sure you want to discard this Tweet?"),
                primaryButtonText: (0, o.default)("Discard"),
                secondaryButtonText: (0, o.default)("Cancel"),
                buttonPrimaryAction: function() {
                    return function() {
                        e.attr.setIsClosable(!0), e.hideComposePanel(), e.triggerEventForClearingVideoProcessing()
                    }
                },
                buttonPrimaryIsNegative: !0,
                buttonPrimaryClickShouldCauseTeardown: !0,
                buttonSecondaryClickShouldCauseTeardown: !0,
                teardownOn: "teardownInlineConfirmation"
            })
        }, this.prepareSendTweet = function(e) {
            var t = (0, p.isUploading)(this.state);
            t && (this.attr.setIsClosable(!t), this.trigger("uiDockedComposeSendingVideoInProgress")), this.mergeState({
                tweetSentWhileVideoUploadInProgress: t
            });
            var i = {};
            return i.requestId = g.default.uniqueId("sendTweet"), i.text = TD.decider.get("compose_quoted_tweet_as_attachment") ? e.tweetText : e.rawTweetText, i.inReplyToStatusId = this.state.inReplyTo && this.state.inReplyTo.id, i.autoPopulateReplyMetadata = this.state.autoPopulateReplyMetadata, i.excludeReplyUserIds = this.state.excludedRecipientsIds, i.files = this.getFiles(), TD.decider.get("compose_quoted_tweet_as_attachment") && (i.attachmentUrl = e.hasQuotedTweet ? e.quotedTweet.getChirpURL() : ""), i.messageRecipientIds = e.messageRecipients.map(TD.util.pluck("id")).join(","), i.conversationId = e.messageConversation && e.messageConversation.conversationId, i.scheduledDate = e.scheduledDate, i.from = e.selectedAccountKeys, i.type = e.tweetType, i.metadata = e.metadata, i.files.length && (i.accountsMediaIds = i.from.reduce(function(e, t) {
                return e[t] = this.getDeferredMediaIdsFor(t), e
            }.bind(this), {})), i
        }, this.enterSendingState = function(e) {
            e.stopPropagation(), this.mergeState({
                sendingStatus: "sending"
            })
        }, this.enterSuccessState = function(e) {
            e.stopPropagation(), this.mergeState({
                sendingStatus: "success"
            }), setTimeout(this.resetAfterSend.bind(this), this.attr.panelCloseDelay)
        }, this.enterErrorState = function(e, t) {
            var i;
            e.stopPropagation(), t.errors && (i = t.errors.map(function(e) {
                return e.request.accountKey
            })), this.trigger(document, "teardownInlineConfirmation"), this.mergeState({
                sendingStatus: "ready",
                selectedAccountKeys: i || this.state.selectedAccountKeys
            }), this.triggerEventForClearingVideoProcessing()
        }, this.resetAfterSend = function() {
            this.mergeState({
                tweetType: "message" === this.state.tweetType ? "message" : "tweet",
                tweetText: "",
                sendingStatus: "ready",
                messageRecipients: [],
                messageConversation: null,
                quotedTweet: null,
                files: [],
                inReplyTo: null,
                replies: [],
                mentions: [],
                implicitRecipients: [],
                excludedRecipientsIds: [],
                scheduledDate: null,
                metadata: {},
                tweetSentWhileVideoUploadInProgress: !1
            }), this.attr.setIsClosable(!0), this.trigger(document, "teardownInlineConfirmation"), this.state.stayOpen ? this.resetComposePanelState({
                type: this.state.tweetType,
                text: "",
                from: this.state.selectedAccountKeys
            }) : this.hideComposePanel(), this.triggerEventForClearingVideoProcessing()
        }, this.resetAfterClose = function() {
            this.removeFiles(), this.mergeState({
                tweetType: "tweet",
                tweetText: "",
                selectedAccountKeys: [(0, d.getDefaultAccount)().accountKey],
                files: [],
                sendingStatus: "ready",
                messageRecipients: [],
                messageConversation: null,
                quotedTweet: null,
                metadata: {},
                inReplyTo: null,
                replies: [],
                mentions: [],
                implicitRecipients: [],
                excludedRecipientsIds: [],
                tweetTextFocused: !1,
                scheduledDate: null,
                tweetSentWhileVideoUploadInProgress: !1
            }), this.$node.find(":focus").blur(), this.focusRelease(), this.disableClickTrap(), this.resetSendTweet()
        }, this.resetComposePanelState = function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            e.type = e.type || "tweet";
            var t = void 0 !== e.text,
                i = {
                    tweetText: this.state.tweetText,
                    scheduledDate: this.state.scheduledDate,
                    metadata: e.metadata || this.state.metadata || {},
                    selectedAccountKeys: this.state.selectedAccountKeys,
                    implicitRecipients: this.state.implicitRecipients
                };
            switch (t && (i.scheduledDate = null, this.removeFiles()), e.schedule && (i.scheduledDate = e.schedule.time, i.selectedAccountKeys = e.from), e.type) {
                case "tweet":
                    i.inReplyTo = null, void 0 !== e.text ? i.tweetText = e.text : this.state.messageRecipients.length > 0 && (i.tweetText = K.prependRecipients(this.state)), void 0 !== e.appendText && (i.tweetText = K.appendText(e.appendText, this.state)), (e.from && e.from.length > 0 || e.quotedTweet) && (i.selectedAccountKeys = e.from), e.noFocus || TD.util.isiOSDevice() && TD.decider.get("touchdeck_compose_v2") || (i.tweetTextFocused = !0, i.selectionIndices = i.tweetText && [i.tweetText.length, i.tweetText.length]), i.messageRecipients = [], i.messageConversation = null, i.quotedTweet = e.quotedTweet || null;
                    break;
                case "reply":
                    if (H.shouldSetNewReplyTo(this.state) && (i.inReplyTo = e.inReplyTo, i.selectedAccountKeys = e.from, i.autoPopulateReplyMetadata = "boolean" != typeof e.autoPopulateReplyMetadata || e.autoPopulateReplyMetadata, i.implicitRecipients = [], i.autoPopulateReplyMetadata && (i.implicitRecipients = e.mentions, i.excludedRecipientsIds = e.excludedRecipientsIds || [])), e.popFromInline) i.tweetText = e.text, i.selectionIndices = [e.text.length, e.text.length], i.mentions = g.default.pluck(e.mentions, "screenName").map($.atMentionify), i.inReplyTo = e.inReplyTo;
                    else {
                        var n = K.mergeRepliesAndMentions(this.state.replies, this.state.mentions, e.inReplyTo, e.mentions, i.implicitRecipients);
                        if (i = (0, s.default)({}, i, n), H.onlyOneAccountIsSelected(i)) {
                            var r = (0, v.getAccountData)(i.selectedAccountKeys[0]).screenName;
                            i.mentions = g.default.without(i.mentions, $.atMentionify(r)), i.replies = g.default.without(i.replies, $.atMentionify(r))
                        }
                        i.tweetText = K.getStackedRepliesText(this.state.tweetText, i.replies, i.mentions), i.selectionIndices = K.getSelectionIndices(i.tweetText, i.replies, i.mentions), i.tweetTextFocused = !0
                    }
                    i.messageRecipients = [], i.messageConversation = null;
                    break;
                case "message":
                    var a, o = [];
                    if (e.from && e.from.length > 0 && (i.selectedAccountKeys = e.from), void 0 !== e.text ? i.tweetText = e.text : a = $.extractMentions(this.state.tweetText), e.conversationId) i.messageConversation = this.getConversation(e.conversationId, i.selectedAccountKeys);
                    else if (e.messageRecipients) o = e.messageRecipients;
                    else if (e.to && e.to.screenName) o = [e.to.screenName];
                    else if (this.state.messageRecipients.length > 0) o = this.state.messageRecipients;
                    else if (a && a.length) {
                        o = a;
                        var c = $.removeFirstMention(this.state.tweetText);
                        i.tweetText = c
                    }
                    var l = this.hydrateMessageRecipients(o).addCallbackWith(this, this.toState("messageRecipients"));
                    o.length && l.addCallbackWith(this, function() {
                        i.tweetTextFocused = !0
                    }), i.quotedTweet = e.quotedTweet || null, i.inReplyTo = null
            }
            this.mergeState(i)
        }, this.triggerEventForClearingVideoProcessing = function() {
            this.trigger("uiDockedComposeSendingVideoComplete")
        }, this.resetVideoUploadProgress = function() {
            this.mergeState({
                uploadsInProgress: {}
            }), this.triggerEventForClearingVideoProcessing()
        }, this.handleUiComposeFilesAdded = function(e, t) {
            this.resetVideoUploadProgress(), this.addFiles(g.default.map(t.files)), this.trigger("uiDockedComposeTweet", {
                type: this.state.tweetType,
                noReset: !0
            })
        }, this.handleUiComposeScheduleDate = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                i = t.date;
            this.mergeState({
                scheduledDate: i
            })
        }, this.initScrollbars = function() {
            var e = this.$composeScroller.data("antiscroll");
            e ? e.refresh() : this.$composeScroller.antiscroll({
                initialDisplay: !1
            })
        }, this.handleComposeTextChanged = function(e, t) {
            e.stopPropagation(), this.mergeState({
                tweetText: t.value
            })
        }, this.setReleaseFocusTimer = function(e) {
            var t = 0;
            this.state.stayOpen || (t = this.attr.releaseFocusDelay), this.releaseFocusTimer = setTimeout(function() {
                this.releaseFocusTimer = null, this.focusRelease()
            }.bind(this), t)
        }, this.handleComposeImageAdded = function(e) {
            this.mergeState({
                files: this.getFiles()
            })
        }, this.handleAccountSafeguardCheckboxChange = function(e, t) {
            e.stopPropagation(), this.mergeState({
                accountSafeguardChecked: t.checked
            })
        }, this.handleRemoveInReplyTo = function(e, t) {
            e.stopPropagation(), this.mergeState({
                tweetText: K.stripNamesFromText(this.state.tweetText, this.state.mentions.concat(this.state.replies)),
                inReplyTo: null,
                replies: [],
                mentions: [],
                implicitRecipients: [],
                excludedRecipientsIds: [],
                autoPopulateReplyMetadata: !1,
                tweetTextFocused: !0
            })
        }, this.handleUiComposeTextFocus = function(e, t) {
            e.stopPropagation(), this.mergeState({
                tweetTextFocused: t.focused
            })
        }, this.handleRecipientToggledFromList = function(e, t) {
            var i = H.getUpdatedExcludedRecipientsIds(this.state, t);
            this.mergeState({
                excludedRecipientsIds: i
            })
        }, this.handleVideoUploadProgress = function(e, t) {
            var i = this.getFiles();
            i && i.length && this.mergeState({
                uploadsInProgress: (0, s.default)({}, this.state.uploadsInProgress, (0, r.default)({}, t.userId, {
                    mode: t.mode,
                    percent: t.percent
                }))
            })
        }, this.handleVideoUploadCancel = function(e, t) {
            delete this.state.uploadsInProgress[t.userId]
        }, this.render = function() {}
    }, P, N, j, B)
}, function(e, t, i) {
    "use strict";
    var s = r(i(8)),
        n = r(i(12));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = n.default.mixin(function() {
        this.attributes({
            template: "inline_confirmation",
            confirmationText: null,
            primaryButtonText: null,
            secondaryButtonText: null,
            backgroundColorClass: "bg-color-twitter-lightest-gray",
            textColorClass: "color-twitter-black",
            buttonPrimarySelector: ".js-btn-primary",
            buttonSecondarySelector: ".js-btn-secondary",
            buttonPrimaryAction: null,
            buttonSecondaryAction: function() {
                return function() {}
            },
            buttonPrimaryIsNegative: !1,
            buttonPrimaryClickShouldCauseTeardown: !1,
            buttonSecondaryClickShouldCauseTeardown: !1
        }), this.componentDidInitialize = function() {
            this.on("click", {
                buttonPrimarySelector: this.handlePrimaryButtonClick,
                buttonSecondarySelector: this.handleSecondaryButtonClick
            })
        }, this.handlePrimaryButtonClick = function() {
            var e = this.attr,
                t = e.buttonPrimaryAction,
                i = e.buttonPrimaryClickShouldCauseTeardown;
            t && t(), i && this.teardown()
        }, this.handleSecondaryButtonClick = function() {
            var e = this.attr,
                t = e.buttonSecondaryAction,
                i = e.buttonSecondaryClickShouldCauseTeardown;
            t && t(), i && this.teardown()
        }, this.render = function() {
            var e = this.attr,
                t = e.confirmationText,
                i = e.primaryButtonText,
                n = e.secondaryButtonText,
                r = e.buttonPrimaryIsNegative,
                a = e.backgroundColorClass,
                o = e.textColorClass,
                c = s.default.render(this.attr.template, {
                    confirmationText: t,
                    primaryButtonText: i,
                    secondaryButtonText: n,
                    buttonPrimaryIsNegative: r,
                    backgroundColorClass: a,
                    textColorClass: o
                });
            this.$node.html(c)
        }, this.componentWillTeardown = function() {
            this.$node.html("")
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(12)),
        n = r(i(8));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = s.default.mixin(function() {
        this.attributes({
            template: "scheduled_hint"
        }), this.shouldComponentUpdate = function(e) {
            return this.props.scheduledDate !== e.scheduledDate
        }, this.render = function() {
            var e = Boolean(this.props.scheduledDate),
                t = n.default.render(this.attr.template, {
                    showHint: e
                });
            this.$node.html(t)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = d(i(0)),
        n = d(i(12)),
        r = d(i(1)),
        a = d(i(8)),
        o = d(i(646)),
        c = d(i(49)),
        l = d(i(20)),
        u = i(58);

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = n.default.mixin(function() {
        this.attributes({
            accountItemSelector: ".js-account-item",
            gridModeClass: {
                grid: "is-grid",
                minigrid: "is-minigrid",
                list: "is-list"
            },
            avatarSize: {
                grid: "48",
                minigrid: "32",
                list: "32"
            },
            stateSource: null
        }), this.initialState({
            defaultAccountKey: function() {
                return (0, u.getDefaultAccount)().accountKey
            },
            selectedAccountKeys: function() {
                return [(0, u.getDefaultAccount)().accountKey]
            },
            gridMode: function() {
                return TD.settings.getAccountSelectorGridMode()
            },
            tweetSentWhileVideoUploadInProgress: !1
        }), this.componentDidInitialize = function() {
            this.on("click keypress", {
                accountItemSelector: this.handleClick
            }), this.observe(this.requestResource("settings.state")).pluck("account_selector_grid_mode").subscribe(this.toState("gridMode").bind(this)), this.observe(this.requestResource(this.attr.stateSource)).map(c.default.filterKeys(["selectedAccountKeys", "tweetSentWhileVideoUploadInProgress"])).distinctUntilChanged(r.default.isEqual).subscribe(this.mergeState.bind(this)), this.observe(this.requestResource("accounts.state")).map(c.default.filterKeys(["accounts"])).distinctUntilKeyChanged("accounts", function(e, t) {
                var i = r.default.pluck(e, "accountKey"),
                    s = r.default.pluck(t, "accountKey");
                return r.default.isEqual(i, s)
            }).map(this.processAccounts, this).subscribe(this.mergeState.bind(this)), this.initializeTooltips()
        }, this.shouldComponentUpdate = function(e, t) {
            return !r.default.isEqual(t, this.state)
        }, this.initializeTooltips = function() {
            TD.util.isTouchDevice() && TD.decider.get("touchdeck_compose_v2") || this.$node.tooltip({
                selector: ".js-show-tip",
                container: "body",
                placement: "bottom",
                suppressFadeOut: !0
            })
        }, this.processAccounts = function(e) {
            if (e.accounts) {
                var t;
                e.accounts.some(function(e) {
                    if (e.isDefault) return t = e.accountKey, !0
                });
                var i = this.state.selectedAccountKeys.filter(function(t) {
                        return e.accounts.some(function(e) {
                            return e.accountKey === t
                        })
                    }),
                    s = 1 === this.state.selectedAccountKeys.length && this.state.selectedAccountKeys[0] === this.state.defaultAccountKey;
                return (0 === i.length || s) && (i = [t]), {
                    defaultAccountKey: t,
                    accounts: e.accounts,
                    selectedAccountKeys: i
                }
            }
        }, this.getAccountData = function() {
            var e = this;
            return this.state.accounts.map(function(t) {
                return {
                    accountKey: t.accountKey,
                    screenName: t.screenName,
                    name: t.name,
                    profileImageURL: t.profileImageURL,
                    isSelected: e.state.selectedAccountKeys.includes(t.accountKey),
                    emojifiedName: t.emojifiedName
                }
            })
        }, this.render = function() {
            if (this.state.accounts) {
                var e = {
                        gridModeClass: this.attr.gridModeClass[this.state.gridMode],
                        avatarSize: this.attr.avatarSize[this.state.gridMode],
                        isListGridMode: "list" === this.state.gridMode,
                        accounts: this.getAccountData()
                    },
                    t = this.getSelectedAccountElement().is(document.activeElement),
                    i = a.default.render("compose/account_selector", e);
                this.$node.html(i), t && this.restoreFocusOnSelectedAccount()
            }
        }, this.handleClick = function(e) {
            if (!this.state.tweetSentWhileVideoUploadInProgress && (!o.default.eventIsKey(e) || o.default.isSpacebar(e))) {
                var t = (0, s.default)(e.target).closest(this.attr.accountItemSelector),
                    i = [t.attr("data-account-key")];
                this.mergeState({
                    selectedAccountKeys: i
                })
            }
        }, this.getSelectedAccountElement = function() {
            return this.state.selectedAccountKeys ? this.select("accountItemSelector").filter('[data-account-key="' + this.state.selectedAccountKeys[0] + '"]') : (0, s.default)()
        }, this.restoreFocusOnSelectedAccount = function() {
            this.state.selectedAccountKeys && this.getSelectedAccountElement().focus()
        }, this.after("stateChanged", function(e, t) {
            var i = r.default.get(e, "selectedAccountKeys"),
                s = r.default.get(t, "selectedAccountKeys");
            r.default.isEqual(i, s) || this.trigger("uiAccountsSelected", {
                accountKeys: this.state.selectedAccountKeys
            })
        })
    }, l.default)
}, function(e, t, i) {
    "use strict";
    var s = r(i(0)),
        n = r(i(8));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).component,
        o = i(96);
    e.exports = a(o, function() {
        this.attributes({
            gridToggleSelector: "[data-grid-mode]"
        }), this.initialState({
            gridMode: function() {
                return TD.settings.getAccountSelectorGridMode()
            }
        }), this.after("initialize", function() {
            this.after("mergeState", this.renderToggle), this.on(document, "dataSettingsValues", this.handleSettingsValue), this.on("click", {
                gridToggleSelector: this.handleGridToggleClick
            }), this.renderToggle()
        }), this.renderToggle = function() {
            var e = {};
            if (e[this.state.gridMode] = !0, this.state.gridMode !== this.previousGridMode) {
                var t = n.default.render("compose/account_selector_grid_toggle", e);
                this.$node.html(t), this.previousGridMode = this.state.gridMode
            }
        }, this.handleSettingsValue = function(e, t) {
            t.account_selector_grid_mode && this.mergeState({
                gridMode: t.account_selector_grid_mode
            })
        }, this.handleGridToggleClick = function(e) {
            var t = (0, s.default)(e.target).closest(this.attr.gridToggleSelector).attr("data-grid-mode");
            TD.settings.setAccountSelectorGridMode(t)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(20));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).component,
        o = i(37),
        c = i(8);
    e.exports = a(n.default, function() {
        this.attributes({
            stateSource: null,
            removeSelector: ".js-in-reply-to-remove"
        }), this.after("initialize", function() {
            this.on("click", {
                removeSelector: function() {
                    this.trigger("uiRemoveInReplyTo")
                }
            }), this.observe(this.requestResource(this.attr.stateSource)).pluck("inReplyTo").distinctUntilChanged(function(e, t) {
                return s.default.get(e, "id") === s.default.get(t, "id")
            }).subscribe(this.render.bind(this))
        }), this.render = function(e) {
            e ? (this.$node.html(c.render("compose/in_reply_to", e)), this.$node.removeClass("is-hidden")) : (this.$node.addClass("is-hidden"), this.$node.html(""))
        }
    }, o)
}, function(e, t, i) {
    "use strict";
    var s = r(i(0)),
        n = r(i(20));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).component,
        o = i(37);
    e.exports = a(n.default, function() {
        this.attributes({
            stateSource: null,
            buttonLabelSelector: ".js-add-image-button-label"
        }), this.after("initialize", function() {
            this.$buttonLabel = this.select("buttonLabelSelector"), this.on(this.$node, "click", this.handleClick);
            var e = this.observe(this.requestResource(this.attr.stateSource));
            e.pluck("addImageButtonText").distinctUntilChanged().subscribe(this.renderButtonText.bind(this)), e.pluck("addImageButtonTooltip").distinctUntilChanged().subscribe(this.renderTooltip.bind(this)), e.pluck("canAddMedia").distinctUntilChanged().subscribe(this.toggleEnabled.bind(this)), e.pluck("tweetType").distinctUntilChanged().subscribe(this.toggleTweetType.bind(this)), e.pluck("scheduledDate").distinctUntilChanged().subscribe(this.toggleScheduledDate.bind(this))
        }), this.toggleTweetType = function(e) {
            this.trigger(this.$node, "uiComposeUpdatedTweetType", {
                type: e
            })
        }, this.toggleScheduledDate = function(e) {
            this.trigger(this.$node, "uiComposeUpdatedScheduledDate", {
                scheduledDate: e
            })
        }, this.renderButtonText = function(e) {
            this.$buttonLabel.text(e)
        }, this.renderTooltip = function(e) {
            var t = (0, s.default)("<div/>").html(e).text();
            this.$node.attr("data-original-title", t)
        }, this.toggleEnabled = function(e) {
            this.$node.toggleClass("is-disabled", !e).attr("tabindex", e ? "" : "-1")
        }, this.handleClick = function(e) {
            this.$node.hasClass("is-disabled") || this.trigger(this.$node, "uiComposeAddImageClick")
        }
    }, o)
}, function(e, t, i) {
    "use strict";
    var s = c(i(1)),
        n = c(i(0)),
        r = c(i(142)),
        a = c(i(20)),
        o = function(e) {
            if (e && e.__esModule) return e;
            var t = {};
            if (null != e)
                for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && (t[i] = e[i]);
            return t.default = e, t
        }(i(19));

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var l = i(5).component,
        u = i(37),
        d = i(29),
        h = i(70);
    e.exports = l(a.default, r.default, function() {
        this.attributes({
            stateSource: null,
            scheduleButtonSelector: ".js-schedule-button",
            scheduleButtonLabelSelector: ".js-schedule-button-label",
            scheduleDatePickerHolderSelector: ".js-schedule-datepicker-holder"
        }), this.initialState({
            datePickerOpen: !1
        }), this.after("initialize", function() {
            var e = this;
            this.$scheduleButton = this.select("scheduleButtonSelector"), this.$scheduleButtonLabel = this.select("scheduleButtonLabelSelector"), this.$scheduleDatePickerHolder = this.select("scheduleDatePickerHolderSelector"), this.initPicker(), d.Observable.fromEvent(this.$scheduleButton, "click", function(e) {
                return e.currentTarget
            }).filter(s.default.negate(o.isDisabled())).map(s.default.negate(this.fromState("datePickerOpen")), this).subscribe(this.toState("datePickerOpen").bind(this));
            var t = this.observe(this.requestResource(this.attr.stateSource)),
                i = t.pluck("scheduledDate").distinctUntilChanged(function(e, t) {
                    var i = e ? e.getTime() : null,
                        s = t ? t.getTime() : null;
                    return i === s
                });
            t.pluck("canSchedule").distinctUntilChanged().subscribe(this.toggleEnabled.bind(this)), t.pluck("scheduleButtonTooltip").distinctUntilChanged().subscribe(this.renderTooltip.bind(this)), t.pluck("scheduleButtonText").distinctUntilChanged().subscribe(this.$scheduleButtonLabel.text.bind(this.$scheduleButtonLabel)), i.subscribe(function(t) {
                return e.scheduleDatePicker.setDate(t)
            });
            var n = this.observableState.pluck("datePickerOpen").distinctUntilChanged().share();
            n.subscribe(this.togglePicker.bind(this)), n.map(o.unpluck("datePickerOpen")).withLatestFrom(i.map(o.unpluck("scheduledDate")), o.merge).subscribe(this.handleStateChanged.bind(this))
        }), this.after("teardown", function() {
            n.default.unsubscribe(this.dateChangedSubscription), n.default.unsubscribe(this.dateRemovedSubscription)
        }), this.handleStateChanged = function(e) {
            e.datePickerOpen && !e.scheduledDate && this.changePickerDate(h().add(20, "m").toDate())
        }, this.togglePicker = function(e) {
            var t = this;
            this.scheduleDatePicker.$node.toggle(e), this.trigger("uiComposeScheduleDatePickerOpen"), s.default.defer(function() {
                return t.toggleClickTrap(e)
            })
        }, this.renderTooltip = function(e) {
            var t = (0, n.default)("<div/>").html(e).text();
            this.$scheduleButton.attr("data-original-title", t)
        }, this.toggleEnabled = function(e) {
            this.$scheduleButton.toggleClass("is-disabled", !e).attr("tabindex", e ? "" : "-1")
        }, this.scheduleRemoved = function(e) {
            this.mergeState({
                datePickerOpen: !1
            })
        }, this.initPicker = function() {
            this.dateChangedSubscription = n.default.subscribe("/change/date", this.changePickerDate.bind(this)), this.dateRemovedSubscription = n.default.subscribe("/removed/date", this.scheduleRemoved.bind(this)), this.scheduleDatePicker = new TD.components.ScheduledDatePicker(this.$scheduleDatePickerHolder, {
                hidden: !this.state.datePickerOpen
            })
        }, this.changePickerDate = function(e) {
            this.trigger("uiComposeScheduleDate", {
                date: e ? h(e).seconds(0).toDate() : e
            })
        }, this.elementIsOutsideScheduler = function(e) {
            return 0 === e.closest(this.$scheduleDatePickerHolder).length && 0 === e.closest(this.$scheduleButton).length
        }, this.elementIsScroller = function(e) {
            return e.hasClass("antiscroll-scrollbar") || e.hasClass("antiscroll-wrap")
        }, this.toggleClickTrap = function(e) {
            e ? (0, n.default)("body").on("click.scheduleclicktrap", function(e) {
                var t = (0, n.default)(e.target);
                this.elementIsOutsideScheduler(t) && !this.elementIsScroller(t) && this.mergeState({
                    datePickerOpen: !1
                })
            }.bind(this)) : (0, n.default)("body").off("click.scheduleclicktrap")
        }
    }, u)
}, function(e, t, i) {
    "use strict";
    var s = a(i(0)),
        n = a(i(1)),
        r = a(i(20));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var o = i(5).component,
        c = i(37),
        l = i(53),
        u = i(96),
        d = i(364),
        h = i(624),
        m = i(250),
        f = i(49),
        p = i(8);
    e.exports = o(u, r.default, function() {
        this.attributes({
            containerSelector: ".js-compose-message-recipient-container",
            inputSelector: ".js-compose-message-account",
            inputContainerSelector: ".js-compose-message-recipient-input-container",
            listContainerSelector: ".js-compose-message-recipient-list",
            removeRecipientSelector: ".js-remove-recipient",
            removeConversationSelector: ".js-remove-conversation",
            recipientSelector: ".js-compose-message-recipient",
            hideInputClass: "compose-message-account-hidden",
            stateSource: null,
            maxRecipients: null,
            dropdownSelector: ".js-typeahead-dropdown",
            focusableSelector: "textarea, input"
        }), this.initialState({
            selectedAccountKeys: function() {
                return []
            }
        }), this.after("initialize", function() {
            this.$container = this.select("containerSelector"), this.$input = this.select("inputSelector"), this.$inputContainer = this.select("inputContainerSelector"), this.$list = this.select("listContainerSelector"), this.on(this.$input, "focus", this.handleInputFocus), this.on(this.$input, "blur", this.handleInputBlur), this.on("click", {
                removeConversationSelector: this.handleRemoveConversationClick,
                removeRecipientSelector: this.handleRemoveRecipientClick,
                listContainerSelector: this.handleListContainerClick
            }), this.attachChild(h, this.$node, {
                inputSelector: this.attr.inputSelector
            }), this.attachChild(d, this.$node, {
                alwaysOpen: !1,
                autoSelect: !0,
                blockLinkActions: !0,
                datasources: ["users", "conversations"],
                datasourcesRecentOnly: [],
                hideAfterSelect: !0,
                inputSelector: this.attr.inputSelector,
                usersTemplate: "typeahead/typeahead_users_compose",
                withClickTrap: !0
            }), this.on("uiTypeaheadInputEscaped uiTypeaheadNoItemSelected", {
                inputSelector: this.handleTypeaheadInputEscaped
            }), this.on("uiTypeaheadInputBackspace", this.handleTypeaheadInputBackspace), this.on("uiTypeaheadItemComplete uiTypeaheadItemSelected", this.handleTypeaheadItemSelected), this.on("uiNeedsTypeaheadSuggestions", this.extendTypeaheadRequest);
            var e = this.observe(this.requestResource(this.attr.stateSource));
            e.pluck("tweetType").map(TD.util.equals("message")).distinctUntilChanged().subscribe(this.toggleVisibility.bind(this)), e.map(f.filterKeys(["messageRecipients", "messageConversation"])).distinctUntilChanged(function(e, t) {
                var i = {
                        messageRecipients: e.messageRecipients,
                        messageConversationId: n.default.get(e, "messageConversation.conversationId")
                    },
                    s = {
                        messageRecipients: t.messageRecipients,
                        messageConversationId: n.default.get(t, "messageConversation.conversationId")
                    };
                return n.default.isEqual(i, s)
            }).subscribe(this.render.bind(this)), e.pluck("selectedAccountKeys").distinctUntilChanged().subscribe(this.toState("selectedAccountKeys").bind(this)), this.setScrollToTopListener()
        }), this.extendTypeaheadRequest = function(e, t) {
            t.accountKey = (this.state.selectedAccountKeys || [])[0]
        }, this.handleRemoveConversationClick = function() {
            this.trigger("uiRemoveMessageConversation")
        }, this.handleRemoveRecipientClick = function(e, t) {
            this.trigger("uiRemoveMessageRecipient", {
                id: (0, s.default)(t.el).attr("data-user-id")
            })
        }, this.handleInputFocus = function() {
            this.$inputContainer.addClass("is-focused")
        }, this.handleInputBlur = function() {
            this.$inputContainer.removeClass("is-focused")
        }, this.handleListContainerClick = function(e, t) {
            e.target === t.el && (this.$input.focus(), m.makeElementVisible(this.$inputContainer, this.$input))
        }, this.toggleVisibility = function(e) {
            this.$container.toggleClass("is-hidden", !e), e ? TD.util.isTouchDevice() && TD.decider.get("touchdeck_compose_v2") || this.$input.focus() : this.$input.blur()
        }, this.render = function(e) {
            var t = this.$inputContainer.scrollTop(),
                i = t + this.$inputContainer.height() >= this.$inputContainer.prop("scrollHeight");
            this.select("recipientSelector").remove(), e.messageRecipients && e.messageRecipients.length > 0 ? (this.renderRecipientList(e.messageRecipients), this.$inputContainer.scrollTop(t), i && m.makeElementVisible(this.$inputContainer, this.$input), this.checkMaxRecipients(e.messageRecipients)) : e.messageConversation ? (this.renderConversation(e.messageConversation), this.$input.addClass(this.attr.hideInputClass)) : (this.$list.addClass("is-hidden"), this.$input.removeClass(this.attr.hideInputClass), this.$input.focus(), this.trigger("uiMessageRecipientUnset"))
        }, this.renderConversation = function(e) {
            var t = e.render({
                templateName: "compose/message_conversation"
            });
            this.$list.prepend(t), this.$list.removeClass("is-hidden")
        }, this.renderRecipientList = function(e) {
            var t = p.render("compose/message_recipients", {
                users: e
            });
            this.$list.prepend(t), this.$list.removeClass("is-hidden")
        }, this.checkMaxRecipients = function(e) {
            var t = e.length >= this.attr.maxRecipients;
            this.$input.toggleClass(this.attr.hideInputClass, t).trigger(t ? "blur" : "focus")
        }, this.handleTypeaheadInputBackspace = function(e, t) {
            this.trigger("uiRemoveLastMessageRecipient")
        }, this.handleTypeaheadItemSelected = function(e, t) {
            this.$input.val(""), "conversation" === t.searchType ? this.trigger("uiAddMessageConversation", {
                conversation: t.item
            }) : "user" === t.searchType && this.trigger("uiAddMessageRecipient", {
                recipient: t.item
            })
        }, this.handleTypeaheadInputEscaped = function(e) {
            var t = this.select("inputSelector");
            "" === t.val().trim() ? t.blur() : t.val("")
        }, this.setScrollToTopListener = function() {
            var e = this.select("focusableSelector");
            this.on(e, "focus", function() {
                window.scrollTo(0, 0), document.body.scrollTop = 0
            })
        }
    }, l, c)
}, function(e, t, i) {
    "use strict";
    var s = r(i(3)),
        n = r(i(20));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).component,
        o = i(37),
        c = i(49);
    e.exports = a(n.default, function() {
        this.attributes({
            stateSource: null,
            titleSelector: ".js-compose-title",
            headerSelector: ".js-compose-header",
            messageHeaderSelector: ".js-compose-message-header"
        }), this.after("initialize", function() {
            this.$title = this.select("titleSelector"), this.$header = this.select("headerSelector"), this.$messageHeader = this.select("messageHeaderSelector"), this.observe(this.requestResource(this.attr.stateSource)).map(c.filterKeys(["tweetType", "scheduledDate", "metadata"])).distinctUntilChanged(c.shallowEquals()).subscribe(this.render.bind(this))
        }), this.render = function(e) {
            this.$header.toggleClass("with-dm-icon", "message" === e.tweetType), this.$messageHeader.text("message" === e.tweetType ? (0, s.default)("Message") : (0, s.default)("Tweet"));
            var t = e.scheduledDate && e.metadata && e.metadata.originalUpdates;
            t ? this.$title.text((0, s.default)("Edit scheduled Tweet")) : this.$title.text("message" === e.tweetType ? (0, s.default)("New message") : (0, s.default)("New Tweet"))
        }
    }, o)
}, function(e, t, i) {
    "use strict";
    var s = r(i(0)),
        n = r(i(20));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).component,
        o = i(37);
    e.exports = a(n.default, function() {
        this.attributes({
            stateSource: null,
            messageButtonSelector: ".js-dm-button",
            tweetButtonSelector: ".js-tweet-button"
        }), this.after("initialize", function() {
            this.$messageButton = this.select("messageButtonSelector"), this.$tweetButton = this.select("tweetButtonSelector"), this.on(this.$messageButton, "click", function() {
                this.$messageButton.hasClass("is-disabled") || this.trigger(document, "uiComposeTweet", {
                    type: "message"
                })
            }), this.on(this.$tweetButton, "click", function() {
                this.trigger(document, "uiComposeTweet", {
                    type: "tweet"
                })
            });
            var e = this.observe(this.requestResource(this.attr.stateSource));
            e.pluck("tweetType").distinctUntilChanged().subscribe(this.toggleButtonType.bind(this)), e.pluck("tweetTypeButtonTooltip").distinctUntilChanged().subscribe(this.renderTooltip.bind(this)), e.pluck("canSwitchTweetType").distinctUntilChanged().subscribe(this.toggleEnabled.bind(this))
        }), this.toggleButtonType = function(e) {
            var t = "message" === e;
            this.$messageButton.toggleClass("is-hidden", t), this.$tweetButton.toggleClass("is-hidden", !t)
        }, this.renderTooltip = function(e) {
            var t = (0, s.default)("<div/>").html(e).text();
            this.$messageButton.attr("data-original-title", t)
        }, this.toggleEnabled = function(e) {
            this.$messageButton.toggleClass("is-disabled", !e).attr("tabindex", e ? "" : "-1")
        }
    }, o)
}, function(e, t, i) {
    "use strict";
    var s = r(i(1)),
        n = r(i(20));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var a = i(5).component,
        o = i(37);
    e.exports = a(n.default, function() {
        this.attributes({
            removeSelector: ".js-quote-tweet-remove",
            stateSource: null
        }), this.after("initialize", function(e) {
            var t = this;
            this.on("click", {
                removeSelector: function() {
                    this.trigger(document, "uiRemoveQuotedTweet")
                }
            }), this.observe(this.requestResource(this.attr.stateSource)).pluck("quotedTweet").distinctUntilChanged(function(e, t) {
                return s.default.get(e, "id") === s.default.get(t, "id")
            }).map(function(e) {
                return t.renderTweet(e)
            }).do(function(e) {
                return t.toggle(!!e)
            }).subscribe(function(e) {
                return t.$node.html(e)
            })
        }), this.renderTweet = function(e) {
            return e ? e.renderQuotedTweet({
                inCompose: !0,
                mediaPreviewSize: TD.vo.Column.MEDIA_PREVIEW_SIZE_MEDIUM
            }) : ""
        }, this.toggle = function(e) {
            this.$node.toggleClass("is-hidden", !e)
        }
    }, o)
}, function(e, t, i) {
    "use strict";
    var s, n = i(20),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(5).component,
        o = i(37);
    e.exports = a(r.default, o, function() {
        this.attributes({
            settingName: null
        }), this.after("initialize", function() {
            this.on("change", function(e) {
                TD.settings.set(this.attr.settingName, this.$node.prop("checked")), e.preventDefault()
            }), this.observe(this.requestResource("settings.state")).pluck(this.attr.settingName).distinctUntilChanged().subscribe(this.render.bind(this))
        }), this.render = function(e) {
            this.$node.prop("checked", e)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = v(i(32)),
        n = v(i(3)),
        r = v(i(0)),
        a = i(5),
        o = i(23),
        c = v(i(591)),
        l = i(53),
        u = v(i(2149)),
        d = v(i(8)),
        h = v(i(140)),
        m = v(i(2150)),
        f = v(i(1)),
        p = i(2151),
        g = i(64);

    function v(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }

    function T() {
        this.mediaBarData = {
            files: [],
            previews: [],
            descriptions: [],
            accountsMediaIds: {}
        }
    }
    e.exports = function() {
        a.compose.mixin(this, [h.default]), this.attributes({
            addImageDescriptionSelector: ".js-add-image-description",
            mediaBarContainerSelector: ".js-media-added",
            mediaBarRemoveSelector: ".js-media-bar-remove",
            mediaBarThumb: ".js-media-bar-thumb",
            mediaBarSelector: ".compose-media-bar",
            maxImageHeight: 310
        }), this.before("initialize", T), this.after("initialize", function() {
            this.$mediaBarContainer = this.select("mediaBarContainerSelector"), this.on("click", {
                mediaBarRemoveSelector: this.removeFile,
                addImageDescriptionSelector: this.addImageDescription
            }), this.on(document, "uiComposeVideoTooLarge", this.handleVideoTooLarge.bind(this))
        }), this.addFiles = function(e) {
            if (this.$mediaBarContainer.removeClass("is-hidden"), TD.util.hasFeature("filereader")) {
                var t = new TD.core.defer.DeferredList(e.map(this.loadFileData));
                return t.addCallback(function(t) {
                    t.forEach(function(t, i) {
                        if (t[0]) {
                            var s = t[1];
                            this.mediaBarData.previews.indexOf(s) < 0 && (this.mediaBarData.files.push(e[i]), this.mediaBarData.descriptions.push(null), this.mediaBarData.previews.push(s), this.state.selectedAccountKeys.forEach(function(e) {
                                this.addMediaIdsFor(e)
                            }, this))
                        }
                    }, this), this.attachImagesPreview()
                }.bind(this)), t
            }
            this.mediaBarData.files = e, this.attachImageInfoBar()
        }, this.loadFileData = function(e) {
            var t = new TD.core.defer.Deferred,
                i = new FileReader;
            return i.onloadend = function(e) {
                t.callback(e.target.result)
            }, i.readAsDataURL(e), t
        }, this.attachImageInfoBar = function() {
            var e = d.default.render("compose/media_bar_infobar");
            this.$mediaBarContainer.html(e)
        }, this.getMediaInfo = function() {
            var e = this;
            return this.mediaBarData.previews.map(function(t, i) {
                return {
                    src: t,
                    fileIndex: i,
                    description: e.mediaBarData.descriptions[i]
                }
            })
        }, this.attachImagesPreview = function(e) {
            var t = this.mediaBarData.previews.length,
                i = t > 1,
                s = f.default.get(this.mediaBarData, "files[0].type"),
                n = "video/mp4" === s,
                a = d.default.render("compose/media_bar_image", {
                    isMediaGridContent: i,
                    mediaLength: t,
                    isVideo: n,
                    isGif: "image/gif" === s,
                    mediaInfo: this.getMediaInfo(),
                    description: null
                });
            if (this.$mediaBarContainer.html(a), this.$mediaBarContainer.on("click", function(e) {
                    var t = (0, r.default)(e.target);
                    (t.is("img") || t.hasClass("media-image")) && this.trigger("uiComposeImageClicked")
                }.bind(this)), n) {
                var o = this.$node.find(".js-video"),
                    u = (0, l.attach)(c.default, o, {
                        data: this.mediaBarData
                    }).teardownEvent;
                this.videoTeardownEvent = u, this.trigger("uiComposeImageAdded", {
                    files: this.getFiles()
                })
            } else i ? !1 !== e && this.trigger("uiComposeImageAdded", {
                files: this.getFiles()
            }) : (a = this.select("mediaBarThumb"))[0].complete ? this.setImageHeight(a, e) : a.load(this.setImageHeight.bind(this, a, e))
        }, this.setImageHeight = function(e, t) {
            var i = this.select("mediaBarSelector");
            e.height() > this.attr.maxImageHeight ? (e.height(this.attr.maxImageHeight), i.addClass("compose-media-compressed")) : (e.height("auto"), i.removeClass("compose-media-compressed")), !1 !== t && this.trigger("uiComposeImageAdded")
        }, this.onDescriptionAdded = function(e, t) {
            var i = t.imageDescription;
            this.mediaBarData.descriptions[e] = i, (0, r.default)(this.select("addImageDescriptionSelector")[e]).text(i), this.createMetadataForImage(e)
        }, this.createMetadataForImage = function(e, t) {
            var i = this.state.selectedAccountKeys[0],
                s = t || this.mediaBarData.descriptions[e];
            s && this.getDeferredMediaIdsFor(i).addCallback(function(t) {
                var r = t[e][1];
                (0, p.createMetadata)(i, s, r).addCallbacks(function() {}, function() {
                    (0, o.showErrorNotification)({
                        message: (0, n.default)("Adding an image description failed.")
                    })
                })
            })
        }, this.createMetadataForImages = function() {
            var e = this;
            this.mediaBarData.descriptions.forEach(function(t, i) {
                e.createMetadataForImage(i, t)
            })
        }, this.getMediaIndex = function(e) {
            return parseInt((0, r.default)(e.currentTarget).prev().attr("data-file-index"), 10)
        }, this.addImageDescription = function(e) {
            var t = this,
                i = this.getMediaIndex(e);
            (0, g.generic)({
                page: "compose",
                section: "docked_compose",
                action: "click",
                element: "add_description"
            }), this.showModal(m.default, {
                src: this.getMediaInfo()[i].src,
                onDescriptionAdded: function() {
                    return t.onDescriptionAdded.bind(t, i)
                },
                initialDescription: this.mediaBarData.descriptions[i]
            }, {
                title: (0, n.default)("Add image description"),
                withFooter: !1
            })
        }, this.removeFile = function(e) {
            var t = (0, r.default)(e.target).closest(this.attr.mediaBarRemoveSelector).attr("data-file-index");
            if (t && (this.removeFileAtIndex(parseInt(t, 10)), this.mediaBarData.files.length)) return this.attachImagesPreview();
            this.removeFiles()
        }, this.removeFiles = function() {
            (0, s.default)(this.mediaBarData.accountsMediaIds).forEach(function(e) {
                this.removeMediaIdsFor(e)
            }, this), T.call(this), this.$mediaBarContainer.addClass("is-hidden"), this.$mediaBarContainer.empty(), this.trigger("uiResetImageUpload"), this.videoTeardownEvent && this.trigger(this.videoTeardownEvent)
        }, this.removeFileAtIndex = function(e) {
            this.mediaBarData.files.splice(e, 1), this.mediaBarData.descriptions.splice(e, 1), this.mediaBarData.previews.splice(e, 1), (0, s.default)(this.mediaBarData.accountsMediaIds).forEach(function(t) {
                this.mediaBarData.accountsMediaIds[t].splice(e, 1)[0].cancel()
            }, this)
        }, this.removeFilesBut = function(e) {
            for (var t = this.mediaBarData.files, i = t.length; i--;) t[i] !== e && this.removeFileAtIndex(i)
        }, this.addMediaIdsFor = function(e) {
            var t = this.mediaBarData,
                i = t.accountsMediaIds[e];
            i || (i = [], t.accountsMediaIds[e] = i), t.files.forEach(function(t, s) {
                i[s] || (i[s] = function(e, t) {
                    var i = u.default.upload({
                        file: e,
                        accountKey: t
                    });
                    return i.addErrback(function(t) {
                        if (!(t instanceof TD.core.defer.CancelledError)) {
                            var i = this.mediaBarData.files.indexOf(e);
                            if (i > -1) {
                                this.mediaBarData.files.length > 1 ? (this.removeFileAtIndex(i), this.attachImagesPreview()) : this.removeFiles();
                                var s = (0, n.default)("We could not upload {{name}}, please try again.", {
                                    name: e.name
                                });
                                setTimeout(o.showErrorNotification, 0, {
                                    message: s
                                })
                            }
                            return t
                        }
                    }.bind(this)), i
                }.call(this, t, e))
            }, this)
        }, this.removeMediaIdsFor = function(e) {
            var t = this.mediaBarData;
            t.accountsMediaIds[e] && (t.accountsMediaIds[e].forEach(function(e) {
                e.cancel()
            }), delete t.accountsMediaIds[e])
        }, this.updateAccountsMediaIds = function(e) {
            (0, s.default)(this.mediaBarData.accountsMediaIds).forEach(function(t) {
                e.indexOf(t) < 0 && this.removeMediaIdsFor(t)
            }, this), e.forEach(function(e) {
                this.mediaBarData.accountsMediaIds[e] || this.addMediaIdsFor(e)
            }, this), this.createMetadataForImages()
        }, this.getDeferredMediaIdsFor = function(e) {
            var t = this.mediaBarData.accountsMediaIds[e];
            if (!t) throw new Error("unknown list of media ids for " + e);
            return new TD.core.defer.DeferredList(t.slice(0))
        }, this.getFiles = function() {
            return this.mediaBarData.files.concat()
        }, this.handleVideoTooLarge = function() {
            this.removeFiles(), this.trigger("uiComposeResetFiles"), (0, o.showErrorNotification)({
                message: (0, n.default)("Looks like the video is longer than 2 minutes and 20 seconds. Please upload a shorter video.")
            })
        }
    }
}, function(e, t, i) {
    "use strict";
    e.exports = {
        upload: function() {
            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            if (!e.file) throw new Error("Missing file to upload.");
            if (!e.accountKey) throw new Error("Missing account key to upload with.");
            var t = TD.controller.clients.getClient(e.accountKey).oauth.account;
            return TD.net.ajax.upload(e.file, t)
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = a(i(12)),
        n = a(i(8)),
        r = i(64);

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = s.default.mixin(function() {
        this.attributes({
            template: "add_image_description",
            src: null,
            initialDescription: null,
            onDescriptionAdded: null,
            inputImageDescriptionSelector: ".js-input-image-description",
            submitImageDescriptionSelector: ".js-submit-image-description"
        }), this.initialState({
            canSubmit: !1
        }), this.getTrimmedDescriptionValue = function() {
            return this.select("inputImageDescriptionSelector").val().trim()
        }, this.toggleSubmit = function() {
            var e = this.getTrimmedDescriptionValue();
            this.mergeState({
                canSubmit: e.length > 0
            })
        }, this.submit = function() {
            if (this.state.canSubmit) {
                var e = this.getTrimmedDescriptionValue();
                this.attr.onDescriptionAdded({
                    imageDescription: e
                }), (0, r.generic)({
                    page: "compose",
                    section: "docked_compose",
                    action: "click",
                    element: "apply_description"
                }), this.trigger("uiCloseModal")
            }
        }, this.initialRender = function() {
            var e = this.attr,
                t = e.src,
                i = e.initialDescription,
                s = this.state.canSubmit,
                r = {
                    src: t,
                    canSubmit: s,
                    initialDescription: i
                },
                a = n.default.render(this.attr.template, r);
            this.$node.html(a)
        }, this.componentDidInitialize = function() {
            this.initialRender(), this.on(this.attr.inputImageDescriptionSelector, "input", this.toggleSubmit), this.on(this.attr.submitImageDescriptionSelector, "click", this.submit)
        }, this.render = function() {
            this.select("submitImageDescriptionSelector").toggleClass("is-disabled", !this.state.canSubmit)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s, n = i(47),
        r = (s = n) && s.__esModule ? s : {
            default: s
        },
        a = i(309);
    e.exports = {
        createMetadata: function(e, t, i) {
            var s = a.twitter_api_base + "/" + a.twitter_api_version + "/media/metadata/create.json",
                n = {
                    account: TD.storage.accountController.get(e),
                    method: "POST",
                    params: (0, r.default)({
                        media_id: i,
                        alt_text: {
                            text: t
                        }
                    })
                };
            return TD.net.ajax.request(s, n)
        }
    }
}, function(e, t, i) {
    "use strict";
    var s = v(i(7)),
        n = v(i(43)),
        r = v(i(3)),
        a = v(i(1)),
        o = v(i(0)),
        c = v(i(29)),
        l = v(i(12)),
        u = v(i(20)),
        d = v(i(140)),
        h = v(i(2153)),
        m = i(23),
        f = i(2154),
        p = v(i(2155)),
        g = i(58);

    function v(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var T = i(636),
        w = i(53),
        b = i(2156),
        y = i(49),
        C = i(250),
        _ = i(8);
    e.exports = l.default.mixin(u.default, function() {
        this.initialState({
            hasOpenedDefaultAccount: !1,
            userData: function() {
                return {}
            },
            contributorManagerAccountKey: null,
            invitations: [],
            accounts: []
        }), this.attributes({
            accountManagerContainerSelector: ".js-account-manager-container",
            contributorManagerContainerSelector: ".js-contributor-manager-container",
            scrollContainerSelector: ".scroll-v",
            contributorManagerTeardownEvent: "uiTeardownContributorManager",
            contributorManagerSelector: ".js-contributor-manager",
            contributorManagerBackSelector: ".js-contributor-manager-back",
            teamInvitationsPanel: ".js-invitations-panel",
            teamInvitationsTeardownEvent: "uiTeardownTeamInvitations",
            teamInvitationsSelector: ".js-team-invitations",
            teamInvitationsBackSelector: ".js-team-invitations-back",
            actionButtonSelector: ".js-account-action",
            manageTeamSelector: ".js-manage-team",
            manageTeamDisabledSelector: ".js-manage-team-disabled",
            accountRowSelector: ".js-account-settings-row",
            accountSummarySelector: ".js-account-settings-summary",
            accountsLoginAccountSelector: ".js-account-settings-login-account",
            teamAccountsInfoSelector: ".js-account-settings-team-info",
            teamAccountsContainerSelector: ".js-account-settings-accounts",
            accountsTeamInvitationsSelector: ".js-account-settings-team-invitations",
            accountsScrollContainerSelector: ".js-account-settings-scroll-container",
            accountsRemoveCheckSelector: ".js-account-remove-check",
            accountRemoveCheckClass: "account-remove-check-open",
            openAccountRowSelector: ".js-account-settings-row.is-expanded",
            accountsInvitedContainerSelector: ".js-account-invited-accounts",
            accountInvitedRowSelector: ".js-account-settings-invited-row",
            profileLinkSelector: 'a[rel="user"]',
            editProfileSelector: ".js-edit-profile",
            shiftedColumnClass: "is-shifted-1",
            shiftedColumnInvitationsClass: "is-shifted-2",
            accountProfileHeader: ".js-account-profile-header",
            accountSafeguardSelector: '.js-account-action[data-action="setAccountSafeguard"]',
            accountSafeguardSwitchSelector: ".js-account-safeguard-switch",
            logInAccountSelector: ".js-log-in-account"
        }), this.componentDidInitialize = function() {
            var e = this;
            this.on(document, "dataCachedTwitterUser", this.handleCacheTwitterUser), this.on(document, "uiDrawerActive", this.handleActiveDrawer), this.on(document, "dataContributors", this.handleContributors), this.on(document, "dataContributorsError", this.handleContributorsError), this.on(document, "dataContributeeNotManaged", this.handleContributeeNotManaged), this.on(document, "dataContributeeAcceptError", this.handleContributeeInviteAcceptanceFailure), this.on("click", {
                actionButtonSelector: this.handleActionButtonClick,
                contributorManagerBackSelector: this.hideContributorManager,
                profileLinkSelector: this.handleProfileLinkClick,
                editProfileSelector: this.handleEditProfileClick,
                teamInvitationsBackSelector: this.hideTeamInvitations
            }), this.on("uiAccordionWillExpand", this.handleAccordionItemWillExpand), this.on("uiAccordionDidExpand", {
                accountsScrollContainerSelector: a.default.debounce(this.handleAccordionItemDidExpand)
            }), this.on("uiAccordionExpandAction", this.handleAccordionItemExpandAction), this.on("uiAccordionCollapseAction", this.handleAccordionItemCollapseAction);
            var t = _.render("settings/account_settings");
            this.$node.html(t);
            var i = this.observe(this.requestResource("accounts.state")).pluck("accounts").combineLatest(c.default.Observable.fromEvent((0, o.default)(document), "dataDeciderUpdated").startWith(null), function(e, t) {
                    return e
                }),
                s = i.combineLatest(y.fromEventOnce((0, o.default)(document), "uiShowAccountSettings"), function(e, t) {
                    return e
                });
            i.subscribe(function(t) {
                return e.mergeState({
                    accounts: t
                })
            }), s.subscribe(this.renderAccounts.bind(this)), s.subscribe(this.maybeCloseContributorManager.bind(this)), this.on("click", {
                logInAccountSelector: function() {
                    var t = TD.storage.accountController.getCookieAccount(),
                        i = t.getUsername(),
                        s = {
                            title: (0, r.default)("Add @{{screenName}} as an admin for another account", {
                                screenName: i
                            }),
                            withHeader: !0,
                            withHeaderDivider: !0,
                            withFooter: !1,
                            withDismissButton: !0,
                            withBorder: !1,
                            withClasses: ["s-narrow-500", "s-fluid-height"],
                            withContentClasses: ["padding-h--30"],
                            withTitleClasses: ["margin-r--20"]
                        };
                    e.showModal(h.default, {
                        account: t
                    }, s)
                }
            })
        }, this.after("stateChanged", function(e, t) {
            var i = !t || e.invitations.length !== t.invitations.length || e.accounts !== t.accounts;
            if (i) {
                var s = e.invitations.length,
                    n = e.accounts.filter(function(e) {
                        return e.requireConsent
                    }).length,
                    r = s + n;
                this.trigger("uiNotificationAccounts", {
                    count: r
                })
            }
        }), this.render = function() {
            var e = _.render("settings/invitations_panel", {
                invitationCount: this.state.invitations.length,
                showInvitationPanel: Boolean(this.state.invitations.length)
            });
            this.select("teamInvitationsPanel").html(e)
        }, this.handleAccountsRendered = function(e) {
            var t = !this.state.hasOpenedDefaultAccount,
                i = (a.default.head(e) || {}).accountKey,
                s = this.select("accountsInvitedContainerSelector"),
                n = !!s.children().length;
            this.mergeState({
                hasOpenedDefaultAccount: !0
            }), t ? n && C.makeElementVisible(s.closest(this.attr.scrollContainerSelector), s) : this.expandAccount(i, 0)
        }, this.expandAccount = function(e, t) {
            t = t || 0, e && setTimeout(function() {
                this.getAccountSettingsRow(e).find(this.attr.accordionToggleSelector).click()
            }.bind(this), t)
        }, this.recalculateAccordion = function() {
            this.trigger("uiAccordionUpdatePanelHeights")
        }, this.maybeCloseContributorManager = function(e) {
            if (this.state.contributorManagerAccountKey) {
                var t = e.filter(function(e) {
                    return e.accountKey === this.state.contributorManagerAccountKey
                }, this)[0];
                t && !1 !== t.isAdmin || this.hideContributorManager()
            }
        }, this.handleCacheTwitterUser = function(e, t) {
            this.updateManagedUserInfo(t)
        }, this.updateAccountFromUserCache = function(e) {
            var t = this.state.userData[e.userId];
            (t ? TD.core.defer.succeed(t) : TD.cache.twitterUsers.getById(e.userId)).addCallback(this.updateManagedUserInfo.bind(this))
        }, this.updateManagedUserInfo = function(e) {
            var t = (0, g.getAccountFromId)(e.id);
            t && (this.state.userData[e.id] = e, this.updateUserInfo(e))
        }, this.updateUserInfo = function(e) {
            var t = this.$node.find('.account-settings-row[data-user-id="' + e.id + '"]');
            t.length && t.find(this.attr.accountProfileHeader).css({
                "background-color": "#" + e.profileColor,
                "background-image": "url(" + e.bannerUrlSmall + ")"
            })
        }, this.updateAccountContributorsUi = function(e) {
            e.isAdmin && this.trigger("uiNeedsContributors", {
                accountKey: e.accountKey
            })
        }, this.handleContributors = function(e, t) {
            this.toggleContributorsUiForAccount(t.accountKey, !0)
        }, this.handleContributorsError = function(e, t) {
            this.toggleContributorsUiForAccount(t.request.accountKey, !1)
        }, this.toggleContributorsUiForAccount = function(e, t) {
            var i = this.getAccountSettingsRow(e);
            i.find(this.attr.manageTeamSelector).toggleClass("is-hidden", !t), i.find(this.attr.manageTeamDisabledSelector).toggleClass("is-hidden", t), this.recalculateAccordion()
        }, this.handleContributeeNotManaged = function(e, t) {
            var i = TD.cache.twitterUsers.getById(t.id);
            i.addCallback(function(e) {
                var i = a.default.extend({}, e, {
                        accountKey: "invited:" + t.id,
                        userId: e.id,
                        isAdmin: !!t.isAdmin
                    }),
                    s = this.state.invitations.find(function(e) {
                        return e.id === i.id
                    });
                s || this.mergeState({
                    invitations: [].concat((0, n.default)(this.state.invitations), [i])
                })
            }.bind(this))
        }, this.handleContributeeInviteAcceptanceFailure = function(e, t) {
            (0, m.showErrorNotification)({
                message: (0, r.default)("Looks like the invitation could not be accepted. Please try again.")
            }), this.handleContributeeNotManaged(null, {
                id: t.request.id,
                isAdmin: t.request.isAdmin
            })
        }, this.renderAccounts = function(e) {
            var t = this,
                i = void 0,
                s = this.select("accountRowSelector"),
                n = this.select("accountsLoginAccountSelector"),
                r = this.select("teamAccountsContainerSelector"),
                a = [],
                c = e.map(function(e) {
                    return e.accountKey
                });
            s.each(function(e, t) {
                var i = (0, o.default)(t),
                    s = i.attr("data-account-key"); - 1 === c.indexOf(s) && i.remove()
            });
            var l = e.length >= 2;
            this.select("teamAccountsInfoSelector").toggleClass("is-hidden", !l);
            var u = e.length;
            e.forEach(function(e) {
                var c = (0, o.default)(t.renderAccount(e, u)),
                    l = s.filter('[data-account-key="' + e.accountKey + '"]');
                t.updateFromExistingAccount(l, c), 0 === l.length && a.push(e), l.remove(), e.isTwoginAccount ? n.html(c) : (i ? i.after(c) : r.prepend(c), i = c), t.updateAccountContributorsUi(e), t.updateAccountFromUserCache(e)
            }), this.handleAccountsRendered(a)
        }, this.renderAccount = function(e, t) {
            var i = TD.storage.accountController.getCookieAccount(),
                n = (0, s.default)({}, e, {
                    getProfileURL: "https://twitter.com/" + e.screenName,
                    profileImageURL: e.isTwoginAccount ? (0, f.getAvatarUrlBySize)(e.profileImageURL, f.x128) : e.profileImageURL,
                    cookieProfileImageURL: i.getProfileImageURL(),
                    isSafeguarded: this.isAccountSafeguarded(e.accountKey),
                    emojifiedName: e.emojifiedName,
                    withManageTeam: e.isTwoginAccount || e.isContributor,
                    isRemovable: !e.isTwoginAccount,
                    isSoleAccount: e.isTwoginAccount && 1 === t
                }),
                r = e.isTwoginAccount ? "settings/account_settings_login_account" : "settings/account_settings_row";
            return _.render(r, n)
        }, this.updateFromExistingAccount = function(e, t) {
            if (0 !== e.length) {
                t.toggleClass(this.attr.accordionIsExpandedClass, e.hasClass(this.attr.accordionIsExpandedClass)), t.toggleClass(this.attr.accordionIsActiveClass, e.hasClass(this.attr.accordionIsActiveClass));
                var i = e.find(this.attr.manageTeamSelector).hasClass("is-hidden");
                t.find(this.attr.manageTeamSelector).toggleClass("is-hidden", i), t.find(this.attr.manageTeamDisabledSelector).toggleClass("is-hidden", !i)
            }
        }, this.handleDefaultAccountSelected = function(e, t) {
            var i = (0, o.default)(t.el).val();
            this.trigger("uiAccountAction", {
                action: "setDefault",
                accountKey: i
            }), this.trigger(document, "scribeEvent", {
                terms: {
                    page: "settings",
                    section: "accounts",
                    element: "default",
                    action: "select"
                }
            })
        }, this.handleActionButtonClick = function(e, t) {
            var i = (0, o.default)(t.el);
            if (!t.el.disabled && !i.hasClass("is-disabled")) {
                var s = i.attr("data-action"),
                    n = i.attr("data-account-key"),
                    r = function(e) {
                        return {
                            page: "settings",
                            section: "accounts",
                            component: {
                                remove: "account",
                                removeCheck: "account",
                                removeCancel: "account",
                                manageContributors: "account",
                                showInvitations: "account",
                                setAccountSafeguard: "account",
                                addAccountLoginFormShowing: "add_account_login_form",
                                addAccountLoginRequest: "add_account_login_form",
                                addAccount2faTimeout: "add_account_login_form",
                                addAccount2faCancel: "add_account_login_form",
                                addAccountLoginSuccess: "add_account_login_form",
                                addAccountLoginError: "add_account_login_form",
                                addAccountLoginServerError: "add_account_login_form"
                            } [e],
                            element: {
                                remove: "remove",
                                removeCheck: "remove_check",
                                removeCancel: "remove_cancel",
                                add: "add_twitter_account",
                                passwordReset: "reset_password",
                                manageContributors: "show_contributor_manager",
                                showInvitations: "show_team_invitations",
                                setAccountSafeguard: "confirmation_step",
                                setDefault: "default",
                                addAccountLoginFormShowing: "login_form",
                                addAccountLoginRequest: "add_twitter_account",
                                addAccount2faTimeout: "two_factor",
                                addAccount2faCancel: "two_factor",
                                addAccountLoginSuccess: "login_form",
                                addAccountLoginError: "login_form",
                                addAccountLoginServerError: "login_form"
                            } [e],
                            action: {
                                setDefault: "select",
                                addAccountLoginFormShowing: "impression",
                                addAccountLoginRequest: "click",
                                addAccount2faTimeout: "timeout",
                                addAccount2faCancel: "cancel",
                                addAccountLoginSuccess: "success",
                                addAccountLoginError: "error",
                                addAccountLoginServerError: "error"
                            } [e] || "click"
                        }
                    }(s),
                    a = this.getInfoNode(e),
                    c = this.getUpdatedInvitations(a);
                switch (s) {
                    case "setDefault":
                        this.trigger("uiAccountAction", {
                            action: s,
                            accountKey: n
                        });
                        break;
                    case "removeCheck":
                        this.toggleAccountRemoveCheck(n, !0);
                        break;
                    case "removeCancel":
                        this.toggleAccountRemoveCheck(n, !1);
                        break;
                    case "remove":
                        this.trigger("uiAccountAction", {
                            action: s,
                            accountKey: n
                        });
                        break;
                    case "add":
                        this.trigger("uiAccountAction", {
                            action: s
                        });
                        break;
                    case "manageContributors":
                        this.showContributorManager(n);
                        break;
                    case "showInvitations":
                        this.showTeamInvitations();
                        break;
                    case "setAccountSafeguard":
                        var l = i.find("i").hasClass("icon-toggle-on");
                        this.toggleAccountSafeguarded(n, l), this.trigger("metric", {
                            key: "account:safeguard:" + (l ? "disable" : "enable")
                        });
                        break;
                    case "inviteAccept":
                        0 === c.length && this.hideTeamInvitations(), this.mergeState({
                            invitations: c
                        }), (0, o.default)(document).trigger("uiAcceptContributeeInvite", {
                            accountKey: TD.storage.store.getTwitterLoginAccount().getKey(),
                            userId: a.attr("data-user-id"),
                            id: a.attr("data-user-id"),
                            isAdmin: void 0 !== a.attr("data-user-is-admin")
                        }), this.trigger("metric", {
                            key: "contributors:ui:invite:click:accept"
                        });
                        break;
                    case "inviteCancel":
                        0 === c.length && this.hideTeamInvitations(), this.mergeState({
                            invitations: c
                        }), (0, o.default)(document).trigger("uiRemoveContributee", {
                            accountKey: TD.storage.store.getTwitterLoginAccount().getKey(),
                            userId: a.attr("data-user-id")
                        }), this.trigger("metric", {
                            key: "contributors:ui:invite:click:reject"
                        })
                }
                this.trigger(document, "scribeEvent", {
                    terms: r
                })
            }
        }, this.getInfoNode = function(e) {
            return (0, o.default)(e.currentTarget).closest(".js-account-settings-invited-row")
        }, this.getUpdatedInvitations = function(e) {
            return this.state.invitations.filter(function(t) {
                return t.id !== e.attr("data-user-id")
            })
        }, this.getInvitedAccount = function(e) {
            var t = (0, o.default)(e).attr("data-account-key");
            return this.select("accountsInvitedContainerSelector").find(this.attr.accountInvitedRowSelector + '[data-account-key="' + t + '"]')
        }, this.isAccountSafeguarded = function(e) {
            return TD.settings.getSafeguardedAccountList().some(function(t) {
                return e === t
            })
        }, this.toggleAccountSafeguarded = function(e, t) {
            var i = t ? "icon-toggle-off" : "icon-toggle-on",
                s = t ? "icon-toggle-on" : "icon-toggle-off";
            t ? TD.settings.removeSafeguardedAccount(e) : TD.settings.addSafeguardedAccount(e), this.select("accountRowSelector").filter(function(t, i) {
                return (0, o.default)(i).attr("data-account-key") === e
            }).find(this.attr.accountSafeguardSwitchSelector).addClass(i).removeClass(s)
        }, this.handleActiveDrawer = function(e, t) {
            t.activeDrawer || (this.hideContributorManager(), this.hideTeamInvitations())
        }, this.toggleAccountRemoveCheck = function(e, t) {
            var i = this.select("accountRowSelector").filter(function(t, i) {
                return (0, o.default)(i).attr("data-account-key") === e
            }).toggleClass(this.attr.accountRemoveCheckClass, t).trigger("uiAccordionUpdatePanelHeights");
            t && C.makeElementVisible(i.closest(this.attr.scrollContainerSelector), i.find(this.attr.accountsRemoveCheckSelector))
        }, this.teardownContributorManagerInstances = function() {
            this.trigger(document, this.attr.contributorManagerTeardownEvent)
        }, this.showContributorManager = function(e) {
            var t = this.select("contributorManagerContainerSelector");
            this.teardownContributorManagerInstances(), this.$node.addClass(this.attr.shiftedColumnClass), this.mergeState({
                contributorManagerAccountKey: e
            }), this.attachChild(b, t, {
                accountKey: e,
                teardownOn: [this.attr.contributorManagerTeardownEvent, this.childTeardownEvent].join(" ")
            })
        }, this.teardownTeamInvitationsInstances = function() {
            this.trigger(document, this.attr.teamInvitationsTeardownEvent)
        }, this.showTeamInvitations = function() {
            var e = this.select("teamInvitationsSelector");
            this.teardownTeamInvitationsInstances(), this.$node.addClass(this.attr.shiftedColumnInvitationsClass);
            var t = this.connect(p.default, {
                mapStateToProps: function(e) {
                    return {
                        invitations: e.invitations
                    }
                }
            });
            this.attachChild(t, e, {
                teardownOn: this.attr.teamInvitationsTeardownEvent
            })
        }, this.hideTeamInvitations = function() {
            this.teardownTeamInvitationsInstances(), this.$node.removeClass(this.attr.shiftedColumnInvitationsClass), this.recalculateAccordion(), this.trigger(document, "scribeEvent", {
                terms: {
                    page: "settings",
                    section: "team_invitations",
                    element: "back",
                    action: "click"
                }
            })
        }, this.hideContributorManager = function() {
            this.teardownContributorManagerInstances(), this.state.contributorManagerAccountKey = null, this.$node.removeClass(this.attr.shiftedColumnClass), this.recalculateAccordion(), this.trigger(document, "scribeEvent", {
                terms: {
                    page: "settings",
                    section: "contributor_manager",
                    element: "back",
                    action: "click"
                }
            })
        }, this.handleAccordionItemWillExpand = function(e) {
            this.toggleAccountRemoveCheck(e.target.getAttribute("data-account-key"), !1)
        }, this.handleAccordionItemDidExpand = function() {
            C.makeElementVisible(this.select("accountsScrollContainerSelector"), this.select("openAccountRowSelector"))
        }, this.handleAccordionItemExpandAction = function(e) {
            (0, o.default)(e.target).find(".js-consent-badge").addClass("is-hidden"), this.trigger(document, "scribeEvent", {
                terms: {
                    page: "settings",
                    section: "accounts",
                    component: "account",
                    action: "impression"
                }
            })
        }, this.handleAccordionItemCollapseAction = function(e) {
            (0, o.default)(e.target).find(".js-consent-badge").removeClass("is-hidden")
        }, this.handleProfileLinkClick = function() {
            this.trigger(document, "scribeEvent", {
                terms: {
                    page: "settings",
                    section: "accounts",
                    component: "account",
                    element: "show_profile",
                    action: "click"
                }
            })
        }, this.handleEditProfileClick = function() {
            TD.util.openURL("https://twitter.com/settings/profile")
        }, this.getAccountSettingsRow = function(e) {
            return this.select("accountsScrollContainerSelector").find(this.attr.accountRowSelector + '[data-account-key="' + e + '"]')
        }
    }, d.default, T, w)
}, function(e, t, i) {
    "use strict";
    var s = l(i(3)),
        n = l(i(8)),
        r = l(i(12)),
        a = i(615),
        o = i(23),
        c = l(i(69));

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = r.default.mixin(function() {
        this.attributes({
            template: "add_account_info",
            addAccountContinueSelector: ".js-add-account-continue",
            account: null,
            successCallbackPath: "/web/success.html"
        }), this.componentDidInitialize = function() {
            this.on("click", {
                addAccountContinueSelector: this.continueClick
            })
        }, this.continueClick = function() {
            this.trigger("uiCloseModal");
            var e = (0, c.default)(window.location.href).path(this.attr.successCallbackPath).toString();
            (0, a.observedPopup)({
                queryParams: {
                    authorize_callback: e
                },
                paramToExtractValueFrom: "teams_authorized_user_id",
                callbackUrl: e,
                baseUrl: "https://twitter.com/teams/authorize"
            }).then(function(e) {
                TD.controller.clients.addExpectedNewContributeeId(e.valueFromParams), TD.controller.clients.fetchContributees()
            }, this.handleJoinTeamError.bind(this))
        }, this.handleJoinTeamError = function(e) {
            e.message === a.POPUP_BLOCKED && (0, o.showErrorNotification)({
                message: (0, s.default)("Could not join team - Popup was blocked by your browser")
            })
        }, this.render = function() {
            var e = this.attr.account,
                t = n.default.render(this.attr.template, {
                    screenName: e.getUsername(),
                    profileImageURL: e.getProfileImageURL()
                });
            this.$node.html(t)
        }
    })
}, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }), t.x400 = t.x200 = t.x128 = t.x96 = t.x73 = t.x48 = t.x24 = t.ORIGINAL = void 0;
    var s, n = a(i(32)),
        r = a(i(30));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.getAvatarUrlBySize = function(e, t) {
        var i = v[t];
        if ("string" != typeof e) return e;
        if ("string" != typeof i) return e;
        return function(e, t) {
            return e.replace(w, t + "$1")
        }(function(e) {
            return e.replace(T, ".")
        }(e), i)
    };
    var o = t.ORIGINAL = "original",
        c = t.x24 = "24x24",
        l = t.x48 = "48x48",
        u = t.x73 = "73x73",
        d = t.x96 = "96x96",
        h = t.x128 = "128x128",
        m = t.x200 = "200x200",
        f = t.x400 = "400x400";
    var p, g, v = (s = {}, (0, r.default)(s, o, ""), (0, r.default)(s, c, "_mini"), (0, r.default)(s, l, "_normal"), (0, r.default)(s, u, "_bigger"), (0, r.default)(s, d, "_x96"), (0, r.default)(s, h, "_reasonably_small"), (0, r.default)(s, m, "_200x200"), (0, r.default)(s, f, "_400x400"), s),
        T = (p = v, g = "(" + (0, n.default)(p).map(function(e) {
            return p[e]
        }).filter(Boolean).join("|") + ")\\.", new RegExp(g + "(?!.*" + g + ")")),
        w = /(\.[^\.\/]*$)/
}, function(e, t, i) {
    "use strict";
    var s = r(i(8)),
        n = r(i(12));

    function r(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = n.default.mixin(function() {
        this.attributes({
            template: "team_invitations",
            buttonSelector: ".js-team-invitation-btn"
        }), this.render = function() {
            var e = s.default.render(this.attr.template, {
                invitations: this.props.invitations
            });
            this.$node.html(e)
        }
    })
}, function(e, t, i) {
    "use strict";
    var s = d(i(234)),
        n = d(i(7)),
        r = d(i(43)),
        a = d(i(3)),
        o = d(i(1)),
        c = d(i(12)),
        l = i(23),
        u = i(58);

    function d(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var h = i(53),
        m = i(620),
        f = i(2157),
        p = i(8);
    e.exports = c.default.mixin(function() {
        this.initialState({
            pollIntervalId: null,
            contributors: [],
            pending: [],
            unconfirmed: []
        }), this.attributes({
            accountKey: null,
            contributorAdderSelector: ".js-contributor-adder",
            contributorsContainer: ".js-contributors",
            contributorListSelector: ".js-contributor-list",
            pendingContainer: ".js-pending",
            pendingListSelector: ".js-contributor-list-pending",
            readMoreLinkSelector: ".js-read-more",
            contributorsPollInterval: 6e4
        }), this.componentDidInitialize = function() {
            var e = this;
            this.initialRender(), this.attachChild(m, this.attr.contributorAdderSelector, {
                focusOnInit: !1,
                placeholder: (0, a.default)("@username or name"),
                withAutocompleteAboveInput: !1
            }), this.attachChild(this.connect(f, {
                mapStateToProps: this.contributorListMapStateToPropsFactory(this.getTeamMembersFromState)
            }), this.attr.contributorListSelector, {
                accountKey: this.attr.accountKey
            }), this.attachChild(this.connect(f, {
                mapStateToProps: this.contributorListMapStateToPropsFactory(this.getPendingMembersFromState)
            }), this.attr.pendingListSelector, {
                accountKey: this.attr.accountKey
            }), this.on("uiUserSelected", {
                contributorAdderSelector: this.handleUserSelection
            }), this.on("click", {
                readMoreLinkSelector: this.trackReadMoreClick
            }), this.trigger(document, "scribeEvent", {
                terms: {
                    page: "settings",
                    section: "contributor_manager",
                    action: "impression"
                }
            }), this.on(document, "dataContributors", this.handleContributors), this.mergeState({
                pollIntervalId: setInterval(function() {
                    return e.fetchContributors()
                }, this.attr.contributorsPollInterval)
            }), this.fetchContributors(), this.on(document, "dataContributorActionSuccess", this.fetchContributors)
        }, this.componentWillTeardown = function() {
            clearInterval(this.state.pollIntervalId)
        }, this.render = function() {
            this.select("contributorsContainer").toggleClass("is-hidden", 0 === this.getTeamMembersFromState(this.state).length), this.select("pendingContainer").toggleClass("is-hidden", 0 === this.getPendingMembersFromState(this.state).length)
        }, this.initialRender = function() {
            var e = (0, u.getAccount)(this.attr.accountKey);
            e.getProfileURL = "https://twitter.com/" + e.screenName;
            var t = p.render("contributors/contributor_manager", {
                account: e,
                withUserBio: !1,
                withUserMenu: !1
            });
            this.$node.html(t)
        }, this.contributorListMapStateToPropsFactory = function(e) {
            var t = this;
            return function(i) {
                return {
                    contributors: e(i),
                    onUnconfirmedContributorCancelClick: function(e) {
                        return t.onUnconfirmedContributorCancelClick(e)
                    }
                }
            }
        }, this.getTeamMembersFromState = function(e) {
            return [].concat((0, r.default)(e.contributors))
        }, this.getPendingMembersFromState = function(e) {
            return [].concat((0, r.default)(e.pending), (0, r.default)(e.unconfirmed.map(function(e) {
                return (0, n.default)({}, e, {
                    isUnconfirmed: !0
                })
            })))
        }, this.fetchContributors = function() {
            this.trigger("uiNeedsContributors", {
                accountKey: this.attr.accountKey
            })
        }, this.handleContributors = function(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                i = t.accountKey,
                n = t.contributors,
                a = t.pending;
            if (i === this.attr.accountKey) {
                var c = new s.default(o.default.pluck([].concat((0, r.default)(n), (0, r.default)(a)), "user.id"));
                this.mergeState({
                    contributors: n,
                    pending: a,
                    unconfirmed: this.state.unconfirmed.filter(function(e) {
                        return !c.has(e.user.id)
                    })
                })
            }
        }, this.handleUserSelection = function(e, t) {
            var i = {
                    user: t.user,
                    isAdmin: !1
                },
                n = this.state,
                c = n.contributors,
                u = n.pending,
                d = n.unconfirmed,
                h = new s.default(o.default.pluck([].concat((0, r.default)(c), (0, r.default)(u), (0, r.default)(d)), "user.id"));
            if (h.has(i.user.id))(0, l.showNotification)({
                message: (0, a.default)("Already added!")
            });
            else {
                var m = TD.storage.accountController.get(this.attr.accountKey);
                i.user.id !== m.getUserID() ? (this.mergeState({
                    unconfirmed: [].concat((0, r.default)(this.state.unconfirmed), [i])
                }), this.trigger(document, "scribeEvent", {
                    terms: {
                        page: "settings",
                        section: "contributor_manager",
                        component: "user_search",
                        action: "select"
                    }
                })) : (0, l.showErrorNotification)({
                    message: (0, a.default)("You cannot add a user to their own team — they can already contribute to this account.")
                })
            }
        }, this.onUnconfirmedContributorCancelClick = function(e) {
            this.mergeState({
                unconfirmed: this.state.unconfirmed.filter(function(t) {
                    return t.user.id !== e
                })
            })
        }, this.trackReadMoreClick = function() {
            this.trigger(document, "scribeEvent", {
                terms: {
                    page: "settings",
                    section: "contributor_manager",
                    element: "read_more",
                    action: "click"
                }
            })
        }
    }, h)
}, function(e, t, i) {
    "use strict";
    var s = l(i(3)),
        n = l(i(1)),
        r = l(i(0)),
        a = l(i(12)),
        o = i(23),
        c = i(58);

    function l(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var u = i(110),
        d = i(250),
        h = i(8);
    e.exports = a.default.mixin(function() {
        this.initialState({
            contributee: function() {
                return TD.storage.accountController.get(this.attr.accountKey)
            }
        }), this.attributes({
            accountKey: null,
            contributorRowSelector: ".js-contributor-row",
            contributorRowClass: "js-contributor-row",
            contributorOpenSettingsSelector: ".js-contributor-open-settings",
            contributorRemoveSelector: ".js-contributor-remove",
            contributorRoleSelector: ".js-contributor-role",
            contributorErrorMessageSelector: ".js-contributor-error-message",
            selectedContributorRoleSelector: ".js-contributor-role:checked",
            actionConfirmSelector: ".js-contributor-action-confirm",
            actionCancelSelector: ".js-contributor-action-cancel",
            genericErrorMessage: (0, s.default)("Something went wrong. Please try again."),
            STATE_INITIAL: "initial",
            STATE_CLOSED: "closed",
            STATE_SETTINGS: "settings",
            STATE_CONFIRM_ADD: "confirmAdd",
            STATE_CONFIRM_DEADMIN: "confirmDeadmin",
            STATE_CONFIRM_REMOVE: "confirmRemove",
            STATE_REMOVING: "confirmRemove-removing",
            disallowedStateTransitions: {
                confirmAdd: {
                    anotherContributorOpening: ["closed"]
                }
            },
            notAnimatedStateTransitions: {
                initial: {
                    load: ["closed"]
                }
            },
            stateToScribeElement: {
                settings: "settings",
                confirmAdd: "confirm_add",
                confirmRemove: "confirm_remove",
                confirmDeadmin: "confirm_deadmin"
            },
            scrollWait: 300
        }), this.componentDidInitialize = function() {
            this.on(document, "dataContributorsError", this.handleContributorsError), this.on(document, "dataContributorActionSuccess", this.handleContributorActionSuccess), this.on(document, "dataContributorActionError", this.handleContributorActionError), this.on("click", {
                contributorOpenSettingsSelector: this.handleOpenSettings,
                contributorRemoveSelector: this.handleRemoveContributorClick,
                actionConfirmSelector: this.handleActionConfirmClick,
                actionCancelSelector: this.handleActionCancelClick
            })
        }, this.sortByName = function(e, t) {
            var i = "string" == typeof e ? e.toLowerCase() : e.user.name.toLowerCase(),
                s = "string" == typeof t ? t.toLowerCase() : t.user.name.toLowerCase();
            return i < s ? -1 : i > s ? 1 : 0
        }, this.handleContributorsError = function(e, t) {
            t.request.accountKey === this.attr.accountKey && this.$node.html(h.render("contributors/contributor_list_error"))
        }, this.render = function() {
            var e = this,
                t = this.props.contributors,
                i = void 0 === t ? [] : t,
                s = this.select("contributorRowSelector").toArray().map(function(e) {
                    return (0, r.default)(e).attr("data-user-id")
                }),
                n = i.filter(function(e) {
                    return !s.includes(e.user.id)
                }).find(function(e) {
                    return e.isUnconfirmed
                });
            this.removeMessages(), s.filter(function(t) {
                return !e.getContributor(t)
            }).forEach(function(t) {
                return e.getContributorRow(t).remove()
            }), i.forEach(function(t) {
                var i = e.getContributorRow(t.user.id),
                    s = i.attr("data-state"),
                    n = e.getUpdatedState(t, s);
                0 === i.length && e.createContributorRow(t), e.setContributorState(t, n, {
                    transition: "load"
                })
            }), n && this.scrollToContributor(n)
        }, this.getUpdatedState = function(e, t) {
            var i = e.isUnconfirmed ? this.attr.STATE_CONFIRM_ADD : this.attr.STATE_CLOSED,
                s = !t || e.isUnconfirmed && t !== this.attr.STATE_CONFIRM_ADD || !e.isUnconfirmed && t === this.attr.STATE_CONFIRM_ADD;
            return s ? i : t
        }, this.handleOpenSettings = function(e, t) {
            e.preventDefault();
            var i = (0, r.default)(t.el),
                s = i.attr("data-user-id"),
                n = this.getContributor(s),
                a = this.getContributorRow(s);
            if (0 !== a.length) {
                var o = this.getContributorRole(n);
                a.find(this.attr.contributorRoleSelector).filter(function() {
                    return (0, r.default)(this).attr("data-contributor-role") === o
                }).prop("selected", !0), this.select("contributorRowSelector").each(function(e, t) {
                    var i = (0, r.default)(t).attr("data-user-id");
                    if (i !== s) {
                        var n = this.getContributor(i);
                        this.setContributorState(n, this.attr.STATE_CLOSED, {
                            transition: "anotherContributorOpening"
                        })
                    }
                }.bind(this)), this.setContributorState(n, this.attr.STATE_SETTINGS), this.scribeContributorAction("open_settings", "click");
                var c = this.$node.closest(".scroll-v");
                setTimeout(function() {
                    d.makeElementVisible(c, a)
                }, this.attr.scrollWait)
            }
        }, this.handleRemoveContributorClick = function(e, t) {
            var i = (0, r.default)(t.el),
                s = i.attr("data-user-id"),
                n = this.getContributor(s);
            this.setContributorState(n, this.attr.STATE_CONFIRM_REMOVE), this.scribeContributorAction("remove", "click")
        }, this.setRole = function(e, t) {
            var i = this.getContributor(t),
                s = this.getContributorRow(t);
            if (0 !== s.length) {
                var n = s.find(this.attr.selectedContributorRoleSelector),
                    r = n.attr("data-contributor-role"),
                    a = "admin" === r;
                if (a === i.isAdmin) return this.setContributorState(i, this.attr.STATE_CLOSED);
                var o = (0, c.getTwitterLoginAccount)(),
                    l = o && o.userId === t;
                l && !a ? this.setContributorState(i, this.attr.STATE_CONFIRM_DEADMIN) : (this.setContributorState(i, this.attr.STATE_CLOSED), this.trigger("uiContributorAction", {
                    accountKey: this.attr.accountKey,
                    action: "update",
                    userId: t,
                    isAdmin: a
                }))
            }
        }, this.handleActionConfirmClick = function(e, t) {
            var i = (0, r.default)(t.el),
                s = i.attr("data-user-id"),
                n = this.getContributor(s),
                a = this.getContributorRow(s).attr("data-state"),
                o = {
                    accountKey: this.attr.accountKey,
                    userId: s,
                    action: null
                };
            switch (a) {
                case this.attr.STATE_SETTINGS:
                    this.setRole(i, s);
                    break;
                case this.attr.STATE_CONFIRM_ADD:
                    o.action = "add", this.setContributorState(n, this.attr.STATE_CLOSED);
                    break;
                case this.attr.STATE_CONFIRM_DEADMIN:
                    o.action = "update", o.isAdmin = !1, this.setContributorState(n, this.attr.STATE_CLOSED);
                    break;
                case this.attr.STATE_CONFIRM_REMOVE:
                    o.action = "remove", this.setContributorState(n, this.attr.STATE_REMOVING)
            }
            o.action && this.trigger("uiContributorAction", o), this.scribeContributorAction(this.attr.stateToScribeElement[a], "confirm")
        }, this.handleActionCancelClick = function(e, t) {
            var i = (0, r.default)(t.el).attr("data-user-id"),
                s = this.getContributor(i),
                n = this.getContributorRow(i).attr("data-state");
            switch (n) {
                case this.attr.STATE_SETTINGS:
                    this.setContributorState(s, this.attr.STATE_CLOSED);
                    break;
                case this.attr.STATE_CONFIRM_ADD:
                    this.props.onUnconfirmedContributorCancelClick(i);
                    break;
                case this.attr.STATE_CONFIRM_DEADMIN:
                case this.attr.STATE_CONFIRM_REMOVE:
                    this.setContributorState(s, this.attr.STATE_SETTINGS)
            }
            this.scribeContributorAction(this.attr.stateToScribeElement[n], "cancel")
        }, this.handleContributorActionSuccess = function(e, t) {
            if (t.request.accountKey === this.attr.accountKey) {
                var i = this.getContributor(t.request.userId);
                if (i) switch (t.request.action) {
                    case "add":
                        this.setContributorState(i, this.attr.STATE_CLOSED);
                        break;
                    case "update":
                        this.setContributorState(i, this.attr.STATE_CLOSED), this.scribeContributorAction("admin", t.request.isAdmin ? "on" : "off")
                }
            }
        }, this.handleContributorActionError = function(e, t) {
            if (t.request.accountKey === this.attr.accountKey) {
                var i = this.getContributor(t.request.userId);
                if (i) {
                    var s;
                    try {
                        s = t.response.req.errors[0]
                    } catch (e) {}
                    if ("add" === t.request.action && i.isUnconfirmed) return this.setContributorState(i, this.attr.STATE_CONFIRM_ADD, {
                        error: this.makeErrorState(this.attr.STATE_CONFIRM_ADD),
                        errorData: s
                    });
                    s && (0, o.showErrorNotification)({
                        message: s.message
                    }), this.revertContributorState(i)
                }
            }
        }, this.setContributorState = function(e, t, i) {
            if (i = n.default.defaults(i || {}, {
                    error: "",
                    errorData: {},
                    transition: ""
                }), e) {
                var s = this.getContributorRow(e.user.id);
                if (0 !== s.length) {
                    var r = s.attr("data-state"),
                        a = s.attr("data-error"),
                        o = s.attr("data-error-code"),
                        c = "" + i.errorData.twitterErrorCode,
                        l = this.getContributorRole(e),
                        u = s.attr("data-contributor-role");
                    if (t !== r || l !== u || i.error !== a || c !== o) {
                        var d = this.stateRuleMatch(this.attr.disallowedStateTransitions, {
                            from: r,
                            transition: i.transition,
                            to: t
                        });
                        if (!d) {
                            var h = this.doStateChange(s, {
                                from: r,
                                to: t,
                                error: i.error,
                                errorData: i.errorData,
                                transition: i.transition,
                                role: this.getContributorRole(e)
                            });
                            return h.addCallbackWith(this, function() {
                                this.scrollFix(), this.scribeContributorAction(this.attr.stateToScribeElement[t], "impression")
                            }), h
                        }
                    }
                }
            }
        }, this.doStateChange = function(e, t) {
            t = t || {};
            var i = this;

            function s() {
                e.attr({
                    "data-previous-state": t.from,
                    "data-state": t.to,
                    "data-state-error": t.error,
                    "data-state-error-code": t.errorData.twitterErrorCode,
                    "data-contributor-role": t.role
                }), e.find(i.attr.contributorErrorMessageSelector).text(t.errorData.message || i.attr.genericErrorMessage)
            }
            var n = !this.stateRuleMatch(this.attr.notAnimatedStateTransitions, t);
            return n ? this.deferredAnimateElementHeightChange(e, s) : TD.core.defer.maybeDeferred(s)
        }, this.stateRuleMatch = function(e, t) {
            return (t = t || {}).transition && t.from && t.to && e[t.from] && e[t.from][t.transition] && e[t.from][t.transition].indexOf(t.to) > -1
        }, this.revertContributorState = function(e) {
            var t = this.getContributorRow(e.user.id).attr("data-previous-state");
            t && this.setContributorState(e, t, {
                error: this.makeErrorState(t)
            })
        }, this.scrollToContributor = function(e) {
            var t = this.getContributorRow(e.user.id),
                i = this.$node.closest(".scroll-v");
            setTimeout(function() {
                d.makeElementVisible(i, t)
            }, this.attr.scrollWait)
        }, this.scrollFix = function() {
            this.$node.closest(".scroll-v").trigger("scroll")
        }, this.removeMessages = function() {
            this.$node.contents().filter(function(e, t) {
                return !(0, r.default)(t).hasClass(this.attr.contributorRowClass)
            }.bind(this)).remove()
        }, this.getContributor = function(e) {
            return this.props.contributors.find(function(t) {
                return t.user.id === e
            })
        }, this.getContributorRow = function(e) {
            return this.select("contributorRowSelector").filter(function() {
                return (0, r.default)(this).attr("data-user-id") === e
            })
        }, this.createContributorRow = function(e) {
            var t = !1,
                i = (0, r.default)(this.renderContributorRow(e));
            return e.isUnconfirmed || this.select("contributorRowSelector").each(function(s, n) {
                var a = (0, r.default)(n),
                    o = this.getContributor(a.attr("data-user-id")),
                    c = 1 === this.sortByName(a.attr("data-name"), e),
                    l = o.isUnconfirmed;
                t || !c && !l || (i.insertBefore(a), t = !0)
            }.bind(this)), t || this.$node.append(i), i
        }, this.renderContributorRow = function(e) {
            var t = (0, c.getTwitterLoginAccount)(),
                i = {
                    initialState: this.attr.STATE_INITIAL,
                    contributor: e,
                    contributee: this.state.contributee,
                    isSigninAccount: t && e.user.id === t.userId
                };
            return h.render("contributors/contributor_list_row", i)
        }, this.scribeContributorAction = function(e, t) {
            e && (this.trigger(document, "scribeEvent", {
                terms: {
                    page: "settings",
                    section: "contributor_manager",
                    component: "contributor",
                    element: e,
                    action: t
                }
            }), this.trigger("metric", {
                key: ["contributors:ui", e, t].join(":")
            }))
        }, this.getContributorRole = function(e) {
            return e.isAdmin ? "admin" : "contributor"
        }, this.makeErrorState = function(e) {
            return e + "-error"
        }
    }, u)
}, function(e, t, i) {
    "use strict";
    var s = a(i(0)),
        n = a(i(12)),
        r = a(i(246));

    function a(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    e.exports = n.default.mixin(function() {
        this.initialState({
            conversationData: {}
        }), this.after("initialize", function() {
            this.on("uiShowConversationMenu", this.handleShowConversationMenu), this.after("renderDropdown", this.addConversationMenuClickHandler), this.before("teardownCurrentDropdown", this.handleRemoveConversationMenu)
        }), this.getConversation = function(e) {
            var t = TD.controller.clients.getClient(e.accountKey);
            return t.conversations.getConversation(e.conversationId)
        }, this.addConversationMenuClickHandler = function() {
            this.currentDropdown && this.on(this.currentDropdown.$el, "click", this.handleConversationMenuClick)
        }, this.handleConversationMenuClick = function(e) {
            var t = (0, s.default)(e.target),
                i = this.state.conversationData;
            if (0 !== t.closest(this.attr.isSelectedSelector).length) {
                var n = t.data("action");
                switch (n) {
                    case "rename-conversation":
                        t.closest(".js-detail-header").trigger("uiRenameConversation", i);
                        break;
                    case "leave-conversation":
                        this.trigger("uiDeleteConversation", i);
                        break;
                    case "notify-conversation":
                        var r = this.getConversation(i),
                            a = r.notificationsDisabled ? "uiConversationsEnableNotifications" : "uiConversationsDisableNotifications";
                        r.notificationsDisabled = !r.notificationsDisabled, this.trigger(a, i);
                        break;
                    case "view-people":
                        this.trigger("metric", {
                            key: "dm:ui:conversation:view-participiants"
                        }), this.trigger(document, "uiShowDmParticipants", i);
                        break;
                    case "flag-conversation":
                        var o = TD.storage.accountController.get(i.accountKey);
                        this.trigger(document, "uiShowReportOptions", {
                            account: o,
                            twitterUser: this.getConversation(i).participants[0],
                            isGroupConversation: i.group,
                            conversationId: i.conversationId
                        })
                }
                this.teardownCurrentDropdown()
            }
        }, this.handleShowConversationMenu = function(e, t) {
            var i = t.$targetElement.find(".js-menu-target"),
                s = this.getConversation(t),
                n = TD.storage.store.getTwitterLoginAccount().getKey(),
                r = {
                    columnKey: t.columnKey,
                    accountKey: t.accountKey,
                    conversationId: t.conversationId,
                    notificationsDisabled: s.notificationsDisabled,
                    name: s.name,
                    group: "GROUP_DM" === s.type,
                    loginAccount: n === t.accountKey
                };
            this.renderDropdown(i, "menus/dm_conversations_menu", r, {
                toggle: !0,
                position: "pos-l conversation-menu-position"
            }), this.mergeState({
                conversationData: r
            })
        }, this.handleRemoveConversationMenu = function(e, t) {
            this.currentDropdown && this.mergeState({
                conversationData: {}
            })
        }
    }, r.default)
}, function(e, t, i) {
    "use strict";
    var s, n = i(20),
        r = (s = n) && s.__esModule ? s : {
            default: s
        };
    var a = i(12);
    e.exports = a.mixin(function() {
        this.attributes({
            menuItemSelector: "js-suggest-refresh--item",
            dismissButtonSelector: ".js-suggest-refresh--dismiss",
            updateAvailableInactiveClass: "update-available--inactive"
        }), this.initialState({
            isShowing: !1,
            version: function() {
                return {
                    isOutOfDate: !1
                }
            }
        }), this.after("initialize", function() {
            this.observe(this.requestResource("version")).subscribe(this.toState("version").bind(this)), this.on("uiAppHeaderUpdateAvailableClick", this.onRefresh)
        }), this.render = function() {
            var e = this.state,
                t = e.version,
                i = (t = void 0 === t ? {} : t).isOutOfDate,
                s = void 0 !== i && i,
                n = e.isShowing,
                r = void 0 !== n && n,
                a = s && TD.decider.get("suggest_refresh");
            a !== r && (a && !r && TD.util.metric("suggest-refresh:show"), this.trigger("uiSuggestRefreshToggle", {
                shouldShow: a
            }), this.mergeState({
                isShowing: a
            }))
        }, this.onRefresh = function() {
            TD.util.metric("suggest-refresh:refresh:click"), window.location.reload()
        }
    }, r.default)
}]);